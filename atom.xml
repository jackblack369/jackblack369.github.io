<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>source is the essence</title>
  
  
  <link href="http://yoursite.com/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2023-12-18T17:14:32.861Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>brook</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python ASGI</title>
    <link href="http://yoursite.com/2023/12/19/python%20ASGI/"/>
    <id>http://yoursite.com/2023/12/19/python%20ASGI/</id>
    <published>2023-12-18T17:14:27.000Z</published>
    <updated>2023-12-18T17:14:32.861Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>the Asynchronous Server Gateway Interface.</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;the Asynchronous Server Gateway Interface.&lt;/p&gt;
&lt;/blockquote&gt;
</summary>
      
    
    
    
    <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
    <category term="ASGI" scheme="http://yoursite.com/tags/ASGI/"/>
    
  </entry>
  
  <entry>
    <title>python conda</title>
    <link href="http://yoursite.com/2023/12/18/python%20env%20conda/"/>
    <id>http://yoursite.com/2023/12/18/python%20env%20conda/</id>
    <published>2023-12-18T06:10:58.000Z</published>
    <updated>2023-12-18T06:57:13.406Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>conda相当于虚拟机，在里面安装python和依赖</p></blockquote><ul><li><p>查看环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda env list</span><br></pre></td></tr></table></figure></li><li><p>新建环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create --name your_env_name</span><br></pre></td></tr></table></figure><p>指定python版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create --name xxx python=3.9</span><br></pre></td></tr></table></figure></li><li><p>激活环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda activate xxx</span><br></pre></td></tr></table></figure></li><li><p>删除环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda remove --name xxx --all</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;conda相当于虚拟机，在里面安装python和依赖&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;查看环境&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;</summary>
      
    
    
    
    <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
    <category term="conda" scheme="http://yoursite.com/tags/conda/"/>
    
  </entry>
  
  <entry>
    <title>SSO (single sign-on)</title>
    <link href="http://yoursite.com/2023/12/16/SSO/"/>
    <id>http://yoursite.com/2023/12/16/SSO/</id>
    <published>2023-12-16T02:57:00.000Z</published>
    <updated>2023-12-18T02:54:58.578Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> SSO (single sign-on)</p></blockquote><blockquote><p><a href="https://ninjaauth.com/sso-single-sign-on">https://ninjaauth.com/sso-single-sign-on</a></p></blockquote><h2 id="keycloak"><a href="#keycloak" class="headerlink" title="keycloak"></a>keycloak</h2><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><ul><li>需要jdk9以上环境</li></ul><h3 id="config-server"><a href="#config-server" class="headerlink" title="config server"></a>config server</h3><ul><li><p>编辑 <code>/conf/keycloak.conf </code>，配置mysql连接信息 (mysql创建keycloak库)</p></li><li><p>配置 <code>admin cli </code>环境变量 （方便直接命令操作，等同于界面操作）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> keycloak</span></span><br><span class="line">export KCADM=&quot;/Users/dongwei/Applications/keycloak-23.0.3/bin/kcadm.sh&quot;</span><br><span class="line">export HOST_FOR_KCADM=localhost</span><br></pre></td></tr></table></figure></li></ul><h3 id="bootstrap"><a href="#bootstrap" class="headerlink" title="bootstrap"></a>bootstrap</h3><ul><li><p>首次启动</p><p><code>KEYCLOAK_ADMIN=admin KEYCLOAK_ADMIN_PASSWORD=xxxxxx ./bin/kc.sh start-dev</code></p></li><li><p>后续启动</p><p><code>./bin/kc.sh start-dev</code></p></li><li><p>生效 <code>KCADM</code></p><p><code>$KCADM config credentials --server http://localhost:8080 --realm master --user admin</code></p><p>提示输入密码即可</p></li></ul><p>​        验证 <code>$KCADM get serverinfo</code></p><h3 id="config-realm"><a href="#config-realm" class="headerlink" title="config realm"></a>config realm</h3><ul><li><p>创建新的realm</p><p><code>$KCADM create realms -s realm=&quot;jarvex&quot; -s enabled=true</code></p></li></ul><h3 id="config-clients"><a href="#config-clients" class="headerlink" title="config clients"></a>config clients</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">KCADM create clients -r jarvex -s clientId=<span class="string">&quot;jarvex-client-test-1&quot;</span> -s enabled=<span class="literal">true</span> -s name=<span class="string">&quot;test Client 1&quot;</span> -s protocol=openid-connect -s publicClient=<span class="literal">true</span> -s standardFlowEnabled=<span class="literal">true</span> -s <span class="string">&#x27;redirectUris=[&quot;http://127.0.0.1:8001/app/*&quot;]&#x27;</span> -s baseUrl=<span class="string">&quot;http://127.0.0.1:8001/app/&quot;</span> -s <span class="string">&#x27;webOrigins=[&quot;*&quot;]&#x27;</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt; SSO (single sign-on)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://ninjaauth.com/sso-single-sign-on&quot;&gt;https://ninjaauth</summary>
      
    
    
    
    <category term="sso" scheme="http://yoursite.com/categories/sso/"/>
    
    
    <category term="learn" scheme="http://yoursite.com/tags/learn/"/>
    
  </entry>
  
  <entry>
    <title>python auth - fastapi jwt auth</title>
    <link href="http://yoursite.com/2023/12/15/python%20auth%20-%20fastapi%20jwt%20auth/"/>
    <id>http://yoursite.com/2023/12/15/python%20auth%20-%20fastapi%20jwt%20auth/</id>
    <published>2023-12-15T02:46:58.000Z</published>
    <updated>2023-12-15T02:58:11.036Z</updated>
    
    <content type="html"><![CDATA[<p>在 FastAPI JWT Auth 中，Refresh Token（刷新令牌）和 Access Token（访问令牌）是两种不同的令牌，用于实现认证和授权机制。</p><ol><li>Access Token（访问令牌）：Access Token 是一个短期的令牌，用于验证用户的身份并授权用户访问受保护的资源。Access Token 是通过用户提供的凭证（如用户名和密码）进行身份验证后生成的，通常具有较短的有效期（例如几分钟或几小时）。客户端在每次请求受保护的资源时，需要在请求的头部或请求参数中携带 Access Token，以证明其有权访问该资源。</li><li>Refresh Token（刷新令牌）：Refresh Token 是一个长期有效的令牌，用于在 Access Token 过期后重新获取新的 Access Token。当 Access Token 过期时，客户端可以使用 Refresh Token 向服务器发送请求来获取新的 Access Token，而无需重新提供用户名和密码等凭证。通常情况下，Refresh Token 的有效期要比 Access Token 更长。</li></ol><p>使用 Refresh Token 的主要目的是增强安全性和减少频繁的身份验证操作。通过将 Access Token 的有效期设置较短，可以降低令牌泄露的风险。当 Access Token 过期时，使用 Refresh Token 获取新的 Access Token，这样可以减少频繁地要求用户重新提供凭证的情况。</p><p>一般的流程是，客户端在进行身份验证后会收到一个 Access Token 和一个 Refresh Token。客户端使用 Access Token 来访问受保护的资源，当 Access Token 过期时，客户端使用 Refresh Token 向服务器请求新的 Access Token。</p><p>FastAPI JWT Auth 提供了相应的功能和装饰器来处理 Access Token 和 Refresh Token 的生成、验证和刷新等操作，以方便实现 JWT 认证和授权。</p><p>refresh tokens <strong>cannot access</strong> an endpoint that is protected with <strong>jwt_required()</strong>, <strong>jwt_optional()</strong>, and <strong>fresh_jwt_required()</strong> </p><p>access tokens <strong>cannot access</strong> an endpoint that is protected with <strong>jwt_refresh_token_required()</strong>.</p><h2 id="Refresh-Tokens"><a href="#Refresh-Tokens" class="headerlink" title="Refresh Tokens"></a>Refresh Tokens</h2><p>These are long-lived tokens which can be used to create a new access tokens once an old access token has expired. </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在 FastAPI JWT Auth 中，Refresh Token（刷新令牌）和 Access Token（访问令牌）是两种不同的令牌，用于实现认证和授权机制。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Access Token（访问令牌）：Access Token 是一个短期的令牌，用</summary>
      
    
    
    
    <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
    <category term="auth" scheme="http://yoursite.com/tags/auth/"/>
    
  </entry>
  
  <entry>
    <title>git mergetool</title>
    <link href="http://yoursite.com/2023/12/08/git%20mergetool/"/>
    <id>http://yoursite.com/2023/12/08/git%20mergetool/</id>
    <published>2023-12-08T03:21:03.000Z</published>
    <updated>2023-12-08T03:24:13.302Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vimdiff"><a href="#vimdiff" class="headerlink" title="vimdiff"></a>vimdiff</h1><h2 id="进入冲突解决窗口"><a href="#进入冲突解决窗口" class="headerlink" title="进入冲突解决窗口"></a>进入冲突解决窗口</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git mergetool</span><br></pre></td></tr></table></figure><p>窗口显示四部分内容</p><ul><li><p>LOCAL – this is file from the current branch </p></li><li><p>BASE – common ancestor, how file looked before both changes </p></li><li><p>REMOTE – file you are merging into your branch </p></li><li><p>MERGED – merge result, this is what gets saved in the repo</p></li></ul><p>移动窗口方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Ctrl w + h   # move to the split on the left </span><br><span class="line">Ctrl w + j   # move to the split below</span><br><span class="line">Ctrl w + k   # move to the split on top</span><br><span class="line">Ctrl w + l   # move to the split on the right</span><br></pre></td></tr></table></figure><p>处理冲突</p><ul><li><p>可移动到merge窗口去手动改</p></li><li><p>使用命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">:diffg RE  # get from REMOTE</span><br><span class="line">:diffg BA  # get from BASE</span><br><span class="line">:diffg LO  # get from LOCAL</span><br></pre></td></tr></table></figure></li></ul><p>保存退出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:wqa</span><br></pre></td></tr></table></figure><h1 id="Meld"><a href="#Meld" class="headerlink" title="Meld"></a>Meld</h1><p>todo</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;vimdiff&quot;&gt;&lt;a href=&quot;#vimdiff&quot; class=&quot;headerlink&quot; title=&quot;vimdiff&quot;&gt;&lt;/a&gt;vimdiff&lt;/h1&gt;&lt;h2 id=&quot;进入冲突解决窗口&quot;&gt;&lt;a href=&quot;#进入冲突解决窗口&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="git" scheme="http://yoursite.com/categories/git/"/>
    
    
    <category term="confict resolve" scheme="http://yoursite.com/tags/confict-resolve/"/>
    
  </entry>
  
  <entry>
    <title>machine learning</title>
    <link href="http://yoursite.com/2023/12/08/machine%20learning/"/>
    <id>http://yoursite.com/2023/12/08/machine%20learning/</id>
    <published>2023-12-08T01:21:32.000Z</published>
    <updated>2023-12-08T01:27:42.594Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://developers.google.com/machine-learning/glossary/fundamentals?hl=zh-cn">机器学习术语表</a></p><h1 id="机器学习类型"><a href="#机器学习类型" class="headerlink" title="机器学习类型"></a>机器学习类型</h1><p><a href="https://developers.google.com/machine-learning/intro-to-ml/what-is-ml?hl=zh-cn">什么是机器学习？</a></p><p>根据机器学习系统学习进行预测或生成内容的方式，机器学习系统可分为以下一个或多个类别：</p><ul><li>监督式学习</li><li>非监督式学习</li><li>强化学习</li><li>生成式 AI</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://developers.google.com/machine-learning/glossary/fundamentals?hl=zh-cn&quot;&gt;机器学习术语表&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;机器学习类型&quot;&gt;&lt;a href=&quot;#机器学习类型&quot;</summary>
      
    
    
    
    <category term="ML" scheme="http://yoursite.com/categories/ML/"/>
    
    
    <category term="learn" scheme="http://yoursite.com/tags/learn/"/>
    
  </entry>
  
  <entry>
    <title>RBAC model</title>
    <link href="http://yoursite.com/2023/11/24/security%20model%20-%20RBAC/"/>
    <id>http://yoursite.com/2023/11/24/security%20model%20-%20RBAC/</id>
    <published>2023-11-24T09:32:27.000Z</published>
    <updated>2023-11-24T09:32:39.788Z</updated>
    
    <content type="html"><![CDATA[<hr><p>reference</p><ul><li><p><a href="https://zhuanlan.zhihu.com/p/63769951">知乎</a></p></li><li><p><a href="https://blog.csdn.net/ljw499356212/article/details/81055141">CSDN</a></p></li><li><p><a href="https://benheart.github.io/2016/11/19/rbac-design-doc.html">https://benheart.github.io/2016/11/19/rbac-design-doc.html</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;reference&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/63769951&quot;&gt;知乎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/ljw</summary>
      
    
    
    
    <category term="RBAC" scheme="http://yoursite.com/categories/RBAC/"/>
    
    
    <category term="security" scheme="http://yoursite.com/tags/security/"/>
    
  </entry>
  
  <entry>
    <title>fastapi learn</title>
    <link href="http://yoursite.com/2023/11/21/fastapi%20learn/"/>
    <id>http://yoursite.com/2023/11/21/fastapi%20learn/</id>
    <published>2023-11-21T11:13:32.000Z</published>
    <updated>2023-12-16T02:56:33.240Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://project-awesome.org/mjhea0/awesome-fastapi">Awesome FastAPI</a></p><p><a href="https://github.com/zhanymkanov/fastapi-best-practices">FastAPI Best Practices</a></p><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://project-awesome.org/mjhea0/awesome-fastapi&quot;&gt;Awesome FastAPI&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/zhanymkanov/fastapi-b</summary>
      
    
    
    
    <category term="fastapi" scheme="http://yoursite.com/categories/fastapi/"/>
    
    
    <category term="learn" scheme="http://yoursite.com/tags/learn/"/>
    
  </entry>
  
  <entry>
    <title>python venv</title>
    <link href="http://yoursite.com/2023/11/21/python%20env%20venv/"/>
    <id>http://yoursite.com/2023/11/21/python%20env%20venv/</id>
    <published>2023-11-21T03:21:09.000Z</published>
    <updated>2023-12-24T04:20:08.149Z</updated>
    
    <content type="html"><![CDATA[<h2 id="虚拟环境"><a href="#虚拟环境" class="headerlink" title="虚拟环境"></a>虚拟环境</h2><p>在 Linux 中配置 Python 项目的运行虚拟环境通常使用 <code>venv</code>（虚拟环境）模块。以下是一般的步骤：</p><ol><li><p><strong>安装 venv 模块（如果尚未安装）：</strong></p><p>检查你的 Python 版本并确保安装了 <code>venv</code> 模块。</p></li><li><p><strong>创建虚拟环境：</strong></p><p>在项目目录中，运行以下命令创建一个名为 <code>myenv</code> 的虚拟环境：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m venv myenv</span><br></pre></td></tr></table></figure><p>这将在当前目录创建一个名为 <code>myenv</code> 的虚拟环境文件夹。</p></li><li><p><strong>激活虚拟环境：</strong></p><p>激活虚拟环境可通过以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source myenv/bin/activate</span><br></pre></td></tr></table></figure><p>这将激活名为 <code>myenv</code> 的虚拟环境。激活后，你的终端提示符可能会显示虚拟环境的名称。</p></li><li><p><strong>安装项目依赖：</strong></p><p>在激活的虚拟环境中，使用 <code>pip</code> 安装项目所需的依赖：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><p>其中 <code>requirements.txt</code> 是包含项目依赖项的文件。</p></li><li><p><strong>退出虚拟环境：</strong></p><p>当你完成项目工作后，可以通过以下方式退出虚拟环境：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure><p>这将使虚拟环境退出，并恢复到系统默认环境。</p></li></ol><p>使用虚拟环境有助于隔离项目的依赖，避免与系统其他项目的依赖冲突，并提供更干净的开发环境。</p><h3 id="uvicorn"><a href="#uvicorn" class="headerlink" title="uvicorn"></a>uvicorn</h3><blockquote><p>正常情况下虚拟环境 /path/to/venv/bin/ 下面是有 uvicorn 的启动命令的，即 /xxx/venv/bin/uvicorn</p></blockquote><h4 id="如果当前虚拟环境不识别uvicorn，可通过"><a href="#如果当前虚拟环境不识别uvicorn，可通过" class="headerlink" title="如果当前虚拟环境不识别uvicorn，可通过"></a>如果当前虚拟环境不识别<code>uvicorn</code>，可通过</h4><ul><li>方式一</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m uvicorn xxx:app --reload</span><br></pre></td></tr></table></figure><ul><li>方式二</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install --force-reinstall uvicorn</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;虚拟环境&quot;&gt;&lt;a href=&quot;#虚拟环境&quot; class=&quot;headerlink&quot; title=&quot;虚拟环境&quot;&gt;&lt;/a&gt;虚拟环境&lt;/h2&gt;&lt;p&gt;在 Linux 中配置 Python 项目的运行虚拟环境通常使用 &lt;code&gt;venv&lt;/code&gt;（虚拟环境）模块。以下是</summary>
      
    
    
    
    <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
    <category term="venv" scheme="http://yoursite.com/tags/venv/"/>
    
  </entry>
  
  <entry>
    <title>python pyenv</title>
    <link href="http://yoursite.com/2023/11/21/python%20env%20pyenv/"/>
    <id>http://yoursite.com/2023/11/21/python%20env%20pyenv/</id>
    <published>2023-11-21T02:57:00.000Z</published>
    <updated>2023-12-13T06:41:20.890Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看当前版本</span></span><br><span class="line">pyenv version</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看所有版本</span></span><br><span class="line">pyenv versions</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看所有可安装的版本</span></span><br><span class="line">pyenv install --list</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装指定版本</span></span><br><span class="line">pyenv install 3.6.5</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装新版本后<span class="built_in">rehash</span>一下</span></span><br><span class="line">pyenv rehash</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除指定版本</span></span><br><span class="line">pyenv uninstall 3.5.2</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定版本</span></span><br><span class="line">pyenv shell &lt;version&gt; -- select just for current shell session</span><br><span class="line">pyenv local &lt;version&gt; -- automatically select whenever you are in the current directory (or its subdirectories)</span><br><span class="line">pyenv global &lt;version&gt; -- select globally for your user account</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定多个全局版本, 3版本优先</span></span><br><span class="line">pyenv global 3.6.5 2.7.14</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 实际上当你切换版本后, 相应的pip和包仓库都是会自动切换过去的</span></span><br></pre></td></tr></table></figure><hr><p>reference</p><ul><li><a href="https://realpython.com/intro-to-pyenv/#specifying-your-python-version">specifying-your-python-version</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class</summary>
      
    
    
    
    <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
    <category term="pyenv" scheme="http://yoursite.com/tags/pyenv/"/>
    
  </entry>
  
  <entry>
    <title>computer security model</title>
    <link href="http://yoursite.com/2023/11/20/security%20model/"/>
    <id>http://yoursite.com/2023/11/20/security%20model/</id>
    <published>2023-11-20T06:04:56.000Z</published>
    <updated>2023-11-20T17:04:59.759Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="https://en.wikipedia.org/wiki/Access_control_list">Access control list</a> (ACL)</li><li><a href="https://en.wikipedia.org/wiki/Attribute-based_access_control">Attribute-based access control</a> (ABAC)</li><li><a href="https://en.wikipedia.org/wiki/Bell%E2%80%93LaPadula_model">Bell–LaPadula model</a></li><li><a href="https://en.wikipedia.org/wiki/Biba_model">Biba model</a></li><li><a href="https://en.wikipedia.org/wiki/Brewer_and_Nash_model">Brewer and Nash model</a></li><li><a href="https://en.wikipedia.org/wiki/Capability-based_security">Capability-based security</a></li><li><a href="https://en.wikipedia.org/wiki/Clark-Wilson_model">Clark-Wilson model</a></li><li><a href="https://en.wikipedia.org/wiki/Context-based_access_control">Context-based access control</a> (CBAC)</li><li><a href="https://en.wikipedia.org/wiki/Graham-Denning_model">Graham-Denning model</a></li><li><a href="https://en.wikipedia.org/wiki/HRU_(security)">Harrison-Ruzzo-Ullman</a> (HRU)</li><li><a href="https://en.wikipedia.org/wiki/High-water_mark_(computer_security)">High-water mark (computer security)</a></li><li><a href="https://en.wikipedia.org/wiki/Lattice-based_access_control">Lattice-based access control</a> (LBAC)</li><li><a href="https://en.wikipedia.org/wiki/Mandatory_access_control">Mandatory access control</a> (MAC)</li><li><a href="https://en.wikipedia.org/wiki/Multi-level_security">Multi-level security</a> (MLS)</li><li><a href="https://en.wikipedia.org/wiki/Non-interference_(security)">Non-interference (security)</a></li><li><a href="https://en.wikipedia.org/wiki/Object-capability_model">Object-capability model</a></li><li><a href="https://en.wikipedia.org/wiki/Protection_ring">Protection ring</a></li><li><a href="https://en.wikipedia.org/wiki/Role-based_access_control">Role-based access control</a> (RBAC)</li><li><a href="https://en.wikipedia.org/wiki/Take-grant_protection_model">Take-grant protection model</a></li><li><a href="https://en.wikipedia.org/wiki/Discretionary_access_control">Discretionary access control</a> (DAC)</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Access_control_list&quot;&gt;Access control list&lt;/a&gt; (ACL)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.or</summary>
      
    
    
    
    <category term="security" scheme="http://yoursite.com/categories/security/"/>
    
    
    <category term="model" scheme="http://yoursite.com/tags/model/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2023/11/17/java%20command%20line/"/>
    <id>http://yoursite.com/2023/11/17/java%20command%20line/</id>
    <published>2023-11-17T04:10:20.899Z</published>
    <updated>2023-11-17T04:11:34.159Z</updated>
    
    <content type="html"><![CDATA[<hr><hr><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><h3 id="spring-config-additional-location"><a href="#spring-config-additional-location" class="headerlink" title="spring.config.additional-location"></a>spring.config.additional-location</h3><p>不会使项目默认的配置文件失效，使用该命令行参数添加的外部配置文件会与项目默认的配置文件共同生效，形成互补配置，且其优先级是最高的，比所有默认配置文件的优先级都高。</p><h3 id="spring-config-location"><a href="#spring-config-location" class="headerlink" title="spring.config.location"></a>spring.config.location</h3><p>使用该参数指定配置文件后，会使项目默认配置文件（application.properties 或 application.yml ）失效，Spring Boot 将只加载指定的外部配置文件。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;hr&gt;
&lt;h2 id=&quot;配置文件&quot;&gt;&lt;a href=&quot;#配置文件&quot; class=&quot;headerlink&quot; title=&quot;配置文件&quot;&gt;&lt;/a&gt;配置文件&lt;/h2&gt;&lt;h3 id=&quot;spring-config-additional-location&quot;&gt;&lt;a href=&quot;#sp</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>tmux snippet</title>
    <link href="http://yoursite.com/2023/11/15/tmux%20snippet/"/>
    <id>http://yoursite.com/2023/11/15/tmux%20snippet/</id>
    <published>2023-11-15T03:48:27.000Z</published>
    <updated>2023-11-29T16:00:20.999Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th>功能</th><th>macos</th><th>linux</th></tr></thead><tbody><tr><td>新建session</td><td>tmux new -s <session-name></td><td>一样</td></tr><tr><td>调整窗格大小</td><td>Ctrl + b, Esc + 方向键</td><td>Ctrl + b, Ctrl + 方向键</td></tr><tr><td>窗格内容翻页</td><td>Ctrl + b, Fn + 上下键</td><td>Ctrl + b, Ctrl + 上下键</td></tr><tr><td>内嵌tmux操作</td><td><strong>按着 ctrl，点击两次 b 键</strong></td><td>一样</td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;功能&lt;/th&gt;
&lt;th&gt;macos&lt;/th&gt;
&lt;th&gt;linux&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;新建session&lt;/td&gt;
&lt;td&gt;tmux new -s &lt;session-name&gt;&lt;</summary>
      
    
    
    
    <category term="tmux" scheme="http://yoursite.com/categories/tmux/"/>
    
    
    <category term="snippet" scheme="http://yoursite.com/tags/snippet/"/>
    
  </entry>
  
  <entry>
    <title>python problems</title>
    <link href="http://yoursite.com/2023/11/14/python%20problem/"/>
    <id>http://yoursite.com/2023/11/14/python%20problem/</id>
    <published>2023-11-14T07:28:51.000Z</published>
    <updated>2023-11-14T07:30:56.590Z</updated>
    
    <content type="html"><![CDATA[<ul><li> NotOpenSSLWarning: urllib3 v2.0 only supports OpenSSL 1.1.1+, currently the ‘ssl’ module is compiled with ‘LibreSSL 2.8.3’.</li></ul>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip uninstall urllib3</span><br><span class="line">pip install &#x27;urllib3&lt;2.0&#x27;</span><br></pre></td></tr></table></figure><p>  <a href="https://stackoverflow.com/questions/76187256/importerror-urllib3-v2-0-only-supports-openssl-1-1-1-currently-the-ssl-modu">stackoverflow</a></p><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><ul><li>paddlepaddle依赖只能在 python 3.9版本之内可以安装</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt; NotOpenSSLWarning: urllib3 v2.0 only supports OpenSSL 1.1.1+, currently the ‘ssl’ module is compiled with ‘LibreSSL 2.8.3’.&lt;/li&gt;
&lt;</summary>
      
    
    
    
    <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
    <category term="problems" scheme="http://yoursite.com/tags/problems/"/>
    
  </entry>
  
  <entry>
    <title>python sqlmodel&amp;SQLAlchemy</title>
    <link href="http://yoursite.com/2023/11/14/python%20sqlmodel/"/>
    <id>http://yoursite.com/2023/11/14/python%20sqlmodel/</id>
    <published>2023-11-14T07:28:51.000Z</published>
    <updated>2023-12-24T08:17:56.087Z</updated>
    
    <content type="html"><![CDATA[<h2 id="单个实体转换为字典"><a href="#单个实体转换为字典" class="headerlink" title="单个实体转换为字典"></a>单个实体转换为字典</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将实例对象转换为字典，排除未设置值的字段</span></span><br><span class="line">entity_dict = entity.<span class="built_in">dict</span>(exclude_unset=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><blockquote><p>使用 Pydantic 模型对象的一个方法，用于将模型对象转换为字典形式。<code>exclude_unset=True</code> 参数是用来控制是否排除未设置的属性字段。当设置为 <code>True</code> 时，将排除那些未设置值的字段，即只包含已经设置值的字段。</p></blockquote><ul><li>遍历字典（对没有设置的字段进行默认值设置，设置排查某字段放入字典）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> user_group_data.<span class="built_in">dict</span>(exclude_unset=<span class="literal">True</span>, exclude=&#123;<span class="string">&quot;team_roles&quot;</span>&#125;).items():</span><br><span class="line"><span class="keyword">if</span> value <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line"><span class="built_in">setattr</span>(user_group, key, value)</span><br></pre></td></tr></table></figure><h2 id="单个实体与实体转换"><a href="#单个实体与实体转换" class="headerlink" title="单个实体与实体转换"></a>单个实体与实体转换</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">role_update: RoleUpdate</span><br><span class="line">...</span><br><span class="line">role = Role.from_orm(role_update)</span><br></pre></td></tr></table></figure><h2 id="列表实体转换为字典列表"><a href="#列表实体转换为字典列表" class="headerlink" title="列表实体转换为字典列表"></a>列表实体转换为字典列表</h2><ul><li>方式一  <strong>session.exec</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">rel_usergroup_user_list = session.<span class="built_in">exec</span>(</span><br><span class="line">            select(RelUserGroupUser.usergroup_id, RelUserGroupUser.user_id, UserGroup.name, UserGroup.label, UserGroup.remark)</span><br><span class="line">            .where(RelUserGroupUser.user_id == user_id)</span><br><span class="line">            .join(UserGroup, UserGroup.<span class="built_in">id</span> == RelUserGroupUser.usergroup_id)</span><br><span class="line">        ).<span class="built_in">all</span>()</span><br><span class="line">        converted_list = []</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> rel_usergroup_user_list:</span><br><span class="line">            converted_obj = RelUserGroupUserRead(</span><br><span class="line">                user_id=row.user_id,</span><br><span class="line">                usergroup_id=row.usergroup_id,</span><br><span class="line">                usergroup_name=row.name,</span><br><span class="line">                usergroup_label=row.label</span><br><span class="line">            )</span><br><span class="line">            converted_list.append(converted_obj)</span><br><span class="line">        <span class="keyword">return</span> converted_list</span><br></pre></td></tr></table></figure><ul><li>方式二 <strong>session.query</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">db_rel_usergroup_roles = (session.query(RelUserGroupUser.user_id, Role.<span class="built_in">id</span>, Role.name, Role.nick_name, Role.label)</span><br><span class="line">                             .join(RelUsergroupRole, RelUserGroupUser.usergroup_id == RelUsergroupRole.usergroup_id)</span><br><span class="line">                             .join(Role, RelUsergroupRole.role_id == Role.<span class="built_in">id</span>)</span><br><span class="line">                             .<span class="built_in">filter</span>(RelUserGroupUser.user_id == user_id)</span><br><span class="line">                             .<span class="built_in">all</span>())</span><br><span class="line">        rel_usergroup_roles_info = []</span><br><span class="line">        <span class="keyword">for</span> rel_usergroup_role <span class="keyword">in</span> db_rel_usergroup_roles:</span><br><span class="line">            rel_usergroup_roles_info.append(Role(</span><br><span class="line">                <span class="built_in">id</span>=rel_usergroup_role[<span class="number">1</span>],</span><br><span class="line">                name=rel_usergroup_role[<span class="number">2</span>],</span><br><span class="line">                nick_name=rel_usergroup_role[<span class="number">3</span>],</span><br><span class="line">                label=rel_usergroup_role[<span class="number">4</span>]</span><br><span class="line">            ))</span><br><span class="line">        <span class="keyword">return</span> rel_usergroup_roles_info</span><br></pre></td></tr></table></figure><h2 id="查询过滤"><a href="#查询过滤" class="headerlink" title="查询过滤"></a>查询过滤</h2><ul><li><p>筛选条件为或条件</p></li><li><pre><code class="python">resource_list = session.query(Resource).filter(or_(Resource.type == &quot;menu&quot;, Resource.type == &quot;element&quot;)).all()</code></pre></li></ul><h2 id="update操作"><a href="#update操作" class="headerlink" title="update操作"></a>update操作</h2><p>如果提前有 <code>session.get(entity, id)</code>，那后续在修改相关表属性<code>enitty.colx = xxx</code> 之后，需要紧接<code>session.add(entity)</code></p><h3 id="session的获取"><a href="#session的获取" class="headerlink" title="session的获取"></a>session的获取</h3><p>在使用 SQLModel 进行数据库操作时，可以使用上下文管理器 <code>with Session(engine) as session</code> 来创建并管理数据库会话。这样可以确保会话在使用完毕后会被正确关闭，释放数据库连接资源。</p><p>在例如 <code>async def delete_user(*, user_id: int, session: Session = Depends(get_session)):</code>中，<code>session</code> 参数是通过 <code>Depends(get_session)</code> 进行依赖注入的，FastAPI 框架会负责在请求处理函数执行完毕后自动关闭会话。所以在请求逻辑中，你不需要手动关闭会话连接。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;单个实体转换为字典&quot;&gt;&lt;a href=&quot;#单个实体转换为字典&quot; class=&quot;headerlink&quot; title=&quot;单个实体转换为字典&quot;&gt;&lt;/a&gt;单个实体转换为字典&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;</summary>
      
    
    
    
    <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
    <category term="problems" scheme="http://yoursite.com/tags/problems/"/>
    
  </entry>
  
  <entry>
    <title>gateway snippet</title>
    <link href="http://yoursite.com/2023/11/05/gateway%20snippet/"/>
    <id>http://yoursite.com/2023/11/05/gateway%20snippet/</id>
    <published>2023-11-05T08:44:45.000Z</published>
    <updated>2023-11-29T14:24:31.631Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://www.baeldung.com/wp-content/uploads/2020/05/spring-cloud-gateway-webfilters-2.jpg"></p><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><ul><li>LB， “Load Balancing”（负载均衡）的缩写。负载均衡是一种分布式系统中常见的策略，用于将请求均匀地分发到多个服务实例上，以避免某个实例负载过重，提高整体系统的性能、可靠性和可用性。</li><li>restful header中的所有key，对应的值其实都是集合，只是大多数情况下集合里面只有一个元素</li></ul><h3 id="spring-cloud-gateway"><a href="#spring-cloud-gateway" class="headerlink" title="spring cloud gateway"></a>spring cloud gateway</h3><ul><li><code>DefaultErrorWebExceptionHandler</code> 是 Spring Web 的默认实现类，实现了 <code>ErrorWebExceptionHandler</code> 接口。它提供了默认的错误处理行为，当没有自定义的 <code>ErrorWebExceptionHandler</code> 实现时，Spring Boot 将使用 <code>DefaultErrorWebExceptionHandler</code> 来处理错误。</li><li><strong>原生的spring cloud gateway进行请求转发，所有的微服务实例与gateway服务实例在nacos中必须是同一个namesapce和同一个group。</strong></li></ul><h1 id="静态路由"><a href="#静态路由" class="headerlink" title="静态路由"></a>静态路由</h1><ul><li>使用spring cloud gateway通过代码方式或配置文件方式实现</li></ul><h1 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h1><h2 id="spring-cloud-gateway-与-nacos结合实现"><a href="#spring-cloud-gateway-与-nacos结合实现" class="headerlink" title="spring cloud gateway 与 nacos结合实现"></a>spring cloud gateway 与 nacos结合实现</h2><blockquote><p>实现思路：使用nacos的配置中心，将路由配置放在nacos上，写个监听器监听nacos上配置的变化，将变化后的配置更新到GateWay应用的进程内。</p></blockquote><ul><li><p>场景一（基础）</p><p>可以先在nacos的配置管理中，添加微服务的配置信息（端口、路由等），然后启动微服务程序（不用配置相关端口配置）</p></li><li><p>场景二（predicate）</p><p>可以控制请求的cookie、header、host、method、path、query、RemoteAddr、Weight（按照权重将请求分发到不同节点服务）</p></li><li><p>场景三（filters）</p><p>可以控制请求的AddRequestHeader、AddResponseHeader、DedupeResponseHeader、DedupeResponseHeader、CircuitBreaker（断路器）、FallbackHeaders、PrefixPath、PreserveHostHeader（加上请求者的ip信息）、RequestRateLimiter（限流）、RedirectTo、RemoveRequestHeader、RemoveResponseHeader、RewritePath（将请求参数中的路径做变换）、RewriteLocationResponseHeader、RewriteResponseHeader、SecureHeaders、SetPath、SetRequestHeader、SetResponseHeader、SetStatus、StripPrefix、Retry、RequestSize、SetRequestHostHeader、ModifyRequestBody、ModifyResponseBody、TokenRelay（配合鉴权）</p></li><li><p>场景四（限流）</p><ul><li>请求同一目标地址</li></ul></li><li><p>场景五（修改请求和响应body）</p></li><li><p>场景六（地址分发）</p><ul><li>有多个后端应用服务</li></ul></li></ul><hr><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul><li><p>spring cloud gateway中如果配置文件使用lb访问服务，那需要引入lb相关依赖包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-loadbalancer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="跨域请求"><a href="#跨域请求" class="headerlink" title="跨域请求"></a>跨域请求</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">gateway:</span></span><br><span class="line">  <span class="comment"># 跨域配置</span></span><br><span class="line">  <span class="attr">globalcors:</span></span><br><span class="line">    <span class="attr">corsConfigurations:</span></span><br><span class="line">      <span class="string">&#x27;[/**]&#x27;</span><span class="string">:</span></span><br><span class="line">        <span class="attr">allowedOrigins:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">        <span class="attr">allowedMethods:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">GET</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">POST</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">PUT</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">DELETE</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">OPTIONS</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">HEAD</span></span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><p><a href="https://cloud.spring.io/spring-cloud-gateway/reference/html/#configuring-route-predicate-factories-and-gateway-filter-factories">官网</a></p></li><li><p><a href="https://blog.csdn.net/boling_cavalry/category_9278131.html">程序员欣宸</a></p></li><li><p>其它</p><ul><li><a href="https://blog.csdn.net/abu935009066/article/details/112245330">https://blog.csdn.net/abu935009066/article/details/112245330</a></li></ul></li><li><p><a href="http://47.109.59.205/2023/01/02/SpringCloud%E5%AE%9E%E7%94%A8%E7%AF%8702/#3-Gateway%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3">http://47.109.59.205/2023/01/02/SpringCloud%E5%AE%9E%E7%94%A8%E7%AF%8702/#3-Gateway%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://www.baeldung.com/wp-content/uploads/2020/05/spring-cloud-gateway-webfilters-2.jpg&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class</summary>
      
    
    
    
    <category term="gateway" scheme="http://yoursite.com/categories/gateway/"/>
    
    
    <category term="snippet" scheme="http://yoursite.com/tags/snippet/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2023/11/03/logstash/"/>
    <id>http://yoursite.com/2023/11/03/logstash/</id>
    <published>2023-11-03T01:28:27.000Z</published>
    <updated>2023-11-03T01:28:41.717Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>Logstash Forwarder/Beats负责在源服务器上收集日志数据，然后将数据发送到集中式的Logstash或Kafka服务器。</p></li><li><p>Logstash是一个灵活的数据收集引擎，它可以从多个来源（包括日志文件、标准输入、Beats等）采集数据，进行转换、过滤和解析，最后将数据发送到各种目的地，比如Elasticsearch、Kafka等。在日志处理中，Logstash常被用作数据的转换和预处理工具。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Logstash Forwarder/Beats负责在源服务器上收集日志数据，然后将数据发送到集中式的Logstash或Kafka服务器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Logstash是一个灵活的数据收集引擎，它可以从多个来源（包括日志文件、标准输入</summary>
      
    
    
    
    <category term="logstash" scheme="http://yoursite.com/categories/logstash/"/>
    
    
    <category term="sinppet" scheme="http://yoursite.com/tags/sinppet/"/>
    
  </entry>
  
  <entry>
    <title>python poetry</title>
    <link href="http://yoursite.com/2023/11/03/python%20env%20poetry/"/>
    <id>http://yoursite.com/2023/11/03/python%20env%20poetry/</id>
    <published>2023-11-02T18:00:28.000Z</published>
    <updated>2023-12-12T02:16:51.120Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2><ul><li><p><input disabled="" type="checkbox">  build backend : use hatch </p><ul><li><a href="https://stackoverflow.com/questions/75408641/whats-the-difference-between-the-tool-poetry-and-project-tables-in-pyprojec">https://stackoverflow.com/questions/75408641/whats-the-difference-between-the-tool-poetry-and-project-tables-in-pyprojec</a></li></ul></li><li><p><a href="https://peps.python.org/pep-0621/">PEP 621 </a></p></li><li><p><a href="https://packaging.python.org/en/latest/tutorials/packaging-projects/">Packaging Python Projects</a></p></li></ul><h2 id="POETRY"><a href="#POETRY" class="headerlink" title="POETRY"></a>POETRY</h2><blockquote><p>每个使用 Poetry 的项目都会有自己的虚拟环境，这样可以避免不同项目之间的依赖冲突。因此，每个项目的依赖项都会独立存放在各自的虚拟环境中。</p></blockquote><ul><li><p>查看安装依赖目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry env info --path</span><br></pre></td></tr></table></figure></li><li><p>列出所有虚拟环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry env list</span><br></pre></td></tr></table></figure></li><li><p>删除指定虚拟环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry env remove &lt;虚拟环境名称&gt;</span><br></pre></td></tr></table></figure></li><li><p>进入 Poetry 创建的虚拟环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry shell</span><br></pre></td></tr></table></figure></li><li><p>通过<code>requirement</code>添加依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry add $( cat requirements.txt )</span><br></pre></td></tr></table></figure></li><li><p>build编译</p><p>如果使用<code>build backend</code>非默认的<code>poetry core</code>，则直接使用其他编译工具命令执行编译</p></li></ul><h2 id="HATCH"><a href="#HATCH" class="headerlink" title="HATCH"></a>HATCH</h2><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><ul><li><p>虚拟环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python -m venv venv</span><br><span class="line">source venv/bin/activate</span><br></pre></td></tr></table></figure></li><li><p>创建hatch虚拟环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hatch env create</span><br><span class="line">hatch shell </span><br></pre></td></tr></table></figure></li><li><p>pycharm配置</p><p>虚拟环境需配置成 <code>hatch shell</code>提示的目录</p></li><li><p>更新依赖</p><ul><li>运行 <code>hatch shell</code>命令</li></ul></li><li><p>查看环境信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hatch env show --ascii</span><br></pre></td></tr></table></figure></li></ul><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><ul><li><p>方式一：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python -m pip install --upgrade build</span><br><span class="line">python3 -m build</span><br><span class="line"><span class="meta">#</span><span class="bash"> 一旦完成应该在 dist 目录下产生两个文件：</span></span><br></pre></td></tr></table></figure><p>方式二：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hatch build</span><br></pre></td></tr></table></figure></li></ul><h3 id="代码格式化"><a href="#代码格式化" class="headerlink" title="代码格式化"></a>代码格式化</h3><ul><li>配置</li></ul><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[tool.hatch.envs.lint.scripts]</span></span><br><span class="line"><span class="attr">typing</span> = <span class="string">&quot;mypy --install-types --non-interactive &#123;args:src/jarvex_auth tests&#125;&quot;</span></span><br><span class="line"><span class="attr">style</span> = [</span><br><span class="line">  <span class="string">&quot;ruff &#123;args:.&#125;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;black --check --diff &#123;args:.&#125;&quot;</span>,</span><br><span class="line">]</span><br><span class="line"><span class="attr">fmt</span> = [</span><br><span class="line">  <span class="string">&quot;black &#123;args:.&#125;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;ruff --fix &#123;args:.&#125;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;style&quot;</span>,</span><br><span class="line">]</span><br><span class="line"><span class="attr">all</span> = [</span><br><span class="line">  <span class="string">&quot;style&quot;</span>,</span><br><span class="line">  <span class="string">&quot;typing&quot;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>执行命令<code>hatch run lint:fmt</code></li></ul><h2 id="Flit"><a href="#Flit" class="headerlink" title="Flit"></a>Flit</h2><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flit install</span><br></pre></td></tr></table></figure><hr><p><strong>Reference</strong></p><ul><li><p><a href="https://drivendata.co/blog/python-packaging-2023">THE BASICS OF PYTHON PACKAGING IN EARLY</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/666166082">https://zhuanlan.zhihu.com/p/666166082</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;TODO&quot;&gt;&lt;a href=&quot;#TODO&quot; class=&quot;headerlink&quot; title=&quot;TODO&quot;&gt;&lt;/a&gt;TODO&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&gt;  build backend : </summary>
      
    
    
    
    <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
    <category term="lib" scheme="http://yoursite.com/tags/lib/"/>
    
  </entry>
  
  <entry>
    <title>python learn</title>
    <link href="http://yoursite.com/2023/10/31/python%20learn/"/>
    <id>http://yoursite.com/2023/10/31/python%20learn/</id>
    <published>2023-10-31T09:04:12.000Z</published>
    <updated>2023-11-28T01:21:30.719Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/python/python%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1.png"></p><h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="列表list和元组tuple"><a href="#列表list和元组tuple" class="headerlink" title="列表list和元组tuple"></a>列表list和元组tuple</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="number">1</span>, <span class="number">2</span>, <span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>] <span class="comment"># 列表中同时含有 int 和 string 类型的元素</span></span><br><span class="line">l</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>]</span><br><span class="line"> </span><br><span class="line">tup = (<span class="string">&#x27;jason&#x27;</span>, <span class="number">22</span>) <span class="comment"># 元组中同时含有 int 和 string 类型的元素</span></span><br><span class="line">tup</span><br><span class="line">(<span class="string">&#x27;jason&#x27;</span>, <span class="number">22</span>)</span><br></pre></td></tr></table></figure><ul><li>列表是动态的，长度可变，可以随意的增加、删减或改变元素。列表的存储空间略大于元组，性能略逊于元组。</li><li>元组是静态的，长度大小固定，不可以对元素进行增加、删减或者改变操作。元组相对于列表更加轻量级，性能稍优。</li></ul><h3 id="字典和集合"><a href="#字典和集合" class="headerlink" title="字典和集合"></a>字典和集合</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">d1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;jason&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;male&#x27;</span>&#125;</span><br><span class="line">d2 = <span class="built_in">dict</span>(&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;jason&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;male&#x27;</span>&#125;)</span><br><span class="line">d3 = <span class="built_in">dict</span>([(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;jason&#x27;</span>), (<span class="string">&#x27;age&#x27;</span>, <span class="number">20</span>), (<span class="string">&#x27;gender&#x27;</span>, <span class="string">&#x27;male&#x27;</span>)])</span><br><span class="line">d4 = <span class="built_in">dict</span>(name=<span class="string">&#x27;jason&#x27;</span>, age=<span class="number">20</span>, gender=<span class="string">&#x27;male&#x27;</span>) </span><br><span class="line">d1 == d2 == d3 ==d4</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"> </span><br><span class="line">s1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">s2 = <span class="built_in">set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">s1 == s2</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><ul><li>字典在 Python3.7+ 是有序的数据结构，而集合是无序的，其内部的哈希表存储结构，保证了其查找、插入、删除操作的高效性。所以，字典和集合通常运用在对元素的高效查找、去重等场景。</li></ul><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">s2 = <span class="string">&quot;hello&quot;</span></span><br><span class="line">s3 = <span class="string">&quot;&quot;&quot;hello&quot;&quot;&quot;</span></span><br><span class="line">s1 == s2 == s3</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><ul><li>转义字符</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&#x27;a\nb\tc&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line">a</span><br><span class="line">bc</span><br><span class="line"></span><br><span class="line"><span class="built_in">len</span>(s)</span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><ul><li><p>常用方法</p><ul><li><p>和其他数据结构，如列表、元组一样，字符串的索引同样从 0 开始，index=0 表示第一个元素（字符），[index:index+2] 则表示第 index 个元素到 index+1 个元素组成的子字符串。</p></li><li><p>字符串是不可变的（immutable）</p></li><li><p>字符串格式化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;no data available for person with id: &#123;&#125;, name: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">id</span>, name)) <span class="string">&#x27;&#x27;&#x27;最新规范&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;no data available for person with id: %s, name: %s&#x27;</span> % (<span class="built_in">id</span>, name))<span class="string">&#x27;&#x27;&#x27;以往规范，%s 表示字符串型，%d 表示整型&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="json"><a href="#json" class="headerlink" title="json"></a>json</h3><ul><li>json.dumps() 这个函数，接受 基本数据类型，然后将其序列化为 string</li><li>json.loads() 这个函数，接受一个合法字符串，然后将其反序列化为基本数据类型</li></ul><h2 id="条件与循环"><a href="#条件与循环" class="headerlink" title="条件与循环"></a>条件与循环</h2><h3 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># y = |x|</span></span><br><span class="line"><span class="keyword">if</span> x &lt; <span class="number">0</span>:</span><br><span class="line">    y = -x</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    y = x</span><br><span class="line"><span class="comment"># 场景二</span></span><br><span class="line"><span class="keyword">if</span> condition_1:</span><br><span class="line">    statement_1</span><br><span class="line"><span class="keyword">elif</span> condition_2:</span><br><span class="line">    statement_2</span><br><span class="line">...</span><br><span class="line"><span class="keyword">elif</span> condition_i:</span><br><span class="line">    statement_i</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    statement_n</span><br></pre></td></tr></table></figure><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列表</span></span><br><span class="line">l = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> l:</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="comment"># 字典</span></span><br><span class="line">d = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;jason&#x27;</span>, <span class="string">&#x27;dob&#x27;</span>: <span class="string">&#x27;2000-01-01&#x27;</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;male&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> d: <span class="comment"># 遍历字典的键</span></span><br><span class="line">    <span class="built_in">print</span>(k)</span><br><span class="line">name</span><br><span class="line">dob</span><br><span class="line">gender</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> d.values(): <span class="comment"># 遍历字典的值</span></span><br><span class="line">    <span class="built_in">print</span>(v)</span><br><span class="line">jason</span><br><span class="line"><span class="number">2000</span>-01-01</span><br><span class="line">male    </span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> d.items(): <span class="comment"># 遍历字典的键值对</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;key: &#123;&#125;, value: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(k, v))</span><br><span class="line">key: name, value: jason</span><br><span class="line">key: dob, value: <span class="number">2000</span>-01-01</span><br><span class="line">key: gender, value: male </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        text = <span class="built_in">input</span>(<span class="string">&#x27;Please enter your questions, enter &quot;q&quot; to exit&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> text == <span class="string">&#x27;q&#x27;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Exit system&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        ...</span><br><span class="line">        ...</span><br><span class="line">        <span class="built_in">print</span>(response)</span><br><span class="line">    <span class="keyword">except</span> <span class="keyword">as</span> err:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Encountered error: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(err))</span><br><span class="line">        <span class="keyword">break</span> </span><br></pre></td></tr></table></figure><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><ul><li>当程序中存在多个 except block 时，最多只有一个 except block 会被执行。换句话说，如果多个 except 声明的异常类型都与实际相匹配，那么只有最前面的 except block 会被执行，其他则被忽略。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    s = <span class="built_in">input</span>(<span class="string">&#x27;please enter two numbers separated by comma: &#x27;</span>)</span><br><span class="line">    num1 = <span class="built_in">int</span>(s.split(<span class="string">&#x27;,&#x27;</span>)[<span class="number">0</span>].strip())</span><br><span class="line">    num2 = <span class="built_in">int</span>(s.split(<span class="string">&#x27;,&#x27;</span>)[<span class="number">1</span>].strip())</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">except</span> ValueError <span class="keyword">as</span> err:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Value Error: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(err))</span><br><span class="line"><span class="keyword">except</span> IndexError <span class="keyword">as</span> err:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Index Error: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(err))</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Other error&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;continue&#x27;</span>)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ul><li>无论发生什么情况，finally block 中的语句都会被执行，哪怕前面的 try 和 excep block 中使用了 return 语句。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&#x27;file.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">    .... <span class="comment"># some data processing</span></span><br><span class="line"><span class="keyword">except</span> OSError <span class="keyword">as</span> err:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;OS error: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(err))</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Unexpected error:&#x27;</span>, sys.exc_info()[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure><ul><li>自定义异常，定义并实现了初始化函数和 str 函数（直接 print 时调用）：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyInputError</span>(<span class="params">Exception</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Exception raised when there&#x27;re errors in input&quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, value</span>):</span> <span class="comment"># 自定义异常类型的初始化</span></span><br><span class="line">        self.value = value</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span> <span class="comment"># 自定义异常类型的 string 表达形式</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="string">&quot;&#123;&#125; is invalid input&quot;</span>.<span class="built_in">format</span>(<span class="built_in">repr</span>(self.value)))</span><br><span class="line">    </span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">raise</span> MyInputError(<span class="number">1</span>) <span class="comment"># 抛出 MyInputError 这个异常</span></span><br><span class="line"><span class="keyword">except</span> MyInputError <span class="keyword">as</span> err:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;error: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(err))</span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">name</span>(<span class="params">param1, param2, ..., paramN</span>):</span></span><br><span class="line">    statements</span><br><span class="line">    <span class="keyword">return</span>/<span class="keyword">yield</span> value <span class="comment"># optional</span></span><br></pre></td></tr></table></figure><h3 id="函数嵌套"><a href="#函数嵌套" class="headerlink" title="函数嵌套"></a>函数嵌套</h3><ul><li>函数的嵌套能够保证内部函数的隐私。</li><li>合理的使用函数嵌套，能够提高程序的运行效率</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span>():</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;world&#x27;</span>)</span><br><span class="line">    f2()</span><br><span class="line">f1()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">hello</span><br><span class="line">world</span><br></pre></td></tr></table></figure><h3 id="函数变量"><a href="#函数变量" class="headerlink" title="函数变量"></a>函数变量</h3><ul><li><p>局部变量：只在函数内部有效。一旦函数执行完毕，局部变量就会被回收</p></li><li><p>全局变量：不能在函数内部随意改变全局变量的值，如果我们一定要在函数内部改变全局变量的值，就必须加上 global 这个声明</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">MIN_VALUE = <span class="number">1</span></span><br><span class="line">MAX_VALUE = <span class="number">10</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">validation_check</span>(<span class="params">value</span>):</span></span><br><span class="line">    <span class="keyword">global</span> MIN_VALUE</span><br><span class="line">    ...</span><br><span class="line">    MIN_VALUE += <span class="number">1</span></span><br><span class="line">    ...</span><br><span class="line">validation_check(<span class="number">5</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nth_power</span>(<span class="params">exponent</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exponent_of</span>(<span class="params">base</span>):</span></span><br><span class="line">        <span class="keyword">return</span> base ** exponent</span><br><span class="line">    <span class="keyword">return</span> exponent_of <span class="comment"># 返回值是 exponent_of 函数</span></span><br><span class="line"> </span><br><span class="line">square = nth_power(<span class="number">2</span>) <span class="comment"># 计算一个数的平方</span></span><br><span class="line">cube = nth_power(<span class="number">3</span>) <span class="comment"># 计算一个数的立方 </span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(square(<span class="number">2</span>))  <span class="comment"># 计算 2 的平方</span></span><br><span class="line"><span class="built_in">print</span>(cube(<span class="number">2</span>)) <span class="comment"># 计算 2 的立方</span></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="number">4</span> <span class="comment"># 2^2</span></span><br><span class="line"><span class="number">8</span> <span class="comment"># 2^3</span></span><br></pre></td></tr></table></figure><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><ul><li><strong>lambda 是一个表达式（expression），并不是一个语句（statement）</strong></li><li><strong>lambda 的主体是只有一行的简单表达式，并不能扩展成一个多行的代码块</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">square = <span class="keyword">lambda</span> x: x**<span class="number">2</span></span><br><span class="line">square(<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 等同于</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">square</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x**<span class="number">2</span></span><br><span class="line">square(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><h3 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h3><ul><li><p>所谓函数式编程，是指代码中每一块都是不可变的（immutable），都由纯函数（pure function）的形式组成。这里的纯函数，是指函数本身相互独立、互不影响，对于相同的输入，总会有相同的输出，没有任何副作用</p></li><li><p>主要提供了这么几个函数：map()、filter() 和 reduce()，通常结合匿名函数 lambda 一起使用</p></li></ul><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><blockquote><p><strong>类，一群有着相同属性和函数的对象的集合。</strong></p><p>OOP思想四要素： 类 对象 属性 函数</p></blockquote><ul><li><p>类函数</p></li><li><p>成员函数</p></li><li><p>静态函数</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Document</span>():</span></span><br><span class="line">    </span><br><span class="line">    WELCOME_STR = <span class="string">&#x27;Welcome! The context for this book is &#123;&#125;.&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, title, author, context</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;init function called&#x27;</span>)</span><br><span class="line">        self.title = title</span><br><span class="line">        self.author = author</span><br><span class="line">        self.__context = context</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 类函数</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create_empty_book</span>(<span class="params">cls, title, author</span>):</span></span><br><span class="line">        <span class="keyword">return</span> cls(title=title, author=author, context=<span class="string">&#x27;nothing&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 成员函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_context_length</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.__context)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 静态函数</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_welcome</span>(<span class="params">context</span>):</span></span><br><span class="line">        <span class="keyword">return</span> Document.WELCOME_STR.<span class="built_in">format</span>(context)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">empty_book = Document.create_empty_book(<span class="string">&#x27;What Every Man Thinks About Apart from Sex&#x27;</span>, <span class="string">&#x27;Professor Sheridan Simove&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(empty_book.get_context_length())</span><br><span class="line"><span class="built_in">print</span>(empty_book.get_welcome(<span class="string">&#x27;indeed nothing&#x27;</span>))</span><br><span class="line"> </span><br><span class="line"><span class="comment">########## 输出 ##########</span></span><br><span class="line"> </span><br><span class="line">init function called</span><br><span class="line"><span class="number">7</span></span><br><span class="line">Welcome! The context <span class="keyword">for</span> this book <span class="keyword">is</span> indeed nothing.</span><br></pre></td></tr></table></figure><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><ul><li>每个类都有构造函数，继承类在生成对象的时候，是不会自动调用父类的构造函数的，因此你必须在 <strong>init</strong>() 函数中显式调用父类的构造函数。它们的执行顺序是 子类的构造函数 -&gt; 父类的构造函数。</li></ul><h3 id="抽象函数-抽象类"><a href="#抽象函数-抽象类" class="headerlink" title="抽象函数/抽象类"></a>抽象函数/抽象类</h3><ul><li><p>抽象类是一种特殊的类，它生下来就是作为父类存在的，一旦对象化就会报错。同样，抽象函数定义在抽象类之中，子类必须重写该函数才能使用。相应的抽象函数，则是使用装饰器 @abstractmethod 来表示。</p></li><li><p>抽象类就是这么一种存在，它是一种自上而下的设计风范，你只需要用少量的代码描述清楚要做的事情，定义好接口，然后就可以交给不同开发人员去开发和对接。</p></li></ul><h3 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h3><blockquote><p><strong>所谓的装饰器，其实就是通过装饰器函数，来修改原函数的一些功能，使得原函数不需要修改。</strong></p><p>Decorators is to modify the behavior of the function through a wrapper so we don’t have to actually modify the function.</p></blockquote><h4 id="函数装饰器"><a href="#函数装饰器" class="headerlink" title="函数装饰器"></a>函数装饰器</h4><ul><li><p>通常情况下，我们会把<code>*args</code>和<code>**kwargs</code>，作为装饰器内部函数 wrapper() 的参数。<code>*args</code>和<code>**kwargs</code>，表示接受任意数量和类型的参数，因此装饰器就可以写成下面的形式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">my_decorator</span>(<span class="params">func</span>):</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">          <span class="built_in">print</span>(<span class="string">&#x27;wrapper of decorator&#x27;</span>)</span><br><span class="line">          func(*args, **kwargs)</span><br><span class="line">      <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line">- 装饰器可以接受原函数任意类型和数量的参数，除此之外，它还可以接受自己定义的参数。</span><br><span class="line"></span><br><span class="line">  ```python</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">repeat</span>(<span class="params">num</span>):</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">my_decorator</span>(<span class="params">func</span>):</span></span><br><span class="line">          <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">              <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">                  <span class="built_in">print</span>(<span class="string">&#x27;wrapper of decorator&#x27;</span>)</span><br><span class="line">                  func(*args, **kwargs)</span><br><span class="line">          <span class="keyword">return</span> wrapper</span><br><span class="line">      <span class="keyword">return</span> my_decorator</span><br><span class="line">   </span><br><span class="line"><span class="meta">  @repeat(<span class="params"><span class="number">4</span></span>)</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">greet</span>(<span class="params">message</span>):</span></span><br><span class="line">      <span class="built_in">print</span>(message)</span><br><span class="line">   </span><br><span class="line">  greet(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line">   </span><br><span class="line">  <span class="comment"># 输出：</span></span><br><span class="line">  wrapper of decorator</span><br><span class="line">  hello world</span><br><span class="line">  wrapper of decorator</span><br><span class="line">  hello world</span><br><span class="line">  wrapper of decorator</span><br><span class="line">  hello world</span><br><span class="line">  wrapper of decorator</span><br><span class="line">  hello world</span><br></pre></td></tr></table></figure></li></ul><h4 id="类装饰器"><a href="#类装饰器" class="headerlink" title="类装饰器"></a>类装饰器</h4><ul><li><p>类装饰器主要依赖于函数<code>__call_()</code>，每当你调用一个类的示例时，函数<code>__call__()</code>就会被执行一次。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Count</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, func</span>):</span></span><br><span class="line">        self.func = func</span><br><span class="line">        self.num_calls = <span class="number">0</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span></span><br><span class="line">        self.num_calls += <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;num of calls is: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(self.num_calls))</span><br><span class="line">        <span class="keyword">return</span> self.func(*args, **kwargs)</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Count</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">example</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line"> </span><br><span class="line">example()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">num of calls <span class="keyword">is</span>: <span class="number">1</span></span><br><span class="line">hello world</span><br><span class="line"> </span><br><span class="line">example()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">num of calls <span class="keyword">is</span>: <span class="number">2</span></span><br><span class="line">hello world</span><br></pre></td></tr></table></figure></li></ul><h4 id="装饰器的嵌套"><a href="#装饰器的嵌套" class="headerlink" title="装饰器的嵌套"></a>装饰器的嵌套</h4><ul><li><p>执行顺序从里到外</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@decorator1</span></span><br><span class="line"><span class="meta">@decorator2</span></span><br><span class="line"><span class="meta">@decorator3</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">    ...</span><br><span class="line"><span class="comment"># 等同于</span></span><br><span class="line">decorator1(decorator2(decorator3(func)))</span><br></pre></td></tr></table></figure></li></ul><h3 id="metaclass"><a href="#metaclass" class="headerlink" title="metaclass"></a>metaclass</h3><h2 id="协程（Asyncio）"><a href="#协程（Asyncio）" class="headerlink" title="协程（Asyncio）"></a>协程（Asyncio）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"> </span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">crawl_page</span>(<span class="params">url</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;crawling &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(url))</span><br><span class="line">    sleep_time = <span class="built_in">int</span>(url.split(<span class="string">&#x27;_&#x27;</span>)[-<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(sleep_time)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;OK &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(url))</span><br><span class="line"> </span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">urls</span>):</span></span><br><span class="line">    tasks = [asyncio.create_task(crawl_page(url)) <span class="keyword">for</span> url <span class="keyword">in</span> urls]</span><br><span class="line">    <span class="keyword">for</span> task <span class="keyword">in</span> tasks:</span><br><span class="line">        <span class="keyword">await</span> task</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    task遍历的另一种写法</span></span><br><span class="line"><span class="string">    await asyncio.gather(*tasks)</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"> </span><br><span class="line">%time asyncio.run(main([<span class="string">&#x27;url_1&#x27;</span>, <span class="string">&#x27;url_2&#x27;</span>, <span class="string">&#x27;url_3&#x27;</span>, <span class="string">&#x27;url_4&#x27;</span>]))</span><br><span class="line"> </span><br><span class="line"><span class="comment">########## 输出 ##########</span></span><br><span class="line"> </span><br><span class="line">crawling url_1</span><br><span class="line">crawling url_2</span><br><span class="line">crawling url_3</span><br><span class="line">crawling url_4</span><br><span class="line">OK url_1</span><br><span class="line">OK url_2</span><br><span class="line">OK url_3</span><br><span class="line">OK url_4</span><br><span class="line">Wall time: <span class="number">3.99</span> s</span><br></pre></td></tr></table></figure><ul><li>协程和多线程的区别，主要在于两点，一是协程为单线程；二是协程由用户决定，在哪些地方交出控制权，切换到下一个任务。</li><li>协程的写法更加简洁清晰，把 async / await 语法和 create_task 结合来用，对于中小级别的并发需求已经毫无压力。</li><li>写协程程序的时候，你的脑海中要有清晰的事件循环概念，知道程序在什么时候需要暂停、等待 I/O，什么时候需要一并执行到底。</li></ul><h2 id="concurrency"><a href="#concurrency" class="headerlink" title="concurrency"></a>concurrency</h2><blockquote><p>并发通常用于 I/O 操作频繁的场景，而并行则适用于 CPU heavy 的场景。</p></blockquote><h3 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h3><blockquote><p> 在 Python 中，并发并不是指同一时刻有多个操作（thread、task）同时进行。相反，某个特定的时刻，它只允许有一个操作发生，只不过线程 / 任务之间会互相切换，直到完成</p></blockquote><p><img src="/images/python/concurrency.png" alt="concurrency"></p><blockquote><p>图中出现了 thread 和 task 两种切换顺序的不同方式，分别对应 Python 中并发的两种形式——threading 和 asyncio。</p></blockquote><p><strong>futures实现并发</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_all</span>(<span class="params">sites</span>):</span></span><br><span class="line">    <span class="keyword">with</span> concurrent.futures.ThreadPoolExecutor(max_workers=<span class="number">5</span>) <span class="keyword">as</span> executor:</span><br><span class="line">        executor.<span class="built_in">map</span>(download_one, sites)</span><br></pre></td></tr></table></figure><blockquote><p>虽然线程的数量可以自己定义，但是线程数并不是越多越好，因为线程的创建、维护和删除也会有一定的开销。所以如果你设置的很大，反而可能会导致速度变慢。我们往往需要根据实际的需求做一些测试，来寻找最优的线程数量。</p></blockquote><p><strong>多线程每次只能有一个线程执行的原因</strong></p><blockquote><p>事实上，Python 的解释器并不是线程安全的，为了解决由此带来的 race condition 等问题，Python 便引入了全局解释器锁，也就是同一时刻，只允许一个线程执行。当然，在执行 I/O 操作时，如果一个线程被 block 了，全局解释器锁便会被释放，从而让另一个线程能够继续执行。</p></blockquote><h3 id="并行"><a href="#并行" class="headerlink" title="并行"></a>并行</h3><blockquote><p> 所谓的并行，指的是同一时刻、同时发生。Python 中的 multi-processing 便是这个意思</p></blockquote><p><img src="/images/python/multi-processing.png"></p><ul><li>并发通常应用于 I/O 操作频繁的场景，比如你要从网站上下载多个文件，I/O 操作的时间可能会比 CPU 运行处理的时间长得多。</li><li>而并行则更多应用于 CPU heavy 的场景，比如 MapReduce 中的并行计算，为了加快运行速度，一般会用多台机器、多个处理器来完成。</li></ul><p><strong>futures实现并行</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_all</span>(<span class="params">sites</span>):</span></span><br><span class="line">    <span class="keyword">with</span> concurrent.futures.ThreadPoolExecutor(max_workers=<span class="number">5</span>) <span class="keyword">as</span> executor:</span><br><span class="line">        to_do = []</span><br><span class="line">        <span class="keyword">for</span> site <span class="keyword">in</span> sites:</span><br><span class="line">            future = executor.submit(download_one, site)</span><br><span class="line">            to_do.append(future)</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">for</span> future <span class="keyword">in</span> concurrent.futures.as_completed(to_do):</span><br><span class="line">            future.result()</span><br></pre></td></tr></table></figure><blockquote><p>函数 ProcessPoolExecutor() 表示创建进程池，使用多个进程并行的执行程序。不过，这里我们通常省略参数 workers，因为系统会自动返回 CPU 的数量作为可以调用的进程数。</p></blockquote><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 伪代码</span></span><br><span class="line"><span class="keyword">if</span> io_bound:</span><br><span class="line">    <span class="keyword">if</span> io_slow:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Use Asyncio&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Use multi-threading&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> cpu_bound:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Use multi-processing&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="GIL"><a href="#GIL" class="headerlink" title="GIL"></a>GIL</h2><blockquote><p> Global Interpreter Lock，即全局解释器锁</p></blockquote><p><strong>python引进GIL的原因</strong></p><ul><li>一是设计者为了规避类似于内存管理这样的复杂的竞争风险问题（race condition）；</li><li>二是因为 CPython 大量使用 C 语言库，但大部分 C 语言库都不是原生线程安全的（线程安全会降低性能和增加复杂度）</li></ul><p><strong>工作机制</strong></p><p><img src="/images/python/GIL.png"></p><p><strong>check interval</strong></p><blockquote><p>CPython 中还有另一个机制，叫做 check_interval，意思是 CPython 解释器会去轮询检查线程 GIL 的锁住情况。每隔一段时间，Python 解释器就会强制当前线程去释放 GIL，这样别的线程才能有执行的机会。</p></blockquote><p><img src="/images/python/check-interval.png"></p><h2 id="assert"><a href="#assert" class="headerlink" title="assert"></a>assert</h2><blockquote><p>assert 语句，可以说是一个 debug 的好工具，主要用于测试一个条件是否满足。如果测试的条件满足，则什么也不做，相当于执行了 pass 语句；如果测试条件不满足，便会抛出异常 AssertionError，并返回具体的错误信息（optional）</p></blockquote><p>语法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">assert_stmt ::=  <span class="string">&quot;assert&quot;</span> expression [<span class="string">&quot;,&quot;</span> expression]</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">例子<span class="number">1</span>：</span><br><span class="line"><span class="keyword">assert</span> <span class="number">1</span> == <span class="number">2</span></span><br><span class="line">相当于</span><br><span class="line"><span class="keyword">if</span> <span class="literal">__debug__</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> expression: <span class="keyword">raise</span> AssertionError</span><br><span class="line"></span><br><span class="line">例子<span class="number">2</span>：</span><br><span class="line"><span class="keyword">assert</span> <span class="number">1</span> == <span class="number">2</span>,  <span class="string">&#x27;assertion is wrong&#x27;</span></span><br><span class="line">相当于</span><br><span class="line"><span class="keyword">if</span> <span class="literal">__debug__</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> expression1: <span class="keyword">raise</span> AssertionError(expression2)</span><br><span class="line">    </span><br><span class="line">例子<span class="number">3</span>（促销价格大于<span class="number">0</span>元）：</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">apply_discount</span>(<span class="params">price, discount</span>):</span></span><br><span class="line">    updated_price = price * (<span class="number">1</span> - discount)</span><br><span class="line">    <span class="keyword">assert</span> <span class="number">0</span> &lt;= updated_price &lt;= price, <span class="string">&#x27;price should be greater or equal to 0 and less or equal to original price&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> updated_price</span><br></pre></td></tr></table></figure><ul><li>不要在使用 assert 时加入括号，否则无论表达式对与错，assert 检查永远不会 fail</li></ul><h2 id="with"><a href="#with" class="headerlink" title="with"></a>with</h2><blockquote><p>在 Python 中，解决资源泄露的方式是上下文管理器（context manager）。上下文管理器，能够帮助你自动分配并且释放资源，其中最典型的应用便是 with 语句</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">示例一：</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000000</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">等同于</span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f.write(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line">示例二：</span><br><span class="line">some_lock = threading.Lock()</span><br><span class="line"><span class="keyword">with</span> somelock:</span><br><span class="line">    ...</span><br><span class="line">等同于</span><br><span class="line">some_lock = threading.Lock()</span><br><span class="line">some_lock.acquire()</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    some_lock.release()</span><br></pre></td></tr></table></figure><ul><li><p>基于类的上下文管理器</p><blockquote><p>当我们用类来创建上下文管理器时，必须保证这个类包括方法<code>”__enter__()”</code>和方法<code>“__exit__()”</code>。其中，方法<code>“__enter__()”</code>返回需要被管理的资源，方法<code>“__exit__()”</code>里通常会存在一些释放、清理资源的操作，比如这个例子中的关闭文件等等。</p></blockquote></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileManager</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, mode</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;calling __init__ method&#x27;</span>)</span><br><span class="line">        self.name = name</span><br><span class="line">        self.mode = mode </span><br><span class="line">        self.file = <span class="literal">None</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;calling __enter__ method&#x27;</span>)</span><br><span class="line">        self.file = <span class="built_in">open</span>(self.name, self.mode)</span><br><span class="line">        <span class="keyword">return</span> self.file</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span>(<span class="params">self, exc_type, exc_val, exc_tb</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;calling __exit__ method&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> self.file:</span><br><span class="line">            self.file.close()</span><br><span class="line"><span class="comment"># 使用       </span></span><br><span class="line"><span class="keyword">with</span> FileManager(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;ready to write to file&#x27;</span>)</span><br><span class="line">    f.write(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>基于生成器的上下文管理器</li></ul><blockquote><p>使用装饰器 contextlib.contextmanager，来定义自己所需的基于生成器的上下文管理器，用以支持 with 语句</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> contextlib <span class="keyword">import</span> contextmanager</span><br><span class="line"> </span><br><span class="line"><span class="meta">@contextmanager</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">file_manager</span>(<span class="params">name, mode</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        f = <span class="built_in">open</span>(name, mode)</span><br><span class="line">        <span class="keyword">yield</span> f</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        f.close()</span><br><span class="line">        </span><br><span class="line"><span class="keyword">with</span> file_manager(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">&#x27;hello world&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="性能调试"><a href="#性能调试" class="headerlink" title="性能调试"></a>性能调试</h2><h3 id="cProfile"><a href="#cProfile" class="headerlink" title="cProfile"></a>cProfile</h3><hr><h2 id="用法-tips"><a href="#用法-tips" class="headerlink" title="用法 tips"></a>用法 tips</h2><ul><li><p>引用规范 <code>from your_file import function_name, class_name</code></p></li><li><p>定义函数时，所有非默认参数将在默认参数之前</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_function</span>(<span class="params">arg1, arg3, arg2=<span class="string">&quot;default&quot;</span></span>):</span></span><br><span class="line">    <span class="comment"># 函数实现</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li><li><p><code>pass</code> 是一个用于暂时占位或作为空占位符的关键字，它确保代码能够顺利通过语法检查而不做任何实际的操作。</p></li><li><p>每个Python文件都有一个特殊的变量<code>__name__</code>。当一个Python文件被直接运行时，<code>__name__</code>的值被设置为<code>&#39;__main__&#39;</code>。当一个Python文件被导入到另一个文件中时，<code>__name__</code>的值被设置为该文件的名字，所以用<code>if __name__ == &#39;__main__&#39;</code>来避开 import 时执行。</p></li><li><p>比较和拷贝</p><ul><li><p><code>&#39;==&#39;</code>操作符比较对象之间的值是否相等</p></li><li><p><code>&#39;is&#39;</code>操作符，相当于比较对象之间的 ID 是否相等</p><blockquote><p>对于整型数字来说，以上<code>a is b</code>为 True 的结论，只适用于 -5 到 256 范围内的数字</p></blockquote></li></ul></li><li><p>值传递、引用传递</p><ul><li>变量的赋值，只是表示让变量指向了某个对象，并不表示拷贝对象给变量；而一个对象，可以被多个变量所指向。</li><li>可变对象（列表，字典，集合等等）的改变，会影响所有指向该对象的变量。</li><li>对于不可变对象（字符串，整型，元祖等等），所有指向该对象的变量的值总是一样的，也不会改变。但是通过某些操作（+= 等等）更新不可变对象的值时，会返回一个新的对象。</li><li>变量可以被删除，但是对象无法被删除。</li></ul></li><li><p>容器是可迭代对象，可迭代对象调用 iter() 函数，可以得到一个迭代器。迭代器可以通过 next() 函数来得到下一个元素，从而支持遍历。</p></li><li><p>生成器是一种特殊的迭代器（注意这个逻辑关系反之不成立）。使用生成器，你可以写出来更加清晰的代码；合理使用生成器，可以降低内存占用、优化程序结构、提高程序速度。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/python/python%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1.png&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;语法&quot;&gt;&lt;a href=&quot;#语法&quot; class=&quot;headerlink&quot; title=&quot;语法&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
    <category term="learn" scheme="http://yoursite.com/tags/learn/"/>
    
  </entry>
  
  <entry>
    <title>python security - authlib</title>
    <link href="http://yoursite.com/2023/10/31/python%20auth%20-%20authlib/"/>
    <id>http://yoursite.com/2023/10/31/python%20auth%20-%20authlib/</id>
    <published>2023-10-31T09:04:12.000Z</published>
    <updated>2023-12-15T02:37:15.408Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Security is always excessive until it’s not enough.</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Security is always excessive until it’s not enough.&lt;/p&gt;
&lt;/blockquote&gt;
</summary>
      
    
    
    
    <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
    <category term="auth" scheme="http://yoursite.com/tags/auth/"/>
    
  </entry>
  
</feed>
