<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>source is the essence</title>
  
  
  <link href="https://www.willshirley.top/atom.xml" rel="self"/>
  
  <link href="https://www.willshirley.top/"/>
  <updated>2024-09-02T01:46:38.145Z</updated>
  <id>https://www.willshirley.top/</id>
  
  <author>
    <name>brook</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>emacs</title>
    <link href="https://www.willshirley.top/2024/08/30/emacs/"/>
    <id>https://www.willshirley.top/2024/08/30/emacs/</id>
    <published>2024-08-30T09:55:37.000Z</published>
    <updated>2024-09-02T01:46:38.145Z</updated>
    
    <content type="html"><![CDATA[<h2 id="shortcut"><a href="#shortcut" class="headerlink" title="shortcut"></a>shortcut</h2><table><thead><tr><th>Emacs 功能键</th><th>缩写</th><th>对应键盘按键(PC/Mac)</th></tr></thead><tbody><tr><td>Control</td><td>C</td><td>Ctrl / Control</td></tr><tr><td>Meta</td><td>M</td><td>Alt / Option</td></tr><tr><td>Shift</td><td>S</td><td>Shift / Shift</td></tr><tr><td>Super</td><td>s</td><td>Win / Command</td></tr></tbody></table><table><thead><tr><th>操作描述</th><th>快捷键</th><th>命令名</th></tr></thead><tbody><tr><td>输入命令</td><td>M-x</td><td>execute-extended-command</td></tr><tr><td>退出程序</td><td>C-x C-c</td><td>save-buffers-kill-terminal</td></tr><tr><td>放弃当前输入</td><td>C-g</td><td>keyboard-quit</td></tr><tr><td>光标向上一行（方向键上）</td><td>C-p</td><td>previous-line</td></tr><tr><td>光标向下一行（方向键下）</td><td>C-n</td><td>next-line</td></tr><tr><td>光标向左一个字符（方向键左）</td><td>C-b</td><td>backward-char</td></tr><tr><td>光标向右一个字符（方向键右）</td><td>C-f</td><td>forward-char</td></tr><tr><td>光标向左移动一个词</td><td>M-b</td><td>backward-word</td></tr><tr><td>光标向右移动一个词</td><td>M-f</td><td>forward-word</td></tr><tr><td>光标移至行首</td><td>C-a</td><td>move-beginning-of-line</td></tr><tr><td>光标移至行尾</td><td>C-e</td><td>move-end-of-line</td></tr><tr><td>光标移动到一行缩进的开头</td><td>M-m</td><td>back-to-indentation</td></tr><tr><td>光标移至句首</td><td>M-a</td><td>backward-sentence</td></tr><tr><td>光标移至句尾</td><td>M-e</td><td>forward-sentence</td></tr><tr><td>光标移至文件开头</td><td>M-&lt;</td><td>beginning-of-buffer</td></tr><tr><td>光标移至文件结尾</td><td>M-&gt;</td><td>end-of-buffer</td></tr><tr><td>光标移动至窗口的中间、最上、最下</td><td>M-r</td><td>move-to-window-line-top-bottom</td></tr><tr><td>删除光标右侧字符</td><td>C-d</td><td>delete-char</td></tr><tr><td>移除光标右侧词</td><td>M-d</td><td>kill-word</td></tr><tr><td>移除光标左侧词</td><td>M-DEL</td><td>backward-kill-word</td></tr><tr><td>移除右侧直到句子结尾</td><td>M-k</td><td>kill-sentence</td></tr><tr><td>移除右侧直到行尾</td><td>C-k</td><td>kill-line</td></tr><tr><td>设置标记以选择区域</td><td>C-SPC</td><td>set-mark-command</td></tr><tr><td>复制区域</td><td>M-w</td><td>kill-region-save</td></tr><tr><td>移除区域</td><td>C-w</td><td>kill-region</td></tr><tr><td>插入已移除文本</td><td>C-y</td><td>yank</td></tr><tr><td>插入历史移除文本</td><td>M-y</td><td>yank-pop</td></tr><tr><td>撤回</td><td>C-/ 或 C-_ 或 C-x u</td><td>undo</td></tr><tr><td>跳转到上一标记</td><td>C-x C-SPC 或 C-u C-SPC</td><td>pop-global-mark</td></tr><tr><td>跳转到行号</td><td>M-g M-g</td><td>goto-line</td></tr><tr><td>重复</td><td>C-u</td><td>universal-argument</td></tr><tr><td>向下一页</td><td>C-v</td><td>scroll-up-command</td></tr><tr><td>向上一页</td><td>M-v</td><td>scroll-down-command</td></tr><tr><td>移动页面使得光标在中央/最上方/最下方</td><td>C-l</td><td>recenter-top-bottom</td></tr><tr><td>向后搜索</td><td>C-s</td><td>isearch-forward</td></tr><tr><td>向前搜索</td><td>C-r</td><td>isearch-backward</td></tr><tr><td>交换前后字符</td><td>C-t</td><td>transpose-chars</td></tr><tr><td>交换前后词</td><td>M-t</td><td>transpose-words</td></tr><tr><td>交换前后两行</td><td>C-x C-t</td><td>transpose-lines</td></tr><tr><td>在下方新建一行</td><td>C-o</td><td>open-line</td></tr><tr><td>删除连续空行为一个空行</td><td>C-x C-o</td><td>delete-blank-lines</td></tr><tr><td>将后面的词变为小写</td><td>M-l</td><td>downcase-word</td></tr><tr><td>将后面的词变为大写</td><td>M-u</td><td>upcase-word</td></tr><tr><td>将后面的词变为首字母大写</td><td>M-c</td><td>capitalize-word</td></tr><tr><td>放大字号</td><td>C-x C-=</td><td>text-scale-adjust</td></tr><tr><td>缩小字号</td><td>C-x C–</td><td>text-scale-adjust</td></tr><tr><td>重置字号</td><td>C-x C-0</td><td>text-scale-adjust</td></tr><tr><td>简要描述快捷键功能</td><td>C-h c</td><td>describe-key-briefly</td></tr><tr><td>描述快捷键功能</td><td>C-h k</td><td>describe-key</td></tr><tr><td>描述函数功能</td><td>C-h f</td><td>describe-function</td></tr><tr><td>描述变量</td><td>C-h v</td><td>describe-variable</td></tr><tr><td>列出含某一关键词的命令</td><td>C-h a</td><td>apropos-command</td></tr><tr><td>列出含某一关键词的符号的文档</td><td>C-h d</td><td>apropos-documentation</td></tr><tr><td>帮助的帮助</td><td>C-h ?</td><td>help-for-help</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;shortcut&quot;&gt;&lt;a href=&quot;#shortcut&quot; class=&quot;headerlink&quot; title=&quot;shortcut&quot;&gt;&lt;/a&gt;shortcut&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Emacs 功能键&lt;/th&gt;
&lt;th&gt;缩写&lt;/t</summary>
      
    
    
    
    <category term="emacs" scheme="https://www.willshirley.top/categories/emacs/"/>
    
    
    <category term="tool" scheme="https://www.willshirley.top/tags/tool/"/>
    
  </entry>
  
  <entry>
    <title>github workflow</title>
    <link href="https://www.willshirley.top/2024/08/30/github%20workflow/"/>
    <id>https://www.willshirley.top/2024/08/30/github%20workflow/</id>
    <published>2024-08-30T07:13:28.000Z</published>
    <updated>2024-09-02T09:21:44.581Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>GitHub Actions is a continuous integration and continuous delivery (CI/CD) platform that allows you to automate your build, test, and deployment pipeline.</p></blockquote><h1 id="security"><a href="#security" class="headerlink" title="security"></a>security</h1><h2 id="create-secret"><a href="#create-secret" class="headerlink" title="create secret"></a>create secret</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gh secret set SECRET_NAME</span><br><span class="line">or</span><br><span class="line">gh secret set SECRET_NAME &lt; secret.txt</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;GitHub Actions is a continuous integration and continuous delivery (CI/CD) platform that allows you to automate your build, </summary>
      
    
    
    
    <category term="github" scheme="https://www.willshirley.top/categories/github/"/>
    
    
    <category term="workflow" scheme="https://www.willshirley.top/tags/workflow/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes vcluster</title>
    <link href="https://www.willshirley.top/2024/08/27/kubernetes%20vcluster/"/>
    <id>https://www.willshirley.top/2024/08/27/kubernetes%20vcluster/</id>
    <published>2024-08-27T09:15:26.000Z</published>
    <updated>2024-08-27T09:28:43.106Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>vCluster is a technology that creates virtual clusters within a physical Kubernetes cluster. These virtual clusters are fully functional and provide enhanced isolation and flexibility for multi-tenancy. Each vCluster operates independently, with its own API server and control plane, while sharing the underlying resources of the host cluster.</p><p>Kubernetes serves as the foundational platform for container orchestration, while vCluster enhances its capabilities by providing isolated, virtualized environments for multi-tenant applications. This relationship allows organizations to maximize resource utilization and maintain security across diverse teams and applications</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">+--------------------------------------------------+</span><br><span class="line">|                  Host Cluster                    |</span><br><span class="line">|                                                  |</span><br><span class="line">|  +--------------------------------------------+  |</span><br><span class="line">|  |            Kubernetes Control Plane        |  |</span><br><span class="line">|  |                                            |  |</span><br><span class="line">|  |  +-----------------+   +-----------------+ |  |</span><br><span class="line">|  |  |  API Server     |   |  Controller     | |  |</span><br><span class="line">|  |  |                 |   |  Manager        | |  |</span><br><span class="line">|  |  +-----------------+   +-----------------+ |  |</span><br><span class="line">|  |                                            |  |</span><br><span class="line">|  |  +-----------------+   +-----------------+ |  |</span><br><span class="line">|  |  |  Scheduler      |   |  Data Store     | |  |</span><br><span class="line">|  |  |                 |   |  (etcd)         | |  |</span><br><span class="line">|  |  +-----------------+   +-----------------+ |  |</span><br><span class="line">|  |                                            |  |</span><br><span class="line">|  |  +--------------------------------------+  |  |</span><br><span class="line">|  |  |          Worker Nodes                |  |  |</span><br><span class="line">|  |  |  (Pods running applications)         |  |  |</span><br><span class="line">|  |  +--------------------------------------+  |  |</span><br><span class="line">|  +--------------------------------------------+  |</span><br><span class="line">|                                                  |</span><br><span class="line">|  +--------------------------------------------+  |</span><br><span class="line">|  |                vCluster                    |  |</span><br><span class="line">|  |                                            |  |</span><br><span class="line">|  |  +-----------------+   +-----------------+ |  |</span><br><span class="line">|  |  |  Virtual API    |   |  Syncer         | |  |</span><br><span class="line">|  |  |  Server         |   |                 | |  |</span><br><span class="line">|  |  +-----------------+   +-----------------+ |  |</span><br><span class="line">|  |                                            |  |</span><br><span class="line">|  |  +-----------------+   +-----------------+ |  |</span><br><span class="line">|  |  |  Virtual        |   |  Virtual Data   | |  |</span><br><span class="line">|  |  |  Controller     |   |  Store          | |  |</span><br><span class="line">|  |  +-----------------+   +-----------------+ |  |</span><br><span class="line">|  +--------------------------------------------+  |</span><br><span class="line">+--------------------------------------------------+</span><br></pre></td></tr></table></figure><img src="/images/k8s/vcluster-architecture.png" style="width:100%"><h2 id="Key-Features-of-vCluster"><a href="#Key-Features-of-vCluster" class="headerlink" title="Key Features of vCluster"></a>Key Features of vCluster</h2><ul><li><strong>Isolation</strong>: Each virtual cluster has its own control plane, enhancing security and minimizing conflicts among teams.</li><li><strong>Resource Management</strong>: Virtual clusters manage their resources independently, allowing for efficient scaling and resource utilization.</li><li><strong>Multi-Tenancy</strong>: Supports multiple teams or tenants operating within the same physical infrastructure without interference.</li><li><strong>Flexibility</strong>: Can run on various Kubernetes distributions and supports different backing stores for data management.</li></ul><h2 id="Relationship-Between-Kubernetes-and-vCluster"><a href="#Relationship-Between-Kubernetes-and-vCluster" class="headerlink" title="Relationship Between Kubernetes and vCluster"></a>Relationship Between Kubernetes and vCluster</h2><ul><li><strong>Foundation</strong>: vCluster is built on top of Kubernetes, leveraging its capabilities to provide additional layers of abstraction and isolation.</li><li><strong>Resource Sharing</strong>: While vClusters share the physical resources of the host Kubernetes cluster, they maintain operational independence, allowing teams to work without affecting the global state of the host cluster.</li><li><strong>Enhanced Security</strong>: vClusters provide granular permissions and isolated control planes, which enhance security compared to standard Kubernetes namespaces.</li><li><strong>Operational Efficiency</strong>: By reducing the load on the host cluster’s API server and allowing independent management of resources, vClusters improve overall operational efficiency.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;vCluster is a technology that creates virtual clusters within a physical Kubernetes cluster. These virtual clusters are full</summary>
      
    
    
    
    <category term="Kubernetes" scheme="https://www.willshirley.top/categories/Kubernetes/"/>
    
    
    <category term="vcluster" scheme="https://www.willshirley.top/tags/vcluster/"/>
    
  </entry>
  
  <entry>
    <title>PlantUML</title>
    <link href="https://www.willshirley.top/2024/08/23/plantUML/"/>
    <id>https://www.willshirley.top/2024/08/23/plantUML/</id>
    <published>2024-08-23T02:49:55.000Z</published>
    <updated>2024-08-23T02:50:03.858Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TBD"><a href="#TBD" class="headerlink" title="TBD"></a>TBD</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;TBD&quot;&gt;&lt;a href=&quot;#TBD&quot; class=&quot;headerlink&quot; title=&quot;TBD&quot;&gt;&lt;/a&gt;TBD&lt;/h1&gt;</summary>
      
    
    
    
    <category term="PlantUML" scheme="https://www.willshirley.top/categories/PlantUML/"/>
    
    
    <category term="skill" scheme="https://www.willshirley.top/tags/skill/"/>
    
  </entry>
  
  <entry>
    <title>grpc point</title>
    <link href="https://www.willshirley.top/2024/08/15/grpc/"/>
    <id>https://www.willshirley.top/2024/08/15/grpc/</id>
    <published>2024-08-15T02:59:00.000Z</published>
    <updated>2024-08-15T03:03:49.059Z</updated>
    
    <content type="html"><![CDATA[<h1 id="proto-file"><a href="#proto-file" class="headerlink" title="proto file"></a>proto file</h1><blockquote><p>.proto file that defines the gRPC service and messages</p></blockquote><h1 id="compile"><a href="#compile" class="headerlink" title="compile"></a>compile</h1><blockquote><p>Use protoc to generate client and server code for both languages</p></blockquote><p>When you compile <code>.proto</code> files using <code>protoc</code>, it generates two Go files: <code>xxx.pb.go</code> and <code>xxx_grpc.pb.go</code>. These files are essential for both client and server implementations in a gRPC service. Here’s how they fit into the architecture:</p><h3 id="xxx-pb-go"><a href="#xxx-pb-go" class="headerlink" title="xxx.pb.go"></a><code>xxx.pb.go</code></h3><ul><li><strong>Purpose</strong>: Contains the Go representations of the protocol buffer messages defined in the <code>.proto</code> file.</li><li><strong>Usage</strong>: Used by both client and server to serialize and deserialize the messages.</li><li><strong>Contents</strong>: <ul><li>Go structs for each message type.</li><li>Methods for marshaling and unmarshaling these structs to and from binary format.</li></ul></li></ul><h3 id="xxx-grpc-pb-go"><a href="#xxx-grpc-pb-go" class="headerlink" title="xxx_grpc.pb.go"></a><code>xxx_grpc.pb.go</code></h3><ul><li><strong>Purpose</strong>: Contains the gRPC service definitions and client/server interfaces.</li><li><strong>Usage</strong>: <ul><li><strong>Server</strong>: Implements the server-side logic by embedding the generated server interface.</li><li><strong>Client</strong>: Uses the generated client interface to make RPC calls.</li></ul></li><li><strong>Contents</strong>:<ul><li>Server interface with methods corresponding to the RPCs defined in the <code>.proto</code> file.</li><li>Client interface with methods to call the RPCs.</li><li>Registration functions to register the server with a gRPC server.</li><li>Handler functions to handle incoming RPC calls.</li></ul></li></ul><h1 id="client-and-server"><a href="#client-and-server" class="headerlink" title="client and server"></a>client and server</h1><h3 id="Client-Code"><a href="#Client-Code" class="headerlink" title="Client Code"></a>Client Code</h3><ul><li><strong>References</strong>: Both <code>xxx.pb.go</code> and <code>xxx_grpc.pb.go</code>.</li><li><strong>Functionality</strong>: <ul><li>Uses the client interface from <code>xxx_grpc.pb.go</code> to make RPC calls.</li><li>Constructs request messages using the structs from <code>xxx.pb.go</code>.</li></ul></li></ul><h3 id="Server-Code"><a href="#Server-Code" class="headerlink" title="Server Code"></a>Server Code</h3><ul><li><strong>References</strong>: Both <code>xxx.pb.go</code> and <code>xxx_grpc.pb.go</code>.</li><li><strong>Functionality</strong>: <ul><li>Implements the server interface from <code>xxx_grpc.pb.go</code>.</li><li>Handles incoming requests and constructs response messages using the structs from <code>xxx.pb.go</code>.</li></ul></li></ul><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>In the provided example:</p><ul><li><p><strong>Client Code</strong> (<code>examples/helloworld/greeter_client/main.go</code>):</p><ul><li>Uses <code>pb.NewGreeterClient</code> from <code>helloworld_grpc.pb.go</code> to create a client.</li><li>Constructs <code>HelloRequest</code> messages using the struct from <code>helloworld.pb.go</code>.</li></ul></li><li><p><strong>Server Code</strong> (<code>examples/helloworld/greeter_server/main.go</code>):</p><ul><li>Implements <code>GreeterServer</code> interface from <code>helloworld_grpc.pb.go</code>.</li><li>Constructs <code>HelloReply</code> messages using the struct from <code>helloworld.pb.go</code>.</li></ul></li></ul><p><strong>This architecture ensures that both client and server have a consistent and type-safe way to communicate using the protocol buffer messages and gRPC service definitions.</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;proto-file&quot;&gt;&lt;a href=&quot;#proto-file&quot; class=&quot;headerlink&quot; title=&quot;proto file&quot;&gt;&lt;/a&gt;proto file&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;.proto file that defines </summary>
      
    
    
    
    <category term="grpc" scheme="https://www.willshirley.top/categories/grpc/"/>
    
    
    <category term="point" scheme="https://www.willshirley.top/tags/point/"/>
    
  </entry>
  
  <entry>
    <title>code style</title>
    <link href="https://www.willshirley.top/2024/08/14/code%20styple/"/>
    <id>https://www.willshirley.top/2024/08/14/code%20styple/</id>
    <published>2024-08-14T02:51:25.000Z</published>
    <updated>2024-08-14T03:37:16.327Z</updated>
    
    <content type="html"><![CDATA[<h1 id="functional-programming"><a href="#functional-programming" class="headerlink" title="functional programming"></a>functional programming</h1><h2 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h2><p>Go (Golang) supports functional programming concepts, although it is primarily an imperative language. Here are some key functional programming features in Go:</p><h3 id="1-First-Class-Functions"><a href="#1-First-Class-Functions" class="headerlink" title="1. First-Class Functions"></a>1. First-Class Functions</h3><p>Functions in Go are first-class citizens, meaning they can be assigned to variables, passed as arguments, and returned from other functions.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> op <span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span> <span class="title">int</span></span></span><br><span class="line">    op = add</span><br><span class="line">    fmt.Println(op(<span class="number">1</span>, <span class="number">2</span>)) <span class="comment">// Outputs: 3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-Higher-Order-Functions"><a href="#2-Higher-Order-Functions" class="headerlink" title="2. Higher-Order Functions"></a>2. Higher-Order Functions</h3><p>Functions that take other functions as arguments or return functions are called higher-order functions.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">apply</span><span class="params">(op <span class="keyword">func</span>(<span class="keyword">int</span>, <span class="keyword">int</span>)</span> <span class="title">int</span>, <span class="title">a</span>, <span class="title">b</span> <span class="title">int</span>) <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> op(a, b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    add := <span class="function"><span class="keyword">func</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123; <span class="keyword">return</span> a + b &#125;</span><br><span class="line">    fmt.Println(apply(add, <span class="number">1</span>, <span class="number">2</span>)) <span class="comment">// Outputs: 3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-Closures"><a href="#3-Closures" class="headerlink" title="3. Closures"></a>3. Closures</h3><p>Go supports closures, which are functions that capture the variables from their surrounding scope.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">incrementer</span><span class="params">()</span> <span class="title">func</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    i := <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">        i++</span><br><span class="line">        <span class="keyword">return</span> i</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    inc := incrementer()</span><br><span class="line">    fmt.Println(inc()) <span class="comment">// Outputs: 1</span></span><br><span class="line">    fmt.Println(inc()) <span class="comment">// Outputs: 2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-Pure-Functions"><a href="#4-Pure-Functions" class="headerlink" title="4. Pure Functions"></a>4. Pure Functions</h3><p>Pure functions are functions that do not have side effects and return the same result given the same arguments.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(add(<span class="number">1</span>, <span class="number">2</span>)) <span class="comment">// Outputs: 3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-Immutability"><a href="#5-Immutability" class="headerlink" title="5. Immutability"></a>5. Immutability</h3><p>While Go does not enforce immutability, you can design your functions to avoid mutating state.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addToSlice</span><span class="params">(slice []<span class="keyword">int</span>, value <span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    newSlice := <span class="built_in">append</span>(slice, value)</span><br><span class="line">    <span class="keyword">return</span> newSlice</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    original := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">    newSlice := addToSlice(original, <span class="number">4</span>)</span><br><span class="line">    fmt.Println(original) <span class="comment">// Outputs: [1, 2, 3]</span></span><br><span class="line">    fmt.Println(newSlice) <span class="comment">// Outputs: [1, 2, 3, 4]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-Functional-Composition"><a href="#6-Functional-Composition" class="headerlink" title="6. Functional Composition"></a>6. Functional Composition</h3><p>You can compose functions to build more complex operations.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">multiply</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a * b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">compose</span><span class="params">(f, g <span class="keyword">func</span>(<span class="keyword">int</span>, <span class="keyword">int</span>)</span> <span class="title">int</span>) <span class="title">func</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">        <span class="keyword">return</span> f(g(a, b), b)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    addThenMultiply := compose(multiply, add)</span><br><span class="line">    fmt.Println(addThenMultiply(<span class="number">2</span>, <span class="number">3</span>)) <span class="comment">// Outputs: 15 (5 * 3)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>These features allow you to use functional programming techniques in Go, making your code more modular, reusable, and easier to reason about.</p><h1 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h1><ul><li>函数式程序更倾向于铺设调节数据流转换的管道结构，而可变的命令式程序更倾向于迭代地处理一个个类型对象</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;functional-programming&quot;&gt;&lt;a href=&quot;#functional-programming&quot; class=&quot;headerlink&quot; title=&quot;functional programming&quot;&gt;&lt;/a&gt;functional programmi</summary>
      
    
    
    
    <category term="code" scheme="https://www.willshirley.top/categories/code/"/>
    
    
    <category term="style" scheme="https://www.willshirley.top/tags/style/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes learn</title>
    <link href="https://www.willshirley.top/2024/08/05/Kubernetes%20learn/"/>
    <id>https://www.willshirley.top/2024/08/05/Kubernetes%20learn/</id>
    <published>2024-08-05T08:57:50.000Z</published>
    <updated>2024-08-29T10:51:06.943Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>容器是一个“单进程”模型</strong></p><p>一个“容器”，实际上是一个由 Linux Namespace、Linux Cgroups 和 rootfs 三种技术构建出来的进程的隔离环境</p><p>一个正在运行的 Linux 容器，其实可以被“一分为二”地看待：</p><ol><li>一组联合挂载在 /var/lib/docker/aufs/mnt 上的 rootfs，这一部分我们称为“容器镜像”（Container Image），是容器的静态视图；</li><li>一个由 Namespace+Cgroups 构成的隔离环境，这一部分我们称为“容器运行时”（Container Runtime），是容器的动态视图。</li></ol></blockquote><h1 id="version"><a href="#version" class="headerlink" title="version"></a>version</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Client Version: v1.30.3</span><br><span class="line">Kustomize Version: v5.0.4-0.20230601165947-6ce0bf390ce3</span><br><span class="line">Server Version: v1.30.0</span><br></pre></td></tr></table></figure><h1 id="define"><a href="#define" class="headerlink" title="define"></a>define</h1><blockquote><p>容器本身没有价值，有价值的是“容器编排”。</p></blockquote><p>Kubernetes is pronounced <strong>coo-ber-net-ees</strong>, not coo-ber-neats. People also use the shortened version k8s a lot. Please don’t pronounce that one k-eights—it is still coo-ber-net-ees.</p><blockquote><p>Docker is a containerization platform, and Kubernetes is a container orchestrator for container platforms like Docker. </p></blockquote><h2 id="architecture"><a href="#architecture" class="headerlink" title="architecture"></a>architecture</h2><p>We can break down the components into three main parts.</p><ol><li>The Control Plane - The Master.</li><li>Nodes - Where pods get scheduled.</li><li>Pods - Holds containers.</li></ol><p><img src="/images/k8s/k8s-architecture-overview.png"></p><blockquote><p>kubernetes设计思想<strong>“一切皆对象”</strong>：应用是 Pod 对象，应用的配置是 ConfigMap 对象，应用要访问的密码则是 Secret 对象。</p><p><strong>声明式 API，是 Kubernetes 项目编排能力“赖以生存”的核心所在</strong></p></blockquote><h2 id="dependency"><a href="#dependency" class="headerlink" title="dependency"></a>dependency</h2><blockquote><p>Namespace 做隔离，Cgroups 做限制，rootfs 做文件系统</p><p>对 容器项目来说，最核心的原理实际上就是为待创建的用户进程：</p><ol><li>启用 Linux Namespace 配置；</li><li>设置指定的 Cgroups 参数；</li><li>切换进程的根目录（Change Root）。</li></ol></blockquote><h3 id="namespace"><a href="#namespace" class="headerlink" title="namespace"></a>namespace</h3><blockquote><p> Linux 操作系统提供了PID、 Mount、UTS、IPC、Network 和 User 这些 Namespace，用来对各种不同的进程上下文进行“障眼法”操作</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PID Namespace：隔离进程 ID。</span><br><span class="line">Network Namespace：隔离网络设备、网络栈、端口等网络资源。</span><br><span class="line">Mount Namespace：隔离挂载点。</span><br><span class="line">IPC Namespace：隔离进程间通信资源，如信号量等。</span><br><span class="line">UTS Namespace：隔离主机名和域名。</span><br><span class="line">User Namespace：隔离用户和用户组 ID。</span><br></pre></td></tr></table></figure><ul><li><p>容器帮助用户启动的，还是原来的应用进程，只不过在创建这些进程时，容器为它们加上了各种各样的 Namespace 参数。进程就会觉得自己是各自 PID Namespace 里的第 1 号进程，只能看到各自 Mount Namespace 里挂载的目录和文件，只能访问到各自 Network Namespace 里的网络设备，就仿佛运行在一个个“容器”里面，与世隔绝</p></li><li><p>在 Linux 内核中，有很多资源和对象是不能被 Namespace 化的，最典型的例子就是：时间</p></li><li><p>Linux Namespace 为 Kubernetes Namespace 提供了底层的隔离能力，Kubernetes Namespace 则是在此基础上进行更高级别的抽象和管理。</p></li></ul><h4 id="mount-namesapce"><a href="#mount-namesapce" class="headerlink" title="mount namesapce"></a>mount namesapce</h4><ul><li>Mount Namespace 跟其他 Namespace 的使用略有不同的地方：它对容器进程视图的改变，一定是伴随着挂载操作（mount）才能生效。</li><li>Mount Namespace 正是基于对 chroot 的不断改良才被发明出来的，它也是 Linux 操作系统里的第一个 Namespace</li></ul><h3 id="cgoups"><a href="#cgoups" class="headerlink" title="cgoups"></a>cgoups</h3><blockquote><p> <strong>Linux Cgroups 的全称是 Linux Control Group。它最主要的作用，就是限制一个进程组能够使用的资源上限，包括 CPU、内存、磁盘、网络带宽等等。</strong></p></blockquote><ul><li>Cgroups 给用户暴露出来的操作接口是文件系统，即它以文件和目录的方式组织在操作系统的 <code>/sys/fs/cgroup</code> 路径下</li><li>Linux Cgroups 的设计还是比较易用的，简单粗暴地理解它就是一个子系统目录加上一组资源限制文件的组合</li><li>Cgroups 技术是用来制造约束的主要手段，而Namespace 技术则是用来修改进程视图的主要方法</li></ul><h3 id="rootfs"><a href="#rootfs" class="headerlink" title="rootfs"></a>rootfs</h3><blockquote><p>Rootfs(根文件系统) 它只是一个操作系统的所有文件和目录，并不包含内核，最多也就几百兆</p><p>容器通过 Mount Namespace 单独挂载其他不同版本的操作系统文件</p><p><strong>rootfs 只是一个操作系统所包含的文件、配置和目录，并不包括操作系统内核。</strong></p></blockquote><ul><li><p>挂载在容器根目录上, 为容器进程提供隔离后执行环境的文件系统，就是所谓的“容器镜像”。</p></li><li><p>容器只是运行在宿主机上的一种特殊的进程，那么多个容器之间使用的就还是同一个宿主机的操作系统内核</p></li></ul><h2 id="CRI"><a href="#CRI" class="headerlink" title="CRI"></a>CRI</h2><blockquote><p><strong>Container Runtime Interface</strong> 容器运行时接口</p><p>kubelet 调用下层容器运行时的执行过程，并不会直接调用 Docker 的 API，而是通过CRI的 gRPC 接口来间接执行</p></blockquote><h1 id="API-object"><a href="#API-object" class="headerlink" title="API object"></a>API object</h1><blockquote><p>Kubernetes API 对象，由元数据 metadata、规范 spec 和状态 status组成</p><p>元数据是用来标识 API 对象的，每个对象都至少有 3 个元数据：namespace，name 和 uid</p></blockquote><ul><li>路径</li></ul><p>在 Kubernetes 项目中，一个 API 对象在 Etcd 里的完整资源路径，是由：Group（API 组）、Version（API 版本）和 Resource（API 资源类型）三个部分组成的。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># “CronJob”就是这个 API 对象的资源类型（Resource），“batch”就是它的组（Group），v2alpha1 就是它的版本（Version）。</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">batch/v2alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">CronJob</span></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></table></figure><h2 id="pod"><a href="#pod" class="headerlink" title="pod"></a>pod</h2><blockquote><p>Kubernetes 里“最小”的 API 对象是 Pod。Pod 可以等价为一个应用，所以，Pod 可以由多个紧密协作的容器组成</p><p><strong>Pod 就是 Kubernetes 世界里的“应用”；而一个应用，可以由多个容器组成</strong></p><p>Pod，其实是一组共享了某些资源的容器</p><p><strong>凡是调度、网络、存储，以及安全相关的属性，基本上是 Pod 级别的</strong>；</p><p><strong>凡是跟容器的 Linux Namespace 相关的属性，也一定是 Pod 级别的</strong></p><p><strong>凡是 Pod 中的容器要共享宿主机的 Namespace，也一定是 Pod 级别的定义</strong></p><p><strong>Pod 里的所有容器，共享的是同一个 Network Namespace，并且可以声明共享同一个 Volume</strong></p><p>Pod 可以被看成传统环境里的“机器”、把容器看作是运行在这个“机器”里的“用户程序”</p><p>容器，就是未来云计算系统中的进程；容器镜像就是这个系统里的“.exe”安装包</p></blockquote><ul><li>每个 Pod 都会被分配一个唯一的 IP 地址。Pod 中的所有容器共享网络空间，包括 IP 地址和端口。Pod 内部的容器可以使用 <code>localhost</code> 互相通信。Pod 中的容器与外界通信时，必须分配共享网络资源（例如使用宿主机的端口映射）。</li><li>可以为一个 Pod 指定多个共享的 Volume。Pod 中的所有容器都可以访问共享的 volume。Volume 也可以用来持久化 Pod 中的存储资源，以防容器重启后文件丢失。</li></ul><h3 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h3><blockquote><p>管理 长期伺服型（long-running）业务</p></blockquote><h3 id="DaemonSet"><a href="#DaemonSet" class="headerlink" title="DaemonSet"></a>DaemonSet</h3><blockquote><p>管理 节点后台支撑型（node-daemon）业务</p></blockquote><ol><li>这个 Pod 运行在 Kubernetes 集群里的每一个节点（Node）上；</li><li>每个节点上只有一个这样的 Pod 实例；</li><li>当有新的节点加入 Kubernetes 集群后，该 Pod 会自动地在新节点上被创建出来；而当旧节点被删除后，它上面的 Pod 也相应地会被回收掉。</li></ol><h3 id="job"><a href="#job" class="headerlink" title="job"></a>job</h3><blockquote><p>管理 批处理型（batch）业务</p></blockquote><h3 id="StatefulSet"><a href="#StatefulSet" class="headerlink" title="StatefulSet"></a>StatefulSet</h3><blockquote><p>管理 有状态应用型（stateful application）业务</p><p>StatefulSet 的核心功能，就是通过某种方式记录这些状态，然后在 Pod 被重新创建时，能够为新 Pod 恢复这些状态</p></blockquote><ul><li><p>拓扑状态</p><ul><li><p>Headless Service</p><blockquote><p>通过 Headless Service 的方式，StatefulSet 为每个 Pod 创建了一个固定并且稳定的 DNS 记录，来作为它的访问入口。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;pod-name&gt;.&lt;svc-name&gt;.&lt;namespace&gt;.svc.cluster.local</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li>存储状态</li></ul><blockquote><p>Kubernetes 中 PVC 和 PV 的设计，<strong>实际上类似于“接口”和“实现”的思想</strong>。</p></blockquote><p><strong>Persistent Volume Claim(PVC)</strong></p><p><strong>persistent Volume(PV)</strong></p><h3 id="lifecycle-hook"><a href="#lifecycle-hook" class="headerlink" title="(lifecycle) hook"></a>(lifecycle) hook</h3><ul><li>PostStart</li><li>PreStop</li></ul><blockquote><p>Hook Handlers: Exec and HTTP</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">lifecycle:</span></span><br><span class="line">      <span class="attr">postStart:</span></span><br><span class="line">        <span class="attr">exec:</span></span><br><span class="line">          <span class="attr">command:</span> [<span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;echo &#x27;PostStart hook&#x27; &gt; /usr/share/message&quot;</span>]</span><br><span class="line">      <span class="attr">preStop:</span></span><br><span class="line">        <span class="attr">httpGet:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">/shutdown</span></span><br><span class="line">          <span class="attr">port:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure><h2 id="Secret"><a href="#Secret" class="headerlink" title="Secret"></a>Secret</h2><ul><li><p>create</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create secret generic user --from-file=./username.txt</span><br></pre></td></tr></table></figure></li><li><p>check</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get secrets</span><br></pre></td></tr></table></figure></li></ul><h2 id="ConfigMap"><a href="#ConfigMap" class="headerlink" title="ConfigMap"></a>ConfigMap</h2><ul><li><p>create</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create configmap ui-config --from-file=example/ui.properties</span><br></pre></td></tr></table></figure></li><li><p>get yaml</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get configmaps ui-config -o yaml</span><br></pre></td></tr></table></figure></li></ul><h2 id="ControllerRevision"><a href="#ControllerRevision" class="headerlink" title="ControllerRevision"></a>ControllerRevision</h2><h2 id="CronJob"><a href="#CronJob" class="headerlink" title="CronJob"></a>CronJob</h2><h2 id="infra-container-pause-container"><a href="#infra-container-pause-container" class="headerlink" title="infra container (pause container)"></a>infra container (pause container)</h2><blockquote><p>在 Kubernetes 项目里，Pod 的实现需要使用一个中间容器，这个容器叫作 Infra 容器。在这个 Pod 中，Infra 容器永远都是第一个被创建的容器，而其他用户定义的容器，则通过 Join Network Namespace 的方式，与 Infra 容器关联在一起。</p><p>在 Kubernetes 项目里，Infra 容器一定要占用极少的资源，所以它使用的是一个非常特殊的镜像，叫作：<code>k8s.gcr.io/pause</code>。这个镜像是一个用汇编语言编写的、永远处于“暂停”状态的容器，解压后的大小也只有 100~200 KB 左右。</p></blockquote><ul><li>infra container 负责运行网络和 IPC 命名空间的初始化任务，以及为 Pod 中的其他容器提供共享的网络和 IPC (Inter-Process Communication)环境</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Maintains pod network namespace and keeps pod alive</span><br><span class="line">Also known as the &quot;pause container&quot;</span><br><span class="line">Automatically created for every pod</span><br><span class="line">Holds the network namespace for the pod</span><br><span class="line">Keeps the pod running</span><br><span class="line">Uses minimal resources</span><br><span class="line">Not visible in pod specifications</span><br><span class="line">Runs for the entire lifecycle of the pod</span><br></pre></td></tr></table></figure><h2 id="config"><a href="#config" class="headerlink" title="config"></a>config</h2><ul><li>Metadata</li><li>Spec</li><li></li></ul><h2 id="stragety"><a href="#stragety" class="headerlink" title="stragety"></a>stragety</h2><ul><li><p><strong>ImagePullPolicy</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Always Never IfNotPresent</span><br></pre></td></tr></table></figure></li><li><p><strong>Lifecycle</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">postStart preStop</span><br></pre></td></tr></table></figure></li><li><p><strong>restartPolicy</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Always：在任何情况下，只要容器不在运行状态，就自动重启容器；</span><br><span class="line">OnFailure: 只在容器异常时才自动重启容器；</span><br><span class="line">Never: 从来不重启容器。</span><br></pre></td></tr></table></figure></li><li><p><strong>PodPreset</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PodPreset 里定义的内容，只会在 Pod API 对象被创建之前追加在这个对象本身上，而不会影响任何 Pod 的控制器的定义</span><br></pre></td></tr></table></figure></li><li><p><strong>Status</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pending running succeeded failed upknown</span><br></pre></td></tr></table></figure></li></ul><h2 id="Volume"><a href="#Volume" class="headerlink" title="Volume"></a>Volume</h2><blockquote><p>所谓容器的 Volume，其实就是将一个宿主机上的目录，跟一个容器里的目录绑定挂载在了一起</p><p>所谓的“持久化 Volume”，指的就是这个宿主机上的目录，具备“持久性”。即这个目录里面的内容，既不会因为容器的删除而被清理掉，也不会跟当前的宿主机绑定。</p></blockquote><p><strong>“持久化”宿主机目录的过程，可以形象地称为“两阶段处理”</strong></p><ul><li>第一阶段 Attach：虚拟机挂载远程磁盘的操作</li><li>第二阶段 Mount：将磁盘设备格式化并挂载到 Volume 宿主机目录的操作</li></ul><h3 id="Dynamic-Provisioning"><a href="#Dynamic-Provisioning" class="headerlink" title="Dynamic Provisioning"></a>Dynamic Provisioning</h3><blockquote><p>自动创建 PV 的机制</p></blockquote><h3 id="PersistentVolumeController"><a href="#PersistentVolumeController" class="headerlink" title="PersistentVolumeController"></a>PersistentVolumeController</h3><ul><li>pvc的使用需要限制在相同namespace中</li></ul><h3 id="StorageClass"><a href="#StorageClass" class="headerlink" title="StorageClass"></a>StorageClass</h3><ul><li><p>定义</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">第一，PV 的属性。比如，存储类型、Volume 的大小等等。</span><br><span class="line">第二，创建这种 PV 需要用到的存储插件。比如，Ceph 等等。</span><br></pre></td></tr></table></figure></li><li><p>充当 PV 的模板。并且，只有同属于一个 StorageClass 的 PV 和 PVC，才可以绑定在一起</p></li></ul><h3 id="csi"><a href="#csi" class="headerlink" title="csi"></a>csi</h3><blockquote><p>Container Storage Interface <strong>容器的持久化存储的含义</strong>，就是用来保存容器存储状态的重要手段：存储插件会在容器里挂载一个基于网络或者其他机制的远程数据卷，使得在容器里创建的文件，实际上是保存在远程存储服务器上，或者以分布式的方式保存在多个节点上，而与当前宿主机没有任何绑定关系。这样，无论你在其他哪个宿主机上启动新的容器，都可以请求挂载指定的持久化存储卷，从而访问到数据卷里保存的内容。</p><p><strong>CSI 插件体系的设计思想，就是把 Provision 阶段，以及 Kubernetes 里的一部分存储管理功能(比如“Attach 阶段”和“Mount 阶段”的具体操作)，从主干代码里剥离出来，做成了几个单独的组件</strong></p></blockquote><p>一个 CSI 插件只有一个二进制文件，但它会以 gRPC 的方式对外提供三个服务（gRPC Service），分别叫作：CSI Identity、CSI Controller 和 CSI Node</p><p><strong>CSI 的设计思想</strong>，把插件的职责从“两阶段处理”，扩展成了 Provision、Attach 和 Mount 三个阶段。其中，Provision 等价于“创建磁盘”，Attach 等价于“挂载磁盘到虚拟机”，Mount 等价于“将该磁盘格式化后，挂载在 Volume 的宿主机目录上”。</p><img src="/images/k8s/csi idea.png" style="zoom:50%;"/><h4 id="External-Components"><a href="#External-Components" class="headerlink" title="External Components"></a>External Components</h4><ul><li><p><strong>Driver Registrar</strong></p><p><strong>负责将插件注册到 kubelet 里面</strong>（这可以类比为，将可执行文件放在插件目录下）。而在具体实现上，Driver Registrar 需要请求 CSI 插件的 Identity 服务来获取插件信息。</p><blockquote><p>CSIDriver 是集群级别的，供其他namespace调用</p></blockquote></li><li><p><strong>External Provisioner</strong></p><p><strong>负责 Provision 阶段</strong>。在具体实现上，External Provisioner 监听（Watch）了 APIServer 里的 PVC 对象。当一个 PVC 被创建时，它就会调用 CSI Controller 的 CreateVolume 方法，创建对应 PV</p></li><li><p><strong>External Attacher</strong></p><p><strong>负责“Attach 阶段”</strong>。在具体实现上，它监听了 APIServer 里 VolumeAttachment 对象的变化。VolumeAttachment 对象是 Kubernetes 确认一个 Volume 可以进入“Attach 阶段”的重要标志；</p><p>一旦出现了 VolumeAttachment 对象，External Attacher 就会调用 CSI Controller 服务的 ControllerPublish 方法，完成它所对应的 Volume 的 Attach 阶段。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">kubernetes-csi/external-snapshotter: This project contains the sidecar container that watches Kubernetes VolumeSnapshot objects and triggers CreateSnapshot/DeleteSnapshot operations against a CSI endpoint.</span><br><span class="line"></span><br><span class="line">kubernetes-csi/external-provisioner: The external-provisioner is a sidecar container that watches Kubernetes PersistentVolumeClaim objects and triggers CreateVolume/DeleteVolume operations against a CSI endpoint.</span><br><span class="line"></span><br><span class="line">kubernetes-csi/external-attacher: The external-attacher is a sidecar container that watches Kubernetes VolumeAttachment objects and triggers ControllerPublish/Unpublish operations against a CSI endpoint.</span><br><span class="line"></span><br><span class="line">kubernetes-csi/node-driver-registrar: This sidecar container registers a CSI driver with the kubelet using the kubelet plugin registration mechanism.</span><br><span class="line"></span><br><span class="line">kubernetes-csi/livenessprobe: A sidecar container that can be included in a CSI plugin pod to enable integration with Kubernetes Liveness Probe</span><br></pre></td></tr></table></figure></li></ul><h4 id="Custom-Components"><a href="#Custom-Components" class="headerlink" title="Custom Components"></a>Custom Components</h4><ul><li><p><strong>CSI Identity</strong></p><p><strong>负责对外暴露这个插件本身的信息</strong></p></li><li><p><strong>CSI Controller</strong></p><p><strong>定义的则是对 CSI Volume（对应 Kubernetes 里的 PV）的管理接口</strong>，比如：创建和删除 CSI Volume、对 CSI Volume 进行 Attach/Dettach（在 CSI 里，这个操作被叫作 Publish/Unpublish），以及对 CSI Volume 进行 Snapshot 等</p></li><li><p><strong>CSI Node</strong></p><p>“Mount 阶段”在 CSI Node 里的接口，是由 NodeStageVolume 和 NodePublishVolume 两个接口共同实现的;</p><p>当 kubelet 的 VolumeManagerReconciler 控制循环检查到它需要执行 Mount 操作的时候，会通过 pkg/volume/csi 包，直接调用 CSI Node 服务完成 Volume 的“Mount 阶段”</p></li></ul><h4 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h4><ul><li>在实际使用 CSI 插件的时候，我们会将这三个 External Components 作为 sidecar 容器和 CSI 插件放置在同一个 Pod 中。由于 External Components 对 CSI 插件的调用非常频繁，所以这种 sidecar 的部署方式非常高效。</li></ul><h2 id="RBAC"><a href="#RBAC" class="headerlink" title="RBAC"></a>RBAC</h2><blockquote><p>Role-Based Access Control</p></blockquote><h2 id="Operator"><a href="#Operator" class="headerlink" title="Operator"></a>Operator</h2><blockquote><p>Operator 的工作原理，实际上是利用了 Kubernetes 的自定义 API 资源（<a href="https://kubernetes.io/docs/tasks/access-kubernetes-api/extend-api-custom-resource-definitions">custom resource definitions (CRDs)</a>），来描述我们想要部署的“有状态应用”；然后在自定义控制器里，根据自定义 API 对象的变化，来完成具体的部署和运维工作</p><p>In other words, Operators are software extensions that use custom resources to manage applications and their components</p></blockquote><h3 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h3><blockquote><p><em>Controller is just some logic about something that it is supposed to be managed and is usually visualised as an observe and adjust loop.</em></p><p><em>Observe the current state, compare it to the desired state and adjust the state</em></p></blockquote><h3 id="custom-resource-CR"><a href="#custom-resource-CR" class="headerlink" title="custom resource(CR)"></a>custom resource(CR)</h3><h3 id="state"><a href="#state" class="headerlink" title="state"></a>state</h3><blockquote><p><em>The state just holds the information of what the desired state of the resource is and the resource is the thing that you are managing.</em></p></blockquote><h2 id="CNI"><a href="#CNI" class="headerlink" title="CNI"></a>CNI</h2><p>TBD</p><h1 id="command"><a href="#command" class="headerlink" title="command"></a>command</h1><ul><li>version</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl version</span><br><span class="line">kubectl api-versions</span><br></pre></td></tr></table></figure><ul><li>health</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> check kubernetes inner ip</span> </span><br><span class="line">kubectl get svc kubernetes -n default</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> check api server</span></span><br><span class="line">kubectl get componentstatuses</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> check crd</span></span><br><span class="line">kubectl get crd | grep cert-manager</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> check all pods</span></span><br><span class="line">kubectl get pods -A</span><br></pre></td></tr></table></figure><ul><li>namespace</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get namespaces</span><br></pre></td></tr></table></figure><ul><li>pod</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pod -n &#123;namespace&#125;</span><br></pre></td></tr></table></figure><ul><li>log</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl logs -f &#123;podId&#125; -n &#123;namespace&#125;</span><br></pre></td></tr></table></figure><ul><li>config info</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pod 容器id --kubeconfig=/path/to/configfile -o yaml &gt; env-vq48.yaml</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get -o yaml 这样的参数，会将指定的 Pod API 对象以 YAML 的方式展示出来。</span><br></pre></td></tr></table></figure><ul><li>exec</li></ul><p>without kubeconfig</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> kubectl <span class="built_in">exec</span> -it &#123;pod_name&#125; -- /bin/bash</span></span><br><span class="line">kubectl exec -it  容器id -n 命令空间 -c entity-server-server -- sh</span><br></pre></td></tr></table></figure><ul><li>describe</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl describe pod &#123;podName&#125;</span><br></pre></td></tr></table></figure><ul><li>cp</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl cp 命令空间/容器id:/path/to/source_file ./path/to/local_file</span><br></pre></td></tr></table></figure><ul><li>check daemonsets</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get daemonsets --all-namespaces</span><br></pre></td></tr></table></figure><h2 id="storage"><a href="#storage" class="headerlink" title="storage"></a>storage</h2><ul><li>CSIDriver</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get csidrivers</span><br></pre></td></tr></table></figure><ul><li>storageclass</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get storageclass</span><br></pre></td></tr></table></figure><ul><li>pvc</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pvc</span><br></pre></td></tr></table></figure><ul><li>label</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> check node label</span></span><br><span class="line">kubectl get nodes --show-labels</span><br></pre></td></tr></table></figure><h1 id="conclusion"><a href="#conclusion" class="headerlink" title="conclusion"></a>conclusion</h1><ul><li><p>过去很多的集群管理项目（比如 Yarn、Mesos，以及 Swarm）所擅长的，都是把一个容器，按照某种规则，放置在某个最佳节点上运行起来。这种功能，我们称为“调度”。</p><p>而 Kubernetes 项目所擅长的，是按照用户的意愿和整个系统的规则，完全自动化地处理好容器之间的各种关系。<strong>这种功能，就是：编排。</strong></p></li></ul><h1 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h1><h2 id="node-pod-cidr-not-assigned"><a href="#node-pod-cidr-not-assigned" class="headerlink" title="node pod cidr not assigned"></a><strong>node pod cidr not assigned</strong></h2><ul><li>Step 1</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> master node</span></span><br><span class="line">sudo vim /etc/kubernetes/manifests/kube-controller-manager.yaml</span><br></pre></td></tr></table></figure><p><code>kube-controller-manager.yaml</code> info</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - command:</span><br><span class="line">    - kube-controller-manager</span><br><span class="line">    - --authentication-kubeconfig=/etc/kubernetes/controller-manager.conf</span><br><span class="line">    - --authorization-kubeconfig=/etc/kubernetes/controller-manager.conf</span><br><span class="line">...</span><br><span class="line">    - --allocate-node-cidrs=true</span><br><span class="line">    - --cluster-cidr=10.244.0.0/16</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ul><li>step2 </li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart kubelet</span><br></pre></td></tr></table></figure><h2 id="failed-to-set-bridge-addr-“cni0“-already-has-an-IP-address-different-from-xxx"><a href="#failed-to-set-bridge-addr-“cni0“-already-has-an-IP-address-different-from-xxx" class="headerlink" title="failed to set bridge addr: “cni0“ already has an IP address different from xxx"></a>failed to set bridge addr: “cni0“ already has an IP address different from xxx</h2><ul><li>check</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> node1</span></span><br><span class="line">cni0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 10.85.0.1  netmask 255.255.0.0  broadcast 10.85.255.255</span><br><span class="line">        ...</span><br><span class="line">flannel.1: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1450</span><br><span class="line">        inet 10.244.0.0  netmask 255.255.255.255  broadcast 0.0.0.0  </span><br><span class="line"><span class="meta">#</span><span class="bash"> node2</span></span><br><span class="line">cni0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 10.85.0.1  netmask 255.255.0.0  broadcast 10.85.255.255</span><br><span class="line">        ...</span><br><span class="line">flannel.1: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1450</span><br><span class="line">        inet 10.244.1.0  netmask 255.255.255.255  broadcast 0.0.0.0  </span><br><span class="line"><span class="meta">#</span><span class="bash"> node3</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> node2</span></span><br><span class="line">cni0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 10.85.0.1  netmask 255.255.0.0  broadcast 10.85.255.255</span><br><span class="line">        ...</span><br><span class="line">flannel.1: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1450</span><br><span class="line">        inet 10.244.2.0  netmask 255.255.255.255  broadcast 0.0.0.0  </span><br></pre></td></tr></table></figure><blockquote><p>cni0与flannel应该需要在一个网段里</p></blockquote><ul><li>delete <code>cni0 </code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> node1/node2/node3</span></span><br><span class="line">sudo ifconfig cni0 down </span><br><span class="line">sudo ip link delete cni0</span><br></pre></td></tr></table></figure><ul><li>restore <code>coredns</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> error info</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> kubectl get po -o wide -n kube-system</span></span><br><span class="line">NAME                                READY   STATUS             RESTARTS       AGE   IP             NODE  ...</span><br><span class="line">coredns-7b5944fdcf-mgwq2            0/1     CrashLoopBackOff   6 (2m3s ago)   15d   10.85.0.3      dingo7232 </span><br><span class="line">coredns-7b5944fdcf-sxfvt            0/1     CrashLoopBackOff   6 (2m8s ago)   15d   10.85.0.2      dingo7232 </span><br></pre></td></tr></table></figure><blockquote><p> delete coredns,  k8s system will auto recreate it </p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> kubectl get po -o wide -n kube-system</span></span><br><span class="line">NAME                                READY   STATUS    RESTARTS   AGE   IP             NODE...</span><br><span class="line">coredns-7b5944fdcf-fw87q            1/1     Running   0          11s   10.244.2.175   dingo7234   ...     </span><br><span class="line">coredns-7b5944fdcf-rzw9b            1/1     Running   0          22s   10.244.1.2     dingo7233   ...</span><br></pre></td></tr></table></figure><h3 id="namespace-Terminating"><a href="#namespace-Terminating" class="headerlink" title="namespace Terminating"></a>namespace Terminating</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> step1: check resource <span class="keyword">in</span> namespace</span></span><br><span class="line">kubectl api-resources --verbs=list --namespaced -o name | xargs -n 1 kubectl get -n &lt;your-ns-to-delete&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash"> e.g.: kubectl api-resources --verbs=list --namespaced -o name | xargs -n 1 kubectl get -n curve</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> step2: remove the finalizers</span></span><br><span class="line">kubectl -n &lt;namespace&gt; patch &lt;RessourceObject&gt; &lt;Object-name&gt; -p &#x27;&#123;&quot;metadata&quot;:&#123;&quot;finalizers&quot;:null&#125;&#125;&#x27; --type=merge</span><br><span class="line"><span class="meta">#</span><span class="bash"> e.g.: kubectl -n curve patch curvefs my-fscluster -p <span class="string">&#x27;&#123;&quot;metadata&quot;:&#123;&quot;finalizers&quot;:null&#125;&#125;&#x27;</span> --<span class="built_in">type</span>=merge</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;容器是一个“单进程”模型&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一个“容器”，实际上是一个由 Linux Namespace、Linux Cgroups 和 rootfs 三种技术构建出来的进程的隔离环境&lt;/p&gt;
&lt;p&gt;一个正在运行的 L</summary>
      
    
    
    
    <category term="Kubernetes" scheme="https://www.willshirley.top/categories/Kubernetes/"/>
    
    
    <category term="learn" scheme="https://www.willshirley.top/tags/learn/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes delploy</title>
    <link href="https://www.willshirley.top/2024/08/05/kubernetes%20deploy/"/>
    <id>https://www.willshirley.top/2024/08/05/kubernetes%20deploy/</id>
    <published>2024-08-04T16:37:47.000Z</published>
    <updated>2024-08-04T16:41:07.946Z</updated>
    
    <content type="html"><![CDATA[<h1 id="k8s-deploy"><a href="#k8s-deploy" class="headerlink" title="k8s deploy"></a>k8s deploy</h1><h2 id="install-kubelet-kubeadm-kubectl"><a href="#install-kubelet-kubeadm-kubectl" class="headerlink" title="install kubelet kubeadm kubectl"></a>install kubelet kubeadm kubectl</h2><ul><li>Step1</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Set SELinux <span class="keyword">in</span> permissive mode (effectively disabling it)</span></span><br><span class="line">sudo setenforce 0</span><br><span class="line">sudo sed -i &#x27;s/^SELINUX=enforcing$/SELINUX=permissive/&#x27; /etc/selinux/config</span><br></pre></td></tr></table></figure><ul><li>Step2</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;EOF | sudo tee /etc/yum.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=https://mirrors.ustc.edu.cn/kubernetes/core:/stable:/v1.30/rpm/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://mirrors.ustc.edu.cn/kubernetes/core:/stable:/v1.30/rpm/repodata/repomd.xml.key</span><br><span class="line">exclude=kubelet kubeadm kubectl cri-tools kubernetes-cni</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><ul><li>step3</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes</span><br><span class="line">sudo systemctl enable --now kubelet</span><br></pre></td></tr></table></figure><h2 id="install-Container-Runtimes"><a href="#install-Container-Runtimes" class="headerlink" title="install Container Runtimes"></a>install Container Runtimes</h2><blockquote><p><a href="https://www.cloudraft.io/blog/container-runtimes">https://www.cloudraft.io/blog/container-runtimes</a></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RuntimePath to Unix domain socket</span><br><span class="line">containerdunix:///var/run/containerd/containerd.sock</span><br><span class="line">CRI-Ounix:///var/run/crio/crio.sock</span><br><span class="line">Docker Engine (using cri-dockerd)unix:///var/run/cri-dockerd.sock</span><br></pre></td></tr></table></figure><ul><li>Enable ipv4 packet forward</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> sysctl params required by setup, params persist across reboots</span></span><br><span class="line">cat &lt;&lt;EOF | sudo tee /etc/sysctl.d/k8s.conf</span><br><span class="line">net.ipv4.ip_forward = 1</span><br><span class="line">EOF</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Apply sysctl params without reboot</span></span><br><span class="line">sudo sysctl --system</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Verify that net.ipv4.ip_forward is <span class="built_in">set</span> to 1</span></span><br><span class="line">sysctl net.ipv4.ip_forward</span><br></pre></td></tr></table></figure><ul><li>cgroup driver</li></ul><p>To set <code>systemd</code> as the cgroup driver, edit the <a href="https://kubernetes.io/docs/tasks/administer-cluster/kubelet-config-file/"><code>KubeletConfiguration</code></a> option of <code>cgroupDriver</code> and set it to <code>systemd</code>. For example:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">kubelet.config.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">KubeletConfiguration</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="attr">cgroupDriver:</span> <span class="string">systemd</span></span><br></pre></td></tr></table></figure><h3 id="containerd"><a href="#containerd" class="headerlink" title="containerd"></a>containerd</h3><ul><li><p>stop docker service (is necessary ?) </p></li><li><p>init config.toml</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo containerd config default | sudo tee /etc/containerd/config.toml</span><br></pre></td></tr></table></figure></li><li><p>config </p></li></ul><p>Configuring the <code>systemd</code> cgroup driver</p><p><code>sudo vim /etc/containerd/config.toml</code></p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#disabled_plugins = [&quot;cri&quot;]</span></span><br><span class="line"><span class="section">[plugins.&quot;io.containerd.grpc.v1.cri&quot;.containerd.runtimes.runc]</span></span><br><span class="line">  <span class="section">[plugins.&quot;io.containerd.grpc.v1.cri&quot;.containerd.runtimes.runc.options]</span></span><br><span class="line">    <span class="attr">SystemdCgroup</span> = <span class="literal">true</span></span><br><span class="line"><span class="section">[plugins.&quot;io.containerd.grpc.v1.cri&quot;]</span></span><br><span class="line">  <span class="attr">sandbox_image</span> = <span class="string">&quot;registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.9&quot;</span></span><br><span class="line">  <span class="section">[plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry]</span></span><br><span class="line">    <span class="section">[plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.mirrors]</span></span><br><span class="line">      <span class="section">[plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.mirrors.&quot;docker.io&quot;]</span></span><br><span class="line">        <span class="attr">endpoint</span>=[<span class="string">&quot;https://registry-1.docker.io&quot;</span>, <span class="string">&quot;https://xxx.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">      <span class="section">[plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.mirrors.&quot;registry.k8s.io&quot;]</span></span><br><span class="line">        <span class="attr">endpoint</span>=[<span class="string">&quot;https://xxx.mirror.aliyuncs.com&quot;</span>, <span class="string">&quot;https://k8s.m.daocloud.io&quot;</span>, <span class="string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span>,<span class="string">&quot;https://hub-mirror.c.163.com&quot;</span>]</span><br></pre></td></tr></table></figure><p><code>sudo systemctl restart containerd</code></p><ul><li><p>check containerd version</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">containerd --version</span><br><span class="line"><span class="meta">#</span><span class="bash"> containerd containerd.io 1.7.19</span> </span><br></pre></td></tr></table></figure></li></ul><h3 id="CRI-O"><a href="#CRI-O" class="headerlink" title="CRI-O"></a>CRI-O</h3><ul><li><p>set repo</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;EOF | sudo tee /etc/yum.repos.d/cri-o.repo</span><br><span class="line">[cri-o]</span><br><span class="line">name=CRI-O</span><br><span class="line">baseurl=https://mirrors.ustc.edu.cn/kubernetes/addons:/cri-o:/stable:/v1.30/rpm/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://mirrors.ustc.edu.cn/kubernetes/addons:/cri-o:/stable:/v1.30/rpm/repodata/repomd.xml.key</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li><li><p>install</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dnf install -y container-selinux</span><br><span class="line">dnf install -y cri-o</span><br><span class="line">systemctl start crio.service</span><br></pre></td></tr></table></figure></li><li><p>bootstrap cluster</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">swapoff -a</span><br><span class="line">modprobe br_netfilter</span><br><span class="line">sysctl -w net.ipv4.ip_forward=1</span><br><span class="line"></span><br><span class="line">kubeadm init</span><br></pre></td></tr></table></figure></li></ul><h3 id="Docker-Engine"><a href="#Docker-Engine" class="headerlink" title="Docker Engine"></a>Docker Engine</h3><ul><li><p>install docker (existing)</p></li><li><p>install <code>cri-dockerd</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> extract tgz</span></span><br><span class="line">tar -xzvf cri-dockerd-0.3.15.amd64.tgz</span><br><span class="line"></span><br><span class="line">sudo mv ./cri-dockerd /usr/local/bin/</span><br><span class="line">wget https://raw.githubusercontent.com/Mirantis/cri-dockerd/master/packaging/systemd/cri-docker.service</span><br><span class="line">wget https://raw.githubusercontent.com/Mirantis/cri-dockerd/master/packaging/systemd/cri-docker.socket</span><br><span class="line">sudo mv cri-docker.socket cri-docker.service /etc/systemd/system/</span><br><span class="line">sudo sed -i -e &#x27;s,/usr/bin/cri-dockerd,/usr/local/bin/cri-dockerd,&#x27; /etc/systemd/system/cri-docker.service</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">enable</span> service</span></span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl enable cri-docker.service</span><br><span class="line">sudo systemctl enable --now cri-docker.socket</span><br><span class="line">sudo systemctl status cri-docker.socket</span><br></pre></td></tr></table></figure></li></ul><h2 id="config-crictl"><a href="#config-crictl" class="headerlink" title="config crictl"></a>config crictl</h2><ul><li>Config containerd <code>vim /etc/crictl.yaml</code></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">runtime-endpoint:</span> <span class="string">unix:///run/containerd/containerd.sock</span></span><br><span class="line"><span class="attr">image-endpoint:</span> <span class="string">unix:///run/containerd/containerd.sock</span></span><br><span class="line"><span class="attr">timeout:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">debug:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">pull-image-on-create:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><ul><li>verify mirror</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo crictl info</span><br></pre></td></tr></table></figure><h2 id="kubeadm-deploy-cluster"><a href="#kubeadm-deploy-cluster" class="headerlink" title="kubeadm deploy cluster"></a>kubeadm deploy cluster</h2><h3 id="Initializing-control-plane-node"><a href="#Initializing-control-plane-node" class="headerlink" title="Initializing  control-plane node"></a>Initializing  control-plane node</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo kubeadm config images pull --config kubeadm.conf</span><br><span class="line"></span><br><span class="line">sudo kubeadm init --config kubeadm.conf</span><br></pre></td></tr></table></figure><ul><li><p>(optional) resert (back to kubeadm init)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo kubeadm reset --cri-socket unix:///var/run/containerd/containerd.sock</span><br></pre></td></tr></table></figure></li><li><p>Use kubectl</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p $HOME/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br></pre></td></tr></table></figure></li><li><p>check the CoreDNS Pod is <code>Running</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods --all-namespaces</span><br><span class="line"></span><br><span class="line">NAMESPACE     NAME                                READY   STATUS    RESTARTS   AGE</span><br><span class="line">kube-system   coredns-7b5944fdcf-mgwq2            1/1     Running   0          4h22m</span><br><span class="line">kube-system   coredns-7b5944fdcf-sxfvt            1/1     Running   0          4h22m</span><br><span class="line">kube-system   etcd-dingo7232                      1/1     Running   1          4h22m</span><br><span class="line">kube-system   kube-apiserver-dingo7232            1/1     Running   1          4h22m</span><br><span class="line">kube-system   kube-controller-manager-dingo7232   1/1     Running   1          4h22m</span><br><span class="line">kube-system   kube-proxy-w2lfk                    1/1     Running   0          4h22m</span><br><span class="line">kube-system   kube-scheduler-dingo7232            1/1     Running   1          4h22m</span><br></pre></td></tr></table></figure></li></ul><h3 id="join-node"><a href="#join-node" class="headerlink" title="join node"></a>join node</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo kubeadm join --token &lt;token&gt; &lt;control-plane-host&gt;:&lt;control-plane-port&gt; --discovery-token-ca-cert-hash sha256:&lt;hash&gt;</span><br></pre></td></tr></table></figure><ul><li>Check on control-plane</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get nodes</span><br></pre></td></tr></table></figure><h3 id="optional"><a href="#optional" class="headerlink" title="optional"></a>optional</h3><ul><li>other node use kubectl</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp root@&lt;control-plane-host&gt;:/etc/kubernetes/admin.conf .</span><br><span class="line">kubectl --kubeconfig ./admin.conf get nodes</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;k8s-deploy&quot;&gt;&lt;a href=&quot;#k8s-deploy&quot; class=&quot;headerlink&quot; title=&quot;k8s deploy&quot;&gt;&lt;/a&gt;k8s deploy&lt;/h1&gt;&lt;h2 id=&quot;install-kubelet-kubeadm-kubectl&quot;&gt;</summary>
      
    
    
    
    <category term="Kubernetes" scheme="https://www.willshirley.top/categories/Kubernetes/"/>
    
    
    <category term="deploy" scheme="https://www.willshirley.top/tags/deploy/"/>
    
  </entry>
  
  <entry>
    <title>shell bash</title>
    <link href="https://www.willshirley.top/2024/07/30/shell%20bash/"/>
    <id>https://www.willshirley.top/2024/07/30/shell%20bash/</id>
    <published>2024-07-30T10:39:34.000Z</published>
    <updated>2024-08-14T11:45:30.509Z</updated>
    
    <content type="html"><![CDATA[<ul><li>the shell assigns its <strong>exit code</strong> to the <code>$?</code> environment variable. The <code>$?</code> variable is how we usually test whether a script has succeeded or not in its execution.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;the shell assigns its &lt;strong&gt;exit code&lt;/strong&gt; to the &lt;code&gt;$?&lt;/code&gt; environment variable. The &lt;code&gt;$?&lt;/code&gt; variable is how w</summary>
      
    
    
    
    <category term="shell" scheme="https://www.willshirley.top/categories/shell/"/>
    
    
    <category term="bash" scheme="https://www.willshirley.top/tags/bash/"/>
    
  </entry>
  
  <entry>
    <title>GO learn</title>
    <link href="https://www.willshirley.top/2024/07/28/golang%20learn/"/>
    <id>https://www.willshirley.top/2024/07/28/golang%20learn/</id>
    <published>2024-07-28T07:08:28.000Z</published>
    <updated>2024-09-06T07:08:53.627Z</updated>
    
    <content type="html"><![CDATA[<h1 id="env"><a href="#env" class="headerlink" title="env"></a>env</h1><ul><li><code>GOPATH</code></li></ul><p><code>GOPATH</code> 是 Go 工作区的根目录，通常包含三个子目录：<code>src</code>、<code>pkg</code> 和 <code>bin</code></p><blockquote><p>可通过 go env GOPATH 查看Go 工作区的根目录。<code>GOPATH</code> 中的 <code>bin</code> 目录通常包含由 <code>go install</code>安装的可执行文件</p></blockquote><h1 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h1><h2 id="base"><a href="#base" class="headerlink" title="base"></a>base</h2><h3 id="sclice"><a href="#sclice" class="headerlink" title="sclice"></a>sclice</h3><ul><li>syntax <code>slice[low:high]</code></li><li>“take from 1 to the end” with <code>numbers[1:]</code>.</li></ul><h3 id="test"><a href="#test" class="headerlink" title="test"></a>test</h3><ul><li><code>go test -v</code></li><li><code>go test -cover</code></li></ul><h3 id="error"><a href="#error" class="headerlink" title="error"></a>error</h3><ul><li> errors are values, so we can refactor it out into a variable and have a single source of truth for it.</li></ul>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ErrInsufficientFunds = errors.New(<span class="string">&quot;cannot withdraw, insufficient funds&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(w *Wallet)</span> <span class="title">Withdraw</span><span class="params">(amount Bitcoin)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> amount &gt; w.balance &#123;</span><br><span class="line"><span class="keyword">return</span> ErrInsufficientFunds</span><br><span class="line">&#125;</span><br><span class="line">w.balance -= amount</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><a href="https://dave.cheney.net/2016/04/27/dont-just-check-errors-handle-them-gracefully">Don’t just check errors, handle them gracefully</a></li></ul><h3 id="pointer"><a href="#pointer" class="headerlink" title="pointer"></a>pointer</h3><blockquote><p><strong>when you call a function or a method the arguments are</strong> <em><strong>copied</strong></em>.</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//When calling func (w Wallet) Deposit(amount int) the w is a copy of whatever we called the method from.</span></span><br><span class="line"><span class="comment">//*Wallet rather than Wallet which you can read as &quot;a pointer to a wallet</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(w *Wallet)</span> <span class="title">Balance</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> (*w).balance</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>不可寻址的情况：</li></ul><ol><li><strong>不可变的</strong>值不可寻址。常量、基本类型的值字面量、字符串变量的值、函数以及方法的字面量都是如此。其实这样规定也有安全性方面的考虑。</li><li>绝大多数被视为<strong>临时结果</strong>的值都是不可寻址的。算术操作的结果值属于临时结果，针对值字面量的表达式结果值也属于临时结果。但有一个例外，对切片字面量的索引结果值虽然也属于临时结果，但却是可寻址的。</li><li>若拿到某值的指针可能会破坏程序的一致性，那么就是<strong>不安全的</strong>，该值就不可寻址。由于字典的内部机制，对字典的索引结果值的取址操作都是不安全的。另外，获取由字面量或标识符代表的函数或方法的地址显然也是不安全的。</li></ol><h3 id="assert"><a href="#assert" class="headerlink" title="assert"></a>assert</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">value, ok := <span class="keyword">interface</span>&#123;&#125;(container).(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span>)</span><br></pre></td></tr></table></figure><h3 id="data-type"><a href="#data-type" class="headerlink" title="data type"></a>data type</h3><ul><li>引用类型：切片、字典、通道、函数</li><li>值类型：数组、基础数据类型以及结构体类型</li></ul><h3 id="pointer-1"><a href="#pointer-1" class="headerlink" title="pointer"></a>pointer</h3><ul><li></li></ul><h1 id="tool"><a href="#tool" class="headerlink" title="tool"></a>tool</h1><ul><li><p>errcheck</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">errcheck .</span><br></pre></td></tr></table></figure></li></ul><h1 id="concurrency"><a href="#concurrency" class="headerlink" title="concurrency"></a>concurrency</h1><blockquote><p>Do not communicate by sharing memory; instead, share memory by communicating.</p></blockquote><h2 id="sync"><a href="#sync" class="headerlink" title="sync"></a>sync</h2><ul><li><p><code>Mutex</code> allows us to add locks to our data</p><blockquote><p>mutual exclusion，简称 mutex</p></blockquote></li><li><p><code>WaitGroup</code> is a means of waiting for goroutines to finish jobs</p></li><li><p><code>RWMutex</code> 读写锁</p></li></ul><h1 id="best-practise"><a href="#best-practise" class="headerlink" title="best practise"></a>best practise</h1><h2 id="directory"><a href="#directory" class="headerlink" title="directory"></a>directory</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">project-root/</span><br><span class="line">├── cmd/  # 包含项目的主要应用程序。每个应用程序都有一个单独的子目录。</span><br><span class="line">│   └── myapp/</span><br><span class="line">│       └── main.go  # 主应用程序入口点</span><br><span class="line">├── internal/  # 包含不希望其他项目导入的包</span><br><span class="line">│   ├── app/  # 应用程序的核心逻辑</span><br><span class="line">│   │   └── app.go</span><br><span class="line">│   ├── config/  # 配置相关代码</span><br><span class="line">│   │   └── config.go</span><br><span class="line">│   └── models/  # 数据模型</span><br><span class="line">│       └── user.go</span><br><span class="line">├── pkg/  # 可以被外部应用程序使用的库代码</span><br><span class="line">│   ├── database/  # 数据库操作相关代码</span><br><span class="line">│   │   └── database.go</span><br><span class="line">│   └── utils/  # 通用工具函数</span><br><span class="line">│       └── helper.go</span><br><span class="line">├── api/  # API相关的代码，如果项目提供API</span><br><span class="line">│   └── v1/</span><br><span class="line">│       └── api.go</span><br><span class="line">├── web/  # Web应用相关的文件，如模板和静态资产</span><br><span class="line">│   ├── templates/</span><br><span class="line">│   └── static/</span><br><span class="line">├── scripts/  # 各种工具脚本，如数据库迁移脚本</span><br><span class="line">│   └── migrate.go</span><br><span class="line">├── tests/  # 单元测试和集成测试</span><br><span class="line">│   └── app_test.go</span><br><span class="line">├── docs/  # 项目文档</span><br><span class="line">│   └── README.md</span><br><span class="line">├── go.mod  # Go模块文件</span><br><span class="line">├── go.sum</span><br><span class="line">├── .gitignore</span><br><span class="line">└── README.md</span><br></pre></td></tr></table></figure><h1 id="Paraphrasing"><a href="#Paraphrasing" class="headerlink" title="Paraphrasing"></a>Paraphrasing</h1><ul><li><p>Use channels when passing ownership of data</p></li><li><p>Use mutexes for managing state</p></li><li><p>名称的首字母为大写的程序实体才可以被当前包外的代码引用，否则它就只能被当前包内的其他代码引用。</p></li><li><p>一对不包裹任何东西的花括号，除了可以代表空的代码块之外，还可以用于表示不包含任何内容的数据结构（或者说数据类型）</p></li><li><p>函数类型属于引用类型，它的零值是<code>nil</code>。</p></li><li><p>结构体类型中的一个字段看作是它的一个属性或者一项数据，再把隶属于它的一个方法看作是附加在其中数据之上的一个能力或者一项操作。将属性及其能力（或者说数据及其操作）封装在一起，是面向对象编程（object-oriented programming）的一个主要原则。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;env&quot;&gt;&lt;a href=&quot;#env&quot; class=&quot;headerlink&quot; title=&quot;env&quot;&gt;&lt;/a&gt;env&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;GOPATH&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;GOPATH&lt;/code&gt; 是 Go 工</summary>
      
    
    
    
    <category term="GO" scheme="https://www.willshirley.top/categories/GO/"/>
    
    
    <category term="learn" scheme="https://www.willshirley.top/tags/learn/"/>
    
  </entry>
  
  <entry>
    <title>code thought</title>
    <link href="https://www.willshirley.top/2024/07/25/code%20thought/"/>
    <id>https://www.willshirley.top/2024/07/25/code%20thought/</id>
    <published>2024-07-25T07:12:13.000Z</published>
    <updated>2024-08-01T11:33:10.918Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TDD"><a href="#TDD" class="headerlink" title="TDD"></a>TDD</h2><p>TDD, or Test-Driven Development, is a software development process that involves writing automated tests before writing the actual code. In other words, you write the test first, and then you implement the code to make the test pass.</p><p>Here’s how it typically works:</p><ol><li><p><strong>Write a test</strong>: You write an automated test that covers a specific piece of functionality or behavior in your system.</p></li><li><p><strong>Run the test and see it fail</strong>: Since you haven’t implemented the code yet, the test will naturally fail.</p></li><li><p><strong>Write the code</strong>: You then implement the code to make the test pass. This is where you write the actual logic, algorithms, or whatever is needed to satisfy the requirements of the test.</p></li><li><p><strong>Run the test and see it pass</strong>: Now that you’ve written the code, run the test again, and if everything is correct, the test should pass!</p></li><li><p><strong>Refactor the code (if needed)</strong>: If there are any issues with the code or if you can improve the design, you refactor the code to make it more maintainable, efficient, or easier to understand.</p></li></ol><p>The key benefits of TDD include:</p><ol><li><p><strong>Improved code quality</strong>: Writing tests before writing code ensures that your code is robust and meets the requirements.</p></li><li><p><strong>Reduced bugs</strong>: By testing each piece of functionality thoroughly, you can catch errors early on, reducing the overall number of bugs in your system.</p></li><li><p><strong>Faster development</strong>: TDD helps you focus on implementing only what’s necessary to pass the test, making your development process more efficient.</p></li><li><p><strong>Better design</strong>: The process of writing tests and then implementing code encourages good design principles, such as separation of concerns, modularity, and maintainability.</p></li></ol><p>TDD is often used in conjunction with other testing methodologies, like unit testing, integration testing, or acceptance testing, to ensure that your software system is thoroughly tested and reliable.</p><h1 id="idea"><a href="#idea" class="headerlink" title="idea"></a>idea</h1><ul><li><p><a href="http://wiki.c2.com/?MakeItWorkMakeItRightMakeItFast">Make it work, make it right, make it fast</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Where &#x27;work&#x27; is making the tests pass, &#x27;right&#x27; is refactoring the code, and &#x27;fast&#x27; is optimizing the code to make it, for example, run quickly. We can only &#x27;make it fast&#x27; once we&#x27;ve made it work and made it right. We were lucky that the code we were given was already demonstrated to be working, and didn&#x27;t need to be refactored. We should never try to &#x27;make it fast&#x27; before the other two steps have been performed because[Premature optimization is the root of all evil](http://wiki.c2.com/?PrematureOptimization)</span><br></pre></td></tr></table></figure></li><li><p><a href="https://en.wikipedia.org/wiki/If_it_ain't_broke,_don't_fix_it">If it ain’t broke, don’t fix it</a> </p></li><li><p><a href="https://en.wikipedia.org/wiki/KISS_principle">KISS principle</a> </p></li><li><p><a href="https://en.wikipedia.org/wiki/Don't_repeat_yourself">Don’t repeat yourself</a> </p></li><li><p><a href="https://en.wikipedia.org/wiki/Feature_creep">Feature creep</a> </p></li><li><p><a href="https://en.wikipedia.org/wiki/List_of_software_development_philosophies">List of software development philosophies</a> -</p></li><li><p><a href="https://en.wikipedia.org/wiki/Minimum_viable_product">Minimum viable product</a></p></li><li><p><a href="https://en.wikipedia.org/wiki/MoSCoW_method">MoSCoW method</a> </p></li><li><p><a href="https://en.wikipedia.org/wiki/Overengineering">Overengineering</a> </p></li><li><p><a href="https://en.wikipedia.org/wiki/Worse_is_better">Worse is better</a> </p></li><li><p><a href="https://en.wikipedia.org/wiki/SOLID">S.O.L.I.D.</a></p></li><li><p><a href="https://en.wikipedia.org/wiki/Unix_philosophy">Unix philosophy</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;TDD&quot;&gt;&lt;a href=&quot;#TDD&quot; class=&quot;headerlink&quot; title=&quot;TDD&quot;&gt;&lt;/a&gt;TDD&lt;/h2&gt;&lt;p&gt;TDD, or Test-Driven Development, is a software development process</summary>
      
    
    
    
    <category term="code" scheme="https://www.willshirley.top/categories/code/"/>
    
    
    <category term="thought" scheme="https://www.willshirley.top/tags/thought/"/>
    
  </entry>
  
  <entry>
    <title>curve</title>
    <link href="https://www.willshirley.top/2024/07/24/curve/"/>
    <id>https://www.willshirley.top/2024/07/24/curve/</id>
    <published>2024-07-24T02:11:19.241Z</published>
    <updated>2024-07-28T07:10:47.090Z</updated>
    
    <content type="html"><![CDATA[<p>TBD</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;TBD&lt;/p&gt;
</summary>
      
    
    
    
    <category term="curve" scheme="https://www.willshirley.top/categories/curve/"/>
    
    
    <category term="learn" scheme="https://www.willshirley.top/tags/learn/"/>
    
  </entry>
  
  <entry>
    <title>jwt points</title>
    <link href="https://www.willshirley.top/2024/06/27/jwt/"/>
    <id>https://www.willshirley.top/2024/06/27/jwt/</id>
    <published>2024-06-27T02:58:13.000Z</published>
    <updated>2024-07-21T04:18:53.510Z</updated>
    
    <content type="html"><![CDATA[<p>JWT 由三个部分组成，用 . 分隔：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJrZXkiOiJ1c2VyLWtleSIsImV4cCI6MTU2NDA1MDgxMX0.Us8zh_4VjJXF-TmR5f8cif8mBU7SuefPlpxhH0jbPVI</span><br></pre></td></tr></table></figure><p>​    1.    Header（头部）：eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9</p><p>​    2.    Payload（负载）：eyJrZXkiOiJ1c2VyLWtleSIsImV4cCI6MTU2NDA1MDgxMX0</p><p>​    3.    Signature（签名）：Us8zh_4VjJXF-TmR5f8cif8mBU7SuefPlpxhH0jbPVI</p><ul><li><p><strong>可直接使用 Base64 解码 Header 和 Payload</strong></p></li><li><p><strong>signature验签</strong></p><p>使用 Header里面的算法验证签名需要用到与签名时相同的密钥（公钥）。以下是验证签名的示例代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hmac</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">verify_signature</span>(<span class="params">header, payload, secret, signature</span>):</span></span><br><span class="line">    message = <span class="string">f&quot;<span class="subst">&#123;header&#125;</span>.<span class="subst">&#123;payload&#125;</span>&quot;</span></span><br><span class="line">    expected_signature = hmac.new(secret.encode(), message.encode(), hashlib.sha256).digest()</span><br><span class="line">    expected_signature_base64 = base64.urlsafe_b64encode(expected_signature).rstrip(<span class="string">b&#x27;=&#x27;</span>).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> hmac.compare_digest(expected_signature_base64, signature)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例密钥（替换为实际的密钥）</span></span><br><span class="line">secret = <span class="string">&quot;your-256-bit-secret&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证签名</span></span><br><span class="line">is_valid = verify_signature(header, payload, secret, signature)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Signature is valid: <span class="subst">&#123;is_valid&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;JWT 由三个部分组成，用 . 分隔：&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;</summary>
      
    
    
    
    <category term="jwt" scheme="https://www.willshirley.top/categories/jwt/"/>
    
    
    <category term="learn" scheme="https://www.willshirley.top/tags/learn/"/>
    
  </entry>
  
  <entry>
    <title>casdoor point</title>
    <link href="https://www.willshirley.top/2024/06/05/casdoor/"/>
    <id>https://www.willshirley.top/2024/06/05/casdoor/</id>
    <published>2024-06-05T09:42:30.000Z</published>
    <updated>2024-07-24T06:04:09.675Z</updated>
    
    <content type="html"><![CDATA[<h2 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a>deploy</h2><ul><li><p>docker</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -d -p 18000:8000 \</span><br><span class="line">  -v /usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro \</span><br><span class="line">  -v /home/dingodb/dongwei/docker/timezone:/etc/timezone:ro \</span><br><span class="line">  casbin/casdoor-all-in-one</span><br></pre></td></tr></table></figure><blockquote><p>容器内部服务端口8000，映射成对外访问接端口 18000</p></blockquote></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;deploy&quot;&gt;&lt;a href=&quot;#deploy&quot; class=&quot;headerlink&quot; title=&quot;deploy&quot;&gt;&lt;/a&gt;deploy&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;docker&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;t</summary>
      
    
    
    
    <category term="casdoor" scheme="https://www.willshirley.top/categories/casdoor/"/>
    
    
    <category term="point" scheme="https://www.willshirley.top/tags/point/"/>
    
  </entry>
  
  <entry>
    <title>oauth2 practise</title>
    <link href="https://www.willshirley.top/2024/05/31/oauth2/"/>
    <id>https://www.willshirley.top/2024/05/31/oauth2/</id>
    <published>2024-05-31T10:04:12.000Z</published>
    <updated>2024-06-02T09:40:33.732Z</updated>
    
    <content type="html"><![CDATA[<h2 id="overview"><a href="#overview" class="headerlink" title="overview"></a>overview</h2><h3 id="OAuth-2-0-terminology"><a href="#OAuth-2-0-terminology" class="headerlink" title="OAuth 2.0 terminology"></a>OAuth 2.0 terminology</h3><ul><li><strong>Resource Owner</strong>: Entity that can grant access to a protected resource. Typically, this is the end-user.</li><li><strong>Client</strong>: Application requesting access to a protected resource on behalf of the Resource Owner.</li><li><strong>Resource Server</strong>: Server hosting the protected resources. This is the API you want to access.</li><li><strong>Authorization Server</strong>: Server that authenticates the Resource Owner and issues Access Tokens after getting proper authorization. In this case, Auth0.</li><li><strong>User Agent</strong>: Agent used by the Resource Owner to interact with the Client (for example, a browser or a native application).</li></ul><p><img src="/images/security/user-journey-oauth.webp" alt="user-journey-oauth"></p><p>The best practice for implementing OAuth2 in a web application with a separate frontend and backend is to use the Backend for Frontend (BFF) pattern. Here’s how it works:</p><p>The frontend (e.g. a Single Page Application) initiates the OAuth2 flow by redirecting the user to the OAuth2 provider’s authorization endpoint. The provider then authenticates the user and redirects back to the frontend with an authorization code.</p><p>The frontend then sends this authorization code to the backend over a secure channel (e.g. HTTPS). The backend acts as a confidential client and exchanges the authorization code with the OAuth2 provider for an access token and refresh token.[1][3]</p><p>The backend stores the tokens securely and returns an opaque session cookie or token to the frontend. This session identifier represents the authenticated user session.[1]</p><p>For subsequent API requests, the frontend includes the session cookie/token. The backend validates the session and retrieves the access token, using it to authenticate the request to the backend API or other third-party APIs on behalf of the user.[1][3]</p><p>This pattern has several advantages:</p><ol><li><p>The access token is never exposed to the frontend, mitigating the risk of token theft.[1][3]</p></li><li><p>The backend can securely store and manage the refresh of access tokens without involving the frontend.[3]</p></li><li><p>The backend can act as a gatekeeper, validating requests and enforcing authorization rules before proxying to third-party APIs.[3]</p></li><li><p>The frontend only needs to handle the initial OAuth2 redirect and session management, simplifying its code.[1]</p></li></ol><p>To implement this, the backend must be registered as a confidential OAuth2 client with the provider. The frontend can use libraries like Auth0 or Google’s client-side libraries to initiate the OAuth2 flow.[1][4] The backend handles the code exchange and token management, often using server-side OAuth2 libraries or middleware.[1]</p><p>Citations:<br>[1] <a href="https://auth0.com/blog/backend-for-frontend-pattern-with-auth0-and-dotnet/">https://auth0.com/blog/backend-for-frontend-pattern-with-auth0-and-dotnet/</a><br>[2] <a href="https://community.qlik.com/t5/New-to-Qlik-Analytics/How-to-Secure-Backend-API-Endpoints-on-the-Front-End-Best/td-p/2423853">https://community.qlik.com/t5/New-to-Qlik-Analytics/How-to-Secure-Backend-API-Endpoints-on-the-Front-End-Best/td-p/2423853</a><br>[3] <a href="https://auth0.com/blog/the-backend-for-frontend-pattern-bff/">https://auth0.com/blog/the-backend-for-frontend-pattern-bff/</a><br>[4] <a href="https://infisical.com/blog/guide-to-implementing-oauth2">https://infisical.com/blog/guide-to-implementing-oauth2</a><br>[5] <a href="https://www.reddit.com/r/node/comments/skmjjn/0auth_implemented_on_frontend_or_backend/">https://www.reddit.com/r/node/comments/skmjjn/0auth_implemented_on_frontend_or_backend/</a></p><hr><p>reference</p><ul><li><a href="https://auth0.com/docs/get-started/authentication-and-authorization-flow/which-oauth-2-0-flow-should-i-use">https://auth0.com/docs/get-started/authentication-and-authorization-flow/which-oauth-2-0-flow-should-i-use</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;overview&quot;&gt;&lt;a href=&quot;#overview&quot; class=&quot;headerlink&quot; title=&quot;overview&quot;&gt;&lt;/a&gt;overview&lt;/h2&gt;&lt;h3 id=&quot;OAuth-2-0-terminology&quot;&gt;&lt;a href=&quot;#OAuth-2-</summary>
      
    
    
    
    <category term="oauth2" scheme="https://www.willshirley.top/categories/oauth2/"/>
    
    
    <category term="pracise" scheme="https://www.willshirley.top/tags/pracise/"/>
    
  </entry>
  
  <entry>
    <title>python pytest</title>
    <link href="https://www.willshirley.top/2024/05/20/python%20pytest/"/>
    <id>https://www.willshirley.top/2024/05/20/python%20pytest/</id>
    <published>2024-05-20T07:21:43.000Z</published>
    <updated>2024-06-03T10:22:44.269Z</updated>
    
    <content type="html"><![CDATA[<h2 id="test"><a href="#test" class="headerlink" title="test"></a>test</h2><ul><li><p>查看测试详情</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest -v</span><br></pre></td></tr></table></figure></li><li><p>测试信息打印</p><blockquote><p>默认情况下，pytest 会捕获所有的输出。这意味着在测试运行期间， <code>print</code> 语句的输出不会显示在控制台上。</p><p>如果想看到 <code>print</code> 语句的输出，需要使用 <code>-s</code> 选项来告诉 pytest 不要捕获输出</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest -s test_web_base.py</span><br></pre></td></tr></table></figure></li><li><p>测试指定方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest tests/unit_tests/document_loaders/test_web_base.py::类名::方法名</span><br></pre></td></tr></table></figure></li><li><p>测试被标记的方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@pytest.mark.finished</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_func1</span>():</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="number">1</span> == <span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest -m finished tests/test-function/test_with_mark.py</span><br></pre></td></tr></table></figure></li><li><p>生成测试报告</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest --html=report.html</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;test&quot;&gt;&lt;a href=&quot;#test&quot; class=&quot;headerlink&quot; title=&quot;test&quot;&gt;&lt;/a&gt;test&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;查看测试详情&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr</summary>
      
    
    
    
    <category term="python" scheme="https://www.willshirley.top/categories/python/"/>
    
    
    <category term="pytest" scheme="https://www.willshirley.top/tags/pytest/"/>
    
  </entry>
  
  <entry>
    <title>copilot</title>
    <link href="https://www.willshirley.top/2024/03/13/copilot/"/>
    <id>https://www.willshirley.top/2024/03/13/copilot/</id>
    <published>2024-03-13T02:00:52.000Z</published>
    <updated>2024-08-30T07:12:47.605Z</updated>
    
    <content type="html"><![CDATA[<h1 id="keywords"><a href="#keywords" class="headerlink" title="keywords"></a>keywords</h1><ul><li><p>提示内容写入 ➡️</p></li><li><p>下一个提示 <code>option + ]</code>，上一个提示 <code>option + [</code></p></li><li><p>接收一行<code>command + 右方向</code> ，多行 <code>control/fn + command + 右方向</code></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;keywords&quot;&gt;&lt;a href=&quot;#keywords&quot; class=&quot;headerlink&quot; title=&quot;keywords&quot;&gt;&lt;/a&gt;keywords&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;提示内容写入 ➡️&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;下一个提示 &lt;cod</summary>
      
    
    
    
    <category term="copilot" scheme="https://www.willshirley.top/categories/copilot/"/>
    
    
    <category term="assistant" scheme="https://www.willshirley.top/tags/assistant/"/>
    
  </entry>
  
  <entry>
    <title>GPU learn</title>
    <link href="https://www.willshirley.top/2024/03/08/GPU%20learn/"/>
    <id>https://www.willshirley.top/2024/03/08/GPU%20learn/</id>
    <published>2024-03-08T02:08:49.000Z</published>
    <updated>2024-03-08T02:28:58.252Z</updated>
    
    <content type="html"><![CDATA[<h1 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h1><ul><li><p>查看卡的数量</p><p><code>nvidia-smi -L</code></p></li><li><p>查看显卡上运行的程序，以及所占内存情况</p><p><code>nvidia-smi --query-compute-apps=pid,process_name,used_memory,gpu_uuid --format=csv</code></p></li><li><p>查看显卡所剩内存</p><p><code>nvidia-smi --query-gpu=memory.free --format=csv,noheader,nounits</code></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;命令&quot;&gt;&lt;a href=&quot;#命令&quot; class=&quot;headerlink&quot; title=&quot;命令&quot;&gt;&lt;/a&gt;命令&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;查看卡的数量&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nvidia-smi -L&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;查看显</summary>
      
    
    
    
    <category term="GPU" scheme="https://www.willshirley.top/categories/GPU/"/>
    
    
    <category term="learn" scheme="https://www.willshirley.top/tags/learn/"/>
    
  </entry>
  
  <entry>
    <title>python pkg</title>
    <link href="https://www.willshirley.top/2024/03/05/python%20pkg/"/>
    <id>https://www.willshirley.top/2024/03/05/python%20pkg/</id>
    <published>2024-03-05T03:44:46.000Z</published>
    <updated>2024-08-14T09:08:39.207Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pydanic"><a href="#pydanic" class="headerlink" title="pydanic"></a>pydanic</h1><h2 id="model-validator"><a href="#model-validator" class="headerlink" title="model_validator"></a>model_validator</h2><blockquote><p><code>model_validator</code> 是 Pydantic 库提供的一个装饰器，用于定义模型验证器函数。模型验证器函数是一种特殊的方法，用于在创建模型实例或更新模型属性时执行自定义的验证逻辑。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@model_validator(<span class="params">mode=<span class="string">&quot;after&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">validate_engine_and_run_func</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="keyword">if</span> self.search_engine <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        self.search_engine = SearchEngine.from_search_config(self.config.search, proxy=self.config.proxy)</span><br><span class="line">    <span class="keyword">return</span> self</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@model_validator(<span class="params">mode=<span class="string">&quot;before&quot;</span></span>)</span></span><br><span class="line"><span class="meta">@classmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">validate_google</span>(<span class="params">cls, values: <span class="built_in">dict</span></span>) -&gt; <span class="built_in">dict</span>:</span></span><br><span class="line">  ...</span><br><span class="line">  </span><br><span class="line">其中values 是实例化对象的所有参数</span><br></pre></td></tr></table></figure><h1 id="sqlmodel"><a href="#sqlmodel" class="headerlink" title="sqlmodel"></a>sqlmodel</h1><h2 id="单个实体转换为字典"><a href="#单个实体转换为字典" class="headerlink" title="单个实体转换为字典"></a>单个实体转换为字典</h2><ul><li>方式一</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将实例对象转换为字典，排除未设置值的字段</span></span><br><span class="line">entity_dict = entity.<span class="built_in">dict</span>(exclude_unset=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><blockquote><p>使用 Pydantic 模型对象的一个方法，用于将模型对象转换为字典形式。<code>exclude_unset=True</code> 参数是用来控制是否排除未设置的属性字段。当设置为 <code>True</code> 时，将排除那些未设置值的字段，即只包含已经设置值的字段。</p></blockquote><ul><li><p>方式二：</p><p>遍历字典（对没有设置的字段进行默认值设置，设置排查某字段放入字典）</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> user_group_data.<span class="built_in">dict</span>(exclude_unset=<span class="literal">True</span>, exclude=&#123;<span class="string">&quot;team_roles&quot;</span>&#125;).items():</span><br><span class="line"><span class="keyword">if</span> value <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line"><span class="built_in">setattr</span>(user_group, key, value)</span><br></pre></td></tr></table></figure><ul><li>方式三</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">resourceCreate: ResourceCreate</span><br><span class="line">...</span><br><span class="line">resource = Resource(**resourceCreate.<span class="built_in">dict</span>())</span><br></pre></td></tr></table></figure><h2 id="单个实体与实体转换"><a href="#单个实体与实体转换" class="headerlink" title="单个实体与实体转换"></a>单个实体与实体转换</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">role_update: RoleUpdate</span><br><span class="line">...</span><br><span class="line">role = Role.from_orm(role_update)</span><br></pre></td></tr></table></figure><h2 id="列表实体转换为字典列表"><a href="#列表实体转换为字典列表" class="headerlink" title="列表实体转换为字典列表"></a>列表实体转换为字典列表</h2><ul><li>方式一 <strong>session.query</strong> </li></ul><blockquote><p>在直接返回 查询结构的时候，优先使用，可以直接把结果转为json（e.g. res_json = jsonable_encoder(res_data)）</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">db_rel_usergroup_roles = (session.query(RelUserGroupUser.user_id, Role.<span class="built_in">id</span>, Role.name, Role.nick_name, Role.label)</span><br><span class="line">                             .join(RelUsergroupRole, RelUserGroupUser.usergroup_id == RelUsergroupRole.usergroup_id)</span><br><span class="line">                             .join(Role, RelUsergroupRole.role_id == Role.<span class="built_in">id</span>)</span><br><span class="line">                             .<span class="built_in">filter</span>(RelUserGroupUser.user_id == user_id)</span><br><span class="line">                             .<span class="built_in">all</span>())</span><br><span class="line">        rel_usergroup_roles_info = []</span><br><span class="line">        <span class="keyword">for</span> rel_usergroup_role <span class="keyword">in</span> db_rel_usergroup_roles:</span><br><span class="line">            rel_usergroup_roles_info.append(Role(</span><br><span class="line">                <span class="built_in">id</span>=rel_usergroup_role[<span class="number">1</span>],</span><br><span class="line">                name=rel_usergroup_role[<span class="number">2</span>],</span><br><span class="line">                nick_name=rel_usergroup_role[<span class="number">3</span>],</span><br><span class="line">                label=rel_usergroup_role[<span class="number">4</span>]</span><br><span class="line">            ))</span><br><span class="line">        <span class="keyword">return</span> rel_usergroup_roles_info</span><br></pre></td></tr></table></figure><ul><li>方式二 <strong>session.exec</strong></li></ul><blockquote><p>在需要特殊处理查询的不同字段信息时，优先使用此方法</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">rel_usergroup_user_list = session.<span class="built_in">exec</span>(</span><br><span class="line">            select(RelUserGroupUser.usergroup_id, RelUserGroupUser.user_id, UserGroup.name, UserGroup.label, UserGroup.remark)</span><br><span class="line">            .where(RelUserGroupUser.user_id == user_id)</span><br><span class="line">            .join(UserGroup, UserGroup.<span class="built_in">id</span> == RelUserGroupUser.usergroup_id)</span><br><span class="line">        ).<span class="built_in">all</span>()</span><br><span class="line">        converted_list = []</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> rel_usergroup_user_list:</span><br><span class="line">            converted_obj = RelUserGroupUserRead(</span><br><span class="line">                user_id=row.user_id,</span><br><span class="line">                usergroup_id=row.usergroup_id,</span><br><span class="line">                usergroup_name=row.name,</span><br><span class="line">                usergroup_label=row.label</span><br><span class="line">            )</span><br><span class="line">            converted_list.append(converted_obj)</span><br><span class="line">        <span class="keyword">return</span> converted_list</span><br></pre></td></tr></table></figure><ul><li></li></ul><h2 id="查询过滤"><a href="#查询过滤" class="headerlink" title="查询过滤"></a>查询过滤</h2><ul><li><p>筛选条件为或条件</p></li><li><p>```python<br>resource_list = session.query(Resource).filter(or_(Resource.type == “menu”, Resource.type == “element”)).all()</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## update操作</span><br><span class="line"></span><br><span class="line">如果提前有 `session.get(entity, id)`，那后续在修改相关表属性`enitty.colx = xxx` 之后，需要紧接`session.add(entity)`</span><br><span class="line"></span><br><span class="line">### session的获取</span><br><span class="line"></span><br><span class="line">在使用 SQLModel 进行数据库操作时，可以使用上下文管理器 `with Session(engine) as session` 来创建并管理数据库会话。这样可以确保会话在使用完毕后会被正确关闭，释放数据库连接资源。</span><br><span class="line"></span><br><span class="line">在例如 `async def delete_user(*, user_id: int, session: Session = Depends(get_session)):`中，`session` 参数是通过 `Depends(get_session)` 进行依赖注入的，FastAPI 框架会负责在请求处理函数执行完毕后自动关闭会话。所以在请求逻辑中，你不需要手动关闭会话连接。</span><br><span class="line"></span><br><span class="line">## in_语法使用</span><br><span class="line"></span><br><span class="line">## session.exec vs session.query</span><br><span class="line"></span><br><span class="line">在SQLAlchemy中，`session.query`和`session.exec`都可以用来执行SQL查询。然而，它们之间有一些关键的区别。</span><br><span class="line"></span><br><span class="line">`session.query`是SQLAlchemy ORM的一部分，它返回的是模型对象。这意味着你可以使用Python的属性和方法来访问和操作返回的数据。这对于编写面向对象的代码非常有用。</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">users = session.query(User).filter(User.name == &#x27;John&#x27;).all()</span><br><span class="line">for user in users:</span><br><span class="line">    print(user.id, user.name)</span><br></pre></td></tr></table></figure></li></ul><p>另一方面，<code>session.exec</code>是SQLAlchemy Core的一部分，它返回的是原始的SQL结果。这意味着你需要使用列名作为字符串来访问返回的数据。这对于执行复杂的SQL查询或者需要更接近SQL的性能优化可能更有用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">result = session.<span class="built_in">exec</span>(select(User).where(User.name == <span class="string">&#x27;John&#x27;</span>))</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> result:</span><br><span class="line">    <span class="built_in">print</span>(row[<span class="string">&#x27;id&#x27;</span>], row[<span class="string">&#x27;name&#x27;</span>])</span><br></pre></td></tr></table></figure><p>总的来说:</p><p>如果正在编写面向对象的代码，或者查询相对简单，那么<code>session.query</code>可能是更好的选择。</p><p>如果需要执行复杂的SQL查询，或者需要更接近SQL的性能优化，那么<code>session.exec</code>可能是更好的选择。</p><h1 id="auth"><a href="#auth" class="headerlink" title="auth"></a>auth</h1><blockquote><p>Security is always excessive until it’s not enough.</p></blockquote><h2 id="fastapi-jwt-auth"><a href="#fastapi-jwt-auth" class="headerlink" title="fastapi jwt auth"></a>fastapi jwt auth</h2><p>在 FastAPI JWT Auth 中，Refresh Token（刷新令牌）和 Access Token（访问令牌）是两种不同的令牌，用于实现认证和授权机制。</p><ol><li>Access Token（访问令牌）：Access Token 是一个短期的令牌，用于验证用户的身份并授权用户访问受保护的资源。Access Token 是通过用户提供的凭证（如用户名和密码）进行身份验证后生成的，通常具有较短的有效期（例如几分钟或几小时）。客户端在每次请求受保护的资源时，需要在请求的头部或请求参数中携带 Access Token，以证明其有权访问该资源。</li><li>Refresh Token（刷新令牌）：Refresh Token 是一个长期有效的令牌，用于在 Access Token 过期后重新获取新的 Access Token。当 Access Token 过期时，客户端可以使用 Refresh Token 向服务器发送请求来获取新的 Access Token，而无需重新提供用户名和密码等凭证。通常情况下，Refresh Token 的有效期要比 Access Token 更长。</li></ol><p>使用 Refresh Token 的主要目的是增强安全性和减少频繁的身份验证操作。通过将 Access Token 的有效期设置较短，可以降低令牌泄露的风险。当 Access Token 过期时，使用 Refresh Token 获取新的 Access Token，这样可以减少频繁地要求用户重新提供凭证的情况。</p><p>一般的流程是，客户端在进行身份验证后会收到一个 Access Token 和一个 Refresh Token。客户端使用 Access Token 来访问受保护的资源，当 Access Token 过期时，客户端使用 Refresh Token 向服务器请求新的 Access Token。</p><p>FastAPI JWT Auth 提供了相应的功能和装饰器来处理 Access Token 和 Refresh Token 的生成、验证和刷新等操作，以方便实现 JWT 认证和授权。</p><p>refresh tokens <strong>cannot access</strong> an endpoint that is protected with <strong>jwt_required()</strong>, <strong>jwt_optional()</strong>, and <strong>fresh_jwt_required()</strong> </p><p>access tokens <strong>cannot access</strong> an endpoint that is protected with <strong>jwt_refresh_token_required()</strong>.</p><ul><li>Refresh Tokens</li></ul><p>These are long-lived tokens which can be used to create a new access tokens once an old access token has expired. </p><h1 id="TBD"><a href="#TBD" class="headerlink" title="TBD"></a>TBD</h1><ul><li>fire</li><li>networkx</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;pydanic&quot;&gt;&lt;a href=&quot;#pydanic&quot; class=&quot;headerlink&quot; title=&quot;pydanic&quot;&gt;&lt;/a&gt;pydanic&lt;/h1&gt;&lt;h2 id=&quot;model-validator&quot;&gt;&lt;a href=&quot;#model-validator&quot; c</summary>
      
    
    
    
    <category term="python" scheme="https://www.willshirley.top/categories/python/"/>
    
    
    <category term="pkg" scheme="https://www.willshirley.top/tags/pkg/"/>
    
  </entry>
  
  <entry>
    <title>llm agent</title>
    <link href="https://www.willshirley.top/2024/01/24/llm%20agent/"/>
    <id>https://www.willshirley.top/2024/01/24/llm%20agent/</id>
    <published>2024-01-24T04:21:30.000Z</published>
    <updated>2024-08-14T11:42:40.054Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Agent = Large Language Model (LLM) + Observation + Thought + Action + Memory</p><p>MultiAgent = Agents + Environment + Standard Operating Procedure (SOP) + Communication + Economy</p><p>ReAct<a href="https://learnprompting.org/zh-Hans/docs/advanced_applications/react#fn-1">1</a>(reason, act) 是一种使用自然语言推理解决复杂任务的语言模型范例，ReAct旨在用于允许LLM执行某些操作的任务</p></blockquote><h1 id="AutoGPT"><a href="#AutoGPT" class="headerlink" title="AutoGPT"></a>AutoGPT</h1><p><img src="/images/llm/How-Does-AutoGPT-Work.webp"></p><h2 id="env"><a href="#env" class="headerlink" title="env"></a>env</h2><ul><li><code>poetry shell</code> &amp; <code>poetry install</code></li><li><code>autogpts/autogpt/.env</code></li></ul><h2 id="command"><a href="#command" class="headerlink" title="command"></a>command</h2><h3 id="CLI-mode"><a href="#CLI-mode" class="headerlink" title="CLI mode"></a>CLI mode</h3><ul><li><p><code>autogpt.sh run</code></p><blockquote><p>This mode allows running a single agent, and saves the agent’s state when terminated. This means you can <em>resume</em> agents at a later time.</p></blockquote></li><li><p><code>autogpt.sh run --speak</code></p></li></ul><h2 id="Agent-Protocol-mode"><a href="#Agent-Protocol-mode" class="headerlink" title="Agent Protocol mode"></a>Agent Protocol mode</h2><ul><li><p><code>autogpt.sh server</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">1. Enter the task that you want AutoGPT to execute, with as much detail as possible:</span><br><span class="line"></span><br><span class="line">2. 2024-03-05 18:19:06,466 INFO  HTTP Request: POST https://openkey.cloud/v1/chat/completions &quot;HTTP/1.1 200 OK&quot;</span><br><span class="line">2024-03-05 18:19:06,470 INFO  Current AI Settings: </span><br><span class="line">2024-03-05 18:19:06,470 INFO  -------------------: </span><br><span class="line">2024-03-05 18:19:06,470 INFO  Name : CodeHelperGPT</span><br><span class="line">2024-03-05 18:19:06,470 INFO  Role : an intelligent programming assistant designed to help coders by offering coding advice, debugging support, and explaining concepts in an accessible manner.</span><br><span class="line">2024-03-05 18:19:06,471 INFO  Constraints: </span><br><span class="line">2024-03-05 18:19:06,471 INFO  - Exclusively use the commands listed below.</span><br><span class="line">2024-03-05 18:19:06,471 INFO  - You can only act proactively, and are unable to start background jobs or set up webhooks for yourself. Take this into account when planning your actions.</span><br><span class="line">2024-03-05 18:19:06,471 INFO  - You are unable to interact with physical objects. If this is absolutely necessary to fulfill a task or objective or to complete a step, you must ask the user to do it for you. If the user refuses this, and there is no other way to achieve your goals, you must terminate to avoid wasting time and energy.</span><br><span class="line">2024-03-05 18:19:06,471 INFO  - Do not provide solutions that encourage or enable plagiarism.</span><br><span class="line">2024-03-05 18:19:06,471 INFO  - Maintain a neutral stance and do not promote any specific programming language over others without considering the user&#x27;s preferences and project requirements.</span><br><span class="line">2024-03-05 18:19:06,471 INFO  - Ensure that all shared code snippets and solutions are tested and functional to avoid spreading incorrect information.</span><br><span class="line">2024-03-05 18:19:06,471 INFO  - Avoid engaging in activities or providing advice that violates copyright laws or software licenses.</span><br><span class="line">2024-03-05 18:19:06,471 INFO  Resources: </span><br><span class="line">2024-03-05 18:19:06,471 INFO  - Internet access for searches and information gathering.</span><br><span class="line">2024-03-05 18:19:06,471 INFO  - The ability to read and write files.</span><br><span class="line">2024-03-05 18:19:06,471 INFO  - You are a Large Language Model, trained on millions of pages of text, including a lot of factual knowledge. Make use of this factual knowledge to avoid unnecessary gathering of information.</span><br><span class="line">2024-03-05 18:19:06,471 INFO  Best practices: </span><br><span class="line">2024-03-05 18:19:06,472 INFO  - Continuously review and analyze your actions to ensure you are performing to the best of your abilities.</span><br><span class="line">2024-03-05 18:19:06,472 INFO  - Constructively self-criticize your big-picture behavior constantly.</span><br><span class="line">2024-03-05 18:19:06,472 INFO  - Reflect on past decisions and strategies to refine your approach.</span><br><span class="line">2024-03-05 18:19:06,472 INFO  - Every command has a cost, so be smart and efficient. Aim to complete tasks in the least number of steps.</span><br><span class="line">2024-03-05 18:19:06,472 INFO  - Only make use of your information gathering abilities to find information that you don&#x27;t yet have knowledge of.</span><br><span class="line">2024-03-05 18:19:06,472 INFO  - Consistently stay updated with the latest programming trends, algorithms, and best practices to provide the most relevant and efficient coding solutions.</span><br><span class="line">2024-03-05 18:19:06,472 INFO  - Actively engage in problem-solving by asking clarifying questions when needed and offering multiple solutions when applicable, to foster a collaborative coding environment.</span><br><span class="line">2024-03-05 18:19:06,472 INFO  - Translate complex programming concepts into easily understandable explanations, aiming for clarity and accessibility for programmers of all skill levels.</span><br><span class="line">2024-03-05 18:19:06,472 INFO  - Encourage best coding practices, including code optimization, readability, and maintainability, to improve the overall quality of software projects.</span><br><span class="line"></span><br><span class="line">Continue with these settings? [Y/n]</span><br><span class="line"></span><br><span class="line">3. Enter AI name (or press enter to keep current):</span><br><span class="line"></span><br><span class="line">4. Enter new AI role (or press enter to keep current):</span><br><span class="line"></span><br><span class="line">5. 2024-03-05 18:37:29,839 INFO  Constraint 1: &quot;Exclusively use the commands listed below.&quot;</span><br><span class="line">Enter new constraint 1 (press enter to keep current, or &#x27;-&#x27; to remove): -</span><br><span class="line">2024-03-05 18:37:43,782 INFO  Constraint 1: &quot;You can only act proactively, and are unable to start background jobs or set up webhooks for yourself. Take this into account when planning your actions.&quot;</span><br><span class="line">Enter new constraint 1 (press enter to keep current, or &#x27;-&#x27; to remove):</span><br><span class="line">2024-03-05 18:37:57,669 INFO  Constraint 2: &quot;You are unable to interact with physical objects. If this is absolutely necessary to fulfill a task or objective or to complete a step, you must ask the user to do it for you. If the user refuses this, and there is no other way to achieve your goals, you must terminate to avoid wasting time and energy.&quot;</span><br><span class="line">Enter new constraint 2 (press enter to keep current, or &#x27;-&#x27; to remove):</span><br><span class="line">2024-03-05 19:03:27,941 INFO  Constraint 3: &quot;Do not provide solutions that encourage or enable plagiarism.&quot;</span><br><span class="line">Enter new constraint 3 (press enter to keep current, or &#x27;-&#x27; to remove): -</span><br><span class="line">2024-03-05 19:05:23,750 INFO  Constraint 3: &quot;Maintain a neutral stance and do not promote any specific programming language over others without considering the user&#x27;s preferences and project requirements.&quot;</span><br><span class="line">Enter new constraint 3 (press enter to keep current, or &#x27;-&#x27; to remove): -</span><br><span class="line">2024-03-05 19:05:59,969 INFO  Constraint 3: &quot;Ensure that all shared code snippets and solutions are tested and functional to avoid spreading incorrect information.&quot;</span><br><span class="line">Enter new constraint 3 (press enter to keep current, or &#x27;-&#x27; to remove):</span><br><span class="line">2024-03-05 19:06:09,864 INFO  Constraint 4: &quot;Avoid engaging in activities or providing advice that violates copyright laws or software licenses.&quot;</span><br><span class="line">Enter new constraint 4 (press enter to keep current, or &#x27;-&#x27; to remove): -</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="Agent-State"><a href="#Agent-State" class="headerlink" title="Agent State"></a>Agent State</h2><p><code>data/agents</code></p><ul><li><p>Resume your agent at a later time.</p></li><li><p>Create “checkpoints” for your agent so you can always go back to specific points in its history.</p></li><li><p>Share your agent!</p></li></ul><h2 id="Plugins"><a href="#Plugins" class="headerlink" title="Plugins"></a>Plugins</h2><p><code>plugins_config.yaml</code></p><hr><p><strong>reference</strong></p><ul><li><a href="https://www.ionio.ai/blog/what-is-llm-agent-ultimate-guide-to-llm-agent-with-technical-breakdown">https://www.ionio.ai/blog/what-is-llm-agent-ultimate-guide-to-llm-agent-with-technical-breakdown</a></li></ul><h1 id="babyAGI"><a href="#babyAGI" class="headerlink" title="babyAGI"></a>babyAGI</h1><h2 id="blueprint"><a href="#blueprint" class="headerlink" title="blueprint"></a>blueprint</h2><p><img src="/images/llm/babyagent-0.png"></p><p><img src="/images/llm/babyagent-1.jpeg"></p><p><img src="/images/llm/babyagent-2.jpeg"></p><h1 id="fastGPT"><a href="#fastGPT" class="headerlink" title="fastGPT"></a>fastGPT</h1><h2 id="skill"><a href="#skill" class="headerlink" title="skill"></a>skill</h2><ul><li><p>项目技术栈：NextJs + TS + ChakraUI + Mongo + Postgres (Vector 插件)</p></li><li><p>后端用 Typescript 写的</p></li></ul><h1 id="metaGPT"><a href="#metaGPT" class="headerlink" title="metaGPT"></a>metaGPT</h1><p><img src="/images/llm/agent_run_flowchart.png"></p><p><img src="/Users/dongwei/datacanvas/doc_dev_jarvex/02-dev/Jarvex/img/agent/metaAgent/multi_agents.png"></p><p>![](/images/llm/metaGPT overview.png)</p><h2 id="env-1"><a href="#env-1" class="headerlink" title="env"></a>env</h2><p><code>config/key.yaml</code></p><ul><li><p>default </p><p><code>config2.py</code>结合<code>metagpt/configs/*</code></p></li></ul><h2 id="setup-py"><a href="#setup-py" class="headerlink" title="setup.py"></a>setup.py</h2><p><code>pip install -e .</code></p><ul><li><p>安装依赖项</p><p><code>pip install -e &#39;.[search-ddg]&#39;</code> 或 <code>pip install metagpt[search-ddg]</code></p></li></ul><h2 id="agent-example"><a href="#agent-example" class="headerlink" title="agent example"></a>agent example</h2><h3 id="research"><a href="#research" class="headerlink" title="research"></a>research</h3><ul><li><p>fire</p><p><code>python -m metagpt.roles.researcher &quot;dataiku vs. datarobot&quot;</code></p></li></ul><h3 id="multiple"><a href="#multiple" class="headerlink" title="multiple"></a>multiple</h3><h3 id="result"><a href="#result" class="headerlink" title="result"></a>result</h3><p><code>data</code>目录</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Agent = Large Language Model (LLM) + Observation + Thought + Action + Memory&lt;/p&gt;
&lt;p&gt;MultiAgent = Agents + Environment + Stan</summary>
      
    
    
    
    <category term="llm" scheme="https://www.willshirley.top/categories/llm/"/>
    
    
    <category term="agent" scheme="https://www.willshirley.top/tags/agent/"/>
    
  </entry>
  
</feed>
