<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>idea keymap</title>
      <link href="/2019/09/16/idea%20keymap/"/>
      <url>/2019/09/16/idea%20keymap/</url>
      <content type="html"><![CDATA[<h2 id="Compile-and-Run"><a href="#Compile-and-Run" class="headerlink" title="Compile and Run"></a>Compile and Run</h2><p><a href="https://imgchr.com/i/nRX0JI" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/09/16/nRX0JI.jpg" alt="nRX0JI.jpg"></a></p><h2 id="Debugging"><a href="#Debugging" class="headerlink" title="Debugging"></a>Debugging</h2><p><a href="https://imgchr.com/i/nRXhYn" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/09/16/nRXhYn.jpg" alt="nRXhYn.jpg"></a></p><h2 id="Editing"><a href="#Editing" class="headerlink" title="Editing"></a>Editing</h2><p><a href="https://imgchr.com/i/nRXwFA" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/09/16/nRXwFA.jpg" alt="nRXwFA.jpg"></a></p><h2 id="General"><a href="#General" class="headerlink" title="General"></a>General</h2><p><a href="https://imgchr.com/i/nRX2wQ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/09/16/nRX2wQ.jpg" alt="nRX2wQ.jpg"></a></p><h2 id="Live-Templates"><a href="#Live-Templates" class="headerlink" title="Live Templates"></a>Live Templates</h2><p><a href="https://imgchr.com/i/nRXRoj" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/09/16/nRXRoj.jpg" alt="nRXRoj.jpg"></a></p><h2 id="Navigation"><a href="#Navigation" class="headerlink" title="Navigation"></a>Navigation</h2><p><a href="https://imgchr.com/i/nRXBWt" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/09/16/nRXBWt.jpg" alt="nRXBWt.jpg"></a></p><h2 id="Refactoring"><a href="#Refactoring" class="headerlink" title="Refactoring"></a>Refactoring</h2><p><a href="https://imgchr.com/i/nRXsQf" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/09/16/nRXsQf.jpg" alt="nRXsQf.jpg"></a></p><h2 id="Search-Replace"><a href="#Search-Replace" class="headerlink" title="Search/Replace"></a>Search/Replace</h2><p><a href="https://imgchr.com/i/nRXrSP" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/09/16/nRXrSP.jpg" alt="nRXrSP.jpg"></a></p><h2 id="Usage-Search"><a href="#Usage-Search" class="headerlink" title="Usage Search"></a>Usage Search</h2><p><a href="https://imgchr.com/i/nRXyy8" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/09/16/nRXyy8.jpg" alt="nRXyy8.jpg"></a></p><h2 id="VCS-Local-History"><a href="#VCS-Local-History" class="headerlink" title="VCS/Local History"></a>VCS/Local History</h2><p><a href="https://imgchr.com/i/nRX6OS" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/09/16/nRX6OS.jpg" alt="nRX6OS.jpg"></a></p>]]></content>
      
      <categories>
          
          <category> tool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> keymap </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>docker snippet</title>
      <link href="/2019/08/16/docker%20snippet/"/>
      <url>/2019/08/16/docker%20snippet/</url>
      <content type="html"><![CDATA[<h2 id="Manage-Docker-as-a-non-root-user"><a href="#Manage-Docker-as-a-non-root-user" class="headerlink" title="Manage Docker as a non-root user"></a>Manage Docker as a non-root user</h2><ol><li><p>Create the <code>docker</code> group.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo groupadd docker</span><br></pre></td></tr></table></figure></li><li><p>Add your user to the <code>docker</code> group.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo usermod -aG docker $USER</span><br></pre></td></tr></table></figure></li><li><p>Log out and log back in so that your group membership is re-evaluated.</p><p>If testing on a virtual machine, it may be necessary to restart the virtual machine for changes to take effect.</p><p>On a desktop Linux environment such as X Windows, log out of your session completely and then log back in.</p><p>On Linux, you can also run the following command to activate the changes to groups:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ newgrp docker</span><br></pre></td></tr></table></figure></li><li><p>Verify that you can run <code>docker</code> commands without <code>sudo</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run hello-world</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> snippet </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js中的this</title>
      <link href="/2019/08/14/js%E4%B8%AD%E7%9A%84this/"/>
      <url>/2019/08/14/js%E4%B8%AD%E7%9A%84this/</url>
      <content type="html"><![CDATA[<p>文字转载自<a href="https://juejin.im/post/5d51feaef265da039005219e#heading-5" target="_blank" rel="noopener">JS 中 this 在各个场景下的指向</a></p><h2 id="1-this-的奥秘"><a href="#1-this-的奥秘" class="headerlink" title="1. this 的奥秘"></a>1. this 的奥秘</h2><p>很多时候, JS 中的 <code>this</code> 对于咱们的初学者很容易产生困惑不解。 <code>this</code> 的功能很强大，但需要一定付出才能慢慢理解它。</p><p>对Java、PHP或其他标准语言来看，<code>this</code> 表示类方法中当前对象的实例。大多数情况下，<code>this</code>不能在方法之外使用，这样就比较不会造成混淆。</p><p>在J要中情况就有所不同: <code>this</code>表示函数的当前执行上下文，JS 中函数调用主要有以下几种方式：</p><ul><li>函数调用: <code>alert(&#39;Hello World!&#39;)</code></li><li>方法调用: <code>console.log(&#39;Hello World!&#39;)</code></li><li>构造函数: <code>new RegExp(&#39;\\d&#39;)</code></li><li>隐式调用: <code>alert.call(undefined, &#39;Hello World!&#39;)</code></li></ul><p>每种调用类型以自己的方式定义上下文，所以就很容易产生混淆。</p><p>此外，严格模式也会影响执行上下文。</p><p>理解<code>this</code>关键是要清楚的知道函数调用及其如何影响上下文。</p><p>本文主要说明函数的调用方式及如何影响 <code>this</code>，并且说明执行上下文的常见陷阱。</p><p>在开始之前，先知道几个术语：</p><p>调用函数正在执行创建函数体的代码，或者只是调用函数。 例如，parseInt函数调用是parseInt（’15’）。</p><ul><li><strong>函数调用</strong>：执行构成函数主体的代码：例如，<code>parseInt</code>函数调用是<code>parseInt(&#39;15&#39;)</code>。</li><li><strong>调用的上下文</strong>：指 <code>this</code> 在函数体内的值。 例如，<code>map.set(&#39;key&#39;, &#39;value&#39;)</code>的调用上下文是 <code>map</code>。</li><li><strong>函数的作用域</strong>：是在函数体中可访问的变量、对象和函数的集合。</li></ul><h2 id="2-函数调用"><a href="#2-函数调用" class="headerlink" title="2.函数调用"></a>2.函数调用</h2><p>当一个表达式为函数接着一个<code>(</code>，一些用逗号分隔的参数以及一个<code>）</code>时，函数调用被执行，例如<code>parseInt(&#39;18&#39;)</code>。</p><p>函数调用表达式不能是属性方式的调用，如 <code>obj.myFunc()</code>，这种是创建一个方法调用。再如 <code>[1,5].join(&#39;,&#39;)</code>不是函数调用，而是方法调用，<strong>这种区别需要记住哈，很重要滴</strong>。</p><p>函数调用的一个简单示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function hello(name) &#123;</span><br><span class="line">  return &apos;Hello &apos; + name + &apos;!&apos;;</span><br><span class="line">&#125;</span><br><span class="line">// 函数调用</span><br><span class="line">const message = hello(&apos;World&apos;);</span><br><span class="line">console.log(message); // =&gt; &apos;Hello World!&apos;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><code>hello(&#39;World&#39;)</code>是函数调用: <code>hello</code>表达式等价于一个函数，跟在它后面的是一对括号以及<code>&#39;World&#39;</code>参数。</p><p>一个更高级的例子是<strong>IIFE</strong>(立即调用的函数表达式)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const message = (function(name) &#123;</span><br><span class="line">   return &apos;Hello &apos; + name + &apos;!&apos;;</span><br><span class="line">&#125;)(&apos;World&apos;);</span><br><span class="line">console.log(message) // =&gt; &apos;Hello World!&apos;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><strong>IIFE</strong>也是一个函数调用:第一对圆括号<code>(function(name) {...})</code>是一个表达式，它的计算结果是一个函数对象，后面跟着一对圆括号，圆括号的参数是<code>“World”</code>。</p><h4 id="2-1-在函数调用中的this"><a href="#2-1-在函数调用中的this" class="headerlink" title="2.1. 在函数调用中的this"></a>2.1. 在函数调用中的this</h4><blockquote><p>this 在函数调用中是一个全局对象</p></blockquote><p>局对象由执行环境决定。在浏览器中，<code>this</code>是 <code>window</code> 对象。</p><p><img src="https://user-gold-cdn.xitu.io/2019/8/13/16c884b811a409ab?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>在函数调用中，执行上下文是全局对象。</p><p>再来看看下面函数中的上下文又是什么鬼：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function sum(a, b) &#123;</span><br><span class="line">   console.log(this === window); // =&gt; true</span><br><span class="line">   this.myNumber = 20; // 将&apos;myNumber&apos;属性添加到全局对象</span><br><span class="line">   return a + b;</span><br><span class="line">&#125;</span><br><span class="line">// sum() is invoked as a function</span><br><span class="line">// sum() 中的 `this` 是一个全局对象（window）</span><br><span class="line">sum(15, 16);     // =&gt; 31</span><br><span class="line">window.myNumber; // =&gt; 20</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>在调用<code>sum(15,16)</code>时，JS 自动将<code>this</code>设置为全局对象，在浏览器中该对象是<code>window</code>。</p><p>当<code>this</code>在任何函数作用域(最顶层作用域:全局执行上下文)之外使用，<code>this</code> 表示 <code>window</code> 对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">console.log(this === window); // =&gt; true</span><br><span class="line">this.myString = &apos;Hello World!&apos;;</span><br><span class="line">console.log(window.myString); // =&gt; &apos;Hello World!&apos;</span><br><span class="line"></span><br><span class="line">&lt;!-- In an html file --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">   console.log(this === window); // =&gt; true</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h4 id="2-2-严格模式下的函数调用-this-又是什么样的"><a href="#2-2-严格模式下的函数调用-this-又是什么样的" class="headerlink" title="2.2 严格模式下的函数调用 this 又是什么样的"></a>2.2 严格模式下的函数调用 this 又是什么样的</h4><blockquote><p><code>this</code> 在严格模式下的函数调用中为 <strong>undefined</strong></p></blockquote><p>严格模式是在 ECMAScript 5.1中引入的，它提供了更好的安全性和更强的错误检查。</p><p>要启用严格模式，函数头部写入<code>use strict</code> 即可。</p><p>启用后，严格模式会影响执行上下文，<code>this</code> 在常规函数调用中值为<code>undefined</code>。 与上述情况<code>2.1</code>相反，执行上下文不再是全局对象。</p><p><img src="https://user-gold-cdn.xitu.io/2019/8/13/16c884ceb97a4874?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>严格模式函数调用示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function multiply(a, b) &#123;</span><br><span class="line">  &apos;use strict&apos;; // 启用严格模式</span><br><span class="line">  console.log(this === undefined); // =&gt; true</span><br><span class="line">  return a * b;</span><br><span class="line">&#125;</span><br><span class="line">multiply(2, 5); // =&gt; 10</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>当<code>multiply(2,5)</code>作为函数调用时，<code>this</code>是<code>undefined</code>。</p><p>严格模式不仅在当前作用域中有效，在内部作用域中也是有效的(对于在内部声明的所有函数):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function execute() &#123;</span><br><span class="line">   &apos;use strict&apos;; // 开启严格模式  </span><br><span class="line">   function concat(str1, str2) &#123;</span><br><span class="line">     // 严格模式仍然有效  </span><br><span class="line">     console.log(this === undefined); // =&gt; true</span><br><span class="line">     return str1 + str2;</span><br><span class="line">   &#125;</span><br><span class="line">   // concat() 在严格模式下作为函数调用</span><br><span class="line">   // this in concat() is undefined</span><br><span class="line">   concat(&apos;Hello&apos;, &apos; World!&apos;); // =&gt; &quot;Hello World!&quot;</span><br><span class="line">&#125;</span><br><span class="line">execute();</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><code>&#39;use strict&#39;</code>被插入到执行体的顶部，在其作用域内启用严格模式。 因为函数<code>concat</code>是在执行的作用域中声明的，所以它继承了严格模式。</p><p>单个JS文件可能包含严格和非严格模式。 因此，对于相同的调用类型，可以在单个脚本中具有不同的上下文行为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function nonStrictSum(a, b) &#123;</span><br><span class="line">  // 非严格模式</span><br><span class="line">  console.log(this === window); // =&gt; true</span><br><span class="line">  return a + b;</span><br><span class="line">&#125;</span><br><span class="line">function strictSum(a, b) &#123;</span><br><span class="line">  &apos;use strict&apos;;</span><br><span class="line">  // 启用严格模式</span><br><span class="line">  console.log(this === undefined); // =&gt; true</span><br><span class="line">  return a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">nonStrictSum(5, 6); // =&gt; 11</span><br><span class="line">strictSum(8, 12); // =&gt; 20</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h4 id="2-3-陷阱-this-在内部函数中的时候"><a href="#2-3-陷阱-this-在内部函数中的时候" class="headerlink" title="2.3 陷阱:this 在内部函数中的时候"></a>2.3 陷阱:<code>this</code> 在内部函数中的时候</h4><p>函数调用的一个常见陷阱是，认为<code>this</code>在内部函数中的情况与外部函数中的情况相同。</p><p>正确地说，内部函数的上下文只依赖于它的调用类型，而不依赖于外部函数的上下文。</p><p>要将 <code>this</code> 设置为所需的值，可以通过 <code>.call()</code>或<code>.apply()</code>修改内部函数的上下文或使用<code>.bind()</code>创建绑定函数。</p><p>下面的例子是计算两个数的和：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">const numbers = &#123;</span><br><span class="line">   numberA: 5,</span><br><span class="line">   numberB: 10,</span><br><span class="line">   sum: function() &#123;</span><br><span class="line">     console.log(this === numbers); // =&gt; true</span><br><span class="line">     function calculate() &#123;</span><br><span class="line">       console.log(this === numbers); // =&gt; false</span><br><span class="line">       return this.numberA + this.numberB;</span><br><span class="line">     &#125;</span><br><span class="line">     return calculate();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;;</span><br><span class="line">numbers.sum(); // =&gt; NaN</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><code>sum()</code>是对象上的方法调用，所以<code>sum</code>中的上下文是<code>numbers</code>对象。<code>calculate</code>函数是在<code>sum</code>中定义的，你可能希望在<code>calculate()</code>中<code>this</code>也表示<code>number</code>对象。</p><p><code>calculate()</code>是一个函数调用(不是方法调用)，它将<code>this</code>作为全局对象<code>window</code>(非严格模下)。即使外部函数<code>sum</code>将上下文作为<code>number</code>对象，它在<code>calculate</code>里面没有影响。</p><p><code>sum()</code>的调用结果是<code>NaN</code>，不是预期的结果<code>5 + 10 = 15</code>，这都是因为没有正确调用<code>calculate</code>。</p><p>为了解决这个问题，<code>calculate</code>函数中上下文应该与 <code>sum</code> 中的一样，以便可以访问<code>numberA</code>和<code>numberB</code>属性。</p><p>一种解决方案是通过调用<code>calculator.call(this)</code>手动将<code>calculate</code>上下文更改为所需的上下文。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">const numbers = &#123;</span><br><span class="line">   numberA: 5,</span><br><span class="line">   numberB: 10,</span><br><span class="line">   sum: function() &#123;</span><br><span class="line">     console.log(this === numbers); // =&gt; true</span><br><span class="line">     function calculate() &#123;</span><br><span class="line">       console.log(this === numbers); // =&gt; true</span><br><span class="line">       return this.numberA + this.numberB;</span><br><span class="line">     &#125;</span><br><span class="line">     // 使用 .call() 方法修改上下文</span><br><span class="line">     return calculate.call(this);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;;</span><br><span class="line">numbers.sum(); // =&gt; 15</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><code>call(this)</code>像往常一样执行<code>calculate</code>函数，但 <code>call</code> 会把上下文修改为指定为第一个参数的值。</p><p>现在<code>this.numberA</code> + <code>this.numberB</code>相当于<code>numbers.numberA + numbers.numberB</code>。 该函数返回预期结果<code>5 + 10 = 15</code>。</p><p>另一种就是使用箭头函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">const numbers = &#123;</span><br><span class="line">   numberA: 5,</span><br><span class="line">   numberB: 10,</span><br><span class="line">   sum: function() &#123;</span><br><span class="line">     console.log(this === numbers); // =&gt; true</span><br><span class="line">     const calculate = () =&gt; &#123;</span><br><span class="line">       console.log(this === numbers); // =&gt; true</span><br><span class="line">       return this.numberA + this.numberB;</span><br><span class="line">     &#125;</span><br><span class="line">     return calculate();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;;</span><br><span class="line">numbers.sum(); // =&gt; 15</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h2 id="3-方法调用"><a href="#3-方法调用" class="headerlink" title="3.方法调用"></a>3.方法调用</h2><p>方法是存储在对象属性中的函数。例如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const myObject = &#123;</span><br><span class="line">  // helloFunction 是一个方法</span><br><span class="line">  helloFunction: function() &#123;</span><br><span class="line">    return &apos;Hello World!&apos;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">const message = myObject.helloFunction();</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><code>helloFunction</code>是<code>myObject</code>的一个方法，要调用该方法，可以这样子调用 :<code>myObject.helloFunction</code>。</p><p>当一个表达式以属性访问的形式执行时，执行的是方法调用，它相当于以个函数接着(，一组用逗号分隔的参数以及)。</p><p>利用前面的例子，<code>myObject.helloFunction()</code>是对象<code>myObject</code>上的一个<code>helloFunction</code>的方法调用。<code>[1, 2].join(&#39;,&#39;)</code> 或<code>/\s/.test(&#39;beautiful world&#39;)</code>也被认为是方法调用。</p><p>区分函数调用和方法调用非常重要，因为它们是不同的类型。主要区别在于方法调用需要一个属性访问器形式来调用函数(<code>obj.myFunc()</code>或<code>obj[&#39;myFunc&#39;]()</code>)，而函数调用不需要(<code>myFunc()</code>)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[&apos;Hello&apos;, &apos;World&apos;].join(&apos;, &apos;); // 方法调用</span><br><span class="line">(&#123; ten: function() &#123; return 10; &#125; &#125;).ten(); // 方法调用</span><br><span class="line">const obj = &#123;&#125;;</span><br><span class="line">obj.myFunction = function() &#123;</span><br><span class="line">  return new Date().toString();</span><br><span class="line">&#125;;</span><br><span class="line">obj.myFunction(); // 方法调用</span><br><span class="line"></span><br><span class="line">const otherFunction = obj.myFunction;</span><br><span class="line">otherFunction();     // 函数调用</span><br><span class="line">parseFloat(&apos;16.60&apos;); // 函数调用</span><br><span class="line">isNaN(0);            // 函数调用</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>理解函数调用和方法调用之间的区别有助于正确识别上下文。</p><h4 id="3-1-方法调用中-this-是肿么样"><a href="#3-1-方法调用中-this-是肿么样" class="headerlink" title="3.1 方法调用中 this 是肿么样"></a>3.1 方法调用中 this 是肿么样</h4><blockquote><p>在方法调用中，<code>this</code>是拥有这个方法的对象</p></blockquote><p>当调用对象上的方法时，<code>this</code>就变成了对象本身。</p><p><img src="https://user-gold-cdn.xitu.io/2019/8/13/16c884d308092da0?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>创建一个对象，该对象有一个递增数字的方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">const calc = &#123;</span><br><span class="line">  num: 0,</span><br><span class="line">  increment: function() &#123;</span><br><span class="line">    console.log(this === calc); // =&gt; true</span><br><span class="line">    this.num += 1;</span><br><span class="line">    return this.num;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">// method invocation. this is calc</span><br><span class="line">calc.increment(); // =&gt; 1</span><br><span class="line">calc.increment(); // =&gt; 2</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>调用<code>calc.increment()</code>使<code>increment</code>函数的上下文成为<code>calc</code>对象。所以使用<code>this.num</code>来增加<code>num</code>属性是有效的。</p><p>再来看看另一个例子。JS对象从原型继承一个方法，当在对象上调用继承的方法时，调用的上下文仍然是对象本身</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const myDog = Object.create(&#123;</span><br><span class="line">  sayName: function() &#123;</span><br><span class="line">     console.log(this === myDog); // =&gt; true</span><br><span class="line">     return this.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">myDog.name = &apos;Milo&apos;;</span><br><span class="line">// 方法调用 this 指向 myDog</span><br><span class="line">myDog.sayName(); // =&gt; &apos;Milo&apos;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><code>Object.create()</code>创建一个新对象<code>myDog</code>，并根据第一个参数设置其原型。<code>myDog</code>对象继承<code>sayName</code>方法。</p><p>执行<code>myDog. sayname()</code>时，<code>myDog</code>是调用的上下文。</p><p>在EC6 <code>class</code> 语法中，方法调用上下文也是实例本身</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class Planet &#123;</span><br><span class="line">  constructor(name) &#123;</span><br><span class="line">    this.name = name;    </span><br><span class="line">  &#125;</span><br><span class="line">  getName() &#123;</span><br><span class="line">    console.log(this === earth); // =&gt; true</span><br><span class="line">    return this.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">var earth = new Planet(&apos;Earth&apos;);</span><br><span class="line">// method invocation. the context is earth</span><br><span class="line">earth.getName(); // =&gt; &apos;Earth&apos;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h4 id="3-2-陷阱-将方法与其对象分离"><a href="#3-2-陷阱-将方法与其对象分离" class="headerlink" title="3.2 陷阱:将方法与其对象分离"></a>3.2 陷阱:将方法与其对象分离</h4><p>方法可以从对象中提取到一个单独的变量<code>const alone = myObj.myMethod</code>。当方法单独调用时，与原始对象<code>alone()</code>分离，你可能认为当前的<code>this</code>就是定义方法的对象<code>myObject</code>。</p><p>如果方法在没有对象的情况下调用，那么函数调用就会发生，此时的<code>this</code>指向全局对象<code>window</code>严格模式下是<code>undefined</code>。</p><p>下面的示例定义了<code>Animal</code>构造函数并创建了它的一个实例:<code>myCat</code>。然后<code>setTimout()</code>在1秒后打印<code>myCat</code>对象信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function Animal(type, legs) &#123;</span><br><span class="line">  this.type = type;</span><br><span class="line">  this.legs = legs;  </span><br><span class="line">  this.logInfo = function() &#123;</span><br><span class="line">    console.log(this === myCat); // =&gt; false</span><br><span class="line">    console.log(&apos;The &apos; + this.type + &apos; has &apos; + this.legs + &apos; legs&apos;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">const myCat = new Animal(&apos;Cat&apos;, 4);</span><br><span class="line">// The undefined has undefined legs</span><br><span class="line">setTimeout(myCat.logInfo, 1000);</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>你可能认为<code>setTimout</code>调用<code>myCat.loginfo()</code>时，它应该打印关于<code>myCat</code>对象的信息。</p><p>不幸的是，方法在作为参数传递时与对象是分离，<code>setTimout(myCat.logInfo)</code>以下情况是等效的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">setTimout(myCat.logInfo);</span><br><span class="line">// 等价于</span><br><span class="line">const extractedLogInfo = myCat.logInfo;</span><br><span class="line">setTimout(extractedLogInfo);</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>将分离的<code>logInfo</code>作为函数调用时，<code>this</code>是全局 <code>window</code>,所以对象信息没有正确地打印。</p><p>函数可以使用<code>.bind()</code>方法与对象绑定,就可以解决 <code>this</code> 指向的问题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function Animal(type, legs) &#123;</span><br><span class="line">  this.type = type;</span><br><span class="line">  this.legs = legs;  </span><br><span class="line">  this.logInfo = function() &#123;</span><br><span class="line">    console.log(this === myCat); // =&gt; true</span><br><span class="line">    console.log(&apos;The &apos; + this.type + &apos; has &apos; + this.legs + &apos; legs&apos;);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line">const myCat = new Animal(&apos;Cat&apos;, 4);</span><br><span class="line">// logs &quot;The Cat has 4 legs&quot;</span><br><span class="line">setTimeout(myCat.logInfo.bind(myCat), 1000);</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><code>myCat.logInfo.bind(myCat)</code>返回一个新函数，它的执行方式与<code>logInfo</code>完全相同，但是此时的 <code>this</code> 指向 <code>myCat</code>，即使在函数调用中也是如此。</p><p>另一种解决方案是将<code>logInfo()</code>方法定义为一个箭头函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function Animal(type, legs) &#123;</span><br><span class="line">  this.type = type;</span><br><span class="line">  this.legs = legs;  </span><br><span class="line">  this.logInfo = () =&gt; &#123;</span><br><span class="line">    console.log(this === myCat); // =&gt; true</span><br><span class="line">    console.log(&apos;The &apos; + this.type + &apos; has &apos; + this.legs + &apos; legs&apos;);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line">const myCat = new Animal(&apos;Cat&apos;, 4);</span><br><span class="line">// logs &quot;The Cat has 4 legs&quot;</span><br><span class="line">setTimeout(myCat.logInfo, 1000);</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h2 id="4-构造函数调用"><a href="#4-构造函数调用" class="headerlink" title="4. 构造函数调用"></a>4. 构造函数调用</h2><p>当<code>new</code>关键词紧接着函数对象,(,一组逗号分隔的参数以及)时被调用，执行的是构造函数调用如<code>new RegExp(&#39;\\d&#39;)</code>。</p><p>声明了一个<code>Country</code>函数，并且将它作为一个构造函数调用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function Country(name, traveled) &#123;</span><br><span class="line">   this.name = name ? name : &apos;United Kingdom&apos;;</span><br><span class="line">   this.traveled = Boolean(traveled);</span><br><span class="line">&#125;</span><br><span class="line">Country.prototype.travel = function() &#123;</span><br><span class="line">  this.traveled = true;</span><br><span class="line">&#125;;</span><br><span class="line">// 构造函数调用</span><br><span class="line">const france = new Country(&apos;France&apos;, false);</span><br><span class="line">// 构造函数调用</span><br><span class="line">const unitedKingdom = new Country;</span><br><span class="line"></span><br><span class="line">france.travel(); // Travel to France</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><code>new Country(&#39;France&#39;, false)</code>是<code>Country</code>函数的构造函数调用。它的执行结果是一个<code>name</code>属性为<code>&#39;France&#39;</code>的新的对象。 如果这个构造函数调用时不需要参数，那么括号可以省略：<code>new Country</code>。</p><p>从ES6开始，JS 允许用<code>class</code>关键词来定义构造函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class City &#123;</span><br><span class="line">  constructor(name, traveled) &#123;</span><br><span class="line">    this.name = name;</span><br><span class="line">    this.traveled = false;</span><br><span class="line">  &#125;</span><br><span class="line">  travel() &#123;</span><br><span class="line">    this.traveled = true;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">// Constructor invocation</span><br><span class="line">const paris = new City(&apos;Paris&apos;, false);</span><br><span class="line">paris.travel();</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><code>new City(&#39;Paris&#39;)</code>是构造函数调用。这个对象的初始化由这个类中一个特殊的方法<code>constructor</code>来处理。其中，<code>this</code>指向新创建的对象。</p><p>构造函数创建了一个新的空的对象，它从构造函数的原型继承了属性。构造函数的作用就是去初始化这个对象。 可能你已经知道了，在这种类型的调用中，上下文指向新创建的实例。</p><p>当属性访问<code>myObject.myFunction</code>前面有一个<code>new</code>关键词时，JS会执行构造函数调用而不是原来的方法调用。</p><p>例如<code>new myObject.myFunction()</code>：它相当于先用属性访问把方法提取出来<code>extractedFunction = myObject.myFunction</code>，然后利用把它作为构造函数创建一个新的对象： <code>new extractedFunction()</code>。</p><h2 id="4-1-构造函数中的-this"><a href="#4-1-构造函数中的-this" class="headerlink" title="4.1. 构造函数中的 this"></a>4.1. 构造函数中的 this</h2><blockquote><p>在构造函数调用中 this 指向新创建的对象</p></blockquote><p>构造函数调用的上下文是新创建的对象。它利用构造函数的参数初始化新的对象，设定属性的初始值，添加事件处理函数等等。</p><p><img src="https://user-gold-cdn.xitu.io/2019/8/13/16c884d774863ecb?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>来看看下面示例中的上下文</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function Foo () &#123;</span><br><span class="line">  console.log(this instanceof Foo); // =&gt; true</span><br><span class="line">  this.property = &apos;Default Value&apos;;</span><br><span class="line">&#125;</span><br><span class="line">// Constructor invocation</span><br><span class="line">const fooInstance = new Foo();</span><br><span class="line">fooInstance.property; // =&gt; &apos;Default Value&apos;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><code>new Foo()</code> 正在进行构造函数调用，其中上下文是<code>fooInstance</code>。 在<code>Foo</code>内部初始化对象：<code>this.property</code>被赋值为默认值。</p><p>同样的情况在用<code>class</code>语法（从ES6起）时也会发生，唯一的区别是初始化在<code>constructor</code>方法中进行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class Bar &#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    console.log(this instanceof Bar); // =&gt; true</span><br><span class="line">    this.property = &apos;Default Value&apos;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">// Constructor invocation</span><br><span class="line">const barInstance = new Bar();</span><br><span class="line">barInstance.property; // =&gt; &apos;Default Value&apos;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h4 id="4-2-陷阱-忘了使用-new"><a href="#4-2-陷阱-忘了使用-new" class="headerlink" title="4.2. 陷阱: 忘了使用 new"></a>4.2. 陷阱: 忘了使用 new</h4><p>有些JS函数不是只在作为构造函数调用的时候才创建新的对象，作为函数调用时也会，例如<code>RegExp</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var reg1 = new RegExp(&apos;\\w+&apos;);</span><br><span class="line">var reg2 = RegExp(&apos;\\w+&apos;);</span><br><span class="line"></span><br><span class="line">reg1 instanceof RegExp;      // =&gt; true</span><br><span class="line">reg2 instanceof RegExp;      // =&gt; true</span><br><span class="line">reg1.source === reg2.source; // =&gt; true</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>当执行的 <code>new RegExp(&#39;\\w+&#39;)</code>和<code>RegExp(&#39;\\w+&#39;)</code>时，JS 会创建等价的正则表达式对象。</p><p>使用函数调用来创建对象存在一个潜在的问题(不包括工厂模式)，因为一些构造函数可能会忽略在缺少<code>new</code>关键字时初始化对象的逻辑。</p><p>下面的例子说明了这个问题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function Vehicle(type, wheelsCount) &#123;</span><br><span class="line">  this.type = type;</span><br><span class="line">  this.wheelsCount = wheelsCount;</span><br><span class="line">  return this;</span><br><span class="line">&#125;</span><br><span class="line">// 忘记使用 new</span><br><span class="line">const car = Vehicle(&apos;Car&apos;, 4);</span><br><span class="line">car.type;       // =&gt; &apos;Car&apos;</span><br><span class="line">car.wheelsCount // =&gt; 4</span><br><span class="line">car === window  // =&gt; true</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><code>Vehicle</code>是一个在上下文对象上设置<code>type</code>和<code>wheelsCount</code>属性的函数。</p><p>当执行<code>Vehicle(&#39;Car&#39;， 4)</code>时，返回一个对象<code>Car</code>，它具有正确的属性:<code>Car.type</code> 为 <code>Car</code>和<code>Car.wheelsCount</code> 为<code>4</code>，你可能认为它很适合创建和初始化新对象。</p><p>然而，在函数调用中，<code>this</code>是<code>window</code>对象 ，因此 <code>Vehicle（&#39;Car&#39;，4）</code>在 <code>window</code> 对象上设置属性。 显然这是错误，它并没有创建新对象。</p><p>当你希望调用构造函数时，确保你使用了<code>new</code>操作符：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">function Vehicle(type, wheelsCount) &#123;</span><br><span class="line">  if (!(this instanceof Vehicle)) &#123;</span><br><span class="line">    throw Error(&apos;Error: Incorrect invocation&apos;);</span><br><span class="line">  &#125;</span><br><span class="line">  this.type = type;</span><br><span class="line">  this.wheelsCount = wheelsCount;</span><br><span class="line">  return this;</span><br><span class="line">&#125;</span><br><span class="line">// Constructor invocation</span><br><span class="line">const car = new Vehicle(&apos;Car&apos;, 4);</span><br><span class="line">car.type               // =&gt; &apos;Car&apos;</span><br><span class="line">car.wheelsCount        // =&gt; 4</span><br><span class="line">car instanceof Vehicle // =&gt; true</span><br><span class="line"></span><br><span class="line">// Function invocation. Throws an error.</span><br><span class="line">const brokenCar = Vehicle(&apos;Broken Car&apos;, 3);</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><code>new Vehicle(&#39;Car&#39;，4)</code> 运行正常：创建并初始化一个新对象，因为构造函数调用中时使用了<code>new</code>关键字。</p><p>在构造函数里添加了一个验证<code>this instanceof Vehicle</code>来确保执行的上下文是正确的对象类型。如果<code>this</code>不是<code>Vehicle</code>，那么就会报错。这样，如果执行<code>Vehicle(&#39;Broken Car&#39;, 3)</code>(没有<code>new</code>)，我们会得到一个异常：<code>Error: Incorrect invocation</code>。</p><h2 id="5-隐式调用"><a href="#5-隐式调用" class="headerlink" title="5. 隐式调用"></a>5. 隐式调用</h2><p>使用<code>myFun.call()</code>或<code>myFun.apply()</code>方法调用函数时，执行的是隐式调用。</p><p>JS中的函数是第一类对象，这意味着函数就是对象，对象的类型为<code>Function</code>。从函数对象的方法列表中，<code>.call()</code>和<code>.apply()</code>用于调用具有可配置上下文的函数。</p><ul><li>方法 <code>.call(thisArg[, arg1[, arg2[, ...]]])</code>将接受的第一个参数<code>thisArg</code>作为调用时的上下文，<code>arg1, arg2, ...</code>这些则作为参数传入被调用的函数。</li><li>方法<code>.apply(thisArg, [args])</code>将接受的第一个参数<code>thisArg</code>作为调用时的上下文，并且接受另一个类似数组的对象<code>[arg1, arg2, ...]</code>作为被调用函数的参数传入。</li></ul><p>下面是隐式调用的例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function increment(number) &#123;</span><br><span class="line">  return ++number;  </span><br><span class="line">&#125;</span><br><span class="line">increment.call(undefined, 10);    // =&gt; 11</span><br><span class="line">increment.apply(undefined, [10]); // =&gt; 11</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><code>increment.call()</code>和<code>increment.apply()</code>都用参数<code>10</code>调用了这个自增函数。</p><p>两者的区别是<code>.call()</code>接受一组参数，例如<code>myFunction.call(thisValue, &#39;value1&#39;, &#39;value2&#39;)</code>。而<code>.apply()</code>接受的一组参数必须是一个类似数组的对象，例如<code>myFunction.apply(thisValue, [&#39;value1&#39;, &#39;value2&#39;]</code>)。</p><h4 id="5-1-隐式调用中的this"><a href="#5-1-隐式调用中的this" class="headerlink" title="5.1. 隐式调用中的this"></a>5.1. 隐式调用中的this</h4><blockquote><p>在隐式调用.call()或.apply()中，this是第一个参数</p></blockquote><p>很明显，在隐式调用中，<code>this</code>作为第一个参数传递给<code>.call()</code>或<code>.apply()</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var rabbit = &#123; name: &apos;White Rabbit&apos; &#125;;</span><br><span class="line">function concatName(string) &#123;</span><br><span class="line">  console.log(this === rabbit); // =&gt; true</span><br><span class="line">  return string + this.name;</span><br><span class="line">&#125;</span><br><span class="line">concatName.call(rabbit, &apos;Hello &apos;);  // =&gt; &apos;Hello White Rabbit&apos;</span><br><span class="line">concatName.apply(rabbit, [&apos;Bye &apos;]); // =&gt; &apos;Bye White Rabbit&apos;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>当应该使用特定上下文执行函数时，隐式调用非常有用。例如为了解决方法调用时，<code>this</code>总是<code>window</code>或严格模式下的<code>undefined</code>的上下文问题。隐式调用可以用于模拟在一个对象上调用某个方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function Runner(name) &#123;</span><br><span class="line">  console.log(this instanceof Rabbit); // =&gt; true</span><br><span class="line">  this.name = name;  </span><br><span class="line">&#125;</span><br><span class="line">function Rabbit(name, countLegs) &#123;</span><br><span class="line">  console.log(this instanceof Rabbit); // =&gt; true</span><br><span class="line">  Runner.call(this, name);</span><br><span class="line">  this.countLegs = countLegs;</span><br><span class="line">&#125;</span><br><span class="line">const myRabbit = new Rabbit(&apos;White Rabbit&apos;, 4);</span><br><span class="line">myRabbit; // &#123; name: &apos;White Rabbit&apos;, countLegs: 4 &#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><code>Rabbit</code>中的<code>Runner.call(this, name)</code>隐式调用了父类的函数来初始化这个对象。</p><h2 id="6-绑定函数"><a href="#6-绑定函数" class="headerlink" title="6. 绑定函数"></a>6. 绑定函数</h2><p>绑定函数是与对象连接的函数。通常使用<code>.bind()</code>方法从原始函数创建。原始函数和绑定函数共享相同的代码和作用域，但执行时上下文不同。</p><p>方法 <code>myFunc.bind(thisArg[, arg1[, arg2[, ...]]])</code>接受第一个参数<code>thisArg</code>作为绑定函数执行时的上下文，并且它接受一组可选的参数 <code>arg1, arg2, ...</code>作为被调用函数的参数。它返回一个绑定了<code>thisArg</code>的新函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function multiply(number) &#123;</span><br><span class="line">  &apos;use strict&apos;;</span><br><span class="line">  return this * number;</span><br><span class="line">&#125;</span><br><span class="line">const double = multiply.bind(2);</span><br><span class="line"></span><br><span class="line">double(3);  // =&gt; 6</span><br><span class="line">double(10); // =&gt; 20</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><code>bind(2)</code>返回一个新的函数对象<code>double</code>，<code>double</code> 绑定了数字<code>2</code>。<code>multiply</code>和<code>double</code>具有相同的代码和作用域。</p><p>与<code>.apply()</code>和<code>.call()</code> 方法相反，它不会立即调用该函数，<code>.bind()</code>方法只返回一个新函数，在之后被调用，只是this<code>已经</code>被提前设置好了。</p><h4 id="6-1-绑定函数中的this"><a href="#6-1-绑定函数中的this" class="headerlink" title="6.1. 绑定函数中的this"></a>6.1. 绑定函数中的this</h4><blockquote><p>在调用绑定函数时，<code>this</code>是<code>.bind()</code>的第一个参数。</p></blockquote><p><code>.bind()</code>的作用是创建一个新函数，调用该函数时，将上下文作为传递给<code>.bind()</code>的第一个参数。它是一种强大的技术，使咱们可以创建一个定义了<code>this</code>值的函数。</p><p><img src="https://user-gold-cdn.xitu.io/2019/8/13/16c884dceeb04418?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>来看看，如何在如何在绑定函数设置 <code>this</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">const numbers = &#123;</span><br><span class="line">  array: [3, 5, 10],</span><br><span class="line">  getNumbers: function() &#123;</span><br><span class="line">    return this.array;    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">const boundGetNumbers = numbers.getNumbers.bind(numbers);</span><br><span class="line">boundGetNumbers(); // =&gt; [3, 5, 10]</span><br><span class="line">// Extract method from object</span><br><span class="line">const simpleGetNumbers = numbers.getNumbers;</span><br><span class="line">simpleGetNumbers(); // =&gt; undefined (严格模式下报错)</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><code>numbers.getNumbers.bind(numbers)</code>返回绑定<code>numbers</code>对象<code>boundGetNumbers</code>函数。<code>boundGetNumbers()</code>调用时的<code>this</code>是<code>number</code>对象，并能够返回正确的数组对象。</p><p>可以将函数<code>numbers.getNumbers</code>提取到变量<code>simpleGetNumbers</code>中而不进行绑定。在之后的函数调用中<code>simpleGetNumbers()</code>的<code>this</code>是<code>window</code>(严格模式下为<code>undefined</code>)，不是<code>number</code>对象。在这个情况下，<code>simpleGetNumbers()</code>不会正确返回数组。</p><h4 id="6-2-紧密的上下文绑定"><a href="#6-2-紧密的上下文绑定" class="headerlink" title="6.2 紧密的上下文绑定"></a>6.2 紧密的上下文绑定</h4><p><code>.bind()</code>创建一个永久的上下文链接，并始终保持它。 一个绑定函数不能通过<code>.call()</code>或者<code>.apply()</code>来改变它的上下文，甚至是再次绑定也不会有什么作用。</p><p>只有绑定函数的构造函数调用才能更改已经绑定的上下文，但是很不推荐的做法(构造函数调用必须使用常规的非绑定函数)。</p><p>下面示例创建一个绑定函数，然后尝试更改其已预先定义好的上下文</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function getThis() &#123;</span><br><span class="line">  &apos;use strict&apos;;</span><br><span class="line">  return this;</span><br><span class="line">&#125;</span><br><span class="line">const one = getThis.bind(1);</span><br><span class="line">// 绑定函数调用</span><br><span class="line">one(); // =&gt; 1</span><br><span class="line">// 使用带有.apply()和.call()的绑定函数</span><br><span class="line">one.call(2);  // =&gt; 1</span><br><span class="line">one.apply(2); // =&gt; 1</span><br><span class="line">// 再次绑定</span><br><span class="line">one.bind(2)(); // =&gt; 1</span><br><span class="line">// 以构造函数的形式调用绑定函数</span><br><span class="line">new one(); // =&gt; Object</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>只有<code>new one()</code>改变了绑定函数的上下文，其他方式的调用中<code>this</code>总是等于1。</p><h2 id="7-箭头函数"><a href="#7-箭头函数" class="headerlink" title="7. 箭头函数"></a>7. 箭头函数</h2><p>箭头函数用于以更短的形式声明函数，并在词法上绑定上下文。它可以这样使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const hello = (name) =&gt; &#123;</span><br><span class="line">  return &apos;Hello &apos; + name;</span><br><span class="line">&#125;;</span><br><span class="line">hello(&apos;World&apos;); // =&gt; &apos;Hello World&apos;</span><br><span class="line">// Keep only even numbers</span><br><span class="line">[1, 2, 5, 6].filter(item =&gt; item % 2 === 0); // =&gt; [2, 6]</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>箭头函数语法简单，没有冗长的<code>function</code> 关键字。当箭头函数只有一条语句时，甚至可以省略<code>return</code>关键字。</p><p>箭头函数是匿名的，这意味着<code>name</code>属性是一个空字符串<code>&#39;&#39;</code>。这样它就没有词法上函数名(函数名对于递归、分离事件处理程序非常有用)</p><p>同时，跟常规函数相反，它也不提供<code>arguments</code>对象。但是，这在ES6中通过<code>rest parameters</code>修复了:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const sumArguments = (...args) =&gt; &#123;</span><br><span class="line">   console.log(typeof arguments); // =&gt; &apos;undefined&apos;</span><br><span class="line">   return args.reduce((result, item) =&gt; result + item);</span><br><span class="line">&#125;;</span><br><span class="line">sumArguments.name      // =&gt; &apos;&apos;</span><br><span class="line">sumArguments(5, 5, 6); // =&gt; 16</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h4 id="7-1-箭头函数中的this"><a href="#7-1-箭头函数中的this" class="headerlink" title="7.1. 箭头函数中的this"></a>7.1. 箭头函数中的this</h4><blockquote><p>this 定义箭头函数的封闭上下文</p></blockquote><p>箭头函数不会创建自己的执行上下文，而是从定义它的外部函数中获取 <code>this</code>。 换句话说，箭头函数在词汇上绑定 <code>this</code>。</p><p><img src="https://user-gold-cdn.xitu.io/2019/8/13/16c884dfd5bf33de?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>下面的例子说明了这个上下文透明的特性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class Point &#123;</span><br><span class="line">  constructor(x, y) &#123;</span><br><span class="line">    this.x = x;</span><br><span class="line">    this.y = y;</span><br><span class="line">  &#125;</span><br><span class="line">  log() &#123;</span><br><span class="line">    console.log(this === myPoint); // =&gt; true</span><br><span class="line">    setTimeout(()=&gt; &#123;</span><br><span class="line">      console.log(this === myPoint);      // =&gt; true</span><br><span class="line">      console.log(this.x + &apos;:&apos; + this.y); // =&gt; &apos;95:165&apos;</span><br><span class="line">    &#125;, 1000);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">const myPoint = new Point(95, 165);</span><br><span class="line">myPoint.log();</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><code>setTimeout</code>使用与<code>log()</code>方法相同的上下文(<code>myPoint</code>对象)调用箭头函数。正如所见，箭头函数从定义它的函数继承上下文。</p><p>如果在这个例子里尝试用常规函数,它创建自己的上下文(<code>window</code>或严格模式下的<code>undefined</code>)。因此，要使相同的代码正确地使用函数表达式，需要手动绑定上下文:<code>setTimeout(function(){…}.bind(this))</code>。这很冗长，使用箭头函数是一种更简洁、更短的解决方案。</p><p>如果箭头函数在最顶层的作用域中定义（在任何函数之外），则上下文始终是全局对象（浏览器中的 window）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">onst getContext = () =&gt; &#123;</span><br><span class="line">   console.log(this === window); // =&gt; true</span><br><span class="line">   return this;</span><br><span class="line">&#125;;</span><br><span class="line">console.log(getContext() === window); // =&gt; true</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>箭头函数一劳永逸地与词汇上下文绑定。 即使修改上下文，<code>this</code>也不能被改变：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">const numbers = [1, 2];</span><br><span class="line">(function() &#123;  </span><br><span class="line">  const get = () =&gt; &#123;</span><br><span class="line">    console.log(this === numbers); // =&gt; true</span><br><span class="line">    return this;</span><br><span class="line">  &#125;;</span><br><span class="line">  console.log(this === numbers); // =&gt; true</span><br><span class="line">  get(); // =&gt; [1, 2]</span><br><span class="line">  // Use arrow function with .apply() and .call()</span><br><span class="line">  get.call([0]);  // =&gt; [1, 2]</span><br><span class="line">  get.apply([0]); // =&gt; [1, 2]</span><br><span class="line">  // Bind</span><br><span class="line">  get.bind([0])(); // =&gt; [1, 2]</span><br><span class="line">&#125;).call(numbers);</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>无论如何调用箭头函数<code>get</code>，它总是保留词汇上下文<code>numbers</code>。 用其他上下文的隐式调用(通过 <code>get.call([0])</code>或<code>get.apply([0])</code>)或者重新绑定(通过<code>.bind()</code>)都不会起作用。</p><p>箭头函数不能用作构造函数。 将它作为构造函数调用(<code>new get()</code>)会抛出一个错误：<code>TypeError: get is not a constructor</code>。</p><h4 id="7-2-陷阱-用箭头函数定义方法"><a href="#7-2-陷阱-用箭头函数定义方法" class="headerlink" title="7.2. 陷阱: 用箭头函数定义方法"></a>7.2. 陷阱: 用箭头函数定义方法</h4><p>你可能希望使用箭头函数来声明一个对象上的方法。箭头函数的定义相比于函数表达式短得多：<code>(param) =&gt; {...} instead of function(param) {..}</code>。</p><p>来看看例子，用箭头函数在Period类上定义了<code>format()</code>方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function Period (hours, minutes) &#123;  </span><br><span class="line">  this.hours = hours;</span><br><span class="line">  this.minutes = minutes;</span><br><span class="line">&#125;</span><br><span class="line">Period.prototype.format = () =&gt; &#123;</span><br><span class="line">  console.log(this === window); // =&gt; true</span><br><span class="line">  return this.hours + &apos; hours and &apos; + this.minutes + &apos; minutes&apos;;</span><br><span class="line">&#125;;</span><br><span class="line">const walkPeriod = new Period(2, 30);  </span><br><span class="line">walkPeriod.format(); // =&gt; &apos;undefined hours and undefined minutes&apos;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>由于<code>format</code>是一个箭头函数，并且在全局上下文（最顶层的作用域）中定义，因此 <code>this</code> 指向<code>window</code>对象。</p><p>即使<code>format</code>作为方法在一个对象上被调用如<code>walkPeriod.format()</code>，<code>window</code>仍然是这次调用的上下文。之所以会这样是因为箭头函数有静态的上下文，并不会随着调用方式的改变而改变。</p><p>该方法返回<code>&#39;undefined hours和undefined minutes&#39;</code>，这不是咱们想要的结果。</p><p>函数表达式解决了这个问题，因为常规函数确实能根据实际调用改变它的上下文：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function Period (hours, minutes) &#123;  </span><br><span class="line">  this.hours = hours;</span><br><span class="line">  this.minutes = minutes;</span><br><span class="line">&#125;</span><br><span class="line">Period.prototype.format = function() &#123;</span><br><span class="line">  console.log(this === walkPeriod); // =&gt; true</span><br><span class="line">  return this.hours + &apos; hours and &apos; + this.minutes + &apos; minutes&apos;;</span><br><span class="line">&#125;;</span><br><span class="line">const walkPeriod = new Period(2, 30);  </span><br><span class="line">walkPeriod.format(); // =&gt; &apos;2 hours and 30 minutes&apos;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><code>walkPeriod.format()</code>是一个对象上的方法调用，它的上下文是<code>walkPeriod</code>对象。<code>this.hours</code>等于<code>2</code>，<code>this.minutes</code>等于<code>30</code>，所以这个方法返回了正确的结果：<code>&#39;2 hours and 30 minutes&#39;</code>。</p><p><strong>原文：dmitripavlutin.com/gentle-expl…</strong></p><p><strong>代码部署后可能存在的BUG没法实时知道，事后为了解决这些BUG，花了大量的时间进行log 调试，这边顺便给大家推荐一个好用的BUG监控工具 Fundebug。</strong></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>为函数调用对<code>this</code>影响最大，从现在开始不要问自己：</p><blockquote><p>this 是从哪里来的？</p></blockquote><p>而是要看看</p><blockquote><p>函数是怎么被调用的？</p></blockquote><p>对于箭头函数，需要想想</p><blockquote><p>在这个箭头函数被定义的地方，this是什么？</p></blockquote><p>这是处理<code>this</code>时的正确想法，它们可以让你免于头痛。</p>]]></content>
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> snippet </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>挖矿程序</title>
      <link href="/2019/07/31/%E6%8C%96%E7%9F%BF%E7%A8%8B%E5%BA%8F/"/>
      <url>/2019/07/31/%E6%8C%96%E7%9F%BF%E7%A8%8B%E5%BA%8F/</url>
      <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">config.json （挖矿配置）、</span><br><span class="line">sysupdate （XMR 挖矿软件）、</span><br><span class="line">update.sh （本脚本）、</span><br><span class="line">networkservice(scanner扫描并入侵其他的主机)、</span><br><span class="line">sysguard(watchdog 用于监控并保证病毒的正常运行以及更新) 并保证他们以 root 权限运行。</span><br></pre></td></tr></table></figure><ol><li><p>查看病毒的 PID 号</p></li><li><p>获取绝对路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l /proc/&#123;pid 号&#125;/exe</span><br></pre></td></tr></table></figure></li><li><p>删除/tmp文件夹的所有文件</p></li><li><p>检查下定时任务</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -l 或者 cat /var/spool/cron/will</span><br></pre></td></tr></table></figure><p>上面的will为当前用户名</p><p>查看定时任务的日志</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">more /var/<span class="built_in">log</span>/cron <span class="built_in">log</span></span><br></pre></td></tr></table></figure></li><li><p>删除定时任务</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm /var/spool/cron/root 或者 crontab -r 删除定时任务</span><br></pre></td></tr></table></figure></li><li><p>kill 命令将相关进程干掉</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sysupdate</span><br><span class="line">networkservice</span><br><span class="line">sysguard</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> snippet </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>java io</title>
      <link href="/2019/07/10/java%20io/"/>
      <url>/2019/07/10/java%20io/</url>
      <content type="html"><![CDATA[<h2 id="流"><a href="#流" class="headerlink" title="流"></a>流</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">流包括字符流和字节流，流从概念上来说是一个连续的数据流。当程序需要读数据的时候就需要使用输入流读取数据，当需要往外写数据的时候就需要输出流</span><br></pre></td></tr></table></figure><ul><li><p>字节流：字节流主要用来处理字节或二进制对象<code>InputStream、OutputStream，</code></p><blockquote><p>在使用字节流的时候，InputStream和OutputStream都是抽象类，我们实例化的都是他们的子类，每一个子类都有自己的作用范围</p></blockquote><p><img src="https://i.imgur.com/s39Xj3r.png" alt=""></p></li><li><p>字符流：字符流用来处理字符文本或字符串<code>Reader、Writer</code></p><blockquote><p>在使用字符流的时候也是，Reader和Writer都是抽象类，我们实例化的都是他们的子类，每一个子类都有自己的作用范围</p></blockquote><p><img src="https://i.imgur.com/RMD0koG.png" alt=""></p></li><li><p>字节流转换为字符流</p><blockquote><p>使用<code>InputStreamReader、OutputStreamWriter</code>可以将输入字节流转化为输入字符流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; Reader reader  =  <span class="keyword">new</span> InputStreamReader(inputStream);</span><br><span class="line">&gt; Writer writer = <span class="keyword">new</span> OutputStreamWriter(outputStream)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote></li></ul><p>输入字节流：<strong>InputStream</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    File file = <span class="keyword">new</span> File(<span class="string">"D:/a.txt"</span>);</span><br><span class="line">    InputStream inputStream = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">    <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[(<span class="keyword">int</span>) file.length()];</span><br><span class="line">    inputStream.read(bytes);</span><br><span class="line">    System.out.println(<span class="keyword">new</span> String(bytes));</span><br><span class="line">    inputStream.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输入字符流：<strong>Reader</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    File file = <span class="keyword">new</span> File(<span class="string">"D:/a.txt"</span>);</span><br><span class="line">    Reader reader = <span class="keyword">new</span> FileReader(file);</span><br><span class="line">    <span class="keyword">char</span>[] bytes = <span class="keyword">new</span> <span class="keyword">char</span>[(<span class="keyword">int</span>) file.length()];</span><br><span class="line">    reader.read(bytes);</span><br><span class="line">    System.out.println(<span class="keyword">new</span> String(bytes));</span><br><span class="line">    reader.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出字节流：<strong>OutputStream</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    String var = <span class="string">"hai this is a test"</span>;</span><br><span class="line">    File file = <span class="keyword">new</span> File(<span class="string">"D:/b.txt"</span>);</span><br><span class="line">    OutputStream outputStream = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">    outputStream.write(var.getBytes());</span><br><span class="line">    outputStream.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出字符流：<strong>Writer</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    String var = <span class="string">"hai this is a test"</span>;</span><br><span class="line">    File file = <span class="keyword">new</span> File(<span class="string">"D:/b.txt"</span>);</span><br><span class="line">    Writer writer = <span class="keyword">new</span> FileWriter(file);</span><br><span class="line">    writer.write(var);</span><br><span class="line">    writer.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>BufferedInputStream</strong></p><blockquote><p>在使用InputStream的时候，都是一个字节一个字节的读或写，而BufferedInputStream为输入字节流提供了缓冲区，读数据的时候会一次读取一块数据放到缓冲区里，当缓冲区里的数据被读完之后，输入流会再次填充数据缓冲区，直到输入流被读完，有了缓冲区就能够提高很多io速度</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * inputStream 输入流</span></span><br><span class="line"><span class="comment"> * 1024 内部缓冲区大小为1024byte</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">BufferedInputStream bufferedInputStream = <span class="keyword">new</span> BufferedInputStream(inputStream,<span class="number">1024</span>);</span><br></pre></td></tr></table></figure><p><strong>BufferedOutputStream</strong></p><blockquote><p>BufferedOutputStream可以为输出字节流提供缓冲区，作用与BufferedInputStream类似，使用方式将输出流包装到BufferedOutputStream中</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * outputStream 输出流</span></span><br><span class="line"><span class="comment"> * 1024 内部缓冲区大小为1024byte</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">BufferedOutputStream bufferedOutputStream = <span class="keyword">new</span> BufferedOutputStream(outputStream,<span class="number">1024</span>);</span><br></pre></td></tr></table></figure><p><strong>BufferedReader</strong></p><blockquote><p>为输入字符流提供缓冲区</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BufferedReader bufferedReader = <span class="keyword">new</span> BufferedReader(reader,<span class="number">1024</span>);</span><br></pre></td></tr></table></figure><p><strong>BufferedWriter</strong></p><blockquote><p>为输出字符流提供缓冲区</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BufferedWriter bufferedWriter = <span class="keyword">new</span> BufferedWriter(writer,<span class="number">1024</span>);</span><br></pre></td></tr></table></figure><h2 id="io模型"><a href="#io模型" class="headerlink" title="io模型"></a>io模型</h2><h3 id="bio"><a href="#bio" class="headerlink" title="bio"></a>bio</h3><blockquote><p>同步阻塞IO模型</p><p>JDK 1.4版本以前</p></blockquote><p><img src="https://chenmingyu.top/nio/bio%E7%BA%BF%E7%A8%8B.png" alt=""></p><p>在这种模式中通常用一个线程去接受请求，然后用一个线程池去处理请求，用这种方式并发管理多个Socket客户端连接</p><p><img src="https://chenmingyu.top/nio/BIO%E7%BA%BF%E7%A8%8B+%E7%BA%BF%E7%A8%8B%E6%B1%A0.png" alt=""></p><h3 id="nio"><a href="#nio" class="headerlink" title="nio"></a>nio</h3><blockquote><p>同步非阻塞IO模型</p><p>JDK 1.4版本以后</p></blockquote><p>成熟的框架，比如Netty</p><h3 id="aio"><a href="#aio" class="headerlink" title="aio"></a>aio</h3><blockquote><p>异步非阻塞IO模型</p><p>JDK1.7升级了Nio类库，成为Nio2.0，最主要的是提供了异步文件的IO操作，以及事件驱动IO，AIO的异步套接字通道是真正的异步非阻塞IO</p></blockquote><p><img src="https://chenmingyu.top/nio/%E5%90%84IO%E6%A8%A1%E5%9E%8B%E5%AF%B9%E6%AF%94.png" alt=""></p><hr><p>参考：</p><p><a href="https://chenmingyu.top/nio/" target="_blank" rel="noopener">一文看懂java io系统</a></p>]]></content>
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> learn </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>kafka learn</title>
      <link href="/2019/06/11/kafka%20learn/"/>
      <url>/2019/06/11/kafka%20learn/</url>
      <content type="html"><![CDATA[<h2 id="port（confluent-reference）"><a href="#port（confluent-reference）" class="headerlink" title="port（confluent reference）"></a>port（confluent reference）</h2><table><thead><tr><th style="text-align:left">Component</th><th style="text-align:left">Default Port</th></tr></thead><tbody><tr><td style="text-align:left">Zookeeper</td><td style="text-align:left">2181</td></tr><tr><td style="text-align:left">Apache Kafka brokers (plain text)</td><td style="text-align:left">9092</td></tr><tr><td style="text-align:left">Schema Registry REST API</td><td style="text-align:left">8081</td></tr><tr><td style="text-align:left">REST Proxy</td><td style="text-align:left">8082</td></tr><tr><td style="text-align:left">Kafka Connect REST API</td><td style="text-align:left">8083</td></tr><tr><td style="text-align:left">Confluent Control Center</td><td style="text-align:left">9021</td></tr></tbody></table><h2 id="System-Architecture"><a href="#System-Architecture" class="headerlink" title="System Architecture"></a>System Architecture</h2><p><img src="https://i.imgur.com/gG71h6m.png" alt=""></p><ul><li><strong>kafka Producer API:</strong> Applications directly producing data (ex: clickstream, logs, IoT).</li><li><strong>Kafka Connect Source API:</strong> Applications bridging between a datastore we don’t control and Kafka (ex: CDC, Postgres, MongoDB, Twitter, REST API).</li><li><strong>Kafka Streams API / KSQL:</strong> Applications wanting to consume from Kafka and produce back into Kafka, also called stream processing. Use KSQL if you think you can write your real-time job as SQL-like, use Kafka Streams API if you think you’re going to need to write complex logic for your job.</li><li><strong>Kafka Consumer API:</strong> Read a stream and perform real-time actions on it (e.g. send email…)</li><li><strong>Kafka Connect Sink API</strong>: Read a stream and store it into a target store (ex: Kafka to S3, Kafka to HDFS, Kafka to PostgreSQL, Kafka to MongoDB, etc.)</li></ul><p><img src="https://www.sohamkamani.com/basic_arch-e0b11d2ab5b62a78cb7fd26d3a9d279b.svg" alt=""></p><ol><li><strong>Zookeeper</strong> : Which is used by Kafka to maintain state between the nodes of the cluster.</li><li><strong>Kafka brokers</strong> : The “pipes” in our pipeline, which store and emit data.</li><li><strong>Producers</strong> : That insert data into the cluster.</li><li><strong>Consumers</strong> : That read data from the cluster.</li></ol><p><img src="https://kafka.apache.org/22/images/kafka-apis.png" alt=""></p><h3 id="Creating-a-topic"><a href="#Creating-a-topic" class="headerlink" title="Creating a topic"></a>Creating a topic</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-topics.sh \</span><br><span class="line">--create \</span><br><span class="line">--topic my-kafka-topic \</span><br><span class="line">--zookeeper localhost:2181 \</span><br><span class="line">--partitions 3 \</span><br><span class="line">--replication-factor 2</span><br></pre></td></tr></table></figure><ul><li>The <code>paritions</code> options lets you decide how many brokers you want your data to be split between. Since we set up 3 brokers, we can set this option to 3.</li><li>The <code>replication-factor</code> describes how many copies of you data you want (in case one of the brokers goes down, you still have your data on the others).</li></ul><h3 id="Producer"><a href="#Producer" class="headerlink" title="Producer"></a>Producer</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-console-producer.sh \</span><br><span class="line">--broker-list localhost:9093,localhost:9094,localhost:9095 \</span><br><span class="line">--topic my-kafka-topic</span><br></pre></td></tr></table></figure><h3 id="Consumers"><a href="#Consumers" class="headerlink" title="Consumers"></a>Consumers</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-console-consumer.sh \</span><br><span class="line">--bootstrap-server localhost:9093 \</span><br><span class="line">--topic my-kafka-topic \</span><br><span class="line">--from-beginning</span><br></pre></td></tr></table></figure><ul><li>The <code>bootstrap-server</code> can be any one of the brokers in the cluster.</li><li>The <code>from-beginning</code> option tells the cluster that you want all the messages that it currently has with it, even messages that we put into it previously.</li></ul><p>Try starting another consumer in a different terminal window:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-console-consumer.sh \</span><br><span class="line">--bootstrap-server localhost:9093 \</span><br><span class="line">--topic my-kafka-topic \</span><br><span class="line">--from-beginning \</span><br><span class="line">--group group2</span><br></pre></td></tr></table></figure><h2 id="Kafka-as-a-Messaging-System"><a href="#Kafka-as-a-Messaging-System" class="headerlink" title="Kafka as a Messaging System"></a>Kafka as a Messaging System</h2><ul><li><p>As with a queue the consumer group allows you to divide up processing over a collection of processes (the members of the consumer group). As with publish-subscribe, Kafka allows you to broadcast messages to multiple consumer groups.</p><p><img src="https://kafka.apache.org/22/images/consumer-groups.png" alt=""></p></li><li><p>Kafka does it better. By having a notion of parallelism—the partition—within the topics, Kafka is able to provide both ordering guarantees and load balancing over a pool of consumer processes. This is achieved by assigning the partitions in the topic to the consumers in the consumer group so that each partition is consumed by exactly one consumer in the group. By doing this we ensure that the consumer is the only reader of that partition and consumes the data in order. Since there are many partitions this still balances the load over many consumer instances. Note however that there cannot be more consumer instances in a consumer group than partitions.</p></li><li><p>Each record consists of a key, a value, and a timestamp.</p></li></ul><h2 id="Kafka-as-a-Storage-System"><a href="#Kafka-as-a-Storage-System" class="headerlink" title="Kafka as a Storage System"></a>Kafka as a Storage System</h2><h2 id="Kafka-as-Stream-Processing"><a href="#Kafka-as-Stream-Processing" class="headerlink" title="Kafka as Stream Processing"></a>Kafka as Stream Processing</h2><h2 id="source-code"><a href="#source-code" class="headerlink" title="source code"></a>source code</h2><h3 id="源码文件结构"><a href="#源码文件结构" class="headerlink" title="源码文件结构"></a>源码文件结构</h3><table><thead><tr><th>目录</th><th>作用</th></tr></thead><tbody><tr><td>bin</td><td>存放可直接在Linux或Windows上运行的.sh文件和.bat文件，包含Kafka常用操作以及ZooKeeper便捷脚本</td></tr><tr><td>checkstyle</td><td>存放代码规范检查文档</td></tr><tr><td>clients</td><td>客户端的实现</td></tr><tr><td>config</td><td>存放配置文件</td></tr><tr><td>connetct</td><td>Kafka Connect工具的实现</td></tr><tr><td>core</td><td>核心模块</td></tr><tr><td>docs</td><td>官方文档</td></tr><tr><td>examples</td><td>Kafka生产者消费者简单Demo</td></tr><tr><td>jmh-benchmarks</td><td>基准测试模块</td></tr><tr><td>log4j-appender</td><td>日志模块</td></tr><tr><td>streams</td><td>Kafka Streams客户端库</td></tr><tr><td>tools</td><td>工具类</td></tr></tbody></table><h3 id="核心模块结构"><a href="#核心模块结构" class="headerlink" title="核心模块结构"></a>核心模块结构</h3><table><thead><tr><th>目录</th><th>作用</th></tr></thead><tbody><tr><td>admin</td><td>管理模块，操作和管理topic， broker, consumer group， records等</td></tr><tr><td>api</td><td>封装调用</td></tr><tr><td>client</td><td>Producer生产的元数据信息的传递</td></tr><tr><td>cluster</td><td>存活的Broker集群、分区、副本以及他们的底层属性和相互关系</td></tr><tr><td>common</td><td>异常类、枚举类、格式化类、配置类等</td></tr><tr><td>consumer</td><td>旧版本的废弃消费者类</td></tr><tr><td>controller</td><td>Kafka集群控制中心的选举，分区状态管理，分区副本状态管理，监听ZooKeeper数据变化等</td></tr><tr><td>coordinator</td><td>GroupCoordinator处理一般组成员资格和偏移量。transaction管理事务</td></tr><tr><td>javaapi</td><td>给java调用的生产者、消费者、消息集api</td></tr><tr><td>log</td><td>管理log，它是消息存储的形式，可对应到磁盘上的一个文件夹</td></tr><tr><td>message</td><td>由消息封装而成的一个压缩消息集</td></tr><tr><td>metrics</td><td>Kafka监控模块</td></tr><tr><td>network</td><td>网络管理模块，对客户端连接的处理</td></tr><tr><td>producer</td><td>旧版本的废弃生产者类</td></tr><tr><td>security</td><td>权限管理</td></tr><tr><td>serializer</td><td>消息序列化与反序列化处理</td></tr><tr><td>server</td><td>服务器端的实现</td></tr><tr><td>tools</td><td>各种控制台工具的实现</td></tr><tr><td>utils</td><td>工具类</td></tr><tr><td>zk</td><td>提供与ZooKeeper交互的管理方法和在管道之上的更高级别的Kafka特定操作</td></tr><tr><td>zookeeper</td><td>一个促进管道传输请求的ZooKeeper客户端</td></tr></tbody></table>]]></content>
      
      <categories>
          
          <category> kafka </category>
          
      </categories>
      
      
        <tags>
            
            <tag> learn </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>rabbitmq learn</title>
      <link href="/2019/05/14/rabbitmq/"/>
      <url>/2019/05/14/rabbitmq/</url>
      <content type="html"><![CDATA[<ul><li><p>查询已有queue</p><p><code>sudo rabbitmqctl list_queues</code></p></li><li><p>查询已有exchanges</p><p><code>sudo rabbitmqctl list_exchanges</code></p></li></ul><h2 id="Publish-Subscribe"><a href="#Publish-Subscribe" class="headerlink" title="Publish/Subscribe"></a>Publish/Subscribe</h2><ul><li><p>Exchanges</p><p>There are a few exchange types available: <strong>direct</strong>, <strong>topic</strong>, <strong>headers</strong> and <strong>fanout</strong>.</p></li><li><p>Bindings</p><p>A binding is a relationship between an exchange and a queue</p></li></ul>]]></content>
      
      <categories>
          
          <category> rabbitmq </category>
          
      </categories>
      
      
        <tags>
            
            <tag> learn </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>http learn</title>
      <link href="/2019/05/14/http%20learn/"/>
      <url>/2019/05/14/http%20learn/</url>
      <content type="html"><![CDATA[<h2 id="http-1-0-http-1-1"><a href="#http-1-0-http-1-1" class="headerlink" title="http 1.0 http 1.1"></a>http 1.0 http 1.1</h2><ul><li><p>HTTP1.0最早在网页中使用是1996年，那个时候只是使用一些较为简单的网页和网络的请求，每次请求都需要建立一个单独的连接，上一次和下一次请求完全分离。这种做法，即使每次的请求量都很小，但是客户端和服务端每次建立TCP连接和关闭TCP连接都是相对比较费时的过程，严重影响客户端和服务端的性能。</p></li><li><p>基于以上的问题，HTTP1.1在1999年广泛应用于现在的各大浏览器网络请求中，同时HTTP1.1也是当前使用最为广泛的HTTP协议（2015年诞生了HTTP2，但是还未大规模应用），这里不详细对比HTTP1.1针对HTTP1.0改进了什么，只是在连接这块，HTTP1.1支持在一个TCP连接上传送多个HTTP请求和响应，减少了建立和关闭连接的消耗延迟，一定程度上弥补了HTTP1.0每次请求都要创建连接的缺点，这就是长连接，HTTP1.1默认使用长连接。</p></li><li><p>那么，长连接是如何工作的呢？首先，我们要明确一下，长短连接是通信层（TCP）的概念，HTTP是应用层协议，它只能说告诉通信层我打算一段时间内复用TCP通道而没有自己去建立、释放TCP通道的能力。</p></li></ul><p><img src="https://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwdKAeT5rjMFfDXeITCDnbwnNXWrFDaIIhBibAk4N83H5dKXAkMNleqewC53Y8WQ6cOhRjA7k4SuMw/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt=""></p><ul><li>http的keep-alive和tcp的keep-alive的区别<ul><li>http的keep-alive是为了复用已有连接</li><li>tcp的keep-alive是为了保活，即保证对端还存活，不然对端已经不在了我这边还占着和对端的这个连接，浪费服务器资源，做法是隔一段时间发送一个心跳包到对端服务器，一旦长时间没有接收到应答，就主动关闭连接</li></ul></li></ul><h2 id="WebSockets"><a href="#WebSockets" class="headerlink" title="WebSockets"></a>WebSockets</h2><p>WebSockets provide a persistent connection between a client and server that both parties can use to start sending data at any time.**</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// Create a new WebSocket.</span><br><span class="line">var socket = new WebSocket(&apos;ws://echo.websocket.org&apos;);</span><br></pre></td></tr></table></figure><ul><li><p>Once the connection has been established the <code>open</code> event will be fired on your WebSocket instance.</p></li><li><p>请求</p><p><code>ws://localhost:9095/webSocket/d72b3660-29a8-4276-9eb1-3373e82fdd92</code></p></li><li><p>后台请求的结果传入websocket是通过session建立关联的</p></li></ul>]]></content>
      
      <categories>
          
          <category> http </category>
          
      </categories>
      
      
        <tags>
            
            <tag> learn </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>bigdata snippet</title>
      <link href="/2019/05/05/bigdata/"/>
      <url>/2019/05/05/bigdata/</url>
      <content type="html"><![CDATA[<h2 id="BIG-DATA-What-is-Types-Characteristics-amp-Example"><a href="#BIG-DATA-What-is-Types-Characteristics-amp-Example" class="headerlink" title="BIG DATA: What is, Types, Characteristics &amp; Example"></a>BIG DATA: What is, Types, Characteristics &amp; Example</h2><ul><li>Big Data is defined as data that is huge in size. Bigdata is a term used to describe a collection of data that is huge in size and yet growing exponentially with time.</li><li>Examples of Big Data generation includes stock exchanges, social media sites, jet engines, etc.</li><li>Big Data could be 1) Structured, 2) Unstructured, 3) Semi-structured</li><li>Volume, Variety, Velocity, and Variability are few Characteristics of Bigdata</li><li>Improved customer service, better operational efficiency, Better Decision Making are few advantages of Bigdata</li></ul><h2 id="Hadoop-EcoSystem-and-Components"><a href="#Hadoop-EcoSystem-and-Components" class="headerlink" title="Hadoop EcoSystem and Components"></a>Hadoop EcoSystem and Components</h2><p><img src="https://www.guru99.com/images/Big_Data/061114_0803_LearnHadoop4.png" alt=""></p><h3 id="Hadoop-Architecture"><a href="#Hadoop-Architecture" class="headerlink" title="Hadoop Architecture"></a>Hadoop Architecture</h3><p><img src="https://www.guru99.com/images/1/hadoop-architecture.png" alt=""></p><h4 id="HDFS-Architecture"><a href="#HDFS-Architecture" class="headerlink" title="HDFS Architecture"></a>HDFS Architecture</h4><p>HDFS cluster primarily consists of a <strong>NameNode</strong> that manages the file system <strong>Metadata</strong> and a <strong>DataNodes</strong> that stores the <strong>actual data</strong>.</p><ul><li><p>Read Operation In HDFS</p><p><img src="https://www.guru99.com/images/Big_Data/061114_0923_LearnHDFSAB1.png" alt=""></p></li><li><p>Write Operation In HDFS</p><p><img src="https://www.guru99.com/images/Big_Data/061114_0923_LearnHDFSAB2.png" alt=""></p></li></ul><h4 id="MapReduce"><a href="#MapReduce" class="headerlink" title="MapReduce"></a>MapReduce</h4><p>The whole process goes through four phases of execution namely, splitting, mapping, shuffling, and reducing.</p><p><img src="https://www.guru99.com/images/Big_Data/061114_0930_Introductio1.png" alt=""></p><ol><li><strong>Jobtracker</strong>: Acts like a <strong>master</strong> (responsible for complete execution of submitted job)</li><li><strong>Multiple Task Trackers</strong>: Acts like <strong>slaves,</strong> each of them performing the job</li></ol><p><img src="https://www.guru99.com/images/Big_Data/061114_0930_Introductio2.png" alt=""></p>]]></content>
      
      <categories>
          
          <category> bigdata </category>
          
      </categories>
      
      
        <tags>
            
            <tag> snippet </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vmware snippet</title>
      <link href="/2019/04/20/vmware/"/>
      <url>/2019/04/20/vmware/</url>
      <content type="html"><![CDATA[<h3 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h3><ul><li><p>新增用户</p><p><code>adduser username</code></p><p><code>passwd username</code></p><p><code>usermod -aG wheel username</code></p><p><code>su - username</code></p></li></ul><h3 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h3><ul><li><p>安装完毕之后，需要设置IP分配</p><ol><li><p><code>cd /etc/sysconfig/network-scripts/</code></p></li><li><p>再进入编辑<code>ifcfg-e**</code> 文件 执行命令<br><code>vi ifcfg-e**</code></p></li><li>修改ONBOOT项</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">其中部分内容如下： </span><br><span class="line">DEVICE=eth0 #设备名称，可根据ifcofnig命令查看到。 </span><br><span class="line">BOOTPROTO=dhcp #连接方式，dhcp会自动分配地址，此时不需要在下面设置ip和网关 </span><br><span class="line">ONBOOT=yes #yes表示启动就执行该配置，需要改为yes</span><br></pre></td></tr></table></figure><ol start="4"><li><p>修改完后需要重启网络设置，执行</p><p><code>service network restart</code></p></li></ol></li><li><p>设置静态IP</p><ul><li><p><a href="https://blog.csdn.net/clevercode/article/details/50574695" target="_blank" rel="noopener">虚拟机设置</a></p></li><li><p>宿主机器设置</p><p>需要设置vmnet8的ip为同一网段的配置</p></li></ul></li></ul><h3 id="jdk"><a href="#jdk" class="headerlink" title="jdk"></a>jdk</h3><ul><li><p>安装jdk</p><p><code>sudo yum install java-1.8.0-openjdk-devel</code></p><ul><li>find path</li></ul><p><code>update-alternatives --config java</code></p><ul><li>config .bashrc</li></ul><p><code>export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.191.b12-1.el7_6.x86_64/jre</code></p></li></ul><h3 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h3><ul><li><p>授权所有机器可以从外界访问mysql</p><p><code>GRANT ALL PRIVILEGES ON *.* TO &#39;root&#39;@&#39;%&#39; IDENTIFIED BY &#39;will&#39;;</code></p><p><code>FLUSH PRIVILEGES;</code></p></li></ul>]]></content>
      
      <categories>
          
          <category> vmware </category>
          
      </categories>
      
      
        <tags>
            
            <tag> snippet </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vscode snippet</title>
      <link href="/2019/04/12/vscode%20snippet/"/>
      <url>/2019/04/12/vscode%20snippet/</url>
      <content type="html"><![CDATA[<h3 id="Skill"><a href="#Skill" class="headerlink" title="Skill"></a>Skill</h3><ul><li><p>open tab in new window</p><ul><li>Press Ctrl + k</li><li>Release the Ctrl and k keys</li><li>press O (the letter O, not Zero).</li></ul></li><li><p>save all</p><ul><li>Press Ctrl + k</li><li>Release the Ctrl and k keys</li><li>Press s</li></ul></li><li><p>copy line</p><p>Shift+Alt+Down and Shift+Alt+Up</p></li></ul><h3 id="Plugin"><a href="#Plugin" class="headerlink" title="Plugin"></a>Plugin</h3><ul><li><p>fileheader</p><p><code>ctrl+alt+i</code> can insert comments in the head.</p></li></ul>]]></content>
      
      <categories>
          
          <category> vscode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> snippet </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>dva learn</title>
      <link href="/2019/04/11/dva%20learn/"/>
      <url>/2019/04/11/dva%20learn/</url>
      <content type="html"><![CDATA[<p>dva = React-Router + Redux + Redux-saga</p><ul><li>路由： <a href="https://github.com/ReactTraining/react-router/tree/v2.8.1" target="_blank" rel="noopener">React-Router</a></li><li>架构： <a href="https://github.com/reactjs/redux" target="_blank" rel="noopener">Redux</a></li><li>异步操作： <a href="https://github.com/yelouafi/redux-saga" target="_blank" rel="noopener">Redux-saga</a></li></ul><p><img src="https://zos.alipayobjects.com/rmsportal/PPrerEAKbIoDZYr.png" alt=""></p><h3 id="State"><a href="#State" class="headerlink" title="State"></a>State</h3><p>tate 表示 Model 的状态数据</p><h3 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h3><p>Action 是一个普通 javascript 对象，它是改变 State 的唯一途径。</p><ul><li>action 必须带有 <code>type</code> 属性指明具体的行为，其它字段可以自定义，如果要发起一个 action 需要使用 <code>dispatch</code> 函数；需要注意的是 <code>dispatch</code> 是在组件 connect Models以后，通过 props 传入的。</li></ul><h3 id="dispatch"><a href="#dispatch" class="headerlink" title="dispatch"></a>dispatch</h3><p>dispatching function 是一个用于触发 action 的函数</p><ul><li><p>action 是改变 State 的唯一途径，但是action只描述了一个行为，而 dipatch 可以看作是触发这个行为的方式，而 Reducer 则是描述如何改变数据的。</p></li><li><p>connect Model 的组件通过 props 可以访问到 dispatch，可以调用 Model 中的 Reducer 或者 Effects.</p></li></ul><h3 id="Reducer"><a href="#Reducer" class="headerlink" title="Reducer"></a>Reducer</h3><p>Reducer函数接受两个参数：之前已经累积运算的结果和当前要被累积的值，返回的是一个新的累积结果。该函数把一个集合归并成一个单值。</p><ul><li>在 dva 中，reducers 聚合积累的结果是当前 model 的 state 对象。通过 actions 中传入的值，与当前 reducers 中的值进行运算获得新的值（也就是新的 state）。</li></ul><h3 id="Effect"><a href="#Effect" class="headerlink" title="Effect"></a>Effect</h3><p>Effect 被称为副作用，在我们的应用中，最常见的就是异步操作。</p><ul><li><p>它来自于函数编程的概念，之所以叫副作用是因为它使得我们的函数变得不纯，同样的输入不一定获得同样的输出。</p></li><li><p>dva 为了控制副作用的操作，将异步转成同步写法，从而将effects转为纯函数</p></li></ul><h3 id="Subscription"><a href="#Subscription" class="headerlink" title="Subscription"></a>Subscription</h3><p>Subscriptions 是一种从 <strong>源</strong> 获取数据的方法，它来自于 elm。</p><ul><li>Subscription 语义是订阅，用于订阅一个数据源，然后根据条件 dispatch 需要的 action。</li></ul><h3 id="数据流图"><a href="#数据流图" class="headerlink" title="数据流图"></a>数据流图</h3><p><img src="https://zos.alipayobjects.com/rmsportal/hUFIivoOFjVmwNXjjfPE.png" alt=""></p><ul><li><p>State 是储存数据的地方，收到 Action 以后，会更新数据。</p></li><li><p>View 就是 React 组件构成的 UI 层，从 State 取数据后，渲染成 HTML 代码。只要 State 有变化，View 就会自动更新。</p></li><li><p>Action 是用来描述 UI 层事件的一个对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dispatch(&#123;</span><br><span class="line">  type: <span class="string">'click-submit-button'</span>,</span><br><span class="line">  payload: <span class="keyword">this</span>.form.data</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>connect 是一个函数，绑定 State 到 View。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'dva'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapStateToProps</span>(<span class="params">state</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">todos</span>: state.todos &#125;;</span><br><span class="line">&#125;</span><br><span class="line">connect(mapStateToProps)(App);</span><br></pre></td></tr></table></figure><p>connect 方法返回的也是一个 React 组件，通常称为容器组件。因为它是原始 UI 组件的容器，即在外面包了一层 State。</p></li><li><p>dispatch 是一个函数方法，用来将 Action 发送给 State。</p><p><strong>被 connect 的 Component 会自动在 props 中拥有 dispatch 方法。</strong></p></li></ul><h3 id="数据流图二"><a href="#数据流图二" class="headerlink" title="数据流图二"></a>数据流图二</h3><p><img src="https://zos.alipayobjects.com/rmsportal/pHTYrKJxQHPyJGAYOzMu.png" alt=""></p><h3 id="Model-对象的属性"><a href="#Model-对象的属性" class="headerlink" title="Model 对象的属性"></a>Model 对象的属性</h3><blockquote><p>每个model，实际上都是普通的JavaScript对象</p></blockquote><ul><li>namespace: 当前 Model 的名称。整个应用的 State，由多个小的 Model 的 State 以 namespace 为 key 合成</li><li>state: 该 Model 当前的状态。数据保存在这里，直接决定了视图层的输出</li><li>reducers: Action 处理器，处理同步动作，用来算出最新的 State</li><li><p>effects：Action 处理器，处理异步动。dva 提供多个 effect 函数内部的处理函数，比较常用的是 <code>call</code> 和 <code>put</code>。</p><ul><li>call：执行异步函数</li><li>put：发出一个 Action，类似于 dispatch</li></ul></li><li><p>subscriptions</p></li></ul>]]></content>
      
      <categories>
          
          <category> dva </category>
          
      </categories>
      
      
        <tags>
            
            <tag> learn </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>redux learn</title>
      <link href="/2019/04/07/redux%20learn/"/>
      <url>/2019/04/07/redux%20learn/</url>
      <content type="html"><![CDATA[<h3 id="Passing-Data-Between-Adjacent-Components"><a href="#Passing-Data-Between-Adjacent-Components" class="headerlink" title="Passing Data Between Adjacent Components"></a>Passing Data Between Adjacent Components</h3><p>If you have components that are siblings and need to share data, the way to do that in React is to pull that data up into a parent component and pass it down with props.</p><p>That can be cumbersome though. Redux can help by giving you one global “parent” where you can store the data, and then you can <code>connect</code> the sibling components to the data with React-Redux.</p><h3 id="redux-vs-react-redux"><a href="#redux-vs-react-redux" class="headerlink" title="redux vs react-redux"></a>redux vs react-redux</h3><p><code>redux</code> knows nothing about React <em>at all</em>. (The <code>redux</code> library can be used outside of a React app too. It’ll work with Vue, Angular, and even backend Node/Express apps.)</p><p><code>react-redux</code> lets you connect pieces of the state to React components.</p><h3 id="store"><a href="#store" class="headerlink" title="store"></a>store</h3><p>in charge for orchestrating all the interactions</p><p>the <strong>state</strong> is the data, and the <strong>store</strong> is where it’s kept.</p><h3 id="reducer"><a href="#reducer" class="headerlink" title="reducer"></a>reducer</h3><p>the producer to make the state</p><blockquote><p>(state, action) =&gt; newState</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> letters = [<span class="string">'r'</span>, <span class="string">'e'</span>, <span class="string">'d'</span>, <span class="string">'u'</span>, <span class="string">'x'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// `reduce` takes 2 arguments:</span></span><br><span class="line"><span class="comment">//   - a function to do the reducing (you might say, a "reducer")</span></span><br><span class="line"><span class="comment">//   - an initial value for accumulatedResult</span></span><br><span class="line"><span class="keyword">var</span> word = letters.reduce(</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">accumulatedResult, arrayItem</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> accumulatedResult + arrayItem;</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="string">''</span>); <span class="comment">// &lt;-- notice this empty string argument: it's the initial value</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(word) <span class="comment">// =&gt; "redux"</span></span><br></pre></td></tr></table></figure><p><strong>Important Rule of Reducers </strong>:</p><ul><li>Never return undefined from a reducer.</li><li>Reducers must be pure functions.(This means that they can’t modify their arguments, and they can’t have side effects.)</li></ul><h3 id="action"><a href="#action" class="headerlink" title="action"></a>action</h3><p>plain JavaScript objects with a property named type. </p><blockquote><p>An action object describes a change you want to make (like “please increment the counter”) or an event that happenend (like “the request to the server failed with this error”).</p><p>action don’t really <em>do</em> anything. Not on their own, anyway.</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  type: <span class="string">"add an item"</span>,</span><br><span class="line">  item: <span class="string">"Apple"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">or</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  type: <span class="number">7008</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">or</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  type: <span class="string">"INCREMENT"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In order to make an action DO something, you need to <strong>dispatch</strong> it.</p><hr><h3 id="redux-tips"><a href="#redux-tips" class="headerlink" title="redux tips"></a>redux tips</h3><h4 id="Redux-avoids-these-problems-with-some-simple-rules"><a href="#Redux-avoids-these-problems-with-some-simple-rules" class="headerlink" title="Redux avoids these problems with some simple rules."></a>Redux avoids these problems with some simple rules.</h4><ul><li>State is read-only, and actions are the only way to modify it.</li><li>Changes happen one way, and one way only: dispatch(action) -&gt; reducer -&gt; new state.</li><li>The reducer function must be “pure” – it cannot modify its arguments, and it can’t have side effects.</li></ul><h4 id="The-most-important-methods"><a href="#The-most-important-methods" class="headerlink" title="The most important methods."></a>The most important methods.</h4><ul><li>getState for <strong>accessing the current state</strong> of the application</li><li>dispatch for <strong>dispatching an action</strong></li><li>subscribe for <strong>listening on state changes</strong></li></ul><h3 id="react-redux"><a href="#react-redux" class="headerlink" title="react-redux"></a>react-redux</h3><h4 id="Provider"><a href="#Provider" class="headerlink" title="Provider"></a>Provider</h4><p>By wrapping the entire app with the <code>Provider</code> component, <em>every component</em> in the app tree will be able to access the Redux store if it wants to.</p><h4 id="connect"><a href="#connect" class="headerlink" title="connect"></a>connect</h4><p>all of components can access the Redux store, but not automatically , We’ll need to use the <code>connect</code> function on our components to access the store.</p><h4 id="connects-a-React-component-with-the-Redux-store"><a href="#connects-a-React-component-with-the-Redux-store" class="headerlink" title="connects a React component with the Redux store."></a>connects a React component with the Redux store.</h4><ul><li>the mapStateToProps function</li><li>the mapDispatchToProps function</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> logo <span class="keyword">from</span> <span class="string">"./logo.svg"</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">"./App.css"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">"react-redux"</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; fetching, dog, onRequestDog, error &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">"App"</span>&gt;</span><br><span class="line">        ......</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const mapStateToProps = state =&gt; &#123;</span></span><br><span class="line"><span class="regexp">  return &#123;</span></span><br><span class="line"><span class="regexp">    fetching: state.fetching,</span></span><br><span class="line"><span class="regexp">    dog: state.dog,</span></span><br><span class="line"><span class="regexp">    error: state.error</span></span><br><span class="line"><span class="regexp">  &#125;;</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const mapDispatchToProps = dispatch =&gt; &#123;</span></span><br><span class="line"><span class="regexp">  return &#123;</span></span><br><span class="line"><span class="regexp">    onRequestDog: () =&gt; dispatch(&#123; type: "API_CALL_REQUEST" &#125;)</span></span><br><span class="line"><span class="regexp">  &#125;;</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default connect(mapStateToProps, mapDispatchToProps)(App);</span></span><br></pre></td></tr></table></figure><h3 id="redux-thunk"><a href="#redux-thunk" class="headerlink" title="redux-thunk"></a>redux-thunk</h3><p>It is a <strong>middleware</strong>, basically a plugin for Redux, that enables Redux to deal with actions like <code>getUser()</code>, ie.<code>dispatch(getUser())</code></p><p>thunk: it’s an action creator that returns a function instead of a plain action object, like this:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doStuff</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">dispatch, getState</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// dispatch actions here</span></span><br><span class="line">    <span class="comment">// or fetch data</span></span><br><span class="line">    <span class="comment">// or whatever</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>the 2 agruments in return function,Most of the time you’ll only need <code>dispatch</code>, but sometimes you want to do something conditionally, based on some value in the Redux state. In that case, call <code>getState()</code> and you’ll have the entire state to read as needed.</p><h4 id="setup-redux-thunk"><a href="#setup-redux-thunk" class="headerlink" title="setup redux thunk"></a>setup redux thunk</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">'redux-thunk'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createStore, applyMiddleware &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reducer</span>(<span class="params">state, action</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = createStore(</span><br><span class="line">  reducer,</span><br><span class="line">  applyMiddleware(thunk)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="redux-saga"><a href="#redux-saga" class="headerlink" title="redux-saga"></a>redux-saga</h3><p><code>redux-saga</code> relies on generators, but does a decent amount of the work for us, so (in my fairly limited experience) a deep understanding of them for this use-case isn’t necessary.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; takeLatest, call, put &#125; <span class="keyword">from</span> <span class="string">"redux-saga/effects"</span>;</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">"axios"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// watcher saga: watches for actions dispatched to the store, starts worker saga</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span>* <span class="title">watcherSaga</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> takeLatest(<span class="string">"API_CALL_REQUEST"</span>, workerSaga);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// function that makes the api request and returns a Promise for response</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fetchDog</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> axios(&#123;</span><br><span class="line">    method: <span class="string">"get"</span>,</span><br><span class="line">    url: <span class="string">"https://dog.ceo/api/breeds/image/random"</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// worker saga: makes the api call when watcher saga sees the action</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">workerSaga</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">yield</span> call(fetchDog);</span><br><span class="line">    <span class="keyword">const</span> dog = response.data.message;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// dispatch a success action to the store with the new dog</span></span><br><span class="line">    <span class="keyword">yield</span> put(&#123; <span class="attr">type</span>: <span class="string">"API_CALL_SUCCESS"</span>, dog &#125;);</span><br><span class="line">  </span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="comment">// dispatch a failure action to the store with the error</span></span><br><span class="line">    <span class="keyword">yield</span> put(&#123; <span class="attr">type</span>: <span class="string">"API_CALL_FAILURE"</span>, error &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> redux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> learn </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ES6 learn</title>
      <link href="/2019/04/04/ES6%20learn/"/>
      <url>/2019/04/04/ES6%20learn/</url>
      <content type="html"><![CDATA[<h3 id="Let"><a href="#Let" class="headerlink" title="Let"></a>Let</h3><p>let is similar to var but let has scope. let is only accessible in the block level it is defined.</p><p>example:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"> <span class="keyword">let</span> a = <span class="number">40</span>;</span><br><span class="line"> <span class="built_in">console</span>.log(a); <span class="comment">//40</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>and</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">50</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"> <span class="keyword">let</span> a = <span class="number">60</span>;</span><br><span class="line"> <span class="keyword">var</span> c = <span class="number">10</span>;</span><br><span class="line"> <span class="built_in">console</span>.log(a/c); <span class="comment">// 6</span></span><br><span class="line"> <span class="built_in">console</span>.log(b/c); <span class="comment">// 10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(c); <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 50</span></span><br></pre></td></tr></table></figure><h3 id="Const"><a href="#Const" class="headerlink" title="Const"></a>Const</h3><p>Const is used to assign a constant value to the variable. And the value cannot be changed. Its fixed.</p><p>example:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">50</span>;</span><br><span class="line">a = <span class="number">60</span>; <span class="comment">// shows error. You cannot change the value of const.</span></span><br><span class="line"><span class="keyword">const</span> b = <span class="string">"Constant variable"</span>;</span><br><span class="line">b = <span class="string">"Assigning new value"</span>; <span class="comment">// shows error.</span></span><br></pre></td></tr></table></figure><p>Whenever you define a const variable, Javascript references the address of the value to the variable.</p><p>example:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> LANGUAGES = [<span class="string">'Js'</span>, <span class="string">'Ruby'</span>, <span class="string">'Python'</span>, <span class="string">'Go'</span>];</span><br><span class="line">LANGUAGES = <span class="string">"Javascript"</span>; <span class="comment">// shows error.</span></span><br><span class="line">LANGUAGES.push(<span class="string">'Java'</span>); <span class="comment">// Works fine.</span></span><br><span class="line"><span class="built_in">console</span>.log(LANGUAGES); <span class="comment">// ['Js', 'Ruby', 'Python', 'Go', 'Java']</span></span><br></pre></td></tr></table></figure><p>the variable ‘LANGUAGES’ actually references to the memory allocated to the array. So you cannot change the variable to reference some other memory location later. Throughout the program it only references to the array.</p><h3 id="Arrow-Function"><a href="#Arrow-Function" class="headerlink" title="Arrow Function"></a>Arrow Function</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Old Syntax</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">oldOne</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"Hello World..!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// New Syntax</span></span><br><span class="line"><span class="keyword">var</span> newOne = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"Hello World..!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>and</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> NewOneWithParameters = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(a+b); <span class="comment">// 30</span></span><br><span class="line">&#125;</span><br><span class="line">NewOneWithParameters(<span class="number">10</span>, <span class="number">20</span>);</span><br></pre></td></tr></table></figure><p>There are two things to explain here.</p><ol><li>If you have a function with single parameter, you don’t need (). In our case <strong>element</strong> is the parameter.</li><li>And If you have single line as the body of the function you don’t need {} and also JS will implicitly returns the value after executing the function. You don’t have to use <strong>return</strong> keyword.</li><li>Arrow functions shine best with anything that requires <code>this</code> to be bound to the context, and not the function itself.</li></ol><h3 id="For-of-loop"><a href="#For-of-loop" class="headerlink" title="For of loop"></a>For of loop</h3><p>for..of iterates through list of elements (i.e) like Array and returns the elements (not their index) one by one.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> arr) &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br><span class="line">Output:</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>and</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> string = <span class="string">"Javascript"</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> char <span class="keyword">of</span> string) &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(char);</span><br><span class="line">&#125;</span><br><span class="line">Output:</span><br><span class="line">J</span><br><span class="line">a</span><br><span class="line">v</span><br><span class="line">a</span><br><span class="line">s</span><br><span class="line">c</span><br><span class="line">r</span><br><span class="line">i</span><br><span class="line">p</span><br><span class="line">t</span><br></pre></td></tr></table></figure><h3 id="Spread-attributes"><a href="#Spread-attributes" class="headerlink" title="Spread attributes"></a>Spread attributes</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> SumElements = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(arr); <span class="comment">// [10, 20, 40, 60, 90]</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">let</span> element <span class="keyword">of</span> arr) &#123;</span><br><span class="line"> sum += element;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="built_in">console</span>.log(sum); <span class="comment">// 220. </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SumElements([<span class="number">10</span>, <span class="number">20</span>, <span class="number">40</span>, <span class="number">60</span>, <span class="number">90</span>]);</span><br></pre></td></tr></table></figure><p>consider the same example with spread attributes:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> SumElements = <span class="function">(<span class="params">...arr</span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(arr); <span class="comment">// [10, 20, 40, 60, 90]</span></span><br><span class="line"><span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">let</span> element <span class="keyword">of</span> arr) &#123;</span><br><span class="line"> sum += element;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="built_in">console</span>.log(sum); <span class="comment">// 220. </span></span><br><span class="line">&#125;</span><br><span class="line">SumElements(<span class="number">10</span>, <span class="number">20</span>, <span class="number">40</span>, <span class="number">60</span>, <span class="number">90</span>); <span class="comment">// Note we are not passing array here. Instead we are passing the elements as arguments.</span></span><br></pre></td></tr></table></figure><p>Math.max is a simple method that returns the maximum element from given list. It doesn’t accept an array.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">60</span>];</span><br><span class="line"><span class="built_in">Math</span>.max(arr); <span class="comment">// Shows error. Doesn't accept an array.</span></span><br></pre></td></tr></table></figure><p>So lets use our savior:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">60</span>];</span><br><span class="line"><span class="built_in">Math</span>.max(...arr); <span class="comment">// 60</span></span><br></pre></td></tr></table></figure><h3 id="Maps"><a href="#Maps" class="headerlink" title="Maps"></a>Maps</h3><p>Map holds key-value pairs. It’s similar to an array but we can define our own index. And indexes are unique in maps.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">map.set(<span class="string">'name'</span>, <span class="string">'John'</span>);</span><br><span class="line">map.set(<span class="string">'id'</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">map.get(<span class="string">'name'</span>); <span class="comment">// John</span></span><br><span class="line">map.get(<span class="string">'id'</span>); <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line">map.size; <span class="comment">// 2. Returns the size of the map.</span></span><br><span class="line">map.keys(); <span class="comment">// outputs only the keys. </span></span><br><span class="line">map.values(); <span class="comment">// outputs only the values.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> map.keys()) &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(key);</span><br><span class="line">&#125;</span><br><span class="line">Output:</span><br><span class="line">name</span><br><span class="line">id</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> map) &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(key+<span class="string">" - "</span>+value);</span><br><span class="line">&#125;</span><br><span class="line">Output:</span><br><span class="line">name - John</span><br><span class="line">id - <span class="number">10</span></span><br></pre></td></tr></table></figure><h3 id="Sets"><a href="#Sets" class="headerlink" title="Sets"></a>Sets</h3><p>Sets are used to store the unique values of any type.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sets = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">sets.add(<span class="string">'a'</span>);</span><br><span class="line">sets.add(<span class="string">'b'</span>);</span><br><span class="line">sets.add(<span class="string">'a'</span>); <span class="comment">// We are adding duplicate value.</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> element <span class="keyword">of</span> sets) &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(element);</span><br><span class="line">&#125;</span><br><span class="line">Output:</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line"></span><br><span class="line">sets.size; <span class="comment">// returns 2. Size of the set.</span></span><br><span class="line">sets.has(<span class="string">'a'</span>); <span class="comment">// returns true. </span></span><br><span class="line">sets.has(<span class="string">'c'</span>); <span class="comment">// returns false.</span></span><br></pre></td></tr></table></figure><h3 id="Static-methods"><a href="#Static-methods" class="headerlink" title="Static methods"></a>Static methods</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span> </span>&#123;</span><br><span class="line"> <span class="keyword">static</span> Callme() &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"Static method"</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">Example.Callme();</span><br><span class="line">Output:</span><br><span class="line">Static method</span><br></pre></td></tr></table></figure><p> you can call the function without creating any instance for the class.</p><h3 id="Getters-and-Setters"><a href="#Getters-and-Setters" class="headerlink" title="Getters and Setters"></a>Getters and Setters</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(name) &#123;</span><br><span class="line"> <span class="keyword">this</span>.name = name;</span><br><span class="line"> &#125;</span><br><span class="line"> getName() &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line"> &#125;</span><br><span class="line"> setName(name) &#123;</span><br><span class="line"> <span class="keyword">this</span>.name = name;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> People(<span class="string">"Jon Snow"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(person.getName());</span><br><span class="line">person.setName(<span class="string">"Dany"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(person.getName());</span><br><span class="line">Output:</span><br><span class="line">Jon Snow</span><br><span class="line">Dany</span><br></pre></td></tr></table></figure><h3 id="Promises"><a href="#Promises" class="headerlink" title="Promises"></a>Promises</h3><p> They are used to make <strong>async</strong> operations such as API request, file handling, downloading images, etc.</p><p>Before promises, programmers used to define <strong>callbacks.</strong> Callbacks are normal functions in Javascript which executes when the async operation is complete.</p><ul><li><p>three states in promises</p><ol><li><strong>Pending</strong>: In this state the promise is just executing the async operation. For example, It’s making some API request to the server or downloading some images from cdn.  from this state promise can move to either to <strong>Fulfilled</strong> or to <strong>Rejected</strong></li><li><strong>Fulfilled</strong>: If the promise has reached this state, then it means that the async operation is complete and we have the output. For example, we have the response from the API.</li><li><strong>Rejected:</strong> If the promise has reached this state, it means that the async operation is not successful and we have the error which caused the operation to fail.</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> apiCall = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">if</span> ( API request to get some data ) &#123;</span><br><span class="line">  resolve(<span class="string">"The request is successful and the response is "</span>+ response);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span> &#123;</span><br><span class="line">  reject(<span class="string">"The request is not successful. The error is "</span>+error);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Then the <strong>resolve</strong> function is called if we get the response from the server. And if there is some error <strong>reject</strong> function is called with the error message.</p></li><li><p>We use <strong>handlers</strong> to get the output from the promise.</p><blockquote><p>Handlers are just functions which executes when some event occurs such as clicking a button, moving the cursor, etc.</p><p>So we can use handlers to handle when the <strong>resolve</strong> function is called or <strong>reject </strong>function is called.</p></blockquote><ul><li>The handler <strong>then</strong> executes its <strong>function parameter</strong> when the <strong>resolve</strong> function is called inside the promise.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// calling the promise with some handlers.</span></span><br><span class="line">apiCall.then(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;<span class="built_in">console</span>.log(x); &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Output</span></span><br><span class="line">The request is successful and the response is &#123;<span class="attr">name</span>: <span class="string">"Jon Snow"</span>&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>Catch</strong> handler looks out for <strong>reject</strong> function.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">apiCall</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(x); </span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;) </span><br><span class="line"></span><br><span class="line"><span class="comment">// Assuming the request is not successful ( reject function is called in the promise. )</span></span><br><span class="line">Output:</span><br><span class="line">The request is not successful</span><br></pre></td></tr></table></figure></li></ul><h3 id="Async-Await"><a href="#Async-Await" class="headerlink" title="Async / Await"></a>Async / Await</h3><h4 id="async"><a href="#async" class="headerlink" title="async"></a>async</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="string">"Hello Promise..!"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The above code is equivalent to the below code:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line"> <span class="comment">// executor function body.</span></span><br><span class="line"> &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>example:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">if</span> (a &lt; b) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"Greater"</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Not Greater"</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">hello(<span class="number">14</span>, <span class="number">10</span>)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"Good..! "</span> + x); </span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"Oops..! "</span> + x); </span><br><span class="line">&#125;)</span><br><span class="line">Output:</span><br><span class="line">Oops..! Not Greater. </span><br><span class="line"><span class="comment">// if you call hello(4, 10) you get "Good..! Greater"</span></span><br></pre></td></tr></table></figure><p>Don’t forget that async function will return a promise. So of course, you can call <strong>resolve</strong> and <strong>reject</strong> function inside <strong>async</strong> function too. </p><p>example:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">Max</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">if</span> (a &gt; b) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(<span class="string">"Success"</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="string">"Error"</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">Max(<span class="number">4</span>, <span class="number">10</span>)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"Good "</span> + x); </span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"Oops "</span> + x); </span><br><span class="line">&#125;);</span><br><span class="line">Output:</span><br><span class="line">Oops <span class="built_in">Error</span></span><br><span class="line"><span class="comment">// If we pass Max(14, 10) then we should get "Good Success" :)</span></span><br></pre></td></tr></table></figure><h4 id="await"><a href="#await" class="headerlink" title="await"></a>await</h4><p> It makes the Javascript to wait until you get the response from the endpoint. And then it resumes the execution.</p><p><strong>await can be used only inside async function. It doesn’t work outside async function</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">let</span> response = <span class="keyword">await</span> fetch(<span class="string">'https://api.github.com/'</span>);</span><br><span class="line"> <span class="comment">// above line fetches the response from the given API endpoint.</span></span><br><span class="line"> <span class="keyword">return</span> response;</span><br><span class="line">&#125;</span><br><span class="line">hello()</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(x); </span><br><span class="line">&#125;);</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">Output:</span><br><span class="line">Response <span class="keyword">from</span> the API.</span><br></pre></td></tr></table></figure><h3 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h3><h4 id="Array-Map"><a href="#Array-Map" class="headerlink" title="Array Map"></a>Array Map</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> modifiedArr = arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">element, index, arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> element * <span class="number">10</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(modifiedArr);</span><br><span class="line">Output:</span><br><span class="line">[<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>]</span><br></pre></td></tr></table></figure><p>And also note we have to return some value in the end. Which will be the modified value of that element. If you didn’t return anything then the particular element will be undefined.</p><p>One more thing I like to add is the second and third parameter is only optional. Only the first parameter is mandatory. for example :</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> modifiedArr = arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> element * <span class="number">10</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>write the map operator with arrow functions:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> modifiedArr = arr.map(<span class="function">(<span class="params">element, index</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"index "</span>+index);</span><br><span class="line">  <span class="keyword">return</span> element * <span class="number">10</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(modifiedArr);</span><br><span class="line">Output:</span><br><span class="line">index <span class="number">0</span></span><br><span class="line">index <span class="number">1</span></span><br><span class="line">index <span class="number">2</span></span><br><span class="line">index <span class="number">3</span></span><br><span class="line">index <span class="number">4</span></span><br><span class="line">[<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>]</span><br></pre></td></tr></table></figure><p>better:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> modifiedArr = arr.map(<span class="function"><span class="params">element</span> =&gt;</span> element * <span class="number">10</span>);</span><br><span class="line"><span class="built_in">console</span>.log(modifiedArr);</span><br></pre></td></tr></table></figure><h4 id="Array-Filter"><a href="#Array-Filter" class="headerlink" title="Array Filter"></a>Array Filter</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="keyword">let</span> modifiedArr = arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">element, index, array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> element % <span class="number">2</span> == <span class="number">0</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(modifiedArr);</span><br><span class="line">Output:</span><br><span class="line">[<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>]</span><br></pre></td></tr></table></figure><p>try by arrow function:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> modifiedAarr = arr.filter(<span class="function">(<span class="params">element, index</span>) =&gt;</span> element%<span class="number">2</span> == <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>we have to return a boolean value for each element of the array. If you won’t return any boolean value at the end then the filter takes it as <strong>false</strong> and deletes the element.</p><h4 id="Array-Reduce"><a href="#Array-Reduce" class="headerlink" title="Array Reduce"></a>Array Reduce</h4><p>Array reduce is used to aggregate all the elements of an array and return a single value.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="keyword">let</span> total= arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">sum, element, index, array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> sum + element;</span><br><span class="line">&#125;,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"total is "</span>+total);</span><br><span class="line">Output:</span><br><span class="line">total is <span class="number">21</span></span><br></pre></td></tr></table></figure><p>Unlike filter and map, reduce takes a function with four parameters and also a additional element. Unlike filter and map, the first two parameters are mandatory. Other two are optional.</p><p>The first parameter is the aggregator element.In our case it’s 0. </p><p>Like filter and map you have to return the end result.</p><p>write the same code with arrow functions:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> totalSum = arr.reduce(<span class="function">(<span class="params">sum, element</span>) =&gt;</span> element+sum, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><h3 id="Template-Literals"><a href="#Template-Literals" class="headerlink" title="Template Literals"></a>Template Literals</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">"Srebalaji"</span>;</span><br><span class="line"><span class="keyword">let</span> languages = <span class="function"><span class="params">()</span> =&gt;</span> &#123;<span class="keyword">return</span> <span class="string">"Ruby, Js, Java, Python"</span>&#125;</span><br><span class="line"><span class="keyword">let</span> msg = <span class="string">`My name is <span class="subst">$&#123;name&#125;</span></span></span><br><span class="line"><span class="string">My age is <span class="subst">$&#123;<span class="number">20</span>+<span class="number">3</span>&#125;</span></span></span><br><span class="line"><span class="string">And I code in <span class="subst">$&#123;languages()&#125;</span>`</span></span><br><span class="line">Output:</span><br><span class="line">My name is Srebalaji</span><br><span class="line">My age is <span class="number">23</span></span><br><span class="line">And I code <span class="keyword">in</span> Ruby, Js, Java, Python</span><br></pre></td></tr></table></figure><h3 id="Imports-and-Exports"><a href="#Imports-and-Exports" class="headerlink" title="Imports and Exports"></a>Imports and Exports</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//app.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> name = <span class="string">"Jon"</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> age = <span class="number">23</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;name, age&#125; <span class="keyword">from</span> <span class="string">'./app'</span></span><br><span class="line"><span class="built_in">console</span>.log(name);</span><br><span class="line"><span class="built_in">console</span>.log(age);</span><br><span class="line"></span><br><span class="line"><span class="comment">//index.html</span></span><br><span class="line">&lt;script src=<span class="string">"./index.js"</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">Jon</span><br><span class="line"><span class="number">23</span></span><br></pre></td></tr></table></figure><p>and:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//app.js</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">let</span> sum = <span class="function"><span class="params">()</span> =&gt;</span> a+b;</span><br><span class="line"><span class="keyword">export</span> &#123;a,b&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> sum</span><br><span class="line"></span><br><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> variables <span class="keyword">from</span> <span class="string">'./app'</span></span><br><span class="line"><span class="keyword">import</span> addition <span class="keyword">from</span> <span class="string">'./app'</span> <span class="comment">// default value</span></span><br><span class="line"><span class="built_in">console</span>.log(variables.a);</span><br><span class="line"><span class="built_in">console</span>.log(variables.b);</span><br><span class="line"><span class="built_in">console</span>.log(addition());</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure><ol><li><p>If you are using * to import values then you have to use <strong>alias</strong> (i.e) names that will refer to imported values. In our example we have used <strong>variables</strong> as alias.</p></li><li><p>Using * to import values doesn’t import default value. You have to import it separately.</p><p>for example:<code>import addition, * as variables from &#39;./app&#39;</code></p></li></ol><h3 id="Destructuring-objects-and-arrays"><a href="#Destructuring-objects-and-arrays" class="headerlink" title="Destructuring objects and arrays"></a>Destructuring objects and arrays</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;<span class="attr">firstName</span>: <span class="string">"Jon"</span>, <span class="attr">lastName</span>: <span class="string">"Snow"</span>, <span class="attr">age</span>: <span class="number">23</span>&#125;</span><br><span class="line"><span class="keyword">const</span> &#123;firstName, lastName, age&#125; = person</span><br><span class="line"><span class="built_in">console</span>.log(firstName);</span><br><span class="line"><span class="built_in">console</span>.log(lastName);</span><br><span class="line"><span class="built_in">console</span>.log(age);</span><br><span class="line">Output:</span><br><span class="line">Jon</span><br><span class="line">Snow</span><br><span class="line"><span class="number">23</span></span><br></pre></td></tr></table></figure><h3 id="Extend-and-Super"><a href="#Extend-and-Super" class="headerlink" title="Extend and Super"></a>Extend and Super</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"> <span class="keyword">constructor</span>(firstName, lastName, age) &#123;</span><br><span class="line">   <span class="keyword">this</span>.firstName = firstName;</span><br><span class="line">   <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">   <span class="keyword">this</span>.age = age;</span><br><span class="line"> &#125;</span><br><span class="line"> displayName() &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.firstName&#125;</span> - <span class="subst">$&#123;<span class="keyword">this</span>.lastName&#125;</span>`</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"> <span class="keyword">constructor</span>(firstName, lastName, age, salary) &#123;</span><br><span class="line">  <span class="keyword">super</span>(firstName, lastName, age);</span><br><span class="line">  <span class="keyword">this</span>.salary = salary;</span><br><span class="line"> &#125;</span><br><span class="line"> displaySalary() &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.salary&#125;</span>`</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> displayName() &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">super</span>.displayName();</span><br><span class="line"> &#125;</span><br><span class="line"> displayAge() &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> manager = <span class="keyword">new</span> Employee(<span class="string">"Jon"</span>, <span class="string">"Snow"</span>, <span class="number">23</span>, <span class="number">100</span>);</span><br><span class="line"><span class="built_in">console</span>.log(manager.displaySalary());</span><br><span class="line"><span class="built_in">console</span>.log(manager.displayName());</span><br><span class="line"><span class="built_in">console</span>.log(manager.displayAge());</span><br><span class="line">Output:</span><br><span class="line"><span class="number">100</span></span><br><span class="line">Jon Snow</span><br><span class="line"><span class="number">23</span></span><br></pre></td></tr></table></figure><p>And then we have used <strong>super</strong> keyword to call the constructor of the parent class. And we also have called the method declared in the parent class using <strong>super</strong>.</p><h3 id="Generator-functions"><a href="#Generator-functions" class="headerlink" title="Generator functions"></a>Generator functions</h3><ul><li>Generator functions are written using the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*" target="_blank" rel="noopener"><code>function*</code></a> syntax. When called initially, generator functions do not execute any of their code, instead returning a type of iterator called a Generator. </li><li>When a value is consumed by calling the generator’s <strong>next</strong> method, the Generator function executes until it encounters the <strong>yield</strong> keyword.<ul><li>Each <code>yield</code> in a generator basically represents an asynchronous step in a more synchronous/sequential process — somewhat like <code>await</code> in an <code>async</code>function.</li></ul></li><li>The function can be called as many times as desired and returns a new Generator each time, however each Generator may only be iterated once.</li></ul><h3 id="some-method"><a href="#some-method" class="headerlink" title="some method"></a>some method</h3><ul><li><p>includes</p><p>construct an array of the items, and use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes" target="_blank" rel="noopener"><code>includes</code></a>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>].includes(<span class="string">'b'</span>)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      <categories>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> learn </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>reactjs learn</title>
      <link href="/2019/03/29/reactjs%20learn/"/>
      <url>/2019/03/29/reactjs%20learn/</url>
      <content type="html"><![CDATA[<blockquote><p>Like any unfamiliar technology, React does have a learning curve. With practice and some patience, you <em>will</em> get the hang of it.</p></blockquote><ul><li>React also streamlines how data is stored and handled, using <strong>state</strong> and <strong>props</strong>.</li></ul><h3 id="create-react-app"><a href="#create-react-app" class="headerlink" title="create react app"></a>create react app</h3><ul><li><code>npm install -g create-react-app</code></li><li><code>npx create-react-app my-app</code> or <code>npm init react-app my-app</code></li></ul><h2 id="JSX-JavaScript-XML"><a href="#JSX-JavaScript-XML" class="headerlink" title="JSX: JavaScript + XML"></a>JSX: JavaScript + XML</h2><blockquote><p>Babel compiles JSX down to <code>React.createElement()</code> calls.</p></blockquote><p>jsx</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> heading = <span class="xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">className</span>=<span class="string">"site-heading"</span>&gt;</span>Hello, React<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>non-jsx</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const heading = React.createElement(&apos;h1&apos;, &#123; className: &apos;site-heading&apos; &#125;, &apos;Hello, React!&apos;)</span><br></pre></td></tr></table></figure><p>the feature of jsx:</p><ul><li><code>className</code> is used instead of <code>class</code> for adding CSS classes, as <code>class</code> is a reserved keyword in JavaScript.</li><li>Properties and methods in JSX are camelCase - <code>onclick</code> will become <code>onClick</code>.</li><li>Self-closing tags <em>must</em> end in a slash - e.g. <code>&lt;img /&gt;</code></li></ul><h2 id="Components"><a href="#Components" class="headerlink" title="Components"></a>Components</h2><blockquote><p>Whether you declare a component <a href="https://reactjs.org/docs/components-and-props.html#function-and-class-components" target="_blank" rel="noopener">as a function or a class</a>, it must never modify its own props. </p></blockquote><h3 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h3><p>The simplest way to define a component is to write a JavaScript function:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Welcome</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Class-Components"><a href="#Class-Components" class="headerlink" title="Class Components"></a>Class Components</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Table</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;table&gt;</span><br><span class="line">        &lt;thead&gt;</span><br><span class="line">          &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;Name&lt;<span class="regexp">/th&gt;</span></span><br><span class="line"><span class="regexp">            &lt;th&gt;Job&lt;/</span>th&gt;</span><br><span class="line">          &lt;<span class="regexp">/tr&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>thead&gt;</span><br><span class="line">        &lt;tbody&gt;</span><br><span class="line">          &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;Charlie&lt;<span class="regexp">/td&gt;</span></span><br><span class="line"><span class="regexp">            &lt;td&gt;Janitor&lt;/</span>td&gt;</span><br><span class="line">          &lt;<span class="regexp">/tr&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>tbody&gt;</span><br><span class="line">      &lt;<span class="regexp">/table&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Table</span></span><br></pre></td></tr></table></figure><h3 id="Simple-Components"><a href="#Simple-Components" class="headerlink" title="Simple Components"></a>Simple Components</h3><blockquote><p>The other type of component in React is the <strong>simple component</strong>, which is a function. This component doesn’t use the <code>class</code> keyword. Let’s take our <code>Table</code> and make two simple components for it - a table header, and a table body.</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> TableHeader = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;thead&gt;</span><br><span class="line">      &lt;tr&gt;</span><br><span class="line">        &lt;th&gt;Name&lt;<span class="regexp">/th&gt;</span></span><br><span class="line"><span class="regexp">        &lt;th&gt;Job&lt;/</span>th&gt;</span><br><span class="line">      &lt;<span class="regexp">/tr&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>thead&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> TableBody = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;tbody&gt;</span><br><span class="line">      &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;Charlie&lt;<span class="regexp">/td&gt;</span></span><br><span class="line"><span class="regexp">        &lt;td&gt;Janitor&lt;/</span>td&gt;</span><br><span class="line">      &lt;<span class="regexp">/tr&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>tbody&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Table</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;table&gt;</span><br><span class="line">        &lt;TableHeader /&gt;</span><br><span class="line">        &lt;TableBody /&gt;</span><br><span class="line">      &lt;<span class="regexp">/table&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><hr><p>Everything should appear as it did before. As you can see, components can be nested in other components, and simple and class components can be mixed.</p><p><strong>A class component must include <code>render()</code>, and the <code>return</code> can only return one parent element.</strong></p><h3 id="Converting-a-Function-to-a-Class"><a href="#Converting-a-Function-to-a-Class" class="headerlink" title="Converting a Function to a Class"></a>Converting a Function to a Class</h3><p>convert a function component to a class in five steps:</p><ol><li>Create an <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes" target="_blank" rel="noopener">ES6 class</a>, with the same name, that extends <code>React.Component</code>.</li><li>Add a single empty method to it called <code>render()</code>.</li><li>Move the body of the function into the <code>render()</code> method.</li><li>Replace <code>props</code> with <code>this.props</code> in the <code>render()</code> body.</li><li>Delete the remaining empty function declaration.</li></ol><h2 id="Props"><a href="#Props" class="headerlink" title="Props"></a>Props</h2><blockquote><p>Props are an effective way to pass existing data to a React component, however the component cannot change the props - they’re read-only. </p></blockquote><ul><li><em>props</em> are a way of passing data from parent to child.</li></ul><h2 id="State"><a href="#State" class="headerlink" title="State"></a>State</h2><p>State is similar to props, but it is private and fully controlled by the component.</p><p>State is reserved only for interactivity, that is, data that changes over time. </p><blockquote><p>You can think of state as any data that should be saved and modified without necessarily being added to a database - for example, adding and removing items from a shopping cart before confirming your purchase.</p></blockquote><ul><li><p>You must use <code>this.setState()</code> to modify an array. Simply applying a new value to <code>this.state.property</code> will not work.</p><p> ie.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Wrong</span></span><br><span class="line"><span class="keyword">this</span>.state.comment = <span class="string">'Hello'</span>;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Correct</span></span><br><span class="line"><span class="keyword">this</span>.setState(&#123;<span class="attr">comment</span>: <span class="string">'Hello'</span>&#125;);</span><br></pre></td></tr></table></figure></li></ul><p>tips:</p><p>Because <code>this.props</code> and <code>this.state</code> may be updated asynchronously, you should not rely on their values for calculating the next state.</p><p>ie.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Wrong</span></span><br><span class="line"><span class="keyword">this</span>.setState(&#123;</span><br><span class="line">  counter: <span class="keyword">this</span>.state.counter + <span class="keyword">this</span>.props.increment,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>use a second form of <code>setState()</code> that accepts a function rather than an object. That function will receive the previous state as the first argument, and the props at the time the update is applied as the second argument:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Correct</span></span><br><span class="line"><span class="keyword">this</span>.setState(<span class="function">(<span class="params">state, props</span>) =&gt;</span> (&#123;</span><br><span class="line">  counter: state.counter + props.increment</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><h3 id="The-Data-Flows-Down"><a href="#The-Data-Flows-Down" class="headerlink" title="The Data Flows Down"></a>The Data Flows Down</h3><blockquote><p>If you imagine a component tree as a waterfall of props, each component’s state is like an additional water source that joins it at an arbitrary point but also flows down.</p></blockquote><p>Neither parent nor child components can know if a certain component is stateful or stateless, and they shouldn’t care whether it is defined as a function or a class.</p><p>This is why state is often called local or encapsulated. It is not accessible to any component other than the one that owns and sets it.</p><p>This is commonly called a “top-down” or “unidirectional” data flow. Any state is always owned by some specific component, and any data or UI derived from that state can only affect components “below” them in the tree.</p><h2 id="Lifecycle-methods"><a href="#Lifecycle-methods" class="headerlink" title="Lifecycle methods"></a>Lifecycle methods</h2><h3 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h3><h3 id="componentDidMount"><a href="#componentDidMount" class="headerlink" title="componentDidMount"></a>componentDidMount</h3><blockquote><p>The <code>componentDidMount()</code> method runs after the component output has been rendered to the DOM. </p></blockquote><h3 id="componentWillUnmount"><a href="#componentWillUnmount" class="headerlink" title="componentWillUnmount"></a>componentWillUnmount</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clock</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;<span class="attr">date</span>: <span class="keyword">new</span> <span class="built_in">Date</span>()&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="keyword">this</span>.timerID = setInterval(</span><br><span class="line">      () =&gt; <span class="keyword">this</span>.tick(),</span><br><span class="line">      <span class="number">1000</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentWillUnmount() &#123;</span><br><span class="line">    clearInterval(<span class="keyword">this</span>.timerID);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  tick() &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      date: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;Hello, world!<span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">        &lt;h2&gt;It is &#123;<span class="keyword">this</span>.state.date.toLocaleTimeString()&#125;.&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;Clock /&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>Let’s quickly recap what’s going on and the order in which the methods are called:</p><ol><li>When <code>&lt;Clock /&gt;</code> is passed to <code>ReactDOM.render()</code>, React calls the constructor of the <code>Clock</code>component. Since <code>Clock</code> needs to display the current time, it initializes <code>this.state</code> with an object including the current time. We will later update this state.</li><li>React then calls the <code>Clock</code> component’s <code>render()</code> method. This is how React learns what should be displayed on the screen. React then updates the DOM to match the <code>Clock</code>’s render output.</li><li>When the <code>Clock</code> output is inserted in the DOM, React calls the <code>componentDidMount()</code> lifecycle method. Inside it, the <code>Clock</code> component asks the browser to set up a timer to call the component’s <code>tick()</code> method once a second.</li><li>Every second the browser calls the <code>tick()</code> method. Inside it, the <code>Clock</code> component schedules a UI update by calling <code>setState()</code> with an object containing the current time. Thanks to the <code>setState()</code> call, React knows the state has changed, and calls the <code>render()</code> method again to learn what should be on the screen. This time, <code>this.state.date</code> in the <code>render()</code> method will be different, and so the render output will include the updated time. React updates the DOM accordingly.</li><li>If the <code>Clock</code> component is ever removed from the DOM, React calls the <code>componentWillUnmount()</code> lifecycle method so the timer is stopped.</li></ol><p>总结：constructor-&gt;render()-&gt;componentDidMount()</p><p>state改变-&gt;render()</p><h3 id="componentWillReceiveProps"><a href="#componentWillReceiveProps" class="headerlink" title="componentWillReceiveProps"></a>componentWillReceiveProps</h3><p>componentWillReceiveProps在初始化render的时候不会执行，它会在Component接受到新的状态(Props)时被触发，一般用于父组件状态更新时子组件的重新渲染。</p><p>在componentWillReceiveProps中想作任何变更最好都将两个状态进行比较，假如状态有异才执行下一步。不然容易造成组件的多次渲染，并且这些渲染都是没有意义的。</p><h2 id="Events"><a href="#Events" class="headerlink" title="Events"></a>Events</h2><h2 id="Conditional-Rendering"><a href="#Conditional-Rendering" class="headerlink" title="Conditional Rendering"></a>Conditional Rendering</h2><blockquote><p>Also remember that whenever conditions become too complex, it might be a good time to <a href="https://reactjs.org/docs/components-and-props.html#extracting-components" target="_blank" rel="noopener">extract a component</a>.</p></blockquote><ul><li>Returning <code>null</code> from a component’s <code>render</code> method does not affect the firing of the component’s lifecycle methods. For instance <code>componentDidUpdate</code> will still be called.</li></ul><h2 id="Lists-and-Keys"><a href="#Lists-and-Keys" class="headerlink" title="Lists and Keys"></a>Lists and Keys</h2><blockquote><p>Keep in mind that if the <code>map()</code> body is too nested, it might be a good time to <a href="https://reactjs.org/docs/components-and-props.html#extracting-components" target="_blank" rel="noopener">extract a component</a>.</p></blockquote><h2 id="Forms"><a href="#Forms" class="headerlink" title="Forms"></a>Forms</h2><h2 id="Lifting-State-Up"><a href="#Lifting-State-Up" class="headerlink" title="Lifting State Up"></a>Lifting State Up</h2><h2 id="Composition-vs-Inheritance"><a href="#Composition-vs-Inheritance" class="headerlink" title="Composition vs Inheritance"></a>Composition vs Inheritance</h2><ul><li>Remember that components may accept arbitrary props, including primitive values, React elements, or functions.</li></ul><h2 id="Thinking-in-React"><a href="#Thinking-in-React" class="headerlink" title="Thinking in React"></a>Thinking in React</h2><ul><li>You can build top-down or bottom-up. That is, you can either start with building the components higher up in the hierarchy or with the ones lower in it. In simpler examples, it’s usually easier to go top-down, and on larger projects, it’s easier to go bottom-up and write tests as you build.</li><li><strong>Remember</strong>: React is all about one-way data flow down the component hierarchy. </li></ul>]]></content>
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> learn </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>javascript learn</title>
      <link href="/2019/03/29/javascript%20learn/"/>
      <url>/2019/03/29/javascript%20learn/</url>
      <content type="html"><![CDATA[<h3 id="types"><a href="#types" class="headerlink" title="types"></a>types</h3><ul><li><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number" target="_blank" rel="noopener"><code>Number</code></a></p></li><li><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String" target="_blank" rel="noopener"><code>String</code></a></p></li><li><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean" target="_blank" rel="noopener"><code>Boolean</code></a></p><blockquote><p>false, 0, empty strings (“”), NaN, null, and undefined all become false.</p></blockquote></li><li><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol" target="_blank" rel="noopener"><code>Symbol</code></a> (new in ES2015)</p></li><li><p><code>Object</code></p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noopener"><code>Function</code></a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array" target="_blank" rel="noopener"><code>Array</code></a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date" target="_blank" rel="noopener"><code>Date</code></a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp" target="_blank" rel="noopener"><code>RegExp</code></a></li></ul></li><li><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null" target="_blank" rel="noopener"><code>null</code></a></p></li><li><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined" target="_blank" rel="noopener"><code>undefined</code></a></p><blockquote><p>declare a variable without assigning a value to it. If you do this, the variable’s type is <code>undefined</code>. <code>undefined</code> is actually a constant.</p></blockquote></li></ul><h3 id="Variables"><a href="#Variables" class="headerlink" title="Variables"></a>Variables</h3><ul><li><p>let</p><blockquote><p><strong>let</strong> allows you to declare block-level variables. The declared variable is available from the <em>block</em> it is enclosed in.</p></blockquote></li><li><p>const</p><blockquote><p><strong>const</strong> allows you to declare variables whose values are never intended to change. The variable is available from the <em>block</em> it is declared in.</p></blockquote></li><li><p>var</p><blockquote><p>A variable declared with the <strong>var</strong> keyword is available from the written out <em>function</em> (as opposed to an anonymous function) it is declared in.</p></blockquote></li></ul><h3 id="Operators"><a href="#Operators" class="headerlink" title="Operators"></a>Operators</h3><blockquote><p><code>+</code>, <code>-</code>, <code>*</code>, <code>/</code> , <code>%</code> ,<code>=</code>,<code>+=</code> and <code>-=</code></p></blockquote><h3 id="Control-structures"><a href="#Control-structures" class="headerlink" title="Control structures"></a>Control structures</h3><ul><li><p>Conditional statements are supported by <code>if</code> and <code>else</code></p></li><li><p><code>while</code> loops and <code>do-while</code> loops.</p></li><li><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for" target="_blank" rel="noopener"><code>for</code> loop</a> is the same as that in C and Java</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="comment">// Will execute 5 times</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> array) &#123;</span><br><span class="line">  <span class="comment">// do something with value</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> property <span class="keyword">in</span> object) &#123;</span><br><span class="line">  <span class="comment">// do something with object property</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>&amp;&amp;</code> and <code>||</code> operators</p></li><li><p>a ternary operator for conditional expressions:</p><p><code>var allowed = (age &gt; 18) ? &#39;yes&#39; : &#39;no&#39;;</code></p></li><li><p><code>switch</code> statement </p></li></ul><h3 id="Objects"><a href="#Objects" class="headerlink" title="Objects"></a>Objects</h3><blockquote><p>objects can be thought of as simple collections of name-value pairs, like HashMaps in Java.</p><p>The “name” part is a JavaScript string, while the value can be any JavaScript value — including more objects.</p></blockquote><ul><li><p>two basic ways to create an empty object:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">a[<span class="number">0</span>] = <span class="string">'dog'</span>;</span><br><span class="line">a[<span class="number">1</span>] = <span class="string">'cat'</span>;</span><br><span class="line">a[<span class="number">2</span>] = <span class="string">'hen'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = [<span class="string">'dog'</span>, <span class="string">'cat'</span>, <span class="string">'hen'</span>];</span><br><span class="line"></span><br><span class="line">a.length; <span class="comment">// 3</span></span><br><span class="line">b.length;<span class="comment">//3</span></span><br></pre></td></tr></table></figure><ul><li><p>terating over an array</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'dog'</span>, <span class="string">'cat'</span>, <span class="string">'hen'</span>].forEach(<span class="function"><span class="keyword">function</span>(<span class="params">currentValue, index, array</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Do something with currentValue or array[index]</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h3 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h3><blockquote><p>A JavaScript function can take 0 or more named parameters. The function body can contain as many statements as you like and can declare its own variables which are local to that function. The <code>return</code> statement can be used to return a value at any time, terminating the function. If no return statement is used (or an empty return with no value), JavaScript returns <code>undefined</code>.</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">avg</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> args) &#123;</span><br><span class="line">    sum += value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum / args.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//above defined is equivalent to below</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> avg = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, j = <span class="built_in">arguments</span>.length; i &lt; j; i++) &#123;</span><br><span class="line">    sum += <span class="built_in">arguments</span>[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum / <span class="built_in">arguments</span>.length;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">avg(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>); <span class="comment">// 3.5</span></span><br></pre></td></tr></table></figure><h3 id="Custom-objects"><a href="#Custom-objects" class="headerlink" title="Custom objects"></a>Custom objects</h3><blockquote><p>JavaScript uses functions as classes. </p></blockquote><ul><li><p>the way to attach a function to an object.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makePerson</span>(<span class="params">first, last</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    first: first,</span><br><span class="line">    last: last,</span><br><span class="line">    fullName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.first + <span class="string">' '</span> + <span class="keyword">this</span>.last;</span><br><span class="line">    &#125;,</span><br><span class="line">    fullNameReversed: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.last + <span class="string">', '</span> + <span class="keyword">this</span>.first;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s = makePerson(<span class="string">'Simon'</span>, <span class="string">'Willison'</span>);</span><br><span class="line">s.fullName(); <span class="comment">// "Simon Willison"</span></span><br><span class="line">s.fullNameReversed(); <span class="comment">// "Willison, Simon"</span></span><br></pre></td></tr></table></figure><p>good:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">first, last</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.first = first;</span><br><span class="line">  <span class="keyword">this</span>.last = last;</span><br><span class="line">  <span class="keyword">this</span>.fullName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.first + <span class="string">' '</span> + <span class="keyword">this</span>.last;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">this</span>.fullNameReversed = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.last + <span class="string">', '</span> + <span class="keyword">this</span>.first;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> Person(<span class="string">'Simon'</span>, <span class="string">'Willison'</span>);</span><br></pre></td></tr></table></figure><p>better:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">personFullName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.first + <span class="string">' '</span> + <span class="keyword">this</span>.last;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">personFullNameReversed</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.last + <span class="string">', '</span> + <span class="keyword">this</span>.first;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">first, last</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.first = first;</span><br><span class="line">  <span class="keyword">this</span>.last = last;</span><br><span class="line">  <span class="keyword">this</span>.fullName = personFullName;</span><br><span class="line">  <span class="keyword">this</span>.fullNameReversed = personFullNameReversed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>best:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">first, last</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.first = first;</span><br><span class="line">  <span class="keyword">this</span>.last = last;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.fullName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.first + <span class="string">' '</span> + <span class="keyword">this</span>.last;</span><br><span class="line">&#125;;</span><br><span class="line">Person.prototype.fullNameReversed = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.last + <span class="string">', '</span> + <span class="keyword">this</span>.first;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p><code>this</code> refers to the current object. </p><blockquote><p>What that actually means is specified by the way in which you called that function.</p><p> If you called it using dot notation or bracket notation on an object, that object becomes <code>this</code>.</p><p> If dot notation wasn’t used for the call, <code>this</code> refers to the global object.</p></blockquote></li><li><p><code>new</code> is strongly related to <code>this</code>.</p><blockquote><p>Functions that are designed to be called by <code>new</code> are called constructor functions. Common practice is to capitalize these functions as a reminder to call them with <code>new</code>.</p></blockquote></li><li><p><code>Person.prototype</code> is an object shared by all instances of <code>Person</code>.</p><blockquote><p><strong>prototype chain</strong>:any time you attempt to access a property of <code>Person</code> that isn’t set, JavaScript will check <code>Person.prototype</code> to see if that property exists there instead. As a result, anything assigned to <code>Person.prototype</code> becomes available to all instances of that constructor via the <code>this</code> object.</p></blockquote><ul><li><p>JavaScript lets you modify something’s prototype at any time in your program, which means you can add extra methods to existing objects at runtime:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> Person(<span class="string">'Simon'</span>, <span class="string">'Willison'</span>);</span><br><span class="line">s.firstNameCaps(); <span class="comment">// TypeError on line 1: s.firstNameCaps is not a function</span></span><br><span class="line"></span><br><span class="line">Person.prototype.firstNameCaps = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.first.toUpperCase();</span><br><span class="line">&#125;;</span><br><span class="line">s.firstNameCaps(); <span class="comment">// "SIMON"</span></span><br></pre></td></tr></table></figure></li><li><p>the prototype forms part of a chain. The root of that chain is <code>Object.prototype</code>, whose methods include <code>toString()</code> — it is this method that is called when you try to represent an object as a string. </p></li></ul></li><li><p>The <strong>call()</strong> method calls a function with a given <code>this</code> value and arguments provided individually.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Product</span>(<span class="params">name, price</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.price = price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Food</span>(<span class="params">name, price</span>) </span>&#123;</span><br><span class="line">  Product.call(<span class="keyword">this</span>, name, price);</span><br><span class="line">  <span class="keyword">this</span>.category = <span class="string">'food'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> Food(<span class="string">'cheese'</span>, <span class="number">5</span>).name);</span><br><span class="line"><span class="comment">// expected output: "cheese"</span></span><br></pre></td></tr></table></figure></li><li><p>The <strong>apply()</strong> method calls a function with a given <code>this</code> value, and <code>arguments</code> provided as an array (or an <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#Working_with_array-like_objects" target="_blank" rel="noopener">array-like object</a>).</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">5</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">7</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> max = <span class="built_in">Math</span>.max.apply(<span class="literal">null</span>, numbers);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(max);</span><br><span class="line"><span class="comment">// expected output: 7</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> min = <span class="built_in">Math</span>.min.apply(<span class="literal">null</span>, numbers);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(min);</span><br><span class="line"><span class="comment">// expected output: 2</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="Inner-functions"><a href="#Inner-functions" class="headerlink" title="Inner functions"></a>Inner functions</h4><p>方法是存储在对象属性中的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parentFunc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">nestedFunc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">4</span>; <span class="comment">// parentFunc can't use this</span></span><br><span class="line">    <span class="keyword">return</span> a + b; </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> nestedFunc(); <span class="comment">// 5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Closures"><a href="#Closures" class="headerlink" title="Closures"></a>Closures</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeAdder</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> x = makeAdder(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">var</span> y = makeAdder(<span class="number">20</span>);</span><br><span class="line">x(<span class="number">6</span>); <span class="comment">// returns 11</span></span><br><span class="line">y(<span class="number">7</span>); <span class="comment">// returns 27</span></span><br></pre></td></tr></table></figure><blockquote><p>Scope objects form a chain called the scope chain, similar to the prototype chain used by JavaScript’s object system.</p></blockquote><h2 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h2><p><strong>curly braces</strong></p><p>括号（）</p><p><strong>Spread syntax</strong></p><p>省略号</p><ul><li>The spread syntax is simply three dots: <code>...</code></li><li>It allows an iterable to expand in places where 0+ arguments are expected.</li></ul><h4 id="asterisk"><a href="#asterisk" class="headerlink" title="asterisk"></a>asterisk</h4><p>星号 *</p><h3 id="regular-expression"><a href="#regular-expression" class="headerlink" title="regular expression"></a>regular expression</h3><ul><li><p>校验含有空格</p><p><code>reg = /^((?! ).)*$/;</code></p></li><li><p>校验只有数字、字母和下划线</p><p><code>reg = /^[_0-9a-z]*$/;</code></p></li></ul><h3 id="setInterval"><a href="#setInterval" class="headerlink" title="setInterval"></a>setInterval</h3><p>定时调度</p>]]></content>
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> learn </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Algorithms + Data Structures = Programs</title>
      <link href="/2018/12/18/Algorithms%20+%20Data%20Structures%20=%20Programs/"/>
      <url>/2018/12/18/Algorithms%20+%20Data%20Structures%20=%20Programs/</url>
      <content type="html"><![CDATA[<h3 id="What-is-a-Data-Structure"><a href="#What-is-a-Data-Structure" class="headerlink" title="What is a Data Structure"></a>What is a Data Structure</h3><blockquote><p>a data structure is a container that stores data in a specific layout. </p></blockquote><h3 id="Why-do-we-need-Data-Structure"><a href="#Why-do-we-need-Data-Structure" class="headerlink" title="Why do we need Data Structure"></a>Why do we need Data Structure</h3><blockquote><p>As data structures are used to store data in an organized form, and since data is the most crucial entity in computer science.</p><p>Based on different scenarios, data needs to be stored in a specific format. We have a handful of data structures that cover our need to store data in different formats.</p></blockquote><h3 id="Commonly-used-Data-Structure"><a href="#Commonly-used-Data-Structure" class="headerlink" title="Commonly used Data Structure"></a>Commonly used Data Structure</h3><h4 id="1-Arrays"><a href="#1-Arrays" class="headerlink" title="1. Arrays"></a>1. Arrays</h4><blockquote><p>An array is the simplest and most widely used data structure. Other data structures like stacks and queues are derived from arrays.</p></blockquote><ul><li>the two types of arrays:<ul><li>One-dimensional arrays</li><li>Multi-dimensional arrays</li></ul></li><li>basic operations<ul><li>Inserts an element at given index</li><li>Get — Returns the element at given index</li><li>Delete — Deletes an element at given index</li><li>Size — Get the total number of elements in array</li></ul></li></ul><h4 id="2-Stacks"><a href="#2-Stacks" class="headerlink" title="2. Stacks"></a>2. Stacks</h4><blockquote><p>LIFO (Last In First Out)</p></blockquote><ul><li>basic operations<ul><li>Push — Inserts an element at the top</li><li>Pop — Returns the top element after removing from the stack</li><li>isEmpty — Returns true if the stack is empty</li><li>Top — Returns the top element without removing from the stack</li></ul></li></ul><h4 id="3-Queues"><a href="#3-Queues" class="headerlink" title="3. Queues"></a>3. Queues</h4><blockquote><p>Similar to Stack, Queue is another linear data structure that stores the element in a sequential manner. The only significant difference between Stack and Queue is that instead of using the LIFO method, Queue implements the FIFO method, which is short for First in First Out.</p></blockquote><ul><li>basic operations<ul><li>Enqueue() — Inserts element to the end of the queue</li><li>Dequeue() — Removes an element from the start of the queue</li><li>isEmpty() — Returns true if queue is empty</li><li>Top() — Returns the first element of the queue</li></ul></li></ul><h4 id="4-Linked-List"><a href="#4-Linked-List" class="headerlink" title="4. Linked List"></a>4. Linked List</h4><blockquote><p>A linked list is like a chain of nodes, where each node contains information like data and a pointer to the succeeding node in the chain.</p></blockquote><ul><li>the types of linked lists<ul><li>Singly Linked List (Unidirectional)</li><li>Doubly Linked List (Bi-directional)</li></ul></li><li>basic operations<ul><li><em>InsertAtEnd</em> — Inserts given element at the end of the linked list</li><li><em>InsertAtHead</em> — Inserts given element at the start/head of the linked list</li><li><em>Delete</em> — Deletes given element from the linked list</li><li><em>DeleteAtHead</em> — Deletes first element of the linked list</li><li><em>Search</em> — Returns the given element from a linked list</li><li><em>isEmpty</em> — Returns true if the linked list is empty</li></ul></li></ul><h4 id="5-Graphs"><a href="#5-Graphs" class="headerlink" title="5. Graphs"></a>5. Graphs</h4><blockquote><p>A graph is a set of nodes that are connected to each other in the form of a network. Nodes are also called vertices. A <strong>pair(x,y)</strong> is called an <strong>edge*</strong>,<em> which indicates that vertex <strong>x</strong> is connected to vertex <strong>y</strong>. An edge may contain weight/cost, showing how much cost is required to traverse from vertex x to y</em>.*</p></blockquote><p><img src="https://i.imgur.com/9sHq0Ek.png" alt=""></p><ul><li>types of Graphs<ul><li>Undirected Graph</li><li>Directed Graph</li></ul></li></ul><h4 id="6-Trees"><a href="#6-Trees" class="headerlink" title="6. Trees"></a>6. Trees</h4><blockquote><p>A tree is a hierarchical data structure consisting of vertices (nodes) and edges that connect them. Trees are similar to graphs, but the key point that differentiates a tree from the graph is that a cycle cannot exist in a tree.</p></blockquote><p><img src="https://i.imgur.com/R6zwf9U.png" alt=""></p><ul><li><p>the types of trees</p><ul><li>N-ary Tree</li><li>Balanced Tree</li><li>Binary Tree</li><li>Binary Search Tree</li><li>AVL Tree</li><li>Red Black Tree</li><li>2–3 Tree</li></ul><blockquote><p>Out of the above, Binary Tree and Binary Search Tree are the most commonly used trees.</p></blockquote></li></ul><h4 id="7-Trie"><a href="#7-Trie" class="headerlink" title="7. Trie"></a>7. Trie</h4><blockquote><p>Trie, which is also known as “Prefix Trees”, is a tree-like data structure which proves to be quite efficient for solving problems related to strings. It provides fast retrieval, and is mostly used for searching words in a dictionary, providing auto suggestions in a search engine, and even for IP routing.</p></blockquote><h4 id="8-Hash-Table"><a href="#8-Hash-Table" class="headerlink" title="8. Hash Table"></a>8. Hash Table</h4><blockquote><p>Hashing is a process used to uniquely identify objects and store each object at some pre-calculated unique index called its “key.”</p><p>Hash tables are generally implemented using arrays.</p></blockquote><ul><li>The performance of hashing data structure depends upon these three factors:<ul><li>Hash Function</li><li>Size of the Hash Table</li><li>Collision Handling Method</li></ul></li></ul><p>Here’s an illustration of how the hash is mapped in an array. The index of this array is calculated through a Hash Function.</p><p><img src="https://i.imgur.com/fkxWuxr.png" alt=""></p><p>reference:</p><ul><li><a href="https://www.cnblogs.com/xdecode/p/9321848.html" target="_blank" rel="noopener">图解Java常用数据结构</a></li></ul>]]></content>
      
      <categories>
          
          <category> DSA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> snippet </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>rpc vs mq</title>
      <link href="/2018/12/08/rpc%20vs%20mq/"/>
      <url>/2018/12/08/rpc%20vs%20mq/</url>
      <content type="html"><![CDATA[<h3 id="系统结构"><a href="#系统结构" class="headerlink" title="系统结构"></a>系统结构</h3><ul><li><p>rpc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Consumer =&gt; Provider</span><br><span class="line">Consumer调用的Provider提供的服务。</span><br></pre></td></tr></table></figure><ul><li>同步调用，对于要等待返回结果/处理结果的场景，RPC是可以非常自然直觉的使用方式。</li><li>由于等待结果，Consumer（Client）会有线程消耗。</li><li>RPC也可以是异步调用，如果以异步RPC的方式使用，Consumer（Client）线程消耗可以去掉。但不能做到像消息一样暂存消息/请求，压力会直接传导到服务Provider。</li></ul></li><li><p>message queue</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Sender =&gt; Queue &lt;= Receiver</span><br><span class="line">Sender发送消息给Queue;Receiver从Queue拿到消息来处理</span><br></pre></td></tr></table></figure><ul><li>Message Queue把请求的压力保存一下，逐渐释放出来，让处理者按照自己的节奏来处理。</li><li>Message Queue引入一下新的结点，让系统的可靠性会受Message Queue结点的影响。</li><li>Message Queue是<strong>异步单向</strong>的消息。发送消息设计成是<strong>不需要等待</strong>消息处理的完成。</li></ul></li></ul><h3 id="见解"><a href="#见解" class="headerlink" title="见解"></a>见解</h3><ul><li>这两者可以拿来比较，但是个人感觉并不是同一个层面的问题。RPC是分布式服务之间调用的一种解决方案，是我们在做架构设计决策时同分布式对象，REST等层面的东西比较，决策的一个方案！ 消息系统更多是我们为了解决系统之间的解耦，以及性能问题等方面所考虑的方案。</li></ul>]]></content>
      
      <categories>
          
          <category> a vs b </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vs </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>words fragment</title>
      <link href="/2018/08/28/words%20fragment/"/>
      <url>/2018/08/28/words%20fragment/</url>
      <content type="html"><![CDATA[<h3 id="英文碎片"><a href="#英文碎片" class="headerlink" title="英文碎片"></a>英文碎片</h3><ul><li>Life is measured by thought and action, not by time.</li><li>Books and friends should be few but good.</li><li>Don’t give your past the power to define your future.</li><li>People will forget what you said, people will forget what you did, but people will never forget how you made them feel.</li><li>Success isn’t about being the best. It’s about always getting better.</li><li>Be yourself. Everyone else is already taken.</li><li>It’s kind of fun to do the impossible.</li><li>“Simplicity is the ultimate sophistication.”Leonardo da Vinci</li><li>Build a dream and the dream will build you.</li><li>Always make a total effort, even when the odds are against you.</li><li>You can, you should, and if you’re brave enough to start, you will.</li><li>Never give up, for that is just the place and time that the tide will turn.</li><li>Awareness is the greatest agent for change.</li><li>Nothing can dim the light which shines from within.</li><li>Our dreams can come true if we have the courage to pursue them.</li><li>Patience and perseverance have a magical effect before which difficulties disappear and obstacles vanish.</li><li>What you do makes a difference, and you have to decide what kind of difference you want to make.</li><li>The thing that is really hard, and really amazing, is giving up on being perfect and beginning the work of becoming yourself.</li><li>You are what you do, not what you say you’ll do.</li><li>This is the real secret to life—to be completely engaged with what you are doing in the here and now. And instead of calling it work, realize it is play.</li><li>I am strong because I’ve been weak. I am fearless because I’ve been afraid. I am wise because I’ve been foolish.</li><li>Every moment you live in the past is a moment you waste in the present.</li><li>Some changes look negative on the surface, but you will soon realize that space is being created in your life for something new to emerge.</li><li>The world breaks everyone and afterward many are strong at the broken places.</li><li>Don’t bury your failures. Let them inspire you.</li><li>Whether you think you can or you think you can’t, you are right.</li><li>“An investment in knowledge pays the best interest.”Benjamin Franklin</li><li>Be brave. Take risks. Nothing can substitute experience.</li><li>Learn to walk before run</li><li>This is love, deep in the trenches, worthy of respect, admiration and gratitude.</li><li>You will learn more in three days of acting than in six months of researching.</li></ul><h3 id="中文碎片"><a href="#中文碎片" class="headerlink" title="中文碎片"></a>中文碎片</h3><ul><li>虽千万人，吾往矣。</li><li>在一个跪下去才能活着的时代，请给站着的人一点掌声！</li><li>一个人一旦接触到真相，便无法再回头去相信谎言！</li><li>码农不问出处，大佬不看岁数</li><li>英雄不问出处，流氓不看岁数</li><li>长多大屁股，穿多大裤衩</li><li>没有最好的开发语言，只有最好的开发者</li><li>赚臭傻逼们的钱，他们的境遇配得上那颗肮胀的内心</li><li>女人，刀子嘴豆腐心，名副其实。做男人的，让着点吧</li><li>能干的人，不在情绪上计较，只在做事上认真；无能的人！不在做事上认真，只在情绪上计较。</li><li><p>把每一次练习都当成一次考试</p></li><li><p>some body</p><ul><li>谎言不攻不破</li><li>没经历过事，成不了大事</li><li>母亲给了你生命，也会把生命给你<h3 id="名人碎片"><a href="#名人碎片" class="headerlink" title="名人碎片"></a>名人碎片</h3></li></ul></li><li>极深的暴力当中隐藏着极致的温柔    (北野武)</li></ul><h3 id="其它碎片"><a href="#其它碎片" class="headerlink" title="其它碎片"></a>其它碎片</h3><ul><li>arithmetic<ul><li>addition, subtraction, multiplication and division calculations</li></ul></li><li>Promise(承诺)、Earnest(诚挚)、Respect(尊重)、Forgiveness(宽容)、Enioy(享受)、Cherish(珍惜)、Trust(信任)</li><li>In any case, measure, don’t guess! Only a measurement will tell you if the parallelism is worth it or not.(from stack overflow’s someone)</li></ul><h3 id="技术碎片"><a href="#技术碎片" class="headerlink" title="技术碎片"></a>技术碎片</h3><ul><li>compare two things at different points, this not only makes them easy to compare but also makes it easy to remember differences.</li></ul>]]></content>
      
      <categories>
          
          <category> fragement </category>
          
      </categories>
      
      
        <tags>
            
            <tag> words </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>java thread</title>
      <link href="/2018/06/01/java%20thread/"/>
      <url>/2018/06/01/java%20thread/</url>
      <content type="html"><![CDATA[<p>线程安全是编程中的术语，指某个函数、函数库在并发环境中被调用时，能够正确地处理多个线程之间的共享变量，使程序功能正确完成。即在多线程场景下，不发生有序性、原子性以及可见性问题。</p><h3 id="how-to-avoid-deadlock"><a href="#how-to-avoid-deadlock" class="headerlink" title="how to avoid deadlock"></a>how to avoid deadlock</h3><p><img src="https://2.bp.blogspot.com/-63RZ-BTlAFs/VfGeHMnGdFI/AAAAAAAADuw/gwqtrVliMsM/s400/Deadlock%2Bof%2BThreads.jpg" alt=""></p><h3 id="ConcurrentHashMap-faster-than-Hashtable"><a href="#ConcurrentHashMap-faster-than-Hashtable" class="headerlink" title="ConcurrentHashMap faster than Hashtable"></a>ConcurrentHashMap faster than Hashtable</h3><blockquote><p> ConcurrentHashMap is introduced as an alternative of Hashtable in Java 5, it is faster because of its design. ConcurrentHashMap divides the whole map into different segments and only lock a particular segment during the update operation, instead of <a href="http://javarevisited.blogspot.com/2012/01/java-hashtable-example-tutorial-code.html" target="_blank" rel="noopener">Hashtable</a>, which locks whole Map.</p></blockquote><p><img src="https://1.bp.blogspot.com/-s28yqJthVWo/V10_G31sSCI/AAAAAAAAGNY/8oJE5cDD5BUa5VBiCI8Bx-UdpD8_MoeSwCLcB/s400/Internal%2Bimplementation%2Bof%2BConcurrentHashMap%2Bin%2BJava.png" alt=""></p><h3 id="submit-and-execute-method-of-Executor-and-ExecutorService"><a href="#submit-and-execute-method-of-Executor-and-ExecutorService" class="headerlink" title="submit() and execute() method of Executor and ExecutorService"></a>submit() and execute() method of Executor and ExecutorService</h3><blockquote><p> The main difference between submit and execute method from ExecutorService interface is that former return a result in the form of a Future object, while later doesn’t return a result. By the way, both are used to submit a task to thread pool in Java but one is defined in Executor interface,while other is added into ExecutorService interface.</p></blockquote><p><img src="https://2.bp.blogspot.com/-ybewy1bWbFs/VxZFewRdKbI/AAAAAAAAFt4/fuAHJBE1r_8nlfUz34YTKI1j70UdqaMiQCLcB/s640/Difference%2Bbetween%2Bsubmit%2Bvs%2Bexecute%2Bmethod%2Bin%2BJava.png" alt=""></p><h4 id="when-to-use"><a href="#when-to-use" class="headerlink" title="when to use"></a>when to use</h4><blockquote><ul><li>In general, if you are doing computational task e.g. calculating some risk stats, <a href="http://java67.blogspot.com/2015/09/how-to-use-biginteger-class-in-java.html" target="_blank" rel="noopener">calculating factorial of large numbers</a> or doing some time-consuming computation e which results in some value then use the submit() method. It immediately returns a Future object, which can be later queried to get the value of computation by calling get() method.</li></ul></blockquote><blockquote><ul><li>Remember, get() is a <a href="http://javarevisited.blogspot.com/2012/02/what-is-blocking-methods-in-java-and.html" target="_blank" rel="noopener">blocking call</a> so always call the version which accepts a timeout. While you can use the execute() method if you just want your code to be run in parallel by worker threads of the thread pool.</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Future future = executorService.submit(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Asynchronous task"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">future.get();  <span class="comment">//returns null if the task has finished correctly.</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Future future = executorService.submit(<span class="keyword">new</span> Callable()&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Asynchronous Callable"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Callable Result"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"future.get() = "</span> + future.get());</span><br></pre></td></tr></table></figure><h3 id="ReentrantLock-vs-synchronized"><a href="#ReentrantLock-vs-synchronized" class="headerlink" title="ReentrantLock vs synchronized"></a>ReentrantLock vs synchronized</h3><h4 id="the-advantages-of-ReentrantLock"><a href="#the-advantages-of-ReentrantLock" class="headerlink" title="the advantages of ReentrantLock"></a>the advantages of ReentrantLock</h4><ol><li><p>Ability to lock interruptibly.</p></li><li><p>Ability to timeout while waiting for lock.</p></li><li><p>Power to create fair lock.</p></li><li><p>API to get list of waiting thread for lock.</p></li><li><p>Flexibility to try for lock without blocking.</p></li></ol><h4 id="the-disadvantages-of-ReentrantLock"><a href="#the-disadvantages-of-ReentrantLock" class="headerlink" title="the disadvantages of ReentrantLock"></a>the disadvantages of ReentrantLock</h4><ol><li><p>Major drawback of using ReentrantLock in Java is wrapping method body inside <a href="http://javarevisited.blogspot.com/2012/11/difference-between-final-finally-and-finalize-java.html" target="_blank" rel="noopener">try-finally block</a>, which makes code unreadable and hides business logic. </p></li><li><p>programmer is responsible for acquiring and releasing lock, which is a power but also opens gate for new subtle bugs, when programmer forget to release the lock in finally block.</p></li></ol><h3 id="ReadWriteLock"><a href="#ReadWriteLock" class="headerlink" title="ReadWriteLock"></a>ReadWriteLock</h3><p><img src="https://4.bp.blogspot.com/-yYqp8m0BGdk/V11A-s0qwVI/AAAAAAAAGNw/LL_qGX5_qD4dHTFMe3kklI4jYWyDHzIyQCLcB/s400/ReadWriteLock%2Bin%2BJava.jpg" alt=""></p><h3 id="stop-thread"><a href="#stop-thread" class="headerlink" title="stop thread"></a>stop thread</h3><blockquote><ul><li>There was some control methods in JDK 1.0 e.g. stop(), suspend() and resume() which was deprecated in later releases due to potential deadlock threats, from then Java API designers has not made any effort to provide a consistent, thread-safe and elegant way to stop threads.</li></ul></blockquote><blockquote><ul><li>Programmers mainly rely on the fact that thread stops automatically as soon as they finish execution of run() or call() method. To manually stop, programmers either take advantage of volatile boolean variable and check in every iteration if run method has loops or interrupt threads to abruptly cancel tasks.</li></ul></blockquote><h3 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h3><blockquote><ul><li>The <code>ThreadLocal</code> class in Java enables you to create variables that can only be read and written by the same thread. Thus, even if two threads are executing the same code, and the code has a reference to a<code>ThreadLocal</code> variable, then the two threads cannot see each other’s <code>ThreadLocal</code> variables.</li><li>Each thread holds an exclusive copy of ThreadLocal variable which becomes eligible to Garbage collection after thread finished or died, normally or due to any Exception, Given those ThreadLocal variable doesn’t have any other live references.</li><li>ThreadLocal variables in Java are generally private static fields in Classes and maintain its state inside Thread.</li></ul></blockquote><h3 id="synchronized-vs-concurrent-collection"><a href="#synchronized-vs-concurrent-collection" class="headerlink" title="synchronized vs concurrent collection"></a>synchronized vs concurrent collection</h3><blockquote><p>later is more scalable than former</p><p> synchronized collections locks the whole collection e.g. whole Map or List while concurrent collection never locks the whole Map or List. They achieve thread safety by using advanced and sophisticated techniques like lock stripping. For example, the ConcurrentHashMap divides the whole map into several segments and locks only the relevant segments, which allows multiple threads to access other segments of same ConcurrentHashMap without locking.</p></blockquote><h4 id="CopyOnWriteArrayList"><a href="#CopyOnWriteArrayList" class="headerlink" title="CopyOnWriteArrayList"></a>CopyOnWriteArrayList</h4><blockquote><p> CopyOnWriteArrayList allows multiple reader threads to read without synchronization and when a write happens it copies the whole ArrayList and swap with a newer one.</p></blockquote><h3 id="Stack-and-Heap"><a href="#Stack-and-Heap" class="headerlink" title="Stack and Heap"></a>Stack and Heap</h3><blockquote><ul><li>Each thread has their own stack, which is used to store local variables, method parameters and call stack. Variable stored in one Thread’s stack is not visible to other.</li><li>heap is a common memory area which is shared by all threads.Objects whether local or at any level is created inside heap.</li></ul></blockquote><ul><li>To improve performance thread tends to cache values from heap into their stack, which can create problems if that variable is modified by more than one thread, this is where volatile variables comes in picture. volatile suggest threads to read value of variable always from main memory. </li><li>If there is no memory left in the stack for storing function call or local variable, JVM will throw java.lang.StackOverFlowError, while if there is no more heap space for creating an object, JVM will throw java.lang.OutOfMemoryError: Java Heap Space</li><li>Variables stored in stacks are only visible to the owner Thread while objects created in the heap are visible to all thread. In other words, stack memory is kind of private memory of Java Threads while heap memory is shared among all threads.</li></ul><h3 id="thread-pool"><a href="#thread-pool" class="headerlink" title="thread pool"></a>thread pool</h3><blockquote><p>Java API provides Executor framework, which allows you to create different types of thread pools e.g. single thread pool, which process one task at a time, fixed thread pool (a pool of fixed number of thread) or cached thread pool (an expandable thread pool suitable for applications with many short lived tasks).</p></blockquote><h4 id="the-benefits"><a href="#the-benefits" class="headerlink" title="the benefits"></a>the benefits</h4><ul><li><p>Use of Thread Pool reduces response time by avoiding thread creation during request or task processing.</p></li><li><p>Use of Thread Pool allows you to change your execution policy as you need. you can go from single thread to multiple threads by just replacing ExecutorService implementation.</p></li><li>Thread Pool in Java application increases the stability of the system by creating a configured number of threads decided based on system load and available resource.</li><li>Thread Pool frees application developer from thread management stuff and allows to focus on business logic.</li></ul><h3 id="volatile-vs-atomic-variable"><a href="#volatile-vs-atomic-variable" class="headerlink" title="volatile vs atomic variable"></a>volatile vs atomic variable</h3><blockquote><p>Volatile variable provides you happens-before guarantee that a write will happen before any subsequent write, it doesn’t guarantee atomicity. For example count++ operation will not become atomic just by declaring count variable as volatile. On the other hand AtomicInteger class provides atomic method to perform such compound operation atomically.</p></blockquote><h3 id="3-multi-threading-best-practice"><a href="#3-multi-threading-best-practice" class="headerlink" title="3 multi-threading best practice"></a>3 multi-threading best practice</h3><ul><li>Always give meaningful name to your thread</li><li><p>Avoid locking or Reduce scope of Synchronization</p></li><li><p>Prefer Synchronizers over wait and notify</p></li><li>Prefer Concurrent Collection over Synchronized Collection</li></ul><h3 id="Wait、Sleep、Yield"><a href="#Wait、Sleep、Yield" class="headerlink" title="Wait、Sleep、Yield"></a>Wait、Sleep、Yield</h3><ul><li><p>sleep() and yield() methods are defined in thread class while wait() is defined in the Object class</p></li><li><p>The key difference between wait() and sleep() is that former is used for inter-thread communication while later is used to introduced to pause the current thread for a short duration. </p></li><li><p>This difference is more obvious from the fact that, when a thread calls the wait() method, it releases the monitor or lock it was holding on that object, but when a thread calls the sleep() method, it never releases the monitor even if it is holding. </p></li><li><p>yield() just releases the CPU hold by Thread to give another thread an opportunity to run though it’s not guaranteed who will get the CPU. It totally depends upon thread scheduler and <strong>it’s even possible that the thread which calls the yield() method gets the CPU again</strong>(有可能自己会再次获取到cpu执行时间). Hence, it’s not reliable to depend upon yield() method, it’s just on best effort basis.</p><ul><li>If there is no waiting thread or all the waiting threads have a lower priority then the same thread will continue its execution.</li></ul></li></ul>]]></content>
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> snippet </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>java thread code</title>
      <link href="/2018/06/01/java%20thread%20code/"/>
      <url>/2018/06/01/java%20thread%20code/</url>
      <content type="html"><![CDATA[<h3 id="Future-and-FutureTask"><a href="#Future-and-FutureTask" class="headerlink" title="Future and FutureTask"></a>Future and FutureTask</h3><blockquote><ul><li>A <strong>Future</strong> interface provides methods <strong>to check if the computation is complete, to wait for its completion and to retrieve the results of the computation</strong>. The result is retrieved using Future’s get() method when the computation has completed, and it blocks until it is completed.</li><li><strong>FutureTask</strong><pre><code>1. FutureTask implementation Future interface and RunnableFuture Interface, means one can use FutureTask as Runnable and can be submitted to ExecutorService for execution.2. When one call Future.submit() Callable or Runnable objects then most of time ExecutorService creates FutureTask, and one can create it manually also.3. FutureTask acts like a latch.4. Computation represent by FutureTask is implemented with Callable interface.5. It implements Future or Callable interface.6. Behaviour of get() method depends on the state of the task. If tasks are not completed get() method waits or blocks till the task is completed. Once task completed, it returns the result or throws an ExecutionException.</code></pre></li></ul></blockquote><p><img src="https://cdncontribute.geeksforgeeks.org/wp-content/uploads/pool2.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java program do two FutureTask </span></span><br><span class="line"><span class="comment">// using Runnable Interface </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*; </span><br><span class="line"><span class="keyword">import</span> java.util.logging.Level; </span><br><span class="line"><span class="keyword">import</span> java.util.logging.Logger; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123; </span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> waitTime; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyRunnable</span><span class="params">(<span class="keyword">int</span> timeInMillis)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">this</span>.waitTime = timeInMillis; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">try</span> &#123; </span><br><span class="line"><span class="comment">// sleep for user given millisecond </span></span><br><span class="line"><span class="comment">// before checking again </span></span><br><span class="line">Thread.sleep(waitTime); </span><br><span class="line"></span><br><span class="line"><span class="comment">// return current thread name </span></span><br><span class="line">System.out.println(Thread </span><br><span class="line">.currentThread() </span><br><span class="line">.getName()); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">catch</span> (InterruptedException ex) &#123; </span><br><span class="line">Logger </span><br><span class="line">.getLogger(MyRunnable.class.getName()) </span><br><span class="line">.log(Level.SEVERE, <span class="keyword">null</span>, ex); </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// Class FutureTaskExample excute two future task </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FutureTaskExample</span> </span>&#123; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="comment">// create two object of MyRunnable class </span></span><br><span class="line"><span class="comment">// for FutureTask and sleep 1000, 2000 </span></span><br><span class="line"><span class="comment">// millisecond before checking again </span></span><br><span class="line">MyRunnable myrunnableobject1 = <span class="keyword">new</span> MyRunnable(<span class="number">1000</span>); </span><br><span class="line">MyRunnable myrunnableobject2 = <span class="keyword">new</span> MyRunnable(<span class="number">2000</span>); </span><br><span class="line"></span><br><span class="line">FutureTask&lt;String&gt; </span><br><span class="line">futureTask1 = <span class="keyword">new</span> FutureTask&lt;&gt;(myrunnableobject1, </span><br><span class="line"><span class="string">"FutureTask1 is complete"</span>); </span><br><span class="line">FutureTask&lt;String&gt; </span><br><span class="line">futureTask2 = <span class="keyword">new</span> FutureTask&lt;&gt;(myrunnableobject2, </span><br><span class="line"><span class="string">"FutureTask2 is complete"</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">// create thread pool of 2 size for ExecutorService </span></span><br><span class="line">ExecutorService executor = Executors.newFixedThreadPool(<span class="number">2</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">// submit futureTask1 to ExecutorService </span></span><br><span class="line">executor.submit(futureTask1); </span><br><span class="line"></span><br><span class="line"><span class="comment">// submit futureTask2 to ExecutorService </span></span><br><span class="line">executor.submit(futureTask2); </span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123; </span><br><span class="line"><span class="keyword">try</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">// if both future task complete </span></span><br><span class="line"><span class="keyword">if</span> (futureTask1.isDone() &amp;&amp; futureTask2.isDone()) &#123; </span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"Both FutureTask Complete"</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">// shut down executor service </span></span><br><span class="line">executor.shutdown(); </span><br><span class="line"><span class="keyword">return</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!futureTask1.isDone()) &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">// wait indefinitely for future </span></span><br><span class="line"><span class="comment">// task to complete </span></span><br><span class="line">System.out.println(<span class="string">"FutureTask1 output = "</span></span><br><span class="line">+ futureTask1.get()); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"Waiting for FutureTask2 to complete"</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">// Wait if necessary for the computation to complete, </span></span><br><span class="line"><span class="comment">// and then retrieves its result </span></span><br><span class="line">String s = futureTask2.get(<span class="number">250</span>, TimeUnit.MILLISECONDS); </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (s != <span class="keyword">null</span>) &#123; </span><br><span class="line">System.out.println(<span class="string">"FutureTask2 output="</span> + s); </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">catch</span> (Exception e) &#123; </span><br><span class="line">Sysmtem.out.println(<span class="string">"Exception: "</span> + e); </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Output:</span><br><span class="line"></span><br><span class="line">FutureTask1 output=FutureTask1 is complete</span><br><span class="line">Waiting for FutureTask2 to complete</span><br><span class="line">Waiting for FutureTask2 to complete</span><br><span class="line">Waiting for FutureTask2 to complete</span><br><span class="line">Waiting for FutureTask2 to complete</span><br><span class="line">FutureTask2 output=FutureTask2 is complete</span><br><span class="line">Both FutureTask Complete</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> thread </category>
          
      </categories>
      
      
        <tags>
            
            <tag> code </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>windows snippet</title>
      <link href="/2018/05/22/windows%20snippet/"/>
      <url>/2018/05/22/windows%20snippet/</url>
      <content type="html"><![CDATA[<h3 id="进程操作"><a href="#进程操作" class="headerlink" title="进程操作"></a>进程操作</h3><ul><li>netstat -aon|findstr “8080” </li></ul><p>TCP     127.0.0.1:80       0.0.0.0:0             LISTENING    2448<br>端口被进程号为2448的进程占用，继续执行下面命令：</p><ul><li>tasklist|findstr “2448” </li></ul><p>thread.exe                   2016 Console                 0     16,064 K</p><p>很清楚，thread占用了你的端口,Kill it</p><ul><li>taskkill -F -PID 2448</li></ul><p>如果第二步查不到，那就开任务管理器，进程—查看—选择列—pid（进程位标识符）打个勾就可以了</p>]]></content>
      
      <categories>
          
          <category> windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> snippet </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>socket snippet</title>
      <link href="/2018/05/09/TCP%20and%20UDP/"/>
      <url>/2018/05/09/TCP%20and%20UDP/</url>
      <content type="html"><![CDATA[<h2 id="TCP-and-UDP"><a href="#TCP-and-UDP" class="headerlink" title="TCP and UDP"></a>TCP and UDP</h2><blockquote><ul><li>TCP stands for Transmission Control Protocol and UDP stands for User Datagram Protocol, and both are used extensively to build Internet applications.</li><li>The protocol which is the core of internet, HTTP is based on TCP.</li></ul></blockquote><h3 id="why"><a href="#why" class="headerlink" title="why"></a>why</h3><blockquote><p> why Java developer should understand these two protocols in detail is that Java is extensively used to write multi-threaded, concurrent and scalable servers.</p></blockquote><h3 id="where"><a href="#where" class="headerlink" title="where"></a>where</h3><blockquote><p> While UDP is more suitable for applications that need fast, efficient transmission, such as games. UDP’s stateless nature is also useful for servers that answer small queries from huge numbers of clients. In practice, TCP is used in finance domain e.g. <a href="http://javarevisited.blogspot.sg/2011/04/fix-protocol-tutorial-for-beginners.html" target="_blank" rel="noopener">FIX protocol</a> is a TCP based protocol, UDP is used heavily in gaming and entertainment sites.</p></blockquote><h3 id="how"><a href="#how" class="headerlink" title="how"></a>how</h3><ul><li><p>TCP is connection oriented, reliable, slow, provides guaranteed delivery and preserves the order of messages</p></li><li><p>UDP is connectionless, unreliable, no ordering guarantee, but a fast protocol. </p></li><li><p>TCP overhead is also much higher than UDP, as it transmits more metadata per packet than UDP.  that header size of Transmission control protocol is 20 bytes, compared to 8 bytes header of User Datagram protocol.</p></li><li><p>Use TCP, if you can’t afford to lose any message, while UDP is better for high-speed data transmission, where loss of a single packet is acceptable e.g. video streaming or online multiplayer games.</p></li></ul>]]></content>
      
      <categories>
          
          <category> Socket </category>
          
      </categories>
      
      
        <tags>
            
            <tag> snippet </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>design pattern-build</title>
      <link href="/2018/05/01/design%20pattern-build/"/>
      <url>/2018/05/01/design%20pattern-build/</url>
      <content type="html"><![CDATA[<h3 id="build"><a href="#build" class="headerlink" title="build"></a>build</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Computer</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Computer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//required parameters</span></span><br><span class="line"><span class="keyword">private</span> String HDD;</span><br><span class="line"><span class="keyword">private</span> String RAM;</span><br><span class="line"></span><br><span class="line"><span class="comment">//optional parameters</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> isGraphicsCardEnabled;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> isBluetoothEnabled;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getHDD</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> HDD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getRAM</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> RAM;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isGraphicsCardEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> isGraphicsCardEnabled;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isBluetoothEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> isBluetoothEnabled;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Computer</span><span class="params">(ComputerBuilder builder)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.HDD=builder.HDD;</span><br><span class="line">    <span class="keyword">this</span>.RAM=builder.RAM;</span><br><span class="line">    <span class="keyword">this</span>.isGraphicsCardEnabled=builder.isGraphicsCardEnabled;</span><br><span class="line">    <span class="keyword">this</span>.isBluetoothEnabled=builder.isBluetoothEnabled;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Builder Class</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ComputerBuilder</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// required parameters</span></span><br><span class="line">    <span class="keyword">private</span> String HDD;</span><br><span class="line">    <span class="keyword">private</span> String RAM;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// optional parameters</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isGraphicsCardEnabled;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isBluetoothEnabled;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ComputerBuilder</span><span class="params">(String hdd, String ram)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.HDD=hdd;</span><br><span class="line">        <span class="keyword">this</span>.RAM=ram;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ComputerBuilder <span class="title">setGraphicsCardEnabled</span><span class="params">(<span class="keyword">boolean</span> isGraphicsCardEnabled)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.isGraphicsCardEnabled = isGraphicsCardEnabled;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ComputerBuilder <span class="title">setBluetoothEnabled</span><span class="params">(<span class="keyword">boolean</span> isBluetoothEnabled)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.isBluetoothEnabled = isBluetoothEnabled;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Computer <span class="title">build</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Computer(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ComputerBuilder</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.journaldev.design.builder.Computer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBuilderPattern</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//Using builder to get the object in a single line of code and </span></span><br><span class="line">            <span class="comment">//without any inconsistent state or arguments management issues        </span></span><br><span class="line">    Computer comp = <span class="keyword">new</span> Computer.ComputerBuilder(</span><br><span class="line">            <span class="string">"500 GB"</span>, <span class="string">"2 GB"</span>).setBluetoothEnabled(<span class="keyword">true</span>)</span><br><span class="line">            .setGraphicsCardEnabled(<span class="keyword">true</span>).build();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>`</code></p>]]></content>
      
      <categories>
          
          <category> design pattern </category>
          
      </categories>
      
      
        <tags>
            
            <tag> code </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hibernate snippet</title>
      <link href="/2018/05/01/hibernate%20snippet/"/>
      <url>/2018/05/01/hibernate%20snippet/</url>
      <content type="html"><![CDATA[<blockquote><p>ORM is an acronym for Object/Relational mapping. It is a programming strategy to map object with the data stored in the database. It simplifies data creation, data manipulation, and data access.</p></blockquote><h3 id="The-advantages-of-using-ORM-over-JDBC"><a href="#The-advantages-of-using-ORM-over-JDBC" class="headerlink" title="The advantages of using ORM over JDBC"></a>The advantages of using ORM over JDBC</h3><ul><li>Application development is fast.</li><li>Management of transaction.</li><li>Generates key automatically.</li><li>Details of SQL queries are hidden.</li></ul><h3 id="Hibernate-Architecture"><a href="#Hibernate-Architecture" class="headerlink" title="Hibernate Architecture"></a>Hibernate Architecture</h3><ul><li>Java application layer</li><li>Hibernate framework layer</li><li>Backhand api layer</li><li>Database layer</li></ul><p><img src="https://www.javatpoint.com/images/hibernate/arc2.jpg" alt=""></p><p>Hibernate Application Architecture：</p><p><img src="https://www.tutorialspoint.com/hibernate/images/hibernate_architecture.jpg" alt=""></p><blockquote><p>JDBC (Java Database Connectivity)</p><p>JTA (Java Transaction API) </p><p>JNDI (Java Naming Directory Interface)</p></blockquote><h3 id="Elements-of-Hibernate-Architecture"><a href="#Elements-of-Hibernate-Architecture" class="headerlink" title="Elements of Hibernate Architecture"></a>Elements of Hibernate Architecture</h3><ul><li><p>Configuration</p><ul><li><strong>Database Connection</strong> − This is handled through one or more configuration files supported by Hibernate. These files are <strong>hibernate.properties</strong> and <strong>hibernate.cfg.xml</strong>.</li><li><strong>Class Mapping Setup</strong> − This component creates the connection between the Java classes and database tables.</li></ul></li><li><p>SessionFactory</p><blockquote><p>SessionFactory is a thread-safe object, many threads cannot access it simultaneously.</p></blockquote></li><li><p>Session</p><blockquote><ul><li>It maintains a connection between the hibernate application and database.It provides methods to store, update, delete or fetch data from the database such as persist(), update(), delete(), load(), get() etc.</li><li>Session is not a thread-safe object, many threads can access it simultaneously. In other words, you can share it between threads.</li></ul></blockquote></li><li><p>Transaction</p></li><li><p>ConnectionProvider</p></li><li><p>Query</p><blockquote><p>Query objects use SQL or Hibernate Query Language (HQL) string to retrieve data from the database and create objects. A Query instance is used to bind query parameters, limit the number of results returned by the query, and finally to execute the query.</p></blockquote></li><li><p>Criteria</p><blockquote><p>Criteria objects are used to create and execute object oriented criteria queries to retrieve objects.</p></blockquote></li></ul><h3 id="About-SQL"><a href="#About-SQL" class="headerlink" title="About SQL"></a>About SQL</h3><ul><li><p>SQL query created in Hibernate（Native sql）</p><blockquote><p>Session.createSQLQuery</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Session.createSQLQuery()</span><br><span class="line"><span class="comment">//The method createSQLQuery() creates Query object using the native SQL syntax. </span></span><br><span class="line">Query query = session.createSQLQuery(<span class="string">"Select * from Student"</span>);</span><br></pre></td></tr></table></figure></li><li><p>HQL query</p><blockquote><p>Session.createQuery</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Session.createQuery()</span><br><span class="line"><span class="comment">//The method createQuery() creates Query object using the HQL syntax. </span></span><br><span class="line">Query query = session.createQuery(<span class="string">"from Student s where s.name like 'k%'"</span>);</span><br></pre></td></tr></table></figure></li><li><p>criteria query</p><blockquote><p>Session.createCriteria</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Session.createCriteria()</span><br><span class="line"><span class="comment">//The method createCriteria() creates Criteria object for setting the query parameters. This is more useful feature for those who don't want to write the query in hand. You can specify any type of complicated syntax using the Criteria API.</span></span><br><span class="line">Criteria criteria = session.createCriteria(Student.class);</span><br></pre></td></tr></table></figure></li></ul><h3 id="HQL-vs-Criteria"><a href="#HQL-vs-Criteria" class="headerlink" title="HQL vs Criteria"></a>HQL vs Criteria</h3><ul><li>HQL is to perform both select and non-select operations on the data,  but Criteria is only for selecting the data, we cannot perform non-select operations using criteria</li><li>HQL is suitable for executing Static Queries, where as Criteria is suitable for executing Dynamic Queries</li><li>HQL doesn’t support pagination concept, but we can achieve pagination with Criteria</li><li>Criteria used to take more time to execute then HQL</li><li>With Criteria we are safe with SQL Injection because of its dynamic query generation but in HQL as your queries are either fixed or parametrized, there is no safe from SQL Injection.</li></ul><h3 id="Caching"><a href="#Caching" class="headerlink" title="Caching"></a>Caching</h3><blockquote><p>Cache memory stores recently used data items in order to reduce the number of database hits as much as possible.</p></blockquote><p><img src="https://www.tutorialspoint.com/hibernate/images/hibernate_cache.jpg" alt=""></p><ul><li><p>First level Cache</p><blockquote><p>Hibernate first level cache is associated with the Session object. Hibernate first level cache is enabled by default and there is no way to disable it. However hibernate provides methods through which we can delete selected objects from the cache or clear the cache completely.Any object cached in a session will not be visible to other sessions and when the session is closed, all the cached objects will also be lost.</p></blockquote></li><li><p>Second level Cache</p><blockquote><p>Hibernate Second Level cache is disabled by default but we can enable it through configuration. Currently EHCache and Infinispan provides implementation for Hibernate Second level cache and we can use them. </p></blockquote></li><li><p>Query Cache</p><blockquote><p>Hibernate can also cache result set of a query. Hibernate Query Cache doesn’t cache the state of the actual entities in the cache; it caches only identifier values and results of value type. So it should always be used in conjunction with the second-level cache.</p></blockquote></li></ul><hr><h3 id="types-of-association-mapping"><a href="#types-of-association-mapping" class="headerlink" title="types of association mapping"></a>types of association mapping</h3><ol><li><p>One to One</p></li><li><p>One to Many</p><blockquote><p>（一对多）单向：会产生中间表，此时可以用@onetoMany @Joincolumn（name=” “）避免产生中间表**，并且指定了外键的名字（别看 @joincolumn在一中写着，但它存在在多的那个表中）</p></blockquote></li><li><p>Many to One</p><blockquote><p>（多对一）单向：不产生中间表，但可以用@Joincolumn（name=”  “）来指定生成外键的名字，外键在多的一方表中产生！</p></blockquote></li><li><p>Many to Many</p></li></ol><hr><p>可参考<a href="https://www.jianshu.com/p/54108abb070f" target="_blank" rel="noopener">JPA实体关系映射</a></p><h4 id="为什么要有实体关系映射"><a href="#为什么要有实体关系映射" class="headerlink" title="为什么要有实体关系映射"></a>为什么要有实体关系映射</h4><blockquote><p>简化编程操作。把冗余的操作交给底层框架来处理。<br> 例如，如果我要给一位新入学的学生添加一位新的老师。而这个老师又是新来的，在学生数据库与教师数据库中均不存在对应的数据。那么我需要先在教师数据库中保存新来的老师的数据，同时在学生数据库中保存新学生的数据，然后再给两者建立关联。<br> 而如果我们使用了实体关系映射，我们只需要将该新教师实体交给该学生实体，然后保存该学生实体即可完成。</p></blockquote>]]></content>
      
      <categories>
          
          <category> hibernate </category>
          
      </categories>
      
      
        <tags>
            
            <tag> snippet </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>redis snippet</title>
      <link href="/2018/02/16/redis%20snippet/"/>
      <url>/2018/02/16/redis%20snippet/</url>
      <content type="html"><![CDATA[<p>###　数据类型</p><ul><li><p>String</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; SET name &quot;runoob&quot;</span><br><span class="line">OK</span><br><span class="line">redis 127.0.0.1:6379&gt; GET name</span><br><span class="line">&quot;runoob&quot;</span><br></pre></td></tr></table></figure></li><li><p>Hash</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">redis&gt; HMSET myhash field1 &quot;Hello&quot; field2 &quot;World&quot;</span><br><span class="line">&quot;OK&quot;</span><br><span class="line">redis&gt; HGET myhash field1</span><br><span class="line">&quot;Hello&quot;</span><br><span class="line">redis&gt; HGET myhash field2</span><br><span class="line">&quot;World&quot;</span><br></pre></td></tr></table></figure></li><li><p>List</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; lpush runoob redis</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; lpush runoob mongodb</span><br><span class="line">(integer) 2</span><br><span class="line">redis 127.0.0.1:6379&gt; lpush runoob rabitmq</span><br><span class="line">(integer) 3</span><br><span class="line">redis 127.0.0.1:6379&gt; lrange runoob 0 10</span><br><span class="line">1) &quot;rabitmq&quot;</span><br><span class="line">2) &quot;mongodb&quot;</span><br><span class="line">3) &quot;redis&quot;</span><br><span class="line">redis 127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure></li><li><p>Set</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; sadd runoob redis</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; sadd runoob mongodb</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; sadd runoob rabitmq</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; sadd runoob rabitmq</span><br><span class="line">(integer) 0</span><br><span class="line">redis 127.0.0.1:6379&gt; smembers runoob</span><br><span class="line"></span><br><span class="line">1) &quot;redis&quot;</span><br><span class="line">2) &quot;rabitmq&quot;</span><br><span class="line">3) &quot;mongodb&quot;</span><br></pre></td></tr></table></figure></li><li><p>zset(sorted set：有序集合)</p><ul><li><p>Redis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。</p><p>不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。zset的成员是唯一的,但分数(score)却可以重复。</p></li><li><p>命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zadd key score member</span><br></pre></td></tr></table></figure></li><li><p>实例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; zadd runoob 0 redis</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; zadd runoob 0 mongodb</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; zadd runoob 0 rabitmq</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; zadd runoob 0 rabitmq</span><br><span class="line">(integer) 0</span><br><span class="line">redis 127.0.0.1:6379&gt; &gt; ZRANGEBYSCORE runoob 0 1000</span><br><span class="line">1) &quot;mongodb&quot;</span><br><span class="line">2) &quot;rabitmq&quot;</span><br><span class="line">3) &quot;redis&quot;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><ul><li><p>show all keys</p><p><code>KEYS *</code></p></li><li><p>Delete All Keys In Redis</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Delete all keys from all Redis databases:</span><br><span class="line"> `$ redis-cli FLUSHALL`</span><br><span class="line"> Delete all keys of the currently selected Redis database:</span><br><span class="line"> `$ redis-cli FLUSHDB`</span><br><span class="line"> Delete all keys of the specified Redis database:</span><br><span class="line"> `$ redis-cli -n &lt;database_number&gt; FLUSHDB`</span><br></pre></td></tr></table></figure></li></ul><h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><ul><li><p>RedisConnectionFailureException</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">redis.conf中默认的是bind 127.0.0.1，需要将这段注释</span><br><span class="line">设置protected-mode no，因为如果是yes的话，只能进行本地访问。如果设置了密码和bind这个可以开启，如果没有设置，这个属性可以设置为no即可。</span><br><span class="line">daemonize  yes表示后台运行</span><br></pre></td></tr></table></figure></li><li><p>需要安装gcc</p></li><li><p>make时，提示fatal error: jemalloc/jemalloc.h: No such file or directory</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">解决：   </span><br><span class="line"><span class="built_in">cd</span> src/deps</span><br><span class="line">make hiredis jemalloc linenoise lua geohash-int</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><h3 id="自定义配置redis-server"><a href="#自定义配置redis-server" class="headerlink" title="自定义配置redis server"></a>自定义配置redis server</h3><p>涉及到的目录或文件有</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> 1.配置文件/etc/redis/xxxx.conf</span><br><span class="line"> 2.日志、数据文件/data/redis/xxxx</span><br><span class="line"> 3.启动脚本/etc/init.d/redis_xxxx</span><br><span class="line"> </span><br><span class="line">客户端启动时redis-cli -p xxxx</span><br></pre></td></tr></table></figure></li></ul><h3 id="Enable-remote-Redis-connection"><a href="#Enable-remote-Redis-connection" class="headerlink" title="Enable remote Redis connection"></a>Enable remote Redis connection</h3><ul><li>Replaced <code>bind 127.0.0.1</code> with <code>bind 0.0.0.0</code> in the <code>/etc/redis/redis.conf</code> file, the line does not have a leading <code>#</code> nor space,</li><li>Replaced <code>protected-mode yes</code> with <code>protected-mode no</code> in this same file,</li><li>Allowed all traffic to port <code>6379</code> using <code>ufw allow 6379</code> and <code>ufw allow 6379/tcp</code></li></ul><h3 id="secure-redis"><a href="#secure-redis" class="headerlink" title="secure redis"></a>secure redis</h3><p>By default, UFW is not available in CentOS repository. So you will need to install the EPEL repository to your system. You can do this by running the following </p><p>linux command</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># yum install epel-release -y</span><br></pre></td></tr></table></figure><p>Once the EPEL repository is installed, you can install UFW by just running the following linux command:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># yum install --enablerepo=&quot;epel&quot; ufw -y</span><br></pre></td></tr></table></figure><p>After installing UFW, start UFW service and enable it to start on boot time by running the following </p><p>linux command</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ufw enable</span><br></pre></td></tr></table></figure><p>Next, check the status of UFW with the following linux command. You should see the following output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># ufw status </span><br><span class="line">Status: active</span><br></pre></td></tr></table></figure><p>You can also disable UFW firewall by running the following linux command:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ufw disable</span><br></pre></td></tr></table></figure><h3 id="中文乱码"><a href="#中文乱码" class="headerlink" title="中文乱码"></a>中文乱码</h3><p>在启动命令中添加 –raw即可</p>]]></content>
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> snippet </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>neo4j snippet</title>
      <link href="/2018/01/21/course%20snippet/"/>
      <url>/2018/01/21/course%20snippet/</url>
      <content type="html"><![CDATA[<p>高并发处理技术老司机带你玩RabbitMq实现性能倍增<br>链接：<a href="https://pan.baidu.com/s/1tdWyeXgXzbWsltY8NlhdaQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1tdWyeXgXzbWsltY8NlhdaQ</a></p><p>密码：ripd</p><p>缓存那些事,缓存一致性问题爬坑记<br>链接：<a href="https://pan.baidu.com/s/10aX13k6GjIr7XUcrb6j-Pw" target="_blank" rel="noopener">https://pan.baidu.com/s/10aX13k6GjIr7XUcrb6j-Pw</a></p><p>密码：f5kl</p><p>分布式事务处理你不得不听的踩坑故事－让你的代码经得起考验<br>链接：<a href="https://pan.baidu.com/s/1PeiCr0DYMI7x4LwGJktrOg" target="_blank" rel="noopener">https://pan.baidu.com/s/1PeiCr0DYMI7x4LwGJktrOg</a></p><p>密码：phsp</p><p>大咖带你玩转分布式锁 Zookeeper篇<br>链接：<a href="https://pan.baidu.com/s/1Nh8mTrLNwtmh4hwU2khksg" target="_blank" rel="noopener">https://pan.baidu.com/s/1Nh8mTrLNwtmh4hwU2khksg</a></p><p>密码：fznh</p>]]></content>
      
      <categories>
          
          <category> course </category>
          
      </categories>
      
      
        <tags>
            
            <tag> resource </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>jvm snippet</title>
      <link href="/2018/01/18/JVM%20snippet/"/>
      <url>/2018/01/18/JVM%20snippet/</url>
      <content type="html"><![CDATA[<h2 id="JRE-JVM-JDK"><a href="#JRE-JVM-JDK" class="headerlink" title="JRE JVM JDK"></a>JRE JVM JDK</h2><ul><li>JRE:    java run-time</li></ul><blockquote><p>Java is every where in browser, in mobile, in TV or in set-top boxes and if you are into Java programming language than you know that Java code which is bundled in JAR (Java archive) file require Java virtual machine JVM to execute it. </p></blockquote><ul><li>JVM:    java virtual machine</li></ul><blockquote><p> Java Virtual Machine is get created when you run a java program using java command e.g. java HelloWorld. JVM is responsible for converting byte code into machine specific code</p></blockquote><ul><li>JDK:    java development kit</li></ul><blockquote><p> JDK is also loosely referred as JRE but its lot more than JRE and it provides all the tools and executable require to compile debug and execute Java Program.</p></blockquote><h2 id="basic-architecture-of-the-JVM"><a href="#basic-architecture-of-the-JVM" class="headerlink" title="basic architecture of the JVM"></a>basic architecture of the JVM</h2><p><img src="https://i.imgur.com/yI8u4Hr.jpg" alt=""></p><h3 id="Class-Loader-Sub-System"><a href="#Class-Loader-Sub-System" class="headerlink" title="Class Loader Sub System"></a>Class Loader Sub System</h3><h4 id="1-Loading"><a href="#1-Loading" class="headerlink" title="1. Loading"></a>1. Loading</h4><ul><li><p>loading the class file and store inside method area</p><p><img src="https://i.imgur.com/57IalMb.png" alt=""></p></li><li><p>Created object is not student object or customer object. It is a predefined class “Class” object that is presently in java.lang package.</p><p><img src="https://i.imgur.com/9hHykjw.png" alt=""></p></li><li><p>For every loaded .class file, only one class “Class” object will be created by JVM, even though we are using that class multiple times in our program. Example,</p><p><img src="https://i.imgur.com/KKpqYVn.png" alt=""></p></li></ul><h4 id="2-Linking"><a href="#2-Linking" class="headerlink" title="2. Linking"></a>2. Linking</h4><ul><li><p><strong>verification</strong> </p><blockquote><p>This Byte Code Verifier is responsible to verify weather .class file is properly formatted or not, structurally correct or not, generated by valid compiler or not.</p></blockquote></li><li><p><strong>preparation</strong> </p><blockquote><p>allocate memory for class level static variables and assigned default values.</p><p>E.g. For int —&gt; 0, For double —&gt; 0.0, For boolean —&gt; false</p></blockquote></li><li><p><strong>Resolution</strong></p><blockquote><p>It is the process of replacing all symbolic references used in our class with original direct references from method area.</p></blockquote><p><img src="https://i.imgur.com/jTM8BJz.png" alt=""></p></li><li><p><strong>Initialization</strong></p></li></ul><blockquote><p>In Initialization activity, for class level static variables assigns original values and static blocks will be executed from top to bottom.</p></blockquote><ul><li>Types of class loaders in class loader subsystem<ul><li>Bootstrap class loader/ Primordial class loader</li><li>Extension class loader</li><li>Application class loader/System class loader</li></ul></li></ul><h4 id="3-Class-loader-sub-system-follows-delegation-hierarchy-algorithm"><a href="#3-Class-loader-sub-system-follows-delegation-hierarchy-algorithm" class="headerlink" title="3. Class loader sub system follows delegation hierarchy algorithm"></a>3. Class loader sub system follows delegation hierarchy algorithm</h4><p><img src="https://4.bp.blogspot.com/-iMNVExYkMHU/VyMRlZEllzI/AAAAAAAAAZk/slOt-86cWUIR5bLdRRYo5d83O63-7iGqgCLcB/s640/JVM3.png" alt=""></p><ul><li><p><strong>Customized class loader</strong></p><p>Sometimes we may not satisfy with default class loader mechanism then we can go for Customized class loader. For example:</p><p><img src="https://2.bp.blogspot.com/-eaOaDxPhWh4/VyMvvGfOO9I/AAAAAAAAAZ4/3v1d3iuqieMWMp5_HfKiRLaChQFcmFIMACLcB/s640/JVM4.png" alt=""></p></li></ul><h3 id="Various-Memory-Areas-in-JVM"><a href="#Various-Memory-Areas-in-JVM" class="headerlink" title="Various Memory Areas in JVM"></a>Various Memory Areas in JVM</h3><h4 id="1-Method-Area"><a href="#1-Method-Area" class="headerlink" title="1. Method Area"></a>1. Method Area</h4><ul><li><p>Inside method area class level binary data including static variables will be stored</p></li><li><p>Constant pools of a class will be stored inside method area.</p></li><li><p>Method area can be accessed by multiple threads simultaneously.</p><blockquote><p>All threads share the same method area, so access to the method area’s data structures must be designed to be thread-safe. </p></blockquote><p><img src="https://2.bp.blogspot.com/-u01Q_6NhvPk/VyM_pBkp3kI/AAAAAAAAAag/MgiZfTRTz0wxG6-6SEB02hTM7_ZE3SMHQCKgB/s1600/Untitled.png" alt=""></p></li></ul><h4 id="2-Heap-Area"><a href="#2-Heap-Area" class="headerlink" title="2. Heap Area"></a>2. Heap Area</h4><blockquote><p><strong>Heap space in Java is used for dynamic memory allocation for Java objects and JRE classes at the runtime</strong>. New objects are always created in heap space and the references to this objects are stored in stack memory.</p></blockquote><p>These objects have global access and can be accessed from anywhere in the application.</p><p>This memory model is further broken into smaller parts called generations, these are:</p><ol><li><strong>Young Generation –</strong> this is where all new objects are allocated and aged. A minor Garbage collection occurs when this fills up</li><li><strong>Old or Tenured Generation –</strong> this is where long surviving objects are stored. When objects are stored in the Young Generation, a threshold for the object’s age is set and when that threshold is reached, the object is moved to the old generation</li><li><strong>Permanent Generation –</strong> this consists of JVM metadata for the runtime classes and application methods</li></ol><ul><li>It’s accessed via complex memory management techniques that include Young Generation, Old or Tenured Generation, and Permanent Generation</li><li>If heap space is full, Java throws <em>java.lang.OutOfMemoryError</em></li><li>Access to this memory is relatively slower than stack memory</li><li>This memory, in contrast to stack, isn’t automatically deallocated. It needs Garbage Collector to free up unused objects so as to keep the efficiency of the memory usage</li><li>Unlike stack, a heap isn’t threadsafe and needs to be guarded by properly synchronizing the code</li></ul><hr><ul><li>Objects and corresponding instance variables will be stored in the heap area.</li><li><p>Every array in java is object only hence arrays also will be stored in the heap area.</p></li><li><p>Heap area can be access by multiple threads and hence the data stored in the heap area is not thread safe.</p></li></ul><p><img src="https://2.bp.blogspot.com/-oLUpq44AMXM/VyNIAVtyZ3I/AAAAAAAAAa0/lCVcaictQnk0MxCpCwxbUpXyL4Fy_83gACLcB/s1600/Untitled.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Set Maximum and Minimum heap size</span><br><span class="line">-Xmx</span><br><span class="line">     To set maximum heap size , i.e., maxMemory</span><br><span class="line">    java -Xmx512m HeapSpaceDemo</span><br><span class="line">     Here mx = maximum size</span><br><span class="line">              512m = 512 MB</span><br><span class="line">              HeapSpaceDemo = Java class name</span><br><span class="line">-Xms</span><br><span class="line">     To set minimum heap size , i.e., total memory </span><br><span class="line">        java -Xms65m HeapSpaceDemo   </span><br><span class="line">      Here ms = minimum size</span><br><span class="line">              65m = 65 MB</span><br><span class="line">              HeapSpaceDemo = Java class name</span><br><span class="line">or, you can set a minimum maximum heap size at a time</span><br><span class="line">java -Xms256m -Xmx1024m HeapSpaceDemo</span><br></pre></td></tr></table></figure><h4 id="3-Stack-Memory"><a href="#3-Stack-Memory" class="headerlink" title="3. Stack Memory"></a>3. Stack Memory</h4><blockquote><p><strong>Stack Memory in Java is used for static memory allocation and the execution of a thread.</strong> It contains primitive values that are specific to a method and references to objects that are in a heap, referred from the method.</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Access to this memory is in Last-In-First-Out (LIFO) order. Whenever a new method is called, a new block on top of the stack is created which contains values specific to that method, like primitive variables and references to objects.</span><br><span class="line"></span><br><span class="line">When the method finishes execution, it’s corresponding stack frame is flushed, the flow goes back to the calling method and space becomes available for the next method.</span><br></pre></td></tr></table></figure><ul><li><p>It grows and shrinks as new methods are called and returned respectively</p></li><li><p>Variables inside stack exist only as long as the method that created them is running</p></li><li><p>It’s automatically allocated and deallocated when method finishes execution</p></li><li><p>If this memory is full, Java throws <em>java.lang.StackOverFlowError</em></p></li><li><p>Access to this memory is fast when compared to heap memory</p></li><li><p>This memory is threadsafe as each thread operates in its own stack</p></li></ul><hr><ul><li><p>Local Variable Array</p><ul><li><p>It contains all parameters and local variables of the method.</p></li><li><p>the occupied slot </p><p><img src="https://4.bp.blogspot.com/-ROv0VjQvVGs/VyRf_zpQSpI/AAAAAAAAAbk/4kX92SN32gwi5KW4tPgQlEYmcnADWqrwgCLcB/s1600/Untitled.png" alt=""></p></li></ul></li><li><p>Operand Stack</p><ul><li><p>JVM uses operand stack as work space.</p></li><li><p>last-in first-out (LIFO) </p></li><li><p>how a Java virtual machine would add two local variables that contain ints and store the int result in a third local variable:</p><p><img src="https://3.bp.blogspot.com/-z0BIzBb7RSk/VyRoO5281LI/AAAAAAAAAb4/xU2X3082YSA7qyoelCxDj36l8luQkWjgwCLcB/s1600/Untitled.png" alt=""></p></li></ul></li><li><p>Frame Data</p></li></ul><p><strong>Stack Memory vs Heap Space</strong></p><table><thead><tr><th>Parameter</th><th>Stack Memory</th><th>Heap Space</th></tr></thead><tbody><tr><td>Application</td><td>Stack is used in parts, one at a time during execution of a thread</td><td>The entire application uses Heap space during runtime</td></tr><tr><td>Size</td><td>Stack has size limits depending upon OS and is usually smaller then Heap</td><td>There is no size limit on Heap</td></tr><tr><td>Storage</td><td>Stores only primitive variables and references to objects that are created in Heap Space</td><td>All the newly created objects are stored here</td></tr><tr><td>Order</td><td>It is accessed using Last-in First-out (LIFO) memory allocation system</td><td>This memory is accessed via complex memory management techniques that include Young Generation, Old or Tenured Generation, and Permanent Generation.</td></tr><tr><td>Life</td><td>Stack memory only exists as long as the current method is running</td><td>Heap space exists as long as the application runs</td></tr><tr><td>Efficiency</td><td>Comparatively much faster to allocate when compared to heap</td><td>Slower to allocate when compared to stack</td></tr><tr><td>Allocation/Deallocation</td><td>This Memory is automatically allocated and deallocated when a method is called and returned respectively</td><td>Heap space is allocated when new objects are created and deallocated by Gargabe Collector when they are no longer referenced</td></tr></tbody></table><h4 id="4-PC-Registers-Program-Counter-Registers"><a href="#4-PC-Registers-Program-Counter-Registers" class="headerlink" title="4. PC Registers(Program Counter Registers)"></a>4. PC Registers(Program Counter Registers)</h4><blockquote><p>For every thread a separate PC register will be created at the time of thread creation. PC register contains address of current executing instruction. Once instruction execution completes automatically PC register will be incremented to hold address of next instruction. An “address” can be a native pointer or an offset from the beginning of a method’s byte codes.   </p></blockquote><h4 id="5-Native-Method-Stacks"><a href="#5-Native-Method-Stacks" class="headerlink" title="5. Native Method Stacks"></a>5. Native Method Stacks</h4><blockquote><p>Here also for every Thread a separate run time stack will be created. It contains all the native methods used in the application. Native method means methods written in a language other than the Java programming language. In other words, it is a stack used to execute C/C++ codes invoked through JNI (Java Native Interface). According to the language, a C stack or C++ stack is created.</p></blockquote><p><img src="https://4.bp.blogspot.com/-4bE2RL52NtA/VyRuBlfum-I/AAAAAAAAAcM/LzCOXj-d1F81ipQsZWs17QohYqrolOo0gCLcB/s1600/Untitled.png" alt=""></p><p><img src="https://1.bp.blogspot.com/-YIMpPCtloyM/VyRvvs1tf0I/AAAAAAAAAcY/XkvoL2nuRS8hKUDMHR3gw0OCjaUeePrzQCLcB/s1600/Untitled.png" alt=""></p><h3 id="Execution-Engine"><a href="#Execution-Engine" class="headerlink" title="Execution Engine"></a>Execution Engine</h3><h4 id="1-Interpreter"><a href="#1-Interpreter" class="headerlink" title="1. Interpreter"></a>1. Interpreter</h4><blockquote><p>It is responsible to read byte code and interpret into machine code (native code) and execute that machine code line by line. </p></blockquote><h4 id="2-JIT-Compiler"><a href="#2-JIT-Compiler" class="headerlink" title="2. JIT Compiler"></a>2. JIT Compiler</h4><blockquote><p>The JIT compiler has been introduced to compensate for the disadvantages of the interpreter. The main purpose of JIT compiler is to improve the performance. Internally JIT compiler maintains a separate count for every method. Whenever JVM across any method call, first that method will be interpreted normally by the interpreter and JIT compiler increments the corresponding count variable. </p></blockquote><ul><li><strong>Profiler</strong> which is the part of JIT compiler is responsible to identify Hotspot(Repeated Used Methods).</li></ul><p><img src="https://1.bp.blogspot.com/-ANGvCzUbah4/VyXPF7DZ_vI/AAAAAAAAAdw/WXoC1nvYlLcPgVxyyLfSQtD6wM2fCDzMwCLcB/s1600/Untitled.png" alt=""></p><h3 id="Java-Native-Interface-JNI"><a href="#Java-Native-Interface-JNI" class="headerlink" title="Java Native Interface(JNI)"></a>Java Native Interface(JNI)</h3><blockquote><p>JNI is acts as a bridge (Mediator) for java method calls and corresponding native libraries. </p></blockquote><p><img src="https://3.bp.blogspot.com/-0qA9I4nPJ5s/VyXRhVVabDI/AAAAAAAAAeE/JYW4byFQCMICubzScaBIaQvEVblinG7cgCLcB/s1600/Untitled.png" alt=""></p><h3 id="内存大小设置"><a href="#内存大小设置" class="headerlink" title="内存大小设置"></a>内存大小设置</h3><ul><li>在命令行下用  java -Xmx1200m -XX:Max Perm Size=60m -version 命令来进行测试，然后逐渐的增大XXXX的值，如果执行正常就表示指定的内存大小可用，否则会打印错误信息。<br>最后得到的虚拟机实际分配到的<br>总内存大小=堆内存+非堆内存<br>1200m：为堆内存大小，如果不指定后者参数则有最大数限制，网上很多文章认为这就是JVM内存， -Xmx为设置最大堆内存<br>60m： 为非堆内存大小， -XX: Max PermSize实为 永久域内存，在堆内存之外，属于非堆内存部分，jdk1.5我测了好像默认为62m，即得到非堆部分默认内存）</li></ul>]]></content>
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> snippet </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>maven snippet</title>
      <link href="/2018/01/09/maven%20snippet/"/>
      <url>/2018/01/09/maven%20snippet/</url>
      <content type="html"><![CDATA[<h3 id="命令介绍"><a href="#命令介绍" class="headerlink" title="命令介绍"></a>命令介绍</h3><ol><li><strong>mvn compile</strong> 编译,将Java 源程序编译成 class 字节码文件。</li><li><strong>mvn test</strong> 测试，并生成测试报告</li><li><strong>mvn clean</strong> 将以前编译得到的旧的 class 字节码文件删除</li><li><strong>mvn pakage</strong> 打包,动态 web工程打 war包，Java工程打 jar 包。</li><li><strong>mvn install</strong> 将项目生成 jar 包放在仓库中，以便别的模块调用</li><li><a href="https://www.cnblogs.com/zhangxh20/p/6298062.html" target="_blank" rel="noopener">Maven的几个常用plugin</a></li></ol><h3 id="tomcat项目的部署"><a href="#tomcat项目的部署" class="headerlink" title="tomcat项目的部署"></a>tomcat项目的部署</h3><ul><li>参照 <a href="https://blog.csdn.net/u012076316/article/details/46907823" target="_blank" rel="noopener">tomcat 设置热部署</a></li><li>参照<a href="http://www.jb51.net/article/117334.htm" target="_blank" rel="noopener">war和war exploded区别及问题汇总</a></li><li>参照<a href="https://www.jianshu.com/p/fb0ed26c35d5" target="_blank" rel="noopener">tomcat部署的不同方式</a></li><li>启动项目时，如果test包里面有测试程序，为了忽略编译test测试程序，需要运行命令打包<code>mvn clean package -DskipTests</code>，另外运行tomcat的时候以debug模式进行启动。</li></ul><h3 id="maven多项目之间相互引用"><a href="#maven多项目之间相互引用" class="headerlink" title="maven多项目之间相互引用"></a>maven多项目之间相互引用</h3><ul><li>应该在父目录下进行maven install操作，会自动生成子模块的jar或war包。</li></ul><ul><li><p><strong>解决maven无法加载本地lib/下的jar包问题(程序包XXX不存在)</strong></p><ul><li><p>原因</p><p>若该程序包是第三方的jar，解决方案是让maven既加载maven库中的jar包，又要加载本地WEB-INF/lib下的jar包。 </p></li><li><p>解决</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;3.6.0&lt;/version&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">&lt;source&gt;1.8&lt;/source&gt;</span><br><span class="line">&lt;target&gt;1.8&lt;/target&gt;</span><br><span class="line">&lt;encoding&gt;UTF-8&lt;/encoding&gt;</span><br><span class="line">&lt;compilerArguments&gt;</span><br><span class="line">&lt;extdirs&gt;$&#123;project.basedir&#125;/src/main/webapp/WEB-INF/lib&lt;/extdirs&gt;</span><br><span class="line">&lt;/compilerArguments&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="创建本地引用包"><a href="#创建本地引用包" class="headerlink" title="创建本地引用包"></a>创建本地引用包</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn install:install-file -Dfile=xxx.jar -DgroupId=xx.xxx.xx -DartifactId=xx -Dversion=xx -Dpackaging=jar</span><br></pre></td></tr></table></figure><h1 id="相关问题"><a href="#相关问题" class="headerlink" title="相关问题"></a>相关问题</h1><ul><li><a href="https://www.cnblogs.com/baixiaoshuai/p/8939989.html" target="_blank" rel="noopener">idea中的maven模块变成灰色的可能原因</a></li><li><a href="https://blog.csdn.net/qq_38663729/article/details/78275209" target="_blank" rel="noopener">jar包和war包的介绍与区别</a></li></ul><ul><li>由于没有mvn install操作，没有在本地下载依赖包到lib目录下，所以启动项目，会提示java.lang.ClassNotFoundException: org.springframework.web.context.ContextLoaderListener错误</li></ul>]]></content>
      
      <categories>
          
          <category> maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> snippet </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>java design pattern</title>
      <link href="/2017/12/20/java%20design%20pattern/"/>
      <url>/2017/12/20/java%20design%20pattern/</url>
      <content type="html"><![CDATA[<h2 id="Creational-Design-Patterns"><a href="#Creational-Design-Patterns" class="headerlink" title="Creational Design Patterns"></a>Creational Design Patterns</h2><blockquote><p>These design patterns provide a way to create objects while hiding the creation logic, rather than instantiating objects directly using new operator. This gives program more flexibility in deciding which objects need to be created for a given use case.</p></blockquote><h3 id="Singleton"><a href="#Singleton" class="headerlink" title="Singleton"></a>Singleton</h3><blockquote><p>In Factory pattern, we create object without exposing the creation logic to the client and refer to newly created object using a common interface.</p></blockquote><ul><li><p>different approaches to implement:</p><ul><li>Private constructor to restrict instantiation of the class from other classes.</li><li>Private static variable of the same class that is the only instance of the class.</li><li>Public static method that returns the instance of the class, this is the global access point for outer world to get the instance of the singleton class.</li></ul></li><li><p>design concerns with the implementation</p><ul><li>Eager initialization</li><li>Static block initialization</li><li>Lazy Initialization</li><li>Thread Safe Singleton</li><li>Bill Pugh Singleton Implementation</li><li>Using Reflection to destroy Singleton Pattern</li><li>Enum Singleton</li><li>Serialization and Singleton</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SingleObject.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleObject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//create an object of SingleObject</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> SingleObject instance = <span class="keyword">new</span> SingleObject();</span><br><span class="line"></span><br><span class="line">   <span class="comment">//make the constructor private so that this class cannot be</span></span><br><span class="line">   <span class="comment">//instantiated</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="title">SingleObject</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//Get the only object available</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingleObject <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> instance;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showMessage</span><span class="params">()</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Hello World!"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//SingletonPatternDemo.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonPatternDemo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//illegal construct</span></span><br><span class="line">      <span class="comment">//Compile Time Error: The constructor SingleObject() is not visible</span></span><br><span class="line">      <span class="comment">//SingleObject object = new SingleObject();</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//Get the only object available</span></span><br><span class="line">      SingleObject object = SingleObject.getInstance();</span><br><span class="line"></span><br><span class="line">      <span class="comment">//show the message</span></span><br><span class="line">      object.showMessage();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Factory"><a href="#Factory" class="headerlink" title="Factory"></a>Factory</h3><ul><li>Factory design pattern provides approach to code for interface rather than implementation.</li><li>Factory pattern removes the instantiation of actual implementation classes from client code. Factory pattern makes our code more robust, less coupled and easy to extend. For example, we can easily change PC class implementation because client program is unaware of this.</li><li>Factory pattern provides abstraction between implementation and client classes through inheritance.</li></ul><h3 id="Abstract-Factory"><a href="#Abstract-Factory" class="headerlink" title="Abstract Factory"></a>Abstract Factory</h3><ul><li>Abstract Factory design pattern provides approach to code for interface rather than implementation.</li><li>Abstract Factory pattern is “factory of factories” and can be easily extended to accommodate more products, for example we can add another sub-class Laptop and a factory LaptopFactory.</li><li>Abstract Factory pattern is robust and avoid conditional logic of Factory pattern.</li></ul><h3 id="Builder"><a href="#Builder" class="headerlink" title="Builder"></a>Builder</h3><ul><li>Builder pattern solves the issue with large number of optional parameters and inconsistent state by providing a way to build the object step-by-step and provide a method that will actually return the final Object.</li></ul><h3 id="Prototype"><a href="#Prototype" class="headerlink" title="Prototype"></a>Prototype</h3><ul><li>Prototype design pattern is used when the Object creation is a costly affair and requires a lot of time and resources and you have a similar object already existing.Prototype pattern provides a mechanism to copy the original object to a new object and then modify it according to our needs. Prototype design pattern uses java cloning to copy the object.</li></ul><h2 id="Structural-Design-Patterns"><a href="#Structural-Design-Patterns" class="headerlink" title="Structural Design Patterns"></a>Structural Design Patterns</h2><blockquote><p>These design patterns concern class and object composition. Concept of inheritance is used to compose interfaces and define ways to compose objects to obtain new functionalities.</p></blockquote><h3 id="Adapter"><a href="#Adapter" class="headerlink" title="Adapter"></a>Adapter</h3><ul><li>Adapter design pattern is one of the structural design pattern and its used so that two unrelated interfaces can work together. The object that joins these unrelated interface is called an Adapter.</li></ul><h3 id="Composite"><a href="#Composite" class="headerlink" title="Composite"></a>Composite</h3><ul><li>Composite design pattern is used when we have to represent a part-whole hierarchy.</li></ul><h3 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h3><ul><li>Proxy design pattern common uses are to control access or to provide a wrapper implementation for better performance.</li></ul><h3 id="Flyweight"><a href="#Flyweight" class="headerlink" title="Flyweight"></a>Flyweight</h3><ul><li>Use sharing to support large numbers of fine-grained objects efficiently</li></ul><h3 id="Facade"><a href="#Facade" class="headerlink" title="Facade"></a>Facade</h3><ul><li>Provide a unified interface to a set of interfaces in a subsystem. Facade Pattern defines a higher-level interface that makes the subsystem easier to use.</li></ul><h3 id="Bridge"><a href="#Bridge" class="headerlink" title="Bridge"></a>Bridge</h3><ul><li>Decouple an abstraction from its implementation so that the two can vary independently.</li></ul><h3 id="Decorator"><a href="#Decorator" class="headerlink" title="Decorator"></a>Decorator</h3><ul><li>Decorator design pattern is helpful in providing runtime modification abilities and hence more flexible. Its easy to maintain and extend when the number of choices are more.</li><li>The disadvantage of decorator design pattern is that it uses a lot of similar kind of objects (decorators).</li></ul><h2 id="Behavioral-Design-Patterns"><a href="#Behavioral-Design-Patterns" class="headerlink" title="Behavioral Design Patterns"></a>Behavioral Design Patterns</h2><blockquote><p>These design patterns are specifically concerned with communication between objects.</p></blockquote><h3 id="Template-Method"><a href="#Template-Method" class="headerlink" title="Template Method"></a>Template Method</h3><ul><li>Template method should consists of certain steps whose order is fixed and for some of the methods, implementation differs from base class to subclass. Template method should be final.</li><li>Most of the times, subclasses calls methods from super class but in template pattern, superclass template method calls methods from subclasses, this is known as Hollywood Principle – “don’t call us, we’ll call you.”.</li><li>Methods in base class with default implementation are referred as Hooks and they are intended to be overridden by subclasses, if you want some of the methods to be not overridden, you can make them final, for example in our case we can make buildFoundation() method final because if we don’t want subclasses to override it.</li></ul><h3 id="Media"><a href="#Media" class="headerlink" title="Media"></a>Media</h3><ul><li>Allows loose coupling by encapsulating the way disparate sets of objects interact and communicate with each other. Allows for the actions of each object set to vary independently of one another.</li></ul>]]></content>
      
      <categories>
          
          <category> design pattern </category>
          
      </categories>
      
      
        <tags>
            
            <tag> learn </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>spring aop</title>
      <link href="/2017/12/18/spring%20aop/"/>
      <url>/2017/12/18/spring%20aop/</url>
      <content type="html"><![CDATA[<h3 id="Architectural"><a href="#Architectural" class="headerlink" title="Architectural"></a>Architectural</h3><p><img src="https://www.baeldung.com/wp-content/uploads/2017/11/Program_Execution.jpg" alt=""></p><h3 id="Business-Object"><a href="#Business-Object" class="headerlink" title="Business Object"></a>Business Object</h3><blockquote><p><strong>A business object is a normal class which has a normal business logic.</strong></p></blockquote><h3 id="Aspect"><a href="#Aspect" class="headerlink" title="Aspect"></a>Aspect</h3><blockquote><p><strong>An aspect is a modularization of a concern that cuts across multiple classes.</strong></p></blockquote><h3 id="JoinPoint"><a href="#JoinPoint" class="headerlink" title="JoinPoint"></a>JoinPoint</h3><blockquote><p><strong>A Joinpoint is a point during the execution of a program, such as execution of a method or the handling of an exception.</strong></p></blockquote><p>In Spring AOP, a <em>JoinPoint</em> always represents a method execution.</p><h3 id="Pointcut"><a href="#Pointcut" class="headerlink" title="Pointcut"></a>Pointcut</h3><blockquote><p><strong>A Pointcut is a predicate that helps match an <em>Advice</em> to be applied by an <em>Aspect</em> at a particular <em>JoinPoint</em>.</strong></p></blockquote><p>The Advice is often associated with a <em>Pointcut</em> expression and runs at any <em>Joinpoint</em> matched by the Pointcut.</p><h3 id="Advice"><a href="#Advice" class="headerlink" title="Advice"></a>Advice</h3><blockquote><p><strong>An advice is an action taken by an aspect at a particular <em>Joinpoint</em>. Different types of advice include <em>“around,” “before”</em> and <em>“after”</em> advice.</strong></p></blockquote><p>In Spring, an <em>Advice</em> is modeled as an interceptor, maintaining a chain of interceptors around the <em>Joinpoint</em>.</p><hr><h3 id="Example-Wiring-Business-Object-and-Aspect"><a href="#Example-Wiring-Business-Object-and-Aspect" class="headerlink" title="Example:Wiring Business Object and Aspect"></a>Example:Wiring Business Object and Aspect</h3><ul><li><p>Business Object</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleAdder</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>a simple Aspect</p><p>Unified logging can be an example of such cross-cutting concern:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdderAfterReturnAspect</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturn</span><span class="params">(Object returnValue)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"value return was &#123;&#125;"</span>,  returnValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>config excerpt</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sampleAdder"</span> <span class="attr">class</span>=<span class="string">"org.xxx.SampleAdder"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"doAfterReturningAspect"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">"org.xxx.AdderAfterReturnAspect"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">"aspects"</span> <span class="attr">ref</span>=<span class="string">"doAfterReturningAspect"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pointCutAfterReturning"</span> <span class="attr">expression</span>=</span></span><br><span class="line"><span class="tag">         "<span class="attr">execution</span>(* <span class="attr">org.xxx.SampleAdder</span>+<span class="attr">.</span>*(<span class="attr">..</span>))"/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">"afterReturn"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">returning</span>=<span class="string">"returnValue"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointCutAfterReturning"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><hr><blockquote><p>依赖注入DI有助于应用对象之间的解耦，而AOP可以实现横切关注点与它们所影响的对象之间的解耦</p></blockquote><ul><li><p>通知Advice</p><blockquote><p>切面的工作被称为通知，通知定义了切面是什么以及何时使用。</p></blockquote><ul><li>前置通知（Before）：在目标方法被调用之前调用通知功能</li><li>后置通知（After）：在目标方法完成之后调用通知，此时不会关心方法的输出</li><li>返回通知（After-returning）：在目标方法成功执行之后调用通知</li><li>异常通知（After-throwing）：在目标方法抛出异常后调用通知</li><li>环绕通知（Around）：通知包裹了被通知的方法，在被通知的方法调用之前和调用之后执行自定义的行为。</li></ul></li><li><p>连接点Join point</p><blockquote><p>连接点是应用程序的点，可供插入切面</p><p>我理解的是程序的某处，或者任意一处都可以称作为连接点</p></blockquote></li><li><p>切点Pointcut</p><blockquote><p>切点有助于缩小切面所通知的连接点的范围</p><p>如果Advice定义了切面的what和when,那么pointcut就定义了where</p></blockquote></li><li><p>切面Aspect</p><blockquote><p>Aspect是Advice和Pointcut的结合</p></blockquote></li></ul>]]></content>
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> learn </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>rpc snippet</title>
      <link href="/2017/12/16/rpc%20snippet/"/>
      <url>/2017/12/16/rpc%20snippet/</url>
      <content type="html"><![CDATA[<p>RPC<br>Remote Procedure Call，远程过程调用</p><hr><p>服务之间的调用大多采用rpc的方式调用，或者消息队列的方式进行解耦。</p><p>RPC与http调用的区别<br>rpc是基于TCP/IP协议的，而HTTP服务主要是基于HTTP协议的，而http协议是在传输层协议TCP之上的。所以rpc效率更好。</p><p>RPC是指远程过程调用，也就是说两台服务器A，B，一个应用部署在A服务器上，想要调用B服务器上应用提供的函数/方法，<br>由于不在一个内存空间，不能直接调用，需要通过网络来表达调用的语义和传达调用的数据。</p><p>由于计算能力需要横向扩展，需要在多台机器组成的集群上部署应用。</p>]]></content>
      
      <categories>
          
          <category> rpc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> snippet </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>restful snippet</title>
      <link href="/2017/12/08/restful%20snippet/"/>
      <url>/2017/12/08/restful%20snippet/</url>
      <content type="html"><![CDATA[<ul><li><strong>GET</strong>: A safe read-only method that reads a single or a list of resources.</li><li><strong>POST</strong>: Creates a new resource.</li><li><strong>PUT</strong>: Completely replaces the resource(s) at the given location with the new data.</li><li><strong>PATCH</strong>: Merges the resource(s) at the given location with the new data.</li><li><strong>DELETE</strong>: Deletes the resource(s) at a location.</li><li><strong>HEAD</strong>: Same as GET but only returns the header and no data.</li></ul><p><strong>用 URL 表示要操作的资源，用不同的 HTTP 请求（GET，POST，PUT，DELETE）描述对资源的操作，通过 HTTP 的状态码来判断此次对资源操作的结果</strong>，这就是 Restful风格。 </p><ol><li>GET 用来获取资源</li><li>POST 用来新增资源</li><li>PUT 用来更新资源</li><li>DELETE 用来删除资源</li></ol><ul><li>put和delete虽然是http协议的规范 ,但是遗憾的是,所有的无论是html4还是h5都不支持,所以我们在实际开开发过程当中要模拟这两种状态。 </li></ul><h3 id="Restful有什么意义"><a href="#Restful有什么意义" class="headerlink" title="Restful有什么意义"></a>Restful有什么意义</h3><ul><li>网络上的所有的信息体都看作一种资源，对网络资源的某种操作，都是通过 method 来确定的。 </li><li>对于现在的数据或者资源提供方，对外透露的接口一般是 restful 风格的，有利于不同系统之间的资源共享,而且只需要遵守规范不需要做另外的配置就能达到资源共享。 </li></ul><p><strong>restful 是用来外提供接口的，主要用于在不同的系统之间进行数据的交互。</strong></p><p><strong>ps：其实在做内部系统的时候并不会使用 restful 风格的 url 请求，只用普通的 @RequestMapping 来匹配请求就行了。</strong></p>]]></content>
      
      <categories>
          
          <category> restful </category>
          
      </categories>
      
      
        <tags>
            
            <tag> snippet </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vue snippet</title>
      <link href="/2017/12/07/vue%20snippet/"/>
      <url>/2017/12/07/vue%20snippet/</url>
      <content type="html"><![CDATA[<ul><li><p>vue实例初始化过程：</p><ul><li>设置数据监听</li><li>编译模板</li><li>将实例挂载到DOM并在数据变化时更新DOM等</li></ul></li><li><p>生命周期钩子：提供用户在不同阶段添加自己的代码的机会</p><ul><li>created，用来实例被创建之后执行代码</li><li>mounted,</li><li>updated,</li><li>destoryed</li></ul></li><li><p>指令（Directives）是带有<code>v-</code>前缀的特殊特性。指令特性的值预期是单个JavaScript表达式（<code>v-for</code>是例外情况），指令的职责是：当表达式的值改变时，将其产生的连带影响，响应式地作用于DOM。</p><ul><li><p><code>v-bind</code>，可以接受一个参数，用于响应式地更新HTML特性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 完整语法 --&gt;</span><br><span class="line">&lt;a v-bind:href=&quot;url&quot;&gt;...&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 缩写 --&gt;</span><br><span class="line">&lt;a :href=&quot;url&quot;&gt;...&lt;/a&gt;</span><br></pre></td></tr></table></figure></li><li><p><code>v-on</code>，用于监听DOM事件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 完整语法 --&gt;</span><br><span class="line">&lt;a v-on:click=&quot;doSomething&quot;&gt;...&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 缩写 --&gt;</span><br><span class="line">&lt;a @click=&quot;doSomething&quot;&gt;...&lt;/a&gt;</span><br></pre></td></tr></table></figure></li><li><p>修饰符<code>v-on:submit.prevent</code>,<code>.prevent</code> 修饰符告诉 <code>v-on</code> 指令对于触发的事件调用 <code>event.preventDefault()</code>。</p></li></ul></li></ul><hr><ul><li><p>计算属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;example&quot;&gt;</span><br><span class="line">  &lt;p&gt;Original message: &quot;&#123;&#123; message &#125;&#125;&quot;&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;Computed reversed message: &quot;&#123;&#123; reversedMessage &#125;&#125;&quot;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  el: &apos;#example&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: &apos;Hello&apos;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    // 计算属性的 getter</span><br><span class="line">    reversedMessage: function () &#123;</span><br><span class="line">      // `this` 指向 vm 实例</span><br><span class="line">      return this.message.split(&apos;&apos;).reverse().join(&apos;&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><p>计算属性缓存vs方法</p><p>在方法中实现同计算属性同样的效果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;Reversed message: &quot;&#123;&#123; reversedMessage() &#125;&#125;&quot;&lt;/p&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 在组件中</span><br><span class="line">methods: &#123;</span><br><span class="line">  reversedMessage: function () &#123;</span><br><span class="line">    return this.message.split(&apos;&apos;).reverse().join(&apos;&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>计算属性是基于它们的依赖进行缓存的</strong>。只在相关依赖发生改变时它们才会重新求值。 </p></li><li><p>计算属性vs侦听属性</p><p>侦听属性的用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;demo&quot;&gt;&#123;&#123; fullName &#125;&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  el: &apos;#demo&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    firstName: &apos;Foo&apos;,</span><br><span class="line">    lastName: &apos;Bar&apos;,</span><br><span class="line">    fullName: &apos;Foo Bar&apos;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    firstName: function (val) &#123;</span><br><span class="line">      this.fullName = val + &apos; &apos; + this.lastName</span><br><span class="line">    &#125;,</span><br><span class="line">    lastName: function (val) &#123;</span><br><span class="line">      this.fullName = this.firstName + &apos; &apos; + val</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>与计算属性的版本进行对比：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  el: &apos;#demo&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    firstName: &apos;Foo&apos;,</span><br><span class="line">    lastName: &apos;Bar&apos;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    fullName: function () &#123;</span><br><span class="line">      return this.firstName + &apos; &apos; + this.lastName</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>计算属性的setter</p><p>计算属性默认只有 getter ，不过在需要时你也可以提供一个 setter ： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// ...</span><br><span class="line">computed: &#123;</span><br><span class="line">  fullName: &#123;</span><br><span class="line">    // getter</span><br><span class="line">    get: function () &#123;</span><br><span class="line">      return this.firstName + &apos; &apos; + this.lastName</span><br><span class="line">    &#125;,</span><br><span class="line">    // setter</span><br><span class="line">    set: function (newValue) &#123;</span><br><span class="line">      var names = newValue.split(&apos; &apos;)</span><br><span class="line">      this.firstName = names[0]</span><br><span class="line">      this.lastName = names[names.length - 1]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">// ...</span><br></pre></td></tr></table></figure><p>现在再运行 <code>vm.fullName = &#39;John Doe&#39;</code> 时，setter 会被调用，<code>vm.firstName</code> 和 <code>vm.lastName</code> 也会相应地被更新。 </p></li></ul></li><li><p>侦听器</p><p>使用场景：当需要在数据变化时执行异步或开销较大的操作时 </p></li></ul><hr><ul><li><p>条件渲染</p><p><code>v-if</code></p></li><li><p>展示元素</p><p><code>v-show</code>，它只是简单地切换元素的css属性<code>display</code></p><p><em>**注意</em>：<code>v-show</code> 不支持 <code>&lt;template&gt;</code> 元素，也不支持 <code>v-else</code>。 </p><ul><li><p><code>v-if</code>vs<code>v-show</code></p><p>一般来说，<code>v-if</code> 有更高的切换开销，而 <code>v-show</code> 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用 <code>v-show</code> 较好；如果在运行时条件很少改变，则使用 <code>v-if</code> 较好。 </p></li></ul></li><li><p>列表渲染</p><p><code>v-for</code></p><ul><li><p>实例一</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul id=&quot;example-1&quot;&gt;</span><br><span class="line">  &lt;li v-for=&quot;item in items&quot;&gt;</span><br><span class="line">    &#123;&#123; item.message &#125;&#125;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var example1 = new Vue(&#123;</span><br><span class="line">  el: &apos;#example-1&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    items: [</span><br><span class="line">      &#123; message: &apos;Foo&apos; &#125;,</span><br><span class="line">      &#123; message: &apos;Bar&apos; &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>实例二</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul id=&quot;example-2&quot;&gt;</span><br><span class="line">  &lt;li v-for=&quot;(item, index) in items&quot;&gt;</span><br><span class="line">    &#123;&#123; parentMessage &#125;&#125; - &#123;&#123; index &#125;&#125; - &#123;&#123; item.message &#125;&#125;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var example2 = new Vue(&#123;</span><br><span class="line">  el: &apos;#example-2&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    parentMessage: &apos;Parent&apos;,</span><br><span class="line">    items: [</span><br><span class="line">      &#123; message: &apos;Foo&apos; &#125;,</span><br><span class="line">      &#123; message: &apos;Bar&apos; &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>可以用 of 替代 in 作为分隔符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-for=&quot;item of items&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></li><li><p>实例三</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#v-for-object&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    object: &#123;</span><br><span class="line">      firstName: &apos;John&apos;,</span><br><span class="line">      lastName: &apos;Doe&apos;,</span><br><span class="line">      age: 30</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul id=&quot;v-for-object&quot; class=&quot;demo&quot;&gt;</span><br><span class="line">  &lt;li v-for=&quot;value in object&quot;&gt;</span><br><span class="line">    &#123;&#123; value &#125;&#125;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-for=&quot;(value, key) in object&quot;&gt;</span><br><span class="line">  &#123;&#123; key &#125;&#125;: &#123;&#123; value &#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-for=&quot;(value, key, index) in object&quot;&gt;</span><br><span class="line">  &#123;&#123; index &#125;&#125;. &#123;&#123; key &#125;&#125;: &#123;&#123; value &#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>数组更新检测</p><ul><li>变异方法，会改变被这些方法调用的原始数组 <ul><li><code>push()</code></li><li><code>pop()</code></li><li><code>shift()</code></li><li><code>unshift()</code></li><li><code>splice()</code></li><li><code>sort()</code></li><li><code>reverse()</code></li></ul></li><li>也有非变异 (non-mutating method) 方法，例如：<code>filter()</code>, <code>concat()</code> 和 <code>slice()</code> 。这些不会改变原始数组，但<strong>总是返回一个新数组</strong>。</li></ul><hr></li><li><p>vue组件实例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 定义一个名为 button-counter 的新组件</span><br><span class="line">Vue.component(&apos;button-counter&apos;, &#123;</span><br><span class="line">  data: function () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      count: 0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  template: &apos;&lt;button v-on:click=&quot;count++&quot;&gt;You clicked me &#123;&#123; count &#125;&#125; times.&lt;/button&gt;&apos;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><p>prop可以在组件上注册的一些自定义特性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&apos;blog-post&apos;, &#123;</span><br><span class="line">  props: [&apos;title&apos;],</span><br><span class="line">  template: &apos;&lt;h3&gt;&#123;&#123; title &#125;&#125;&lt;/h3&gt;&apos;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;blog-post title=&quot;My journey with Vue&quot;&gt;&lt;/blog-post&gt;</span><br><span class="line">&lt;blog-post title=&quot;Blogging with Vue&quot;&gt;&lt;/blog-post&gt;</span><br><span class="line">&lt;blog-post title=&quot;Why Vue is so fun&quot;&gt;&lt;/blog-post&gt;</span><br></pre></td></tr></table></figure></li><li><p>调用内建的 <a href="https://cn.vuejs.org/v2/api/#vm-emit" target="_blank" rel="noopener"><strong>$emit</strong> 方法</a>并传入事件的名字，来向父级组件触发一个事件： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;button v-on:click=&quot;$emit(&apos;enlarge-text&apos;)&quot;&gt;</span><br><span class="line">  Enlarge text</span><br><span class="line">&lt;/button&gt;</span><br></pre></td></tr></table></figure><p>然后我们可以用 <code>v-on</code> 在博文组件上监听这个事件，就像监听一个原生 DOM 事件一样 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;blog-post</span><br><span class="line">...</span><br><span class="line">v-on:enlarge-text=&quot;postFontSize += 0.1&quot;</span><br><span class="line">&gt;&lt;/blog-post&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h3 id="组件注册"><a href="#组件注册" class="headerlink" title="组件注册"></a>组件注册</h3><ul><li><p>全局注册</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&apos;my-component-name&apos;, &#123;</span><br><span class="line">  // ... 选项 ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>局部注册</p><p>定义组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var ComponentA = &#123; /* ... */ &#125;</span><br><span class="line">var ComponentB = &#123; /* ... */ &#125;</span><br><span class="line">var ComponentC = &#123; /* ... */ &#125;</span><br></pre></td></tr></table></figure><p>使用组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">el: &apos;#app&apos;,</span><br><span class="line">components: &#123;</span><br><span class="line">  &apos;component-a&apos;: ComponentA,</span><br><span class="line">  &apos;component-b&apos;: ComponentB</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><p><strong>全局注册的行为必须在根 Vue 实例 (通过 new Vue) 创建之前发生</strong> </p><hr><h3 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h3>]]></content>
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> snippet </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>neo4j snippet</title>
      <link href="/2017/11/21/neo4j%20snippet/"/>
      <url>/2017/11/21/neo4j%20snippet/</url>
      <content type="html"><![CDATA[<ul><li>cypher语法对大小写敏感，注意属性的大小写</li><li>导入csv出现乱码时，需要通过记事本更改编码格式，如果文本过大，需要一段一段的复制粘贴到新文本中，且以UTF-8格式编码</li><li>MERGE命令是CREATE命令和MATCH命令的组合。<code>MERGE = CREATE + MATCH</code></li></ul><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>1.<br>​    <strong>现象</strong>： 在外部处理csv数据，导入服务器，然后load csv到neo4j中，可能由于文件所属问题，不能成功导入csv，提示<code>Couldn&#39;t load the external resource</code>的错误。<br>​    <strong>解决</strong>：复制可以导入的csv文件为副本，把待导入的数据粘贴到副本中，load csv副本即可</p><p>2.<br>​    <strong>现象</strong>： 在外部处理csv数据，进行merge操作的时候，提示<code>cannot merge using null property value for uid</code>的错误。<br>​    <strong>解决</strong>：经发现，是由于指令中的属性拼写错误，导致<code>Neo.ClientError.Statement.SemanticError</code>的错误，例如把<code>sfzh</code>拼写成<code>sfhm</code>。</p><p>3.<br>​    <strong>现象</strong>： 大量数据的导入问题。<br>​    <strong>解决</strong>：需使用<a href="https://neo4j.com/docs/operations-manual/current/tools/import/" title="大量数据的导入" target="_blank" rel="noopener">https://neo4j.com/docs/operations-manual/current/tools/import/</a><br>​    <strong>注意</strong>：<code>Import tool is only for newly created databases.</code><br>​        <code>You can use LOAD CSV cypher command to load into an existing database.</code>也就是说neo4j-admin import只会在新建数据库的时候会用到</p>]]></content>
      
      <categories>
          
          <category> neo4j </category>
          
      </categories>
      
      
        <tags>
            
            <tag> snippet </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>jpa snippet</title>
      <link href="/2017/10/16/jpa%20snippet/"/>
      <url>/2017/10/16/jpa%20snippet/</url>
      <content type="html"><![CDATA[<h3 id="What-is"><a href="#What-is" class="headerlink" title="What is"></a>What is</h3><blockquote><p>Java Persistence API is a collection of classes and methods to persistently store the vast amounts of data into a database which is provided by the Oracle Corporation.</p></blockquote><h3 id="Where-to-use"><a href="#Where-to-use" class="headerlink" title="Where to use"></a>Where to use</h3><blockquote><p>To reduce the burden of writing codes for relational object management, a programmer follows the ‘JPA Provider’ framework, which allows easy interaction with database instance. Here the required framework is taken over by JPA.</p></blockquote><p><img src="https://www.tutorialspoint.com/jpa/images/jpa_provider.png" alt=""></p><ul><li><p>JPA Pro</p><blockquote><p>JPA is an open source API, therefore various enterprise vendors such as Oracle, Redhat, Eclipse, etc. provide new products by adding the JPA persistence flavor in them. Some of these products include:<strong>Hibernate, Eclipselink, Toplink, Spring Data JPA, etc.</strong></p></blockquote></li></ul><h3 id="Architecture"><a href="#Architecture" class="headerlink" title="Architecture"></a>Architecture</h3><p><img src="https://www.tutorialspoint.com/jpa/images/jpa_class_level_architecture.png" alt=""></p><ul><li><p>jpa class relationships</p><p><img src="https://www.tutorialspoint.com/jpa/images/jpa_class_relationships.png" alt=""></p></li><li><p>ORM Architecture</p><p><img src="https://www.tutorialspoint.com/jpa/images/object_relational_mapping.png" alt=""></p></li></ul><ul><li>Entity Relationships<ul><li>@ManyToOne Relation</li><li>@OneToMany Relation</li><li>@OneToOne Relation</li><li>@ManyToMany Relation</li></ul></li></ul>]]></content>
      
      <categories>
          
          <category> jpa </category>
          
      </categories>
      
      
        <tags>
            
            <tag> snippet </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>java stream</title>
      <link href="/2017/10/16/java%20stream/"/>
      <url>/2017/10/16/java%20stream/</url>
      <content type="html"><![CDATA[<h3 id="Creating-Java-Streams"><a href="#Creating-Java-Streams" class="headerlink" title="Creating Java Streams"></a>Creating Java Streams</h3><ol><li><p>We can use Stream.of() to create a stream from similar type of data. For example, we can create Java Stream of integers from a group of int or Integer objects.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;Integer&gt; stream = Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br></pre></td></tr></table></figure></li><li><p>We can use Stream.of() with an array of Objects to return the stream. Note that it doesn’t support autoboxing, so we can’t pass primitive type array.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;Integer&gt; stream = Stream.of(<span class="keyword">new</span> Integer[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;); </span><br><span class="line"><span class="comment">//works fine</span></span><br><span class="line"></span><br><span class="line">Stream&lt;Integer&gt; stream1 = Stream.of(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;); </span><br><span class="line"><span class="comment">//Compile time error, Type mismatch: cannot convert from Stream&lt;int[]&gt; to Stream&lt;Integer&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>We can use Collection stream() to create sequential stream and parallelStream() to create parallel stream.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; myList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++) myList.add(i);</span><br><span class="line"></span><br><span class="line"><span class="comment">//sequential stream</span></span><br><span class="line">Stream&lt;Integer&gt; sequentialStream = myList.stream();</span><br><span class="line"></span><br><span class="line"><span class="comment">//parallel stream</span></span><br><span class="line">Stream&lt;Integer&gt; parallelStream = myList.parallelStream();</span><br></pre></td></tr></table></figure></li><li><p>We can use Stream.generate() and Stream.iterate() methods to create Stream.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;String&gt; stream1 = Stream.generate(() -&gt; &#123;<span class="keyword">return</span> <span class="string">"abc"</span>;&#125;);</span><br><span class="line">Stream&lt;String&gt; stream2 = Stream.iterate(<span class="string">"abc"</span>, (i) -&gt; i);</span><br></pre></td></tr></table></figure></li><li><p>Using Arrays.stream() and String.chars() methods.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LongStream is = Arrays.stream(<span class="keyword">new</span> <span class="keyword">long</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;);</span><br><span class="line">IntStream is2 = <span class="string">"abc"</span>.chars();</span><br></pre></td></tr></table></figure></li></ol><h3 id="Converting-Java-Stream-to-Collection-or-Array"><a href="#Converting-Java-Stream-to-Collection-or-Array" class="headerlink" title="Converting Java Stream to Collection or Array"></a>Converting Java Stream to Collection or Array</h3><ol><li><p>We can use java Stream collect() method to get List, Map or Set from stream.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;Integer&gt; intStream = Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line">List&lt;Integer&gt; intList = intStream.collect(Collectors.toList());</span><br><span class="line">System.out.println(intList); <span class="comment">//prints [1, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line">intStream = Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>); <span class="comment">//stream is closed, so we need to create it again</span></span><br><span class="line">Map&lt;Integer,Integer&gt; intMap = intStream.collect(Collectors.toMap(i -&gt; i, i -&gt; i+<span class="number">10</span>));</span><br><span class="line">System.out.println(intMap); <span class="comment">//prints &#123;1=11, 2=12, 3=13, 4=14&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>We can use stream toArray() method to create an array from the stream.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;Integer&gt; intStream = Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line">Integer[] intArray = intStream.toArray(Integer[]::<span class="keyword">new</span>);</span><br><span class="line">System.out.println(Arrays.toString(intArray)); <span class="comment">//prints [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="Java-Stream-Intermediate-Operations"><a href="#Java-Stream-Intermediate-Operations" class="headerlink" title="Java Stream Intermediate Operations"></a>Java Stream Intermediate Operations</h3><ol><li><p>Stream filter() : We can use filter() method to test stream elements for a condition and generate filtered list.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; myList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++) myList.add(i);</span><br><span class="line">Stream&lt;Integer&gt; sequentialStream = myList.stream();</span><br><span class="line"></span><br><span class="line">Stream&lt;Integer&gt; highNums = sequentialStream.filter(p -&gt; p &gt; <span class="number">90</span>); <span class="comment">//filter numbers greater than 90</span></span><br><span class="line">System.out.print(<span class="string">"High Nums greater than 90="</span>);</span><br><span class="line">highNums.forEach(p -&gt; System.out.print(p+<span class="string">" "</span>));</span><br><span class="line"><span class="comment">//prints "High Nums greater than 90=91 92 93 94 95 96 97 98 99 "</span></span><br></pre></td></tr></table></figure></li><li><p>Stream map() : We can use map() to apply functions to an stream. Let’s see how we can use it to apply upper case function to a list of Strings.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;String&gt; names = Stream.of(<span class="string">"aBc"</span>, <span class="string">"d"</span>, <span class="string">"ef"</span>);</span><br><span class="line">System.out.println(names.map(s -&gt; &#123;</span><br><span class="line"><span class="keyword">return</span> s.toUpperCase();</span><br><span class="line">&#125;).collect(Collectors.toList()));</span><br><span class="line"><span class="comment">//prints [ABC, D, EF]</span></span><br></pre></td></tr></table></figure></li><li><p>Stream sorted() : We can use sorted() to sort the stream elements by passing Comparator argument.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;String&gt; names2 = Stream.of(<span class="string">"aBc"</span>, <span class="string">"d"</span>, <span class="string">"ef"</span>, <span class="string">"123456"</span>);</span><br><span class="line">List&lt;String&gt; reverseSorted = names2.sorted(Comparator.reverseOrder()).collect(Collectors.toList());</span><br><span class="line">System.out.println(reverseSorted); <span class="comment">// [ef, d, aBc, 123456]</span></span><br><span class="line"></span><br><span class="line">Stream&lt;String&gt; names3 = Stream.of(<span class="string">"aBc"</span>, <span class="string">"d"</span>, <span class="string">"ef"</span>, <span class="string">"123456"</span>);</span><br><span class="line">List&lt;String&gt; naturalSorted = names3.sorted().collect(Collectors.toList());</span><br><span class="line">System.out.println(naturalSorted); <span class="comment">//[123456, aBc, d, ef]</span></span><br></pre></td></tr></table></figure></li><li><p>Stream flatMap() : We can use flatMap() to create a stream from the stream of list. Let’s see a simple example to clear this doubt.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;List&lt;String&gt;&gt; namesOriginalList = Stream.of(</span><br><span class="line">Arrays.asList(<span class="string">"Pankaj"</span>), </span><br><span class="line">Arrays.asList(<span class="string">"David"</span>, <span class="string">"Lisa"</span>),</span><br><span class="line">Arrays.asList(<span class="string">"Amit"</span>));</span><br><span class="line"><span class="comment">//flat the stream from List&lt;String&gt; to String stream</span></span><br><span class="line">Stream&lt;String&gt; flatStream = namesOriginalList</span><br><span class="line">.flatMap(strList -&gt; strList.stream());</span><br><span class="line"></span><br><span class="line">flatStream.forEach(System.out::println);</span><br></pre></td></tr></table></figure></li></ol><h3 id="Java-Stream-Terminal-Operations"><a href="#Java-Stream-Terminal-Operations" class="headerlink" title="Java Stream Terminal Operations"></a>Java Stream Terminal Operations</h3><ol><li><p>Stream reduce() example: We can use reduce() to perform a reduction on the elements of the stream, using an associative accumulation function, and return an Optional. Let’s see how we can use it multiply the integers in a stream.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;Integer&gt; numbers = Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">Optional&lt;Integer&gt; intOptional = numbers.reduce((i,j) -&gt; &#123;<span class="keyword">return</span> i*j;&#125;);</span><br><span class="line"><span class="keyword">if</span>(intOptional.isPresent()) System.out.println(<span class="string">"Multiplication = "</span>+intOptional.get()); <span class="comment">//120</span></span><br></pre></td></tr></table></figure></li><li><p>Stream count() example: We can use this terminal operation to count the number of items in the stream.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;Integer&gt; numbers1 = Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line">System.out.println(<span class="string">"Number of elements in stream="</span>+numbers1.count()); <span class="comment">//5</span></span><br></pre></td></tr></table></figure></li><li><p>Stream forEach() example: This can be used for iterating over the stream. We can use this in place of iterator. Let’s see how to use it for printing all the elements of the stream.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;Integer&gt; numbers2 = Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line">numbers2.forEach(i -&gt; System.out.print(i+<span class="string">","</span>)); <span class="comment">//1,2,3,4,5,</span></span><br></pre></td></tr></table></figure></li><li><p>Stream match() examples: Let’s see some of the examples for matching methods in Stream API.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;Integer&gt; numbers3 = Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line">System.out.println(<span class="string">"Stream contains 4? "</span>+numbers3.anyMatch(i -&gt; i==<span class="number">4</span>));</span><br><span class="line"><span class="comment">//Stream contains 4? true</span></span><br><span class="line"></span><br><span class="line">Stream&lt;Integer&gt; numbers4 = Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line">System.out.println(<span class="string">"Stream contains all elements less than 10? "</span>+numbers4.allMatch(i -&gt; i&lt;<span class="number">10</span>));</span><br><span class="line"><span class="comment">//Stream contains all elements less than 10? true</span></span><br><span class="line"></span><br><span class="line">Stream&lt;Integer&gt; numbers5 = Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line">System.out.println(<span class="string">"Stream doesn't contain 10? "</span>+numbers5.noneMatch(i -&gt; i==<span class="number">10</span>));</span><br><span class="line"><span class="comment">//Stream doesn't contain 10? true</span></span><br></pre></td></tr></table></figure></li><li><p>Stream findFirst() :This is a short circuiting terminal operation, let’s see how we can use it to find the first string from a stream starting with D.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;String&gt; names4 = Stream.of(<span class="string">"Pankaj"</span>,<span class="string">"Amit"</span>,<span class="string">"David"</span>, <span class="string">"Lisa"</span>);</span><br><span class="line">Optional&lt;String&gt; firstNameWithD = names4.filter(i -&gt; i.startsWith(<span class="string">"D"</span>)).findFirst();</span><br><span class="line"><span class="keyword">if</span>(firstNameWithD.isPresent())&#123;</span><br><span class="line">System.out.println(<span class="string">"First Name starting with D="</span>+firstNameWithD.get()); <span class="comment">//David</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="some-example"><a href="#some-example" class="headerlink" title="some example"></a>some example</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//merge collection</span></span><br><span class="line">List&lt;String&gt; resultPersonnos = Stream.of(list1, list2)</span><br><span class="line">                .flatMap(Collection::stream)</span><br><span class="line">                .distinct()</span><br><span class="line">                .sorted()</span><br><span class="line">                .collect(Collectors.toList());</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> learn </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>sublime snippet</title>
      <link href="/2017/09/07/sublime%20snippet/"/>
      <url>/2017/09/07/sublime%20snippet/</url>
      <content type="html"><![CDATA[<ul><li><p>安装插件</p><p><code>CTRL + SHIFT + P并且输入Package Control: Install Package</code></p></li><li><p>html格式化</p><p><code>输入！，然后按 TAB</code></p></li><li><p>Pretty JSON插件</p><p><code>格式化  CTRL + ALT + J</code></p></li></ul>]]></content>
      
      <categories>
          
          <category> sublime </category>
          
      </categories>
      
      
        <tags>
            
            <tag> command </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>jquery snippet</title>
      <link href="/2017/08/05/jquery%20snippet/"/>
      <url>/2017/08/05/jquery%20snippet/</url>
      <content type="html"><![CDATA[<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><ul><li><p>设置标签属性</p><p><code>$(&quot;div&quot;).attr(&quot;属性名&quot;,&quot;属性值&quot;);</code></p></li><li><p>设置标签样式</p><p><code>$(&quot;div&quot;).css(&quot;color&quot;,&quot;yellow&quot;);</code>或<code>$(&quot;div&quot;).css(&quot;padding-left&quot;))</code></p></li><li><p>移除属性</p><p><code>$(&quot;div&quot;).removeAttr(&quot;id&quot;);</code></p></li><li><p>遍历数组</p><ul><li><p>原生js有两种方法都可以使用[for(var i;i&lt;arr.length;i++){},for(var i in arr){}] </p></li><li><p>jquery有两个函数共计四种方法都可以使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$.each(arr,<span class="function"><span class="keyword">function</span>(<span class="params">i,item</span>)</span>&#123;&#125;),</span><br><span class="line">$(arr).each(<span class="function"><span class="keyword">function</span>(<span class="params">i,item</span>)</span>&#123;&#125;), </span><br><span class="line">$.map(arr,<span class="function"><span class="keyword">function</span>(<span class="params">i,item</span>)</span>&#123;&#125;), </span><br><span class="line">$(arr).map(<span class="function"><span class="keyword">function</span>(<span class="params">i,item</span>)</span>&#123;&#125;)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>遍历对象 </p><ul><li><p>原生js有一种方法可以使用[for(var i in obj){}] </p></li><li><p>jquery有两个函数共计两种方法可以使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$.each(obj,<span class="function"><span class="keyword">function</span>(<span class="params">i,item</span>)</span>&#123;&#125;)</span><br><span class="line">$.map(obj,<span class="function"><span class="keyword">function</span>(<span class="params">i,item</span>)</span>&#123;&#125;)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Jquery中的ajax在默认不写async情况下，请求为异步请求；即：async:true</p></li><li><p><code>$(function(){ })</code>是定义一个匿名函数，它是<code>$(document).ready(function(){})</code>的简写</p></li></ul>]]></content>
      
      <categories>
          
          <category> jquery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> snippet </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>word record</title>
      <link href="/2017/05/30/work%20record/"/>
      <url>/2017/05/30/work%20record/</url>
      <content type="html"><![CDATA[<p><strong>关于代码编译的事情</strong></p><ul><li><p>问题</p><ul><li>由于一些配置项写在统一的配置文档中，代码从配置文件中读取确定的配置项；此时操作的文本路径是要追加上根目录的路径，然而开发环境和生成环境是不一样的。项目在打包的过程中，就确定了文本路径，这样导致两边环境的配置文档读取结果不一致。</li></ul></li><li><p>解决办法</p><ul><li>把文件路径精确写入</li><li>在生成环境下编译代码</li></ul></li></ul><hr><p><strong>关于读取数据量大的excel文件</strong></p><ul><li><p>问题</p><ul><li>项目部署到tomcat中，每次读取大于1M的文件时，会停滞在<code>org.apache.poi.ss.usermodel.Workbook workbook = new XSSFWorkbook(is);</code>,直到tomcat出现报错信息<code>java.lang.OutOfMemoryError: Java heap space</code>,即java虚拟机堆溢出的错误。</li></ul></li><li><p>现象描述</p><ul><li><p>手动设置Xms,Xmx的大小，在/bin/catalina.bat（windows环境）配置中，添加<code>JAVA_OPTS=&quot;-server -Xms10G -Xmx20G&quot;</code>,不知道什么原因，重启服务，仍旧报一样的错。（当我在自己电脑上运行程序，操作同样大小的文档时，也没有报错，何况自己电脑才8G内存，远不及服务器，再则就是自身电脑tomcat的配置也是默认的）</p></li><li><p>内存总体分为年轻代(young),老年代(old),永久代(permanent),如图</p><p><img src="https://s1.ax2x.com/2018/05/31/7OCHl.jpg" alt="7OCHl.jpg"></p></li></ul></li></ul>]]></content>
      
      <categories>
          
          <category> tips </category>
          
      </categories>
      
      
        <tags>
            
            <tag> work </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>linux snippet</title>
      <link href="/2017/05/09/linux%20snippet/"/>
      <url>/2017/05/09/linux%20snippet/</url>
      <content type="html"><![CDATA[<ul><li>/bin/    用以存储二进制可执行命令文件，/usr/bin/也存储了一些基于用户的命令文件。</li><li>/sbin/    许多系统命令的存储位置，/usr/sbin/中也包括了许多命令。</li><li>/root/    超级用户，即根用户的主目录。</li><li>/home/    普通用户的默认目录，在该目录下，每个用户拥有一个以用户名命名的文件夹。</li><li>/boot/    存放Ubuntu内核和系统启动文件。</li><li>/mnt/     通常包括系统引导后被挂载的文件系统的挂载点。</li><li>/dev/    存储设备文件，包括计算机的所有外部设备，如硬盘、是、键盘、鼠标等。</li><li>/etc/    存放文件管理配置文件和目录。</li><li>/lib/    存储各种程序所需要的共享库文件。</li><li>/lost+found/    一般为空，当非法关机时，会存放一些零散的文件。</li><li>/var/    用于存放很多不断变化的文件，例如日志文件等。</li><li>/usr/    包括与系统用户直接有关的文件和目录</li><li>/media/    存放Ubuntu系统自动挂载的设备文件。</li><li>/proc/    这是一个虚拟目录，它是内存的映射，包括系统信息和进程信息。</li><li>/tmp/    存储系统和用户的临时信息。</li><li>/initrd/    用来加载启动时临时挂载的initrd.img映像文件，以及载入所要的设备模块目录。</li><li>/opt/    作为可选文件和程序的存放目录，否则将无法引导计算机进入操作系统。</li><li>/srv/    存储系统提供的服务数据。</li><li>/sys/    系统设备和文件层次结构，并向用户程序提供详细的内核数据信息。</li></ul><h2 id="装机问题"><a href="#装机问题" class="headerlink" title="装机问题"></a>装机问题</h2><h3 id="Wifi-Not-Enabled-Acer-Aspire-4750"><a href="#Wifi-Not-Enabled-Acer-Aspire-4750" class="headerlink" title="Wifi Not Enabled Acer Aspire 4750"></a>Wifi Not Enabled Acer Aspire 4750</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">~$ rfkill list all</span><br><span class="line">0: phy0: Wireless LAN</span><br><span class="line">Soft blocked: no</span><br><span class="line">Hard blocked: yes</span><br><span class="line"></span><br><span class="line">~$ sudo rmmod acer-wmi</span><br><span class="line">​</span><br></pre></td></tr></table></figure><p>add below line at the end of the file : /etc/modprobe.d/blacklist.conf<br>blacklist acer-wmi</p><p>Then restart the system.<br>~$ rfkill list all<br>0: phy0: Wireless LAN<br>Soft blocked: no<br>Hard blocked: no<br><code>`</code></p><h2 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h2><ul><li>防火墙 firewalld.service</li></ul><h2 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h2><p><strong>shell与export命令</strong></p><p>用户登录到Linux系统后，系统将启动一个用户shell。在这个shell中，可以使用shell命令或声明变量，也可以创建并运行 shell脚本程序。运行shell脚本程序时，系统将创建一个子shell。此时，系统中将有两个shell，一个是登录时系统启动的shell，另一 个是系统为运行脚本程序创建的shell。当一个脚本程序运行完毕，它的脚本shell将终止，可以返回到执行该脚本之前的shell。从这种意义上来 说，用户可以有许多 shell，每个shell都是由某个shell（称为父shell）派生的。</p><p>在子 shell中定义的变量只在该子shell内有效。如果在一个shell脚本程序中定义了一个变量，当该脚本程序运行时，这个定义的变量只是该脚本程序内 的一个局部变量，其他的shell不能引用它，要使某个变量的值可以在其他shell中被改变，可以使用export命令对已定义的变量进行输出。 export命令将使系统在创建每一个新的shell时定义这个变量的一个拷贝。这个过程称之为变量输出。</p>]]></content>
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> snippet </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>cache snippet</title>
      <link href="/2017/03/07/cache%20snippet/"/>
      <url>/2017/03/07/cache%20snippet/</url>
      <content type="html"><![CDATA[<ul><li>what is cache ?    why use cache ?<ol><li>Cache是高速缓冲存储器 一种特殊的存储器子系统，其中复制了频繁使用的数据以利于快速访问</li><li>凡是位于速度相差较大的两种硬件/软件之间的，用于协调两者数据传输速度差异的结构，均可称之为 Cache </li></ol></li><li>缓存的分类<ul><li>操作系统磁盘缓存-&gt;减少磁盘机械操作</li><li>数据库缓存-&gt;减少文件系统I/O</li><li>应用程序缓存-&gt;减少对数据库的查询 </li><li>Web服务器缓存-&gt;减少应用服务器请求</li><li>客户端浏览器缓存-&gt;减少对网站的访问</li></ul></li></ul><h3 id="技术框架"><a href="#技术框架" class="headerlink" title="技术框架"></a>技术框架</h3><ul><li><strong>Encache</strong><ul><li>设计于提高在数据从RDBMS中取出来的高花费、高延迟采取的一种缓存方案 </li><li>java编写，直接在jvm虚拟机中缓存，速度快，效率高；但是缓存共享麻烦，集群分布式应用不方便。</li><li>特点：<ul><li>快</li><li>简单</li><li>袖珍</li><li>轻量</li><li>扩展</li><li>监听器</li></ul></li></ul></li><li><strong>memcache</strong><ul><li>一种高性能、分布式对象缓存系统，最初设计于缓解动态网站数据库加载数据的延迟性，你可以把它想象成一个大的内存HashTable，就是一个key-value键值缓存。</li><li>C语言编写</li><li>特点：<ul><li>依赖</li><li>多线程支持</li><li>高性能</li></ul></li></ul></li><li><strong>redis</strong><ul><li>通过socket访问到缓存服务，效率比encache低，比数据库要快很多，处理集群和分布式缓存方便，有成熟的方案。</li><li>特性：<ul><li>支持持久化</li><li>丰富的数据类型</li><li>高性能</li><li>主从复制</li></ul></li></ul></li></ul>]]></content>
      
      <categories>
          
          <category> cache </category>
          
      </categories>
      
      
        <tags>
            
            <tag> snippet </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>other snippet</title>
      <link href="/2017/02/16/other%20tips/"/>
      <url>/2017/02/16/other%20tips/</url>
      <content type="html"><![CDATA[<h2 id="other-snippet"><a href="#other-snippet" class="headerlink" title="other snippet"></a>other snippet</h2><h3 id="generate-code-based-proto-file"><a href="#generate-code-based-proto-file" class="headerlink" title="generate code based proto file"></a>generate code based proto file</h3><p><code>protoc --proto_path=扫描目录 --java_out=代码生成目录 proto文件目录</code></p><blockquote><p>protoc –proto_path=src –java_out=build/gen src/foo.proto</p></blockquote><h3 id="Spring-provides-three-way-of-scheduling"><a href="#Spring-provides-three-way-of-scheduling" class="headerlink" title="Spring provides three way of scheduling:"></a>Spring provides three way of scheduling:</h3><ul><li>@Scheduled</li><li>Via Quartz</li><li>Via JDK Timer</li></ul><hr><h3 id="one-word"><a href="#one-word" class="headerlink" title="one word"></a>one word</h3><ul><li>\x对应的是UTF-8编码的数据</li></ul>]]></content>
      
      <categories>
          
          <category> fragment </category>
          
      </categories>
      
      
        <tags>
            
            <tag> snippet </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>html snippet</title>
      <link href="/2017/02/10/html%20snippet/"/>
      <url>/2017/02/10/html%20snippet/</url>
      <content type="html"><![CDATA[<h3 id="label"><a href="#label" class="headerlink" title="label"></a>label</h3><ul><li><p>chrome页面跳转，需要使用 i 标签，不能使用 button 标签，因为在button的点击事件中，window.location.href不起作用。（但firefox起作用）</p></li><li><p>textarea标签里面的属性要紧靠书写，且不要换行，不然，会显示textarea默认赋值为多个空格</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">type</span>=<span class="string">"text"</span><span class="attr">class</span>=<span class="string">"form-control"</span><span class="attr">id</span>=<span class="string">"obj_address"</span><span class="attr">placeholder</span>=<span class="string">"地址（必填）"</span><span class="attr">name</span>=<span class="string">"address"</span><span class="attr">isvalid</span>=<span class="string">"yes"</span><span class="attr">checkexpession</span>=<span class="string">"NotNull"</span><span class="attr">errormsg</span>=<span class="string">"地址"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      <categories>
          
          <category> html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> snippet </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>idea skill</title>
      <link href="/2016/12/16/idea%20skill/"/>
      <url>/2016/12/16/idea%20skill/</url>
      <content type="html"><![CDATA[<h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><ul><li>参照<a href="https://blog.csdn.net/q547550831/article/details/79129311" target="_blank" rel="noopener">一大坨插件</a></li><li>现在已安装的插件：<ul><li>Translation(翻译工具)</li><li>CheckStyle-IDEA（代码规范）</li><li>FindBugs-IDEA(静态分析工具)</li><li>BashSupport（Linux Bash支持，对bash语法的高亮支持）</li><li>CodeGlance（类似SublimeText的Mini Map插件 ）</li><li>Key promoter（提示功能快捷键）</li><li>GsonFormat（暂未安装，其功能为把json格式的内容转成Object）</li><li>jRebel（暂未安装，热部署插件）</li></ul></li></ul><ul><li><p><strong>scratches草稿功能</strong></p><ul><li><p>参照<a href="https://blog.csdn.net/theape/article/details/70194185" target="_blank" rel="noopener">强大的草稿功能</a></p></li><li><p>scratch中文乱码解决办法</p><p>需要在<code>C:\Users\Administrator\.IntelliJIdea2019.1\config</code>中修改文件<code>idea64.exe.vmoptions</code>,在后面加上设置<code>-Dfile.encoding=UTF-8</code></p></li></ul></li><li><p><strong>Lombok </strong>插件</p><p>提高编码效率</p></li></ul><h3 id="中文编码配置"><a href="#中文编码配置" class="headerlink" title="中文编码配置"></a>中文编码配置</h3><ul><li><p>有关Properties文件中的中文unicode转码问题</p><p>在IDEA中创建了properties文件，发现默认中文不会自动进行unicode转码，需要配置</p><p><img src="https://i.imgur.com/W2a0nMR.jpg" alt=""></p></li></ul>]]></content>
      
      <categories>
          
          <category> idea </category>
          
      </categories>
      
      
        <tags>
            
            <tag> skill </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>tomcat snippet</title>
      <link href="/2016/12/16/tomcat%20snippet/"/>
      <url>/2016/12/16/tomcat%20snippet/</url>
      <content type="html"><![CDATA[<h3 id="配置项"><a href="#配置项" class="headerlink" title="配置项"></a>配置项</h3><ul><li>项目部署到linux的tomcat中，验证码在页面中刷新不了，需要修改<code>catalina.sh</code>,添加<code>JAVA_OPTS=&quot;$JAVA_OPTS -Djava.awt.headless=true&quot;</code>配置</li></ul><h3 id="设置虚拟路径的两种方法"><a href="#设置虚拟路径的两种方法" class="headerlink" title="设置虚拟路径的两种方法"></a>设置虚拟路径的两种方法</h3><ul><li>使用tomcat自身设置虚拟路径</li></ul><ol><li><p>在tomcat的server.xml配置文件中，配置context标签</p><p>Context标签中的相关属性：</p><ul><li>path: 指定访问该web应用的URL入口，即虚拟文件目录</li><li>docBase:为访问的真实路径</li><li>reloadable:如果这个属性设为true，tomcat服务器在运行状态下会监视在WEB-INF/classes和WEB-INF/lib目录下class文件的改动， 如果监测到有class文件被更新的，服务器会自动重新加载Web应用。 </li></ul></li><li><p>如果这事使用idea启动项目，需要将Deploy applications configured in Tomcat instance勾上 </p></li></ol><ul><li><p>单独设置IDEA进行设置虚拟路径</p><ol><li><p>上图的中<code>Deploy applications configured in Tomcat instance</code>不要勾上 </p></li><li><p>选中<code>edit configurations</code>，点击加号按钮，选择实际路径，并在<code>Appication context</code>中填写虚拟路径。</p></li></ol></li></ul><h3 id="设置URL请求参数长度"><a href="#设置URL请求参数长度" class="headerlink" title="设置URL请求参数长度"></a>设置URL请求参数长度</h3><ul><li><p>问题描述</p><p>post请求，本身请求参数无大小限制，但是一般的服务器像tomcat都有默认大小，如果传输的参数超过了默认大小，则会报错<code>http post request header is too large</code></p></li><li><p>解决办法</p><p>在server.xml中<code>&lt;Connector connectionTimeout=&quot;20000&quot; port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot; redirectPort=&quot;8443&quot;/&gt;</code>，添加设置项<code>maxHttpHeaderSize =&quot;102400&quot;</code></p></li></ul>]]></content>
      
      <categories>
          
          <category> tomcat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> snippet </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>webpack snippet</title>
      <link href="/2016/12/16/webpack%20snippet/"/>
      <url>/2016/12/16/webpack%20snippet/</url>
      <content type="html"><![CDATA[<ul><li><p>四个核心概念：</p><p>入口    entry</p><p>输出    output</p><p>loader</p><p>插件    plugins</p></li></ul>]]></content>
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> snippet </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>spring snippet</title>
      <link href="/2016/10/16/spring%20snippet/"/>
      <url>/2016/10/16/spring%20snippet/</url>
      <content type="html"><![CDATA[<h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><h4 id="传JSON字符串-RequestBody接收"><a href="#传JSON字符串-RequestBody接收" class="headerlink" title="传JSON字符串+@RequestBody接收"></a>传JSON字符串+@RequestBody接收</h4><ul><li><p>前端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">function <span class="title">icheckDelete</span><span class="params">(url)</span></span>&#123;</span><br><span class="line">    var parms = &#123;</span><br><span class="line">        list : array <span class="comment">//这是个数组</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        dataType: <span class="string">"JSON"</span>,</span><br><span class="line">        contentType:<span class="string">'application/json;charset=UTF-8'</span>,<span class="comment">//关键是要加上这行</span></span><br><span class="line">        traditional:<span class="keyword">true</span>,<span class="comment">//这使json格式的字符不会被转码</span></span><br><span class="line">        data: JSON.stringify(parms),</span><br><span class="line">        type: <span class="string">"DELETE"</span>, </span><br><span class="line">        timeout: <span class="number">20000</span>,</span><br><span class="line">        url: url,</span><br><span class="line">        success : function () &#123;</span><br><span class="line">            alert(<span class="string">"删除成功！"</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        error : function (data)&#123;</span><br><span class="line">            alert(data.responseText);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>后端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Controller:</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"deleteList"</span>, method = RequestMethod.DELETE)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">delete</span><span class="params">(@RequestBody DeleteListRequest request)</span> <span class="keyword">throws</span> WebTransException</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 逻辑代码 */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> snippet </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java Concept of The Day</title>
      <link href="/2016/10/16/Java%20Concept%20of%20The%20Day/"/>
      <url>/2016/10/16/Java%20Concept%20of%20The%20Day/</url>
      <content type="html"><![CDATA[<ul><li>Stack is used only for execution purpose. Heap is used for storage purpose.<h3 id="Non-Static-Members-And-Their-Memory-Management-In-Java"><a href="#Non-Static-Members-And-Their-Memory-Management-In-Java" class="headerlink" title="Non-Static Members And Their Memory Management In Java"></a>Non-Static Members And Their Memory Management In Java</h3></li><li>Non-Static variables and Non-Static methods are non-static components of a class. These are also called instance components of a class. Non-static components are stored inside the object memory. Each object will have their own copy of non-static components. But,  static components are common to all objects of that class.<h3 id="IIB-Instance-Initialization-Block"><a href="#IIB-Instance-Initialization-Block" class="headerlink" title="IIB-Instance Initialization Block"></a>IIB-Instance Initialization Block</h3></li><li>IIB is used to initialize instance variables or non-static variables.</li><li>IIB blocks will not be called from the constructor in which this() statement is written as a first statement. <h3 id="super-and-this-keywords-in-java"><a href="#super-and-this-keywords-in-java" class="headerlink" title="super and this keywords in java"></a>super and this keywords in java</h3></li><li>super class constructor is called by super() calling statement. You can’t use super() calling statement outside the constructor. By default, super() calling statement is the first statement in any constructor. </li><li>this() is the calling statement to same class constructor. It must be used within constructor only. If it is used, it must be the first statement in the constructor.</li><li>You can’t use super and this keywords in a static method and in a static initialization block even though you are referring static members.<h3 id="10-Points-Every-Java-Programmer-Should-Know-About-final-keyword-in-java"><a href="#10-Points-Every-Java-Programmer-Should-Know-About-final-keyword-in-java" class="headerlink" title="10 Points Every Java Programmer Should Know About final keyword in java"></a>10 Points Every Java Programmer Should Know About final keyword in java</h3></li><li>Any class or any method can be either abstract or final but not both. abstract and final are totally opposite. Because, abstract class or abstract method must be implemented or modified in the sub classes but final does not allow this. This creates an ambiguity.</li><li>The global variable which is declared as final and static remains unchanged for the whole execution. Because, Static members are stored in the class memory and they are loaded only once in the whole execution. They are common to all objects of the class. If you declare static variables as final, any of the objects can’t change their value as it is final. Therefore, variables declared as final and static are sometimes referred to as Constants. All fields of interfaces are referred as constants, because they are final and static by default.<h3 id="Garbage-Collection-And-finalize-method-In-Java"><a href="#Garbage-Collection-And-finalize-method-In-Java" class="headerlink" title="Garbage Collection And finalize() method In Java"></a>Garbage Collection And finalize() method In Java</h3></li><li>Whenever you run a java program, JVM creates three threads. 1) main thread   2) Thread Scheduler   3) Garbage Collector Thread. In these three threads, main thread is a user thread and remaining two are daemon threads which run in background.<h3 id="Access-Modifiers-In-Java"><a href="#Access-Modifiers-In-Java" class="headerlink" title="Access Modifiers In Java"></a>Access Modifiers In Java</h3></li><li>Class can not be a private except inner classes. Inner classes are nothing but again members of outer class. So members of a class (field, method, constructor and inner class) can be private but not the class itself.<br><img src="https://i.imgur.com/6h3llC0.jpg" alt=""><h3 id="What-Are-Access-And-Non-Access-Modifiers-In-Java"><a href="#What-Are-Access-And-Non-Access-Modifiers-In-Java" class="headerlink" title="What Are Access And Non-Access Modifiers In Java?"></a>What Are Access And Non-Access Modifiers In Java?</h3><img src="https://i.imgur.com/nB7eV1i.jpg" alt=""><h3 id="Type-Casting-In-Java"><a href="#Type-Casting-In-Java" class="headerlink" title="Type Casting In Java"></a>Type Casting In Java</h3>Please note that by using casting, data can not be modified but only type of data can be modified.</li><li>Primitive Casting.<ul><li>memory size <code>byte &lt; short &lt; int &lt; long &lt; float &lt; double.</code><ul><li>Auto Widening</li><li>Explicit Narrowing</li></ul></li></ul></li><li>Derived Casting<ul><li>Auto-up Casting<ul><li>Explicit Down Casting<h3 id="Abstraction-In-Java"><a href="#Abstraction-In-Java" class="headerlink" title="Abstraction In Java"></a>Abstraction In Java</h3></li></ul></li></ul></li><li>Abstract classes contain abstract methods (you can refer them as ideas) so that they can be implemented in sub classes according to their requirements. They are also called as incomplete classes as they have some unimplemented abstract methods(ideas).<h3 id="Interfaces-In-Java"><a href="#Interfaces-In-Java" class="headerlink" title="Interfaces In Java"></a>Interfaces In Java</h3></li><li>Interfaces in java are very much similar to abstract classes but interfaces contain only abstract methods (you can refer to them as only ideas). Abstract classes may contain both abstract methods as well as concrete methods. But interfaces must contain only abstract methods. Concrete methods are not allowed in interfaces. Therefore, Interfaces show 100% abstractness.<h3 id="Auto-Widening-Vs-Auto-Boxing-Vs-Auto-UpCasting-In-Java"><a href="#Auto-Widening-Vs-Auto-Boxing-Vs-Auto-UpCasting-In-Java" class="headerlink" title="Auto-Widening Vs Auto-Boxing Vs Auto-UpCasting In Java"></a>Auto-Widening Vs Auto-Boxing Vs Auto-UpCasting In Java</h3><img src="https://javaconceptoftheday.com/wp-content/uploads/2014/11/widening-Vs-boxing.png?x70034" alt=""><h3 id="Exception-Handing"><a href="#Exception-Handing" class="headerlink" title="Exception Handing"></a>Exception Handing</h3>java.lang.Throwable is the super class of all errors and exceptions in java.<br><img src="https://javaconceptoftheday.com/wp-content/uploads/2014/11/Exceptions.png?x70034" alt=""><br><img src="https://i.imgur.com/xHC2xQo.jpg" alt=""></li><li>java.lang.Error class represents the errors which are mainly caused by the environment in which application is running. For example, OutOfMemoryError occurs when JVM runs out of memory or StackOverflowError occurs when stack overflows.</li><li>Where as java.lang.Exception class represents the exceptions which are mainly caused by the application itself. For example, NullPointerException occurs when an application tries to access null object or ClassCastException occurs when an application tries to cast incompatible class types. <h3 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h3></li><li>Array can hold the references to any type of objects. It is important to note that array can contain only references to the objects, not the objects itself. <h3 id="Threads"><a href="#Threads" class="headerlink" title="Threads"></a>Threads</h3></li><li>Processes and threads can be diagrammatically represented as this<br><img src="https://javaconceptoftheday.com/wp-content/uploads/2014/11/ThreadsAndProcesses.png?x70034" alt=""></li><li>User threads are threads which are created by the application or user.</li><li>Daemon threads are threads which are mostly created by the JVM.</li><li><p>There are three constant fields in java.lang.Thread class related to priority of a thread. They are,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> MIN_PRIORITY   —&gt; It defines the lowest priority that a thread can have and It’s value is 1.</span><br><span class="line">NORM_PRIORITY  —&gt; It defines the normal priority that a thread can have and it’s value is 5.</span><br><span class="line">MAX_PRIORITY  —&gt; It defines the highest priority that a thread can have and it’s value is 10.</span><br></pre></td></tr></table></figure><p>  The priority of a main thread, if explicitly not set, is always 5 i.e NORM_PRIORITY.</p></li><li><p>avoid thread interference </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> By declaring the method as synchronized.</span><br><span class="line">By declaring the variables as final.</span><br><span class="line">By declaring the variable as volatile.</span><br><span class="line">By creating the immutable objects.</span><br><span class="line">By using Atomic operations.</span><br><span class="line">By restricting the access to same object by multiple threads.</span><br></pre></td></tr></table></figure></li><li><p>The Logic Behind The Synchronization In Java :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  The synchronization in java is built around an entity called object lock or monitor. Here is the brief description about lock or monitor.</span><br><span class="line">- Whenever an object is created to any class, an object lock is created and is stored inside the object.</span><br><span class="line">- One object will have only one object lock associated with it.</span><br><span class="line">- Any thread wants to enter into synchronized methods or blocks of any object, they must acquire object lock associated with that object and release the lock after they are done with the execution.</span><br><span class="line">- The other threads which wants to enter into synchronized methods of that object have to wait until the currently executing thread releases the object lock.</span><br><span class="line">- To enter into static synchronized methods or blocks, threads have to acquire class lock associated with that class as static members are stored inside the class memory.</span><br></pre></td></tr></table></figure></li><li><p>mutex</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">class Shared</span><br><span class="line">&#123;</span><br><span class="line">    static void staticMethod()</span><br><span class="line">    &#123;</span><br><span class="line">        synchronized (Shared.class)</span><br><span class="line">        &#123;</span><br><span class="line">            //static synchronized block</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    void NonStaticMethod()</span><br><span class="line">    &#123;</span><br><span class="line">        synchronized (this)</span><br><span class="line">        &#123;</span><br><span class="line">            //Non-static synchronized block</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    void anotherNonStaticMethod()</span><br><span class="line">    &#123;</span><br><span class="line">        synchronized (new Shared())</span><br><span class="line">        &#123;</span><br><span class="line">            //Non-static synchronized block</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>10 Points-To-Remember About Synchronization In Java :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1. You can use synchronized keyword only with methods but not with variables, constructors, static initializer and instance initializers.</span><br><span class="line">2. Constructors, Static initializer and instance initializer can’t be declared with synchronized keyword, but they can contain synchronized blocks.</span><br><span class="line">3. Both static and non-static methods can use synchronized keyword. For static methods, thread need class level lock and for non-static methods, thread need object level lock.</span><br><span class="line">4. It is possible that both static synchronized and non-static synchronized methods can run simultaneously. Because, static methods need class level lock and non-static methods need object level lock.</span><br><span class="line">5. A method can contain any number of synchronized blocks. This is like synchronizing multiple parts of a method.</span><br><span class="line">6. Synchronization blocks can be nested.</span><br><span class="line">7. Lock acquired by the thread before executing a synchronized method or block must be released after the completion of execution, no matter whether execution is completed normally or abnormally (due to exceptions).</span><br><span class="line">8. Synchronization in java is Re-entrant in nature. A thread can not acquire a lock that is owned by another thread. But, a thread can acquire a lock that it already owns. That means if a synchronized method gives a call to another synchronized method which needs same lock, then currently executing thread can directly enter into that method or block without acquiring the lock.</span><br><span class="line">9. synchronized method or block is very slow. They decrease the performance of an application. So, special care need to be taken while using synchronization. Use synchronization only when you needed it the most.</span><br><span class="line">10. Use synchronized blocks instead of synchronized methods. Because, synchronizing some part of a method improves the performance than synchronizing the whole method.</span><br></pre></td></tr></table></figure></li><li><p>wait(), notify() and notifyAll()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">These methods are final methods of java.lang.Object class. That means every class in java will have these methods. Below is the method signatures of these methods.</span><br><span class="line">1. public final void wait() throws InterruptedException</span><br><span class="line">This method tells the currently executing thread to release the lock of this object and wait until some other thread acquires the same lock and notify it using either notify() or notifyAll() methods. This method throws InterruptedException if waiting thread is interrupted.</span><br><span class="line">2. public final void notify()</span><br><span class="line">This method wakes up one thread randomly that called wait() method on this object.</span><br><span class="line">3. public final void notifyAll()</span><br><span class="line">This method wakes up all the threads that called wait() method on this object. But, only one thread will acquire lock of this object depending upon the priority.</span><br><span class="line"></span><br><span class="line">Important Note : These three methods must be called within synchronized method or block. Any thread which calls these methods must have lock of that object.</span><br></pre></td></tr></table></figure></li><li><p>Some Things-To-Remember About wait(), notify() and notifyAll() :</p><ul><li>If a thread calls notify() method and more than one threads are waiting for the object lock, then only one thread will be notified randomly.</li><li>When a thread calls notifyAll() method on an object, it notifies all the threads which are waiting for this object lock. But, only one thread will acquire this object lock depending upon priority.</li><li>When you call sleep() method on a thread, thread goes to sleep with holding the object lock with it. But, if you call wait() method, thread releases the object lock and goes for sleep. This is the main difference between wait() and sleep() methods.</li><li>wait(), notify() and notifyAll() are final methods of java.lang.Object class not java.lang.Thread class.</li><li>wait(), notify() and notifyAll() – all these three methods throw IllegalMonitorStateException if the calling thread does not owns the object lock.</li><li>wait() method is overloaded in Object class. There are two more wait() methods available in Object class.</li></ul></li><li><p>Thread Life Cycle OR Thread States In Java</p><ul><li>NEW,    A thread will be in this state before calling start() method.<ul><li>RUNNABLE, A thread will be in this state after calling the start() method.</li><li>BLOCKED, A thread will be in this state when a thread is waiting for object lock to enter into synchronized method/block or a thread will be in this state if deadlock occurs. </li><li>WAITING, A thread will be in this state when wait() or join() method is called.</li><li>TIMED_WAITING, A thread will be in this state when thread is sleeping. i.e A thread will be in this state when sleep() or wait() with timeOut or join() with timeOut is called.</li><li>TERMINATED, A thread will be in this state once it finishes it’s execution.<br><img src="https://javaconceptoftheday.com/wp-content/uploads/2014/11/JavaThreadLifeCycle.png?x70034" alt=""></li></ul></li></ul></li><li><p>7 Things Every Java Programmer Should Know About Threads In Java</p><ul><li><strong>Runnable interface vs Thread class</strong> : I am of opinion that when multiple threads need to execute same task, then use Runnable interface. If multiple threads need to execute different tasks, then go for Thread class.</li></ul></li><li><p>Difference Between wait() and sleep() Methods In Java</p><ul><li><p><strong>wait()</strong>:  releases the lock or monitor</p><ul><li><strong>sleep()</strong>: not  releases the lock or monitor</li></ul><p><img src="https://javaconceptoftheday.com/wp-content/uploads/2015/02/WaitAndSleep.png" alt=""></p></li></ul></li><li><p>Extends Thread Vs Implements Runnable In Java<br><img src="https://javaconceptoftheday.com/wp-content/uploads/2015/12/RunnableVsThread.png" alt=""><br>From the above all findings, it is clear that “Implements Runnable” is the preferred method to create the threads in java.</p></li><li><p>How To Stop A Thread In Java</p><ul><li>One is using boolean variable and second one is using interrupt() method. In this post, we will discuss both of these methods.</li></ul></li><li><p>Difference Between notify And notifyAll In Java</p><ul><li>wait(), notify() and notifyAll() must be called within synchronized method or synchronized block.<br><img src="https://javaconceptoftheday.com/wp-content/uploads/2016/03/NotifyVsNotifyAll.png" alt=""></li></ul></li><li><p>Difference Between BLOCKED Vs WAITING States In Java</p><ul><li>There are six thread states in java. They are <strong>NEW, RUNNABLE, BLOCKED, WAITING, TIMED_WAITING and TERMINATED</strong>.<br><img src="https://javaconceptoftheday.com/wp-content/uploads/2016/06/WaitingVsBlocked.png" alt=""></li></ul></li></ul><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><ul><li>strings are treated as objects.</li><li>JVM allocates some memory specially meant for string literals. This part of the heap memory is called String Constant Pool.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">String s1 = &quot;abc&quot;; </span><br><span class="line">String s2 = &quot;xyz&quot;;</span><br><span class="line">String s3 = &quot;123&quot;;</span><br><span class="line">String s4 = &quot;A&quot;;</span><br><span class="line">   String s5 = new String(&quot;abc&quot;);</span><br><span class="line">char[] c = &#123;&apos;J&apos;, &apos;A&apos;, &apos;V&apos;, &apos;A&apos;&#125;;</span><br><span class="line">String s6 = new String(c);</span><br><span class="line">String s7 = new String(new StringBuffer());</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://javaconceptoftheday.com/wp-content/uploads/2014/11/String-Constant-Pool.png" alt=""></p><ul><li>String Constant Pool is allocated to an object depending upon it’s content. There will be no two objects in the pool having the same content.</li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">“When you create a string object using string literal, JVM first checks the content of to be created object. If there exist an object in the pool with the same content, then it returns the reference of that object. It doesn’t create new object. If the content is different from the existing objects then only it creates new object.”</span><br></pre></td></tr></table></figure>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In simple words, there can not be two string objects with same content in the string constant pool. But, there can be two string objects with the same content in the heap memory.</span><br></pre></td></tr></table></figure></li><li><p>Immutability is the fundamental property of string objects. In whatever way you create the string objects, either using string literals or using new operator, they are immutable.</p></li></ul><h3 id="Generic"><a href="#Generic" class="headerlink" title="Generic"></a>Generic</h3><ul><li><p>Defining Generic Class</p><ul><li>Generics Work Only With Derived Types</li></ul></li><li><p>Rules To Follow While Implementing Generic Interfaces</p><ul><li><p>Only generic classes can implement generic interfaces.<br><code>class GenericClass&lt;T&gt; implements GenericInterface&lt;T&gt;</code><br>-A normal class can implement a generic interface if type parameter of generic interface is a wrapper class. For example, below implementation of GenericInterface is legal.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">interface GenericInterface&lt;Integer&gt;&#123;</span><br><span class="line">    //Generic interface with Integer as type parameter</span><br><span class="line">&#125;</span><br><span class="line">class NormalClass implements GenericInterface&lt;Integer&gt;&#123;</span><br><span class="line">    //Normal class implementing generic interface</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Class implementing generic interface at least must have same number and same type of parameters and at most can have any number and any type of parameters.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class GenericClass2&lt;T, V&gt; implements GenericInterface&lt;T&gt;&#123;</span><br><span class="line">  //Class with two type parameters</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Define Methods And Constructors As Generic</p><ul><li>Generic Methods:<br><code>&lt;type-Parameters&gt; return_type method_name(parameter list)</code></li><li>Constructors As Generics,As we all know that constructors are like methods but without return types</li></ul></li><li><p>Bounded Types</p><ul><li>the syntax for declaring Bounded type parameters.<br><code>&lt;T extends SuperClass&gt;</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public static &lt;T extends Number&gt; void printNumbers(T[] t)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Wildcard arguments </p><ul><li>The syntax for declaring this type of wildcard arguments is:<code>GenericType&lt;?&gt;</code></li><li>To specify an upper bound for wildcards:<code>GenericType&lt;? extends SuperClass&gt;</code></li><li>specify a lower bound for wildcard argument using super clause:<code>GenericType&lt;? super SubClass&gt;</code></li></ul></li><li>Type Erasure</li></ul><h3 id="Collection-Framework"><a href="#Collection-Framework" class="headerlink" title="Collection Framework"></a>Collection Framework</h3><ul><li>Collection Framework – Class Hierarchy<ul><li>All classes and interfaces related to Collection Framework are placed in java.util package.<br><img src="https://javaconceptoftheday.com/wp-content/uploads/2014/11/CollectionHierarchy.png" alt=""></li></ul></li><li><p>Collection Framework – Collection Interface<br>  <img src="https://javaconceptoftheday.com/wp-content/uploads/2014/11/CollectionInterface.png" alt=""></p><ul><li>equals() and hashcode() methods in the Collection interface are not the methods of java.lang.Object class. Because, interfaces does not inherit from Object class. Only classes in java are inherited from Object class. Any classes implementing Collection interface must provide their own version of equals() and hashcode() methods or they can retain default version inherited from Object class.</li></ul></li><li>Collection Framework – List Interface<ul><li>the class diagram of List interface：<br><img src="https://javaconceptoftheday.com/wp-content/uploads/2014/11/ListInterface.png" alt=""></li></ul></li><li>Collection Framework – The ArrayList Class<ul><li>Default initial capacity of an ArrayList is 10.<ul><li>the hierarchy diagram of ArrayList class.<br><img src="https://javaconceptoftheday.com/wp-content/uploads/2014/12/ArrayListClass.png" alt=""></li><li>Properties Of ArrayList :<ul><li>Size of the ArrayList is not fixed. It can increase and decrease dynamically as we add or delete the elements.<ul><li>ArrayList can have any number of null elements.</li><li>ArrayList can have duplicate elements.</li><li>As ArrayList implements RandomAccess, you can get, set, insert and remove elements of the ArrayList from  any arbitrary position.<br><img src="https://javaconceptoftheday.com/wp-content/uploads/2014/12/ArrayListTemplateNew.png" alt=""></li></ul></li></ul></li></ul></li></ul></li><li><p>Differences Between Array Vs ArrayList In Java</p><ul><li><p>Array is static in nature,ArrayList is dynamic in nature</p><ul><li>when you try to add elements to ArrayList beyond its capacity, it creates the new array with increased size and copies the elements from old array to new array.</li><li>if adding an element requires resizing of an ArrayList, then it gets slightly slower as it involves creating a new array in the background and copying all elements from old array to new array.</li><li>Array can hold both primitive data types (int, float….) as well as objects. Where as ArrayList can hold only objects. If you try to insert primitive data into ArrayList, data is automatically boxed into corresponding wrapper class.<br><img src="https://javaconceptoftheday.com/wp-content/uploads/2016/09/ArrayVsArrayList.png" alt=""></li><li>ArrayList to Array,<strong>toArray()</strong> method returns an array containing all elements of the ArrayList.<code>Object[] array = list.toArray();</code></li><li><p>Array To ArrayList:</p><ul><li><p>Arrays.asList() </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String[] array = new String[] &#123;&quot;ANDROID&quot;, &quot;JSP&quot;, &quot;JAVA&quot;, &quot;STRUTS&quot;, &quot;HADOOP&quot;, &quot;JSF&quot;&#125;;</span><br><span class="line">ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;(Arrays.asList(array));</span><br></pre></td></tr></table></figure><ul><li><p>Collection.addAll()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String[] array = new String[] &#123;&quot;ANDROID&quot;, &quot;JSP&quot;, &quot;JAVA&quot;, &quot;STRUTS&quot;, &quot;HADOOP&quot;, &quot;JSF&quot;&#125;;</span><br><span class="line">ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;();</span><br><span class="line">Collections.addAll(list, array);</span><br></pre></td></tr></table></figure></li><li><p>ArrayList.addAll()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String[] array = new String[] &#123;&quot;ANDROID&quot;, &quot;JSP&quot;, &quot;JAVA&quot;, &quot;STRUTS&quot;, &quot;HADOOP&quot;, &quot;JSF&quot;&#125;;</span><br><span class="line">ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;();</span><br><span class="line">list.addAll(Arrays.asList(array));</span><br></pre></td></tr></table></figure></li><li><p>Using streams from java 8</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String[] array = new String[] &#123;&quot;ANDROID&quot;, &quot;JSP&quot;, &quot;JAVA&quot;, &quot;STRUTS&quot;, &quot;HADOOP&quot;, &quot;JSF&quot;&#125;;</span><br><span class="line">List&lt;Object&gt; list = Arrays.stream(array).collect(Collectors.toList());</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://javaconceptoftheday.com/wp-content/uploads/2016/07/ArrayToArrayList.png" alt=""></p></li></ul></li></ul></li></ul></li><li><p>Remove Duplicate Elements From ArrayList</p><ul><li><p>Using HashSet</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HashSet&lt;String&gt; set = new HashSet&lt;String&gt;(listWithDuplicateElements);</span><br><span class="line">ArrayList&lt;String&gt; listWithoutDuplicateElements = new ArrayList&lt;String&gt;(set);</span><br></pre></td></tr></table></figure><ul><li>Using LinkedHashSet<br><code>LinkedHashSet&lt;String&gt; set = new LinkedHashSet&lt;String&gt;(listWithDuplicateElements);</code><br><img src="https://javaconceptoftheday.com/wp-content/uploads/2015/07/RemovingDuplicateElementsFromArrayList.png" alt=""></li></ul></li></ul></li><li>Collection Framework – The Vector Class<ul><li>Vector class is synchronized. <ul><li>All methods of Vector class are synchronized </li><li>capacity of the vector will be doubled whenever size exceeds capacity.</li><li>Why Not To Use Vector Class In Your Code<ul><li>you can achieve thread safe ArrayList by using synchronizedList() method of Collections class. </li></ul></li></ul></li></ul></li><li>Java Collection Framework – The LinkedList Class<ul><li>In general terms, LinkedList is a data structure where each element consist of three things. First one is the reference to previous element, second one is the actual value of the element and last one is the reference to next element.<br><img src="https://javaconceptoftheday.com/wp-content/uploads/2014/12/HowLinkedListWorks.png" alt=""></li></ul></li><li><p>Collection Framework – The Queue Interface</p><ul><li>First-In-First-Out.<ul><li>You can’t add or get or set elements at an arbitrary position in the queues.<br><img src="https://javaconceptoftheday.com/wp-content/uploads/2014/11/HowQueueWorks.png" alt=""></li><li>Properties Of Queue :<ul><li>Null elements are not allowed in the queue. <ul><li>Queue can have duplicate elements.</li><li>Unlike a normal list, queue is not random access. i.e you can’t set or insert or get elements at an arbitrary positions.</li><li>In the Queue Interface, there are two methods to obtain and remove the elements from the head of the queue. They are poll() and remove(). The difference between them is, poll() returns null if the queue is empty and remove() throws an exception if the queue is empty.</li><li>There are two methods in the Queue interface to obtain the elements but don’t remove. They are peek() and element(). peek() returns null if the queue is empty and element() throws an exception if the queue is empty.</li></ul></li></ul></li></ul></li></ul></li><li><p>Collection Framework – The Deque Interface</p><ul><li>the hierarchy diagram of Deque interface：<br><img src="https://javaconceptoftheday.com/wp-content/uploads/2014/11/Deque.png" alt=""><ul><li>The main advantage of Deque is that you can use it as both Queue (FIFO) as well as Stack (LIFO).</li><li>Deque is nothing but the double ended queue. That means, you can insert, retrieve and remove the elements from both the ends.<br><img src="https://javaconceptoftheday.com/wp-content/uploads/2014/11/HowDequeWorks.png" alt=""></li></ul></li></ul></li><li><p>Collection Framework – The Set Interface</p><ul><li>Order of elements in a set is implementation dependent. HashSet elements are ordered on hash code of elements. TreeSet elements are ordered according to supplied Comparator (If no Comparator is supplied, elements will be placed in ascending order) and LinkedHashSet maintains insertion order.</li><li>The HashSet internally uses HashMap to store the objects. The elements you insert in HashSet will be stored as keys of that HashMap object and their values will be a constant called PRESENT. This constant is defined as private static final Object PRESENT = new Object() in the source code of HashSet class.</li><li>HashSet can have maximum one null element.<br><img src="https://javaconceptoftheday.com/wp-content/uploads/2015/01/HowHashSetWorks.png" alt=""></li><li>LinkedHashSet internally uses LinkedHashMap to store it’s elements just like HashSet which internally uses HashMap to store it’s elements.</li><li>LinkedHashSet maintains insertion order. This is the main difference between LinkedHashSet and HashSet.</li><li>SortedSet elements are sorted according to supplied Comparator. If you don’t mention any Comparator while creating a SortedSet, elements will be placed in ascending order.</li><li>SortedSet Inserted elements must be of Comparable type and they must be mutually Comparable.</li><li>Elements inserted in the TreeSet must be of Comparable type and elements must be mutually comparable. </li><li>TreeSet internally uses TreeMap to store it’s elements just like HashSet and LinkedHashSet which use HashMap and LinkedHashMap respectively to store their elements.</li></ul></li><li>Java Collection Framework – The Map Interface<br><img src="https://javaconceptoftheday.com/wp-content/uploads/2015/01/MapInterface.png" alt=""><ul><li>Each key-value pairs of the map are stored as Map.Entry objects. Map.Entry is an inner interface of Map interface.</li><li>HashMap doesn’t maintain any order of elements. LinkedHashMap maintains insertion order of elements. Where as TreeMap places the elements according to supplied Comparator.</li><li>Default initial capacity of HashMap is 16.</li><li>Hashing is nothing but the function or algorithm or method which when applied on any object/variable returns an unique integer value representing that object/variable.</li><li>The capacity of an HashMap is the number of buckets in the hash table. The initial capacity is the capacity of an HashMap at the time of its creation. The default initial capacity of the HashMap is 24 i.e 16. The capacity of the HashMap is doubled each time it reaches the threshold. i.e the capacity is increased to 25=32, 26=64, 27=128….. when the threshold is reached.</li><li>HashMap internally uses an array of Entry&lt;K, V&gt; objects to store the data.</li><li>HashTable is a legacy class. It is almost considered as due for deprecation. Since JDK 1.5, ConcurrentHashMap is considered as better option than the HashTable.</li></ul></li></ul><h3 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h3><ul><li><p>Java Database Connectivity API which is used by the java application to interact with the database.</p><ul><li>JDBC API not directly interacts with the database. It uses JDBC driver of that database to interact with the database.<br><img src="https://javaconceptoftheday.com/wp-content/uploads/2015/06/JavaJDBCDriverDatabase.png" alt=""></li><li><p>JDBC driver is a software component provided along with the database which is required by the JDBC API to interact with the database. Each database will have its own JDBC driver.</p><blockquote><p>In simple terms, JDBC drivers are nothing but the implementations of interfaces provided in the JDBC API (java.sql and javax.sql packages) with respect to a particular database. These implementations are bundled in a JAR file and supplied along with the database. These implementations are used by the JDBC API to interact with that database.</p></blockquote></li></ul></li></ul><h3 id="Big-O-Notations"><a href="#Big-O-Notations" class="headerlink" title="Big O Notations"></a>Big O Notations</h3><ul><li>Big O notations consist of O and an expression enclosed within ( ). Expression within ( ) represents the number of computations a particular algorithm has to perform to solve a given problem.</li><li><p><strong>O(1)</strong> represents an algorithm which has to perform exact one computation to solve a problem. O(1) represents an algorithm which takes same time to execute for any size of input data. In other words, O(1) denotes an algorithm which performance is not affected by the size of the input data. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">boolean isFirstElementZero(int[] inputData)</span><br><span class="line">&#123;</span><br><span class="line">if(inputData[0] == 0)</span><br><span class="line">&#123;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>O(N)</strong> represents an algorithm which has to perform ‘N’ computations to solve a problem. Where ‘N’ is the number of elements in input data. That means algorithm will take more time as number of elements in input data increases. In the other words, O(N) denotes an algorithm whose performance is directly proportional to size of the input data.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">boolean searchForElement(int[] inputData, int n)</span><br><span class="line">&#123;</span><br><span class="line">for (int i = 0; i &lt; inputData.length; i++)</span><br><span class="line">&#123;</span><br><span class="line">if(inputData[i] == n)</span><br><span class="line">&#123;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>O(N^2)</strong> denotes an algorithm which has to perform N^2 computations to solve a problem. Where N is the number of elements in input data. In the other words, O(N^2) represents an algorithm whose performance is directly proportional to square of the size of the input data. The algorithms which have nested iterations over the input data will give O(N^2) performance. Further deeper iterations over the input data will give O(N^3), O(N^4) and so on.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">boolean findDuplicates(int[] inputData)</span><br><span class="line">&#123;</span><br><span class="line">for (int i = 0; i &lt; inputData.length; i++)</span><br><span class="line">&#123;</span><br><span class="line">for (int j = 0; j &lt; inputData.length; j++)</span><br><span class="line">&#123;</span><br><span class="line">if(inputData[i] == inputData[j] &amp;&amp; i!=j)</span><br><span class="line">&#123;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>O(log N)</strong> represents an algorithm whose number of computations grows linearly as input data grows exponentially. i.e O(log N) represents the algorithms whose execution time grows linearly as input data grows exponentially. That means if an algorithm takes 1 second to compute 10 elements, then it will take 2 seconds to compute 100 elements, 3 seconds to compute 1000 elements and so on. The best example for O(log N) is binary search algorithm which uses divide and conquer rule to search for an element.</p></li><li><strong>O(2N)</strong> represents an algorithm whose execution time is doubled for every extra element in the input data. For example, if an algorithm takes 4 seconds to compute 2 elements, then it will take 8 seconds to compute 3 elements, 16 seconds for 4 elements, 32 seconds for 5 elements and so on.</li><li><strong>O(N!)</strong> represents an algorithm which has to perform N! computations to solve a problem. Where N is the number of elements in the input data. For example, if an algorithm takes 2 seconds to compute 2 elements, then it will take 6 seconds to compute 3 elements, 24 seconds to compute 4 elements and so on.<br><img src="https://javaconceptoftheday.com/wp-content/uploads/2015/05/Big-O-Notation.png" alt=""></li></ul>]]></content>
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> learn </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mybatis snippet</title>
      <link href="/2016/10/16/mybatis%20snippet/"/>
      <url>/2016/10/16/mybatis%20snippet/</url>
      <content type="html"><![CDATA[<h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><ul><li><p>about date jdbcType</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#&#123;beginDate,jdbcType=DATE&#125; (no time of the day), or</span><br><span class="line">#&#123;beginDate,jdbcType=TIMESTAMP&#125; (if you need to include the time of the day).</span><br></pre></td></tr></table></figure></li></ul><p>And the Java parameter you want to apply should be of type:<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java.sql.Date (date without time)</span><br><span class="line">java.sql.Timestamp (timestamp)</span><br><span class="line">java.util.Date (date and time).</span><br></pre></td></tr></table></figure></p><ul><li>the Greater Than/Equal Operator and the Less Than/Equal Operators:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ROWNUM &amp;gt;= 20</span><br><span class="line">ROWNUM &amp;lt;= 20</span><br></pre></td></tr></table></figure></li></ul><h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><p>使用SpringMVC+Mybatis框架写项目的时候，在mapper里面的sql语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"updateTime != null"</span>&gt;</span></span><br><span class="line">and update_time &amp;gt; #&#123;updateTime,jdbcType=TIMESTAMP&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br></pre></td></tr></table></figure><p>出错：<code>There is no getter for property named &#39;updateTime&#39; in &#39;class java.util.Date&#39;</code></p><p>原因是：<br>如果将and语句中的#｛属性｝写在if语句中，mybatis会去对象中从它的get方法中取值，而我之前是直接传递的值，并没有封装对象。<br>解决办法：</p><pre><code> 1. 把updateTime需改为date2. 把updateTime代表的参数封装到一个对象中</code></pre>]]></content>
      
      <categories>
          
          <category> mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> snippet </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>springboot snippet</title>
      <link href="/2016/08/14/springboot%20snippet/"/>
      <url>/2016/08/14/springboot%20snippet/</url>
      <content type="html"><![CDATA[<h2 id="问题随记"><a href="#问题随记" class="headerlink" title="问题随记"></a>问题随记</h2><ol><li>Spring Boot通过Mybatis，使用mapper接口和xml配置sql，连接数据库</li></ol><ul><li><p>首先在配置文件application.properties</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">spring.datasource.url=jdbc:mysql://localhost:3306/test</span><br><span class="line">spring.datasource.username=***</span><br><span class="line">spring.datasource.password=***</span><br><span class="line">spring.datasource.driverClassName=com.mysql.jdbc.Driver</span><br><span class="line"></span><br><span class="line">#mybatis.typeAliasesPackage：为实体对象所在的包，跟数据库表一一对应</span><br><span class="line">#mybatis.mapperLocations：mapper文件的位置</span><br><span class="line"></span><br><span class="line">mybatis.typeAliasesPackage=com.xxx.model</span><br><span class="line">mybatis.mapperLocations=classpath:mybatis/mapper/*Mapper.xml</span><br></pre></td></tr></table></figure></li><li><p>在启动类Application.java中写上配置信息 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.xxx.dao"</span>) <span class="comment">// mybatis扫描路径，针对的是接口Mapper类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DailyreportApplication</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DailyreportApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li>mysql连接异常<code>java.sql.SQLException: Value &#39;0000-00-00&#39; can not be represented as java.sql.Date</code></li></ol><ul><li><p>解决办法</p><p><code>jdbc:mysql://yourserver:3306/yourdatabase?zeroDateTimeBehavior=convertToNull</code></p></li></ul>]]></content>
      
      <categories>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> snippet </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>git skill</title>
      <link href="/2016/08/05/git%20snippet/"/>
      <url>/2016/08/05/git%20snippet/</url>
      <content type="html"><![CDATA[<ul><li><p>Git修改.gitignore不生效 </p><ul><li><p>在git中，如果想忽略某个文件，不让这个文件提交到版本库中，可以修改根目录中的.gitignore文件</p><p>但有时候把某些目录或者文件加入忽略规则，发现并未生效</p></li><li><p>未生效原因：.gitignore只能忽略那些原来没有被追踪(track)的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的</p></li><li><p>解决方案：先把本地缓存删除（改变成未track状态），然后提交。</p></li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git rm -r --cached &lt;要忽略的具体文件或者目录&gt; 或者 git rm -r --cached . </span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;update .gitignore&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> skill </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>java skill</title>
      <link href="/2016/05/20/java%20skill/"/>
      <url>/2016/05/20/java%20skill/</url>
      <content type="html"><![CDATA[<h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><ul><li><p>int变量自增 效率问题 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i++;和i += 1;形成的指令数较少，且不需要操作数栈。相对而言，i = i+1;需要至少2个操作数栈深度，并且形成的指令数较多。故，i++;和i+= 1;的效率一样，并且二者的效率都优于i = i+1;</span><br></pre></td></tr></table></figure></li></ul><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><p><strong>T，E，K，V，？是这样约定的：</strong></p><ul><li>？表示不确定的 java 类型</li><li>T (type) 表示具体的一个java类型</li><li>K V (key value) 分别代表java键值中的Key Value</li><li>E (element) 代表Element</li></ul><p><strong>？和 T 的区别</strong>：</p><p><img src="https://mmbiz.qpic.cn/mmbiz/knmrNHnmCLFRVA73vYfkqVGfia90X5nyEsksfM8Vz6btFZCRd3PCSJC1XkZhaJ0ufxcoohxAdr8X1tykU9CZPUQ/640?wx_fmt=other&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p><p>？和 T 都表示不确定的类型，区别在于我们可以对 T 进行操作，但是对 ？不行，比如如下这种 ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 可以</span><br><span class="line">T t = operate();</span><br><span class="line"></span><br><span class="line">// 不可以</span><br><span class="line">？car = operate();</span><br></pre></td></tr></table></figure><p>简单总结下：</p><p>T 是一个 确定的 类型，通常用于泛型类和泛型方法的定义，？是一个 不确定 的类型，通常用于泛型方法的调用代码和形参，不能用于定义类和泛型方法。</p><p><strong>PECS（Producer Extends Consumer Super）</strong>原则：作为生产者提供数据（往外读取）时，适合用上界通配符（extends）；作为消费者消费数据（往里写入）时，适合用下界通配符（super）。</p><h2 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h2><p>在 JDK8 以后，建议使用 DateTimeFormatter 代替 SimpleDateFormat ，因为 SimpleDateFormat 是线程不安全的，而 DateTimeFormatter 是线程安全的。当然，也可以采用第三方提供的线程安全日期格式化函数，比如 apache 的 DateFormatUtils 工具类。</p>]]></content>
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> snippet </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>shiro snippet</title>
      <link href="/2016/05/20/shiro%20snippet/"/>
      <url>/2016/05/20/shiro%20snippet/</url>
      <content type="html"><![CDATA[<p><strong>对于一个好的框架，从外部来看应该具有非常简单易于使用的 API，且 API 契约明确；从内部来看的话，其应该有一个可扩展的架构，即非常容易插入用户自定义实现，因为任何框架都不能满足所有需求。 </strong></p><hr><ul><li><p>Subject</p><p>主体，代表了当前的用户</p></li><li><p>SecurityManager</p><p>安全管理器，它管理着所有Subject，相当于springmvc中的DispatcherServlet(前端控制器)</p></li><li><p>Realm</p><p>域，Shiro从Realm获取安全数据（如用户、角色、权限） ，是验证主体subject的数据源</p></li></ul><p>流程如图：</p><p><img src="http://wiki.jikexueyuan.com/project/shiro/images/2.png" alt=""></p><p><strong>流程说明</strong>：</p><ol><li>应用代码通过 Subject 来进行认证和授权，而 Subject 又委托给 SecurityManager；</li><li>我们需要给 Shiro 的 SecurityManager 注入 Realm，从而让 SecurityManager 能得到合法的用户及其权限进行判断。</li></ol><p><strong>从以上也可以看出，Shiro 不提供维护用户 / 权限，而是通过 Realm 让开发人员自己注入。</strong> </p><hr><p>shiro的内部结构如图：</p><p><img src="http://wiki.jikexueyuan.com/project/shiro/images/3.png" alt=""></p><hr><h3 id="身份验证"><a href="#身份验证" class="headerlink" title="身份验证"></a>身份验证</h3><p><strong>principals</strong>：身份，即主体的标识属性，可以是任何东西，如用户名、邮箱等，唯一即可。 </p><p><strong>credentials</strong>：证明 / 凭证，即只有主体知道的安全值，如密码 / 数字证书等。 </p><ul><li>身份认证流程</li></ul><p><img src="http://wiki.jikexueyuan.com/project/shiro/images/4.png" alt=""></p><hr><h3 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h3><p>授权，也叫访问控制，即在应用中控制谁能访问哪些资源（如访问页面/编辑数据/页面操作等）。在授权中需了解的几个关键对象：主体（Subject）、资源（Resource）、权限（Permission）、角色（Role）。 </p><ul><li><p>授权方式</p><p>编程式、注解式、jsp/gsp标签式</p></li></ul>]]></content>
      
      <categories>
          
          <category> shiro </category>
          
      </categories>
      
      
        <tags>
            
            <tag> snippet </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>linux config</title>
      <link href="/2016/05/16/version%20sort/"/>
      <url>/2016/05/16/version%20sort/</url>
      <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">1 Α α alpha a:lf 阿尔法</span><br><span class="line">2 Β β beta bet 贝塔</span><br><span class="line">3 Γ γ gamma ga:m 伽马</span><br><span class="line">4 Δ δ delta delt 德尔塔</span><br><span class="line">5 Ε ε epsilon ep`silon 伊普西龙</span><br><span class="line">6 Ζ ζ zeta zat 截塔</span><br><span class="line">7 Η η eta eit 艾塔</span><br><span class="line">8 Θ θ theta θit 西塔</span><br><span class="line">9 Ι ι iota aiot 约塔</span><br><span class="line">10Κ κ kappa kap 卡帕</span><br><span class="line">11∧ λ lambda lambd 兰布达</span><br><span class="line">12Μ μ mu mju 缪</span><br><span class="line">13Ν ν nu nju 纽</span><br><span class="line">14Ξ ξ xi ksi 克西</span><br><span class="line">15Ο ο omicron omik`ron 奥密克戎</span><br><span class="line">16∏ π pi pai 派</span><br><span class="line">17Ρ ρ rho rou 肉</span><br><span class="line">18∑ σ sigma `sigma 西格马</span><br><span class="line">19Τ τ tau tau 套</span><br><span class="line">20 Υ υ upsilon ju:p`sailon 宇普西龙</span><br><span class="line">21 Φ φ phi fai 佛爱</span><br><span class="line">22 Χ χ chi phai 西</span><br><span class="line">23 Ψ ψ psi psai 普西</span><br><span class="line">24 Ω ω omega o`miga 欧米伽</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> version </category>
          
      </categories>
      
      
        <tags>
            
            <tag> snippet </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>filter in servlet</title>
      <link href="/2016/03/16/filter%20in%20servlet/"/>
      <url>/2016/03/16/filter%20in%20servlet/</url>
      <content type="html"><![CDATA[<blockquote><p>A filter is an object that is invoked at the preprocessing and postprocessing of a request.</p><ul><li>It is mainly used to perform filtering tasks such as conversion, logging, compression, encryption and decryption, input validation etc.</li><li>The servlet filter is pluggable, i.e. its entry is defined in the web.xml file, if we remove the entry of filter from the web.xml file, filter will be removed automatically and we don’t need to change the servlet.</li></ul></blockquote><p><img src="https://www.javatpoint.com/images/filter.JPG" alt=""></p><h3 id="Usage-of-Filter"><a href="#Usage-of-Filter" class="headerlink" title="Usage of Filter"></a>Usage of Filter</h3><ul><li>recording all incoming requests</li><li>logs the IP addresses of the computers from which the requests originate</li><li>conversion</li><li>data compression</li><li>encryption and decryption</li><li>input validation etc.</li></ul><h3 id="Advantage-of-Fliter"><a href="#Advantage-of-Fliter" class="headerlink" title="Advantage of Fliter"></a>Advantage of Fliter</h3><ul><li>Filter is pluggable.</li><li>One filter don’t have dependency onto another resource.</li><li>Less Maintenance</li></ul><h3 id="Filter-API"><a href="#Filter-API" class="headerlink" title="Filter API"></a>Filter API</h3><ul><li><p>Filter</p><blockquote><p>For creating any filter, you must implement the Filter interface. Filter interface provides the life cycle methods for a filter.</p></blockquote></li><li><p>FilterChain</p><blockquote><p>The object of FilterChain is responsible to invoke the next filter or resource in the chain.This object is passed in the doFilter method of Filter interface.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span></span>&#123;  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig arg0)</span> <span class="keyword">throws</span> ServletException </span>&#123;&#125;  </span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse resp,  </span></span></span><br><span class="line"><span class="function"><span class="params">    FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;  </span><br><span class="line">          </span><br><span class="line">    PrintWriter out=resp.getWriter();  </span><br><span class="line">    out.print(<span class="string">"filter is invoked before"</span>);  </span><br><span class="line">          </span><br><span class="line">    chain.doFilter(req, resp);<span class="comment">//sends request to next resource  </span></span><br><span class="line">          </span><br><span class="line">    out.print(<span class="string">"filter is invoked after"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;&#125;  </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>FilterConfig</p></li></ul>]]></content>
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> learn </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Event and Listen</title>
      <link href="/2016/03/01/Event%20and%20Listen/"/>
      <url>/2016/03/01/Event%20and%20Listen/</url>
      <content type="html"><![CDATA[<blockquote><p>Events are basically occurrence of something. Changing the state of an object is known as an event.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">We can perform some important tasks at the occurrence of these exceptions, such as counting total and current logged-in users, creating tables of the database at time of deploying the project, creating database connection object etc.</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="Event-classes"><a href="#Event-classes" class="headerlink" title="Event classes"></a>Event classes</h3><ul><li>ServletRequestEvent</li><li>ServletContextEvent</li><li>ServletRequestAttributeEvent</li><li>ServletContextAttributeEvent</li><li>HttpSessionEvent</li><li>HttpSessionBindingEvent</li></ul><h3 id="Event-interfaces"><a href="#Event-interfaces" class="headerlink" title="Event interfaces"></a>Event interfaces</h3><ul><li>ServletRequestListener</li><li>ServletRequestAttributeListener</li><li>ServletContextListener</li><li>ServletContextAttributeListener</li><li>HttpSessionListener</li><li>HttpSessionAttributeListener</li><li>HttpSessionBindingListener</li><li>HttpSessionActivationListener</li></ul><hr><h3 id="ServletContextEvent-and-ServletContextListener"><a href="#ServletContextEvent-and-ServletContextListener" class="headerlink" title="ServletContextEvent and ServletContextListener"></a>ServletContextEvent and ServletContextListener</h3><ul><li>The ServletContextEvent is notified when web application is deployed on the server.</li><li>If you want to perform some action at the time of deploying the web application such as creating database connection, creating all the tables of the project etc, you need to implement ServletContextListener interface and provide the implementation of its methods.</li></ul><p><code>Web application &gt; ServletContextEvent &gt; ServletContextListener</code></p><h3 id="HttpSessionEvent-and-HttpSessionListener"><a href="#HttpSessionEvent-and-HttpSessionListener" class="headerlink" title="HttpSessionEvent and HttpSessionListener"></a>HttpSessionEvent and HttpSessionListener</h3><ul><li>The HttpSessionEvent is notified when session object is changed. The corresponding Listener interface for this event is HttpSessionListener.</li><li>We can perform some operations at this event such as counting total and current logged-in users, maintaing a log of user details such as login time, logout time etc.</li></ul><p><code>session object &gt; HttpSessionEvent &gt; HttpSessionListener</code></p>]]></content>
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> learn </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>java code snippet</title>
      <link href="/2016/02/16/java%20code%20snippet/"/>
      <url>/2016/02/16/java%20code%20snippet/</url>
      <content type="html"><![CDATA[<h2 id="base64ToByte"><a href="#base64ToByte" class="headerlink" title="base64ToByte"></a>base64ToByte</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">String string = <span class="string">"SmF2YWNvZGVnZWVrcw=="</span>;</span><br><span class="line"><span class="comment">// Get bytes from string</span></span><br><span class="line"><span class="keyword">byte</span>[] byteArray = Base64.decodeBase64(string.getBytes());</span><br><span class="line"></span><br><span class="line"><span class="comment">// Print the decoded array</span></span><br><span class="line">System.out.println(Arrays.toString(byteArray));</span><br><span class="line"><span class="comment">// Print the decoded string </span></span><br><span class="line">String decodedString = <span class="keyword">new</span> String(byteArray);</span><br><span class="line">System.out.println(string + <span class="string">" = "</span> + decodedString);</span><br></pre></td></tr></table></figure><h2 id="TimeConvert"><a href="#TimeConvert" class="headerlink" title="TimeConvert"></a>TimeConvert</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//date format</span></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.time.DateFormatUtils;</span><br><span class="line">String timeStr = DateFormatUtils.format(dateDate,<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">Date dateTime = DateUtils.parseDate(dateTimeStr,<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line"></span><br><span class="line">SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">Date dateWithoutTime = sdf.parse(sdf.format(<span class="keyword">new</span> Date()));</span><br><span class="line"></span><br><span class="line"><span class="comment">//capitalize the first letter of word</span></span><br><span class="line">String output = input.substring(<span class="number">0</span>, <span class="number">1</span>).toUpperCase() + input.substring(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//measure the time cost</span></span><br><span class="line"><span class="keyword">long</span> start = System.nanoTime();</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="keyword">long</span> end = System.nanoTime();</span><br><span class="line"><span class="keyword">long</span> used = end-start;</span><br><span class="line">System.out.println(<span class="string">"used:"</span>+TimeUnit.NANOSECONDS.toMillis(used)+<span class="string">" ms"</span>);</span><br></pre></td></tr></table></figure><h2 id="Lambda"><a href="#Lambda" class="headerlink" title="Lambda"></a>Lambda</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//stream read database   </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testStreamRead</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        oracleSqlSessionTemplate.select(<span class="string">"xxxx.OracleMapper.getPersonInfos"</span>, <span class="keyword">new</span> ResultHandler() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleResult</span><span class="params">(ResultContext resultContext)</span> </span>&#123;</span><br><span class="line">                PersonInfo personInfo = (PersonInfo) resultContext.getResultObject();</span><br><span class="line">                LOG.debug(<span class="string">"result count:[&#123;&#125;],result info:[&#123;&#125;]"</span>, resultContext.getResultCount(), personInfo.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testStreamRead2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        oracleSqlSessionTemplate.select(<span class="string">"xxxx.OracleMapper.getPersonInfos"</span>,</span><br><span class="line">                resultContext -&gt; &#123;</span><br><span class="line">                    PersonInfo personInfo = (PersonInfo) resultContext.getResultObject();</span><br><span class="line">                    LOG.debug(<span class="string">"result count:[&#123;&#125;],result info:[&#123;&#125;]"</span>, resultContext.getResultCount(), personInfo.getName());</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//iterate list</span></span><br><span class="line">myFinalList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">myListToParse.stream()</span><br><span class="line">        .filter(elt -&gt; elt != <span class="keyword">null</span>)</span><br><span class="line">        .forEach(elt -&gt; myFinalList.add(doSomething(elt)));</span><br><span class="line"><span class="comment">//prefer</span></span><br><span class="line">myFinalList = myListToParse.stream()</span><br><span class="line">        .filter(elt -&gt; elt != <span class="keyword">null</span>)</span><br><span class="line">        .map(elt -&gt; doSomething(elt))</span><br><span class="line">        .collect(Collectors.toList());</span><br></pre></td></tr></table></figure><h2 id="thread"><a href="#thread" class="headerlink" title="thread"></a>thread</h2><h3 id="notify-thread"><a href="#notify-thread" class="headerlink" title="notify thread"></a>notify thread</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shared</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">waitMethod</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Thread t = Thread.currentThread();</span><br><span class="line">         </span><br><span class="line">        System.out.println(t.getName()+<span class="string">" is releasing the lock and going to wait"</span>);</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            wait();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (InterruptedException e) </span><br><span class="line">        &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        System.out.println(t.getName()+<span class="string">" has been notified and acquired the lock back"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">notifyOneThread</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Thread t = Thread.currentThread();</span><br><span class="line">         </span><br><span class="line">        notify();</span><br><span class="line">         </span><br><span class="line">        System.out.println(t.getName()+<span class="string">" has notified one thread waiting for this object lock"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainClass</span> </span></span><br><span class="line"><span class="class"></span>&#123;   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Shared s = <span class="keyword">new</span> Shared();</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//Thread t1 will be waiting for lock of object 's'</span></span><br><span class="line">         </span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread() </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                s.waitMethod();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">         </span><br><span class="line">        t1.start();</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//Thread t2 will be waiting for lock of object 's'</span></span><br><span class="line">         </span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread() </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                s.waitMethod();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"> </span><br><span class="line">        t2.start();</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//Thread t3 will be waiting for lock of object 's'</span></span><br><span class="line">         </span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread() </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                s.waitMethod();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">         </span><br><span class="line">        t3.start();</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">catch</span> (InterruptedException e) </span><br><span class="line">        &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//Thread t4 will notify only one thread which is waiting for lock of object 's'</span></span><br><span class="line">         </span><br><span class="line">        Thread t4 = <span class="keyword">new</span> Thread() </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                s.notifyOneThread();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">         </span><br><span class="line">        t4.start(); </span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="stop-thread"><a href="#stop-thread" class="headerlink" title="stop thread"></a>stop thread</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">//Initially setting the flag as true</span></span><br><span class="line">     </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//This method will set flag as false</span></span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stopRunning</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        flag = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//Keep the task in while loop</span></span><br><span class="line">         </span><br><span class="line">        <span class="comment">//This will make thread continue to run until flag becomes false</span></span><br><span class="line">         </span><br><span class="line">        <span class="keyword">while</span> (flag)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">"I am running...."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        System.out.println(<span class="string">"Stopped Running...."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainClass</span> </span></span><br><span class="line"><span class="class"></span>&#123;   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        MyThread thread = <span class="keyword">new</span> MyThread();</span><br><span class="line">         </span><br><span class="line">        thread.start();</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">catch</span> (InterruptedException e) </span><br><span class="line">        &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//call stopRunning() method whenever you want to stop a thread</span></span><br><span class="line">         </span><br><span class="line">        thread.stopRunning();</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span></span><br><span class="line"><span class="class"></span>&#123;   </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (!Thread.interrupted())</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">"I am running...."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        System.out.println(<span class="string">"Stopped Running....."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainClass</span> </span></span><br><span class="line"><span class="class"></span>&#123;   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        MyThread thread = <span class="keyword">new</span> MyThread();</span><br><span class="line">         </span><br><span class="line">        thread.start();</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">catch</span> (InterruptedException e) </span><br><span class="line">        &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//interrupting the thread</span></span><br><span class="line">         </span><br><span class="line">        thread.interrupt();</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="try-catch-finally"><a href="#try-catch-finally" class="headerlink" title="try-catch-finally"></a>try-catch-finally</h3><ol><li>不管有木有出现异常，finally块中代码都会执行** </li><li><strong>当try和catch中有return时，finally仍然会执行</strong> </li><li><strong>finally是在return后面的表达式运算后执行的（此时并没有返回运算后的值，而是先把要返回的值保存起来，管finally中的代码怎么样，返回的值都不会改变，仍然是之前保存的值），所以函数返回值是在finally执行前确定的；</strong> </li><li><strong>finally中最好不要包含return，否则程序会提前退出，返回值不是try或catch中保存的返回值。</strong> </li><li>任何执行try 或者catch中的return语句之前，都会先执行finally语句，如果finally中有return语句，那么程序就return了，所以finally中的return是一定会被return的。</li></ol><h3 id="ReentrantLock"><a href="#ReentrantLock" class="headerlink" title="ReentrantLock"></a>ReentrantLock</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.Level;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.Logger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Java program to show, how to use ReentrantLock in Java.</span></span><br><span class="line"><span class="comment"> * Reentrant lock is an alternative way of locking</span></span><br><span class="line"><span class="comment"> * apart from implicit locking provided by synchronized keyword in Java.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>  Javin Paul</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReentrantLockHowto</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//Locking using Lock and ReentrantLock</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">" gets Count: "</span> + count);</span><br><span class="line">            <span class="keyword">return</span> count++;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//Implicit locking using synchronized keyword</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">getCountTwo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> count++;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ThreadTest counter = <span class="keyword">new</span> ThreadTest();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">while</span> (counter.getCount() &amp;lt; <span class="number">6</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException ex) &#123;</span><br><span class="line">                        ex.printStackTrace();                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">      </span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">while</span> (counter.getCount() &amp;lt; <span class="number">6</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException ex) &#123;</span><br><span class="line">                        ex.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">      </span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Output:</span><br><span class="line">Thread-0 gets Count: 0</span><br><span class="line">Thread-1 gets Count: 1</span><br><span class="line">Thread-1 gets Count: 2</span><br><span class="line">Thread-0 gets Count: 3</span><br><span class="line">Thread-1 gets Count: 4</span><br><span class="line">Thread-0 gets Count: 5</span><br><span class="line">Thread-0 gets Count: 6</span><br><span class="line">Thread-1 gets Count: 7</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> snippet </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>websocket tracking</title>
      <link href="/2016/01/18/webservice%20snippet/"/>
      <url>/2016/01/18/webservice%20snippet/</url>
      <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/49d7997ad3b7" target="_blank" rel="noopener">https://www.jianshu.com/p/49d7997ad3b7</a></p><p><a href="https://blog.csdn.net/qq_33546747/article/details/53304097" target="_blank" rel="noopener">https://blog.csdn.net/qq_33546747/article/details/53304097</a></p><hr><h2 id="WebService是一种跨编程语言和跨操作系统平台的远程调用技术。"><a href="#WebService是一种跨编程语言和跨操作系统平台的远程调用技术。" class="headerlink" title="WebService是一种跨编程语言和跨操作系统平台的远程调用技术。"></a>WebService是一种跨编程语言和跨操作系统平台的远程调用技术。</h2><p>多个角度来理解WebService<br>​    从表面上看，WebService就是一个应用程序向外界暴露出一个能通过Web进行调用的API，也就是说能用编程的方法通过Web来调用这个应用程序。<br>​    我们把调用这个WebService的应用程序叫做客户端，而把提供这个WebService的应用程序叫做服务端<br>​    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">从深层次看，WebService是建立可互操作的分布式应用程序的新平台，是一个平台，是一套标准。</span><br><span class="line">它定义了应用程序如何在Web上实现互操作性，你可以用任何你喜欢的语言，在任何你喜欢的平台上写Web service ，只要我们可以通过Web service标准对这些服务进行查询和访问。</span><br></pre></td></tr></table></figure><hr><p>构成WebService平台的三大技术：<br>​    XML+XSD,SOAP和WSDL<br>​<br>WebService采用HTTP协议传输数据，采用XML格式封装数据（即XML中说明调用远程服务对象的哪个方法，传递的参数是什么，以及服务对象的返回结果是什么）<br>WebService用XSD来作为其数据类型系统<br>HTTP消息头和XML内容格式就是SOAP协议。SOAP提供了标准的RPC方法来调用Web Service。</p><p>SOAP协议 = HTTP协议 + XML数据格式</p><p>比喻：HTTP就是普通公路，XML就是中间的绿色隔离带和两边的防护栏，SOAP就是普通公路经过加隔离带和防护栏改造过的高速公路。</p><p>WSDL(Web Services Description Language)是基于XML的语言，用于描述Web Service及其函数、参数和返回值。</p><p>WSDL文件保存在Web服务器上，通过一个url地址就可以访问到它。客户端要调用一个WebService服务之前，要知道该服务的WSDL文件的地址。<br>WebService服务提供商可以通过两种方式来暴露它的WSDL文件地址：1.注册到UDDI服务器，以便被人查找；2.直接告诉给客户端调用者。</p><p>======================================================================================<br><a href="https://www.cnblogs.com/snake-hand/archive/2013/06/09/3129915.html" target="_blank" rel="noopener">https://www.cnblogs.com/snake-hand/archive/2013/06/09/3129915.html</a></p><hr><p>Axis和CXF，这两个产品都是Apache孵化器下面的Web Service开源开发工具</p><p>CXF支持 WS-Addressing，WS-Policy， WS-RM， WS-Security和WS-I Basic Profile<br>Axis2不支持WS-Policy</p><p>CXF可以很好支持Spring<br>Axis2不能很好支持Spring</p><p> CXF只支持JAXB和Aegis。<br> AXIS2支持更广泛的数据并对，如XMLBeans，JiBX，JaxMe和JaxBRI和它自定义的数据绑定ADB。注意JaxME和JaxBRI都还是试验性的。AXIS2支持更广泛的数据并对，如XMLBeans，JiBX，JaxMe和JaxBRI和它自定义的数据绑定ADB。注意JaxME和JaxBRI都还是试验性的。</p><hr><p> 如何抉择：<br>1、如果应用程序需要多语言的支持，Axis2 应当是首选了；<br>2、如果应用程序是遵循Spring 哲学路线的话，Apache CXF 是一种更好的选择，特别对嵌入式的Web Services 来说；<br>3、如果应用程序没有新的特性需要的话，就仍是用原来项目所用的框架，比如Axis1，XFire，Celtrix或 BEA等等厂家自己的 WebServices 实现，就别劳民伤财了</p>]]></content>
      
      <categories>
          
          <category> webservice </category>
          
      </categories>
      
      
        <tags>
            
            <tag> learn </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>css snippet</title>
      <link href="/2016/01/16/css%20snippet/"/>
      <url>/2016/01/16/css%20snippet/</url>
      <content type="html"><![CDATA[<h3 id="display"><a href="#display" class="headerlink" title="display"></a>display</h3><p>每个元素都有一个默认的 display 类型<br>不过你可以随时随地的重写它！如常见的例子是：把 li 元素修改成 inline，制作成水平菜单。</p><p>p标签是块级元素，span元素是行内元素。内元素可以写在块级元素里面  比如<code>&lt;p&gt;&lt;span&gt;内容&lt;/span&gt;&lt;/p&gt;</code></p><ul><li>block</li></ul><p>值为block的为块级元素， 如：p、form、header、footer、section</p><ul><li>inline</li></ul><p>值为inline的为行内元素</p><h3 id="position"><a href="#position" class="headerlink" title="position"></a>position</h3><ul><li>static</li></ul><p>static是默认值，一个static元素表示它不会被”positioned”,一个position属性被设置为其它值得元素表示它会被”positioned”</p><ul><li>relative</li></ul><p>relative,在一个相对定位（position属性的值为relative）的元素上设置 top 、 right 、 bottom 和 left 属性会使其偏离其正常位置。<br>其他的元素的位置则不会受该元素的影响发生位置改变来弥补它偏离后剩下的空隙。</p><ul><li>fixed</li></ul><p>fixed,一个固定定位（position属性的值为fixed）元素会相对于视窗来定位，这意味着即便页面滚动，它还是会停留在相同的位置。<br>和 relative 一样， top 、 right 、 bottom 和 left 属性都可用。</p><ul><li>absolute</li></ul><p>absolute, 它与 fixed 的表现类似，但是它不是相对于视窗而是相对于最近的“positioned”祖先元素。<br>如果绝对定位（position属性的值为absolute）的元素没有“positioned”祖先元素，那么它是相对于文档的 body 元素，并且它会随着页面滚动而移动。<br>记住一个“positioned”元素是指 position 值不是 static 的元素。</p><h3 id="mbp"><a href="#mbp" class="headerlink" title="mbp"></a>mbp</h3><p><img src="https://mdn.mozillademos.org/files/13647/box-model-standard-small.png" alt=""></p><ul><li><p>margin</p><blockquote><p>是设置两个标签的间隔，也就是距离</p></blockquote></li><li><p>padding</p><blockquote><p>比如一个p标签，它是100px*100px,我们使用的时候p标签的文字是贴着p标签的最左侧的，想要它的文字距离边界远一点，好看一点，就是需要做一个样式的调整，我们可以用到padding这个属性，假如说设置是10px，就是说这个p标签的大小依然是100px<em>100px，但是它的内容是变成了90px\</em>90px；</p></blockquote></li><li><p>border</p><blockquote><p>boarder是设置边框的意思，他和padding的区别在于，padding是在标签边缘往里缩减，而border是在标签的边缘往外扩展，也就是说是一个100px*100px的标签，我设置他的border为20px，我们就可以看到整个标签的大小是变成了120px*120px，也就是说多出来了120px，其标签的内容也还是100px*100px的</p></blockquote></li></ul>]]></content>
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> snippet </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>websocket tracking</title>
      <link href="/2015/12/18/websocket%20snippit/"/>
      <url>/2015/12/18/websocket%20snippit/</url>
      <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/LOVELONG8808/article/details/52235132" target="_blank" rel="noopener">https://blog.csdn.net/LOVELONG8808/article/details/52235132</a></p><p><a href="https://blog.csdn.net/w1992wishes/article/details/79583543" target="_blank" rel="noopener">https://blog.csdn.net/w1992wishes/article/details/79583543</a></p><hr><p>WebSocket API是下一代客户端-服务器的异步通信方法。<br>WebSocket API最伟大之处在于服务器和客户端可以在给定的时间范围内的任意时刻，相互推送信息。<br>WebSocket并不限于以Ajax(或XHR)方式通信，因为Ajax技术需要客户端发起请求，而WebSocket服务器和客户端可以彼此相互推送信息；<br>​    XHR受到域的限制，而WebSocket允许跨域通信。<br>​    Ajax技术很聪明的一点是没有设计要使用的方式。WebSocket为指定目标创建，用于双向推送消息。</p><hr><p>activemq是消息中间件，主要实现是队列。用于处理消息。 </p><h2 id="websocket是-html5的一种传议实现前台向后台，后台向前台发出请求。"><a href="#websocket是-html5的一种传议实现前台向后台，后台向前台发出请求。" class="headerlink" title="websocket是 html5的一种传议实现前台向后台，后台向前台发出请求。"></a>websocket是 html5的一种传议实现前台向后台，后台向前台发出请求。</h2><p>websocket是HTML5协议，实时，全双工通信，长连接。WebSocket的服务端可以将数据推送到客户端，<br>​    如实时将证券信息反馈到客户端，实时天气数据，比http请求响应模式更灵活，代替了以往一些需要轮训的业务。</p><p>STOMP协议的前身是TTMP协议（一个简单的基于文本的协议），专为消息中间件设计。</p><p>这两个协议的介绍来看设计的目的不同。目前一些消息队列都是基于STOMP协议的比如ActiveMQ，RabbitMQ，消息队列一般用于一些需要异步处理的服务器任务或者一些通知类的任务。</p><p>websocket更多的使用场景是需要服务端主动通知客户端的实时通讯业务。</p>]]></content>
      
      <categories>
          
          <category> websocket </category>
          
      </categories>
      
      
        <tags>
            
            <tag> learn </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>database snippet</title>
      <link href="/2015/12/16/mysql%20snippet/"/>
      <url>/2015/12/16/mysql%20snippet/</url>
      <content type="html"><![CDATA[<h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><ul><li><p>the size of blob column</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  A BLOB can be 65535 bytes (64 KB) maximum.</span><br><span class="line">If you need more consider using:</span><br><span class="line">a MEDIUMBLOB for 16777215 bytes (16 MB)</span><br><span class="line">a LONGBLOB for 4294967295 bytes (4 GB).</span><br></pre></td></tr></table></figure></li><li><p>join sql<br><img src="https://i.stack.imgur.com/VQ5XP.png" alt=""></p></li><li><p>string convert to timstamp</p><p><code>SELECT STR_TO_DATE(&#39;2014-05-28 11:30:10&#39;,&#39;%Y-%m-%d %H:%i:%s&#39;);</code></p></li></ul><h3 id="sql语句"><a href="#sql语句" class="headerlink" title="sql语句"></a>sql语句</h3><ul><li>IN</li></ul><p>确定给定的值是否与子查询或列表中的值相匹配。in在查询的时候，首先查询子查询的表，然后将内表和外表做一个笛卡尔积，然后按照条件进行筛选。所以相对内表比较小的时候，in的速度较快。 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    *</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    <span class="string">`user`</span></span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    <span class="string">`user`</span>.id <span class="keyword">IN</span> (</span><br><span class="line">        <span class="keyword">SELECT</span></span><br><span class="line">            <span class="string">`order`</span>.user_id</span><br><span class="line">        <span class="keyword">FROM</span></span><br><span class="line">            <span class="string">`order`</span></span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p>以上查询使用了in语句,in()只执行一次,它查出B表中的所有id字段并缓存起来.之后,检查A表的id是否与B表中的id相等,如果相等则将A表的记录加入结果集中,直到遍历完A表的所有记录。</p><p>可以看出,当B表数据较大时不适合使用in(),因为它会B表数据全部遍历一次. 如:A表有10000条记录,B表有1000000条记录,那么最多有可能遍历10000<code>*</code>1000000次,效率很差. 再如:A表有10000条记录,B表有100条记录,那么最多有可能遍历10000*100次,遍历次数大大减少,效率大大提升。</p><ul><li>exists</li></ul><p>指定一个子查询，检测行的存在。遍历循环外表，然后看外表中的记录有没有和内表的数据一样的。匹配上就将结果放入结果集中。 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> a.* <span class="keyword">from</span> A a <span class="keyword">where</span> <span class="keyword">exists</span>(<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> B b <span class="keyword">where</span> a.id=b.id)</span><br></pre></td></tr></table></figure><p>以上查询使用了exists语句,exists()会执行A.length次,它并不缓存exists()结果集,因为exists()结果集的内容并不重要,重要的是结果集中是否有记录,如果有则返回true,没有则返回false。</p><p>当B表比A表数据大时适合使用exists(),因为它没有那么遍历操作,只需要再执行一次查询就行. 如:A表有10000条记录,B表有1000000条记录,那么exists()会执行10000次去判断A表中的id是否与B表中的id相等. 如:A表有10000条记录,B表有100000000条记录,那么exists()还是执行10000次,因为它只执行A.length次,可见B表数据越多,越适合exists()发挥效果. 再如:A表有10000条记录,B表有100条记录,那么exists()还是执行10000次,还不如使用in()遍历10000*100次,因为in()是在内存里遍历比较,而exists()需要查询数据库,我们都知道查询数据库所消耗的性能更高,而内存比较很快. </p><ul><li>where</li></ul><p>sql查询条件中<code>where 1=1,1=2和1=0</code>，这种写法，主要是为了拼凑动态的sql语句，如果使用不好会起到副作用的，是根据个人的一些习惯，是为了避免where 关键字后面的第一个词直接就是 “and”而导致语法错误，是为了后面附加and …方便程序逻辑处理用的。 </p><ul><li><p>select count(*)和select count(1)的区别</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一般情况下，Select Count(*)和Select Count(1)两着返回结果是一样的，假如表没有主键(Primary key), 那么count(1)比count(*)快，如果有主键的话，那主键作为count的条件时候count(主键)最快，如果你的表只有一个字段的话那count(*)就是最快的。</span><br></pre></td></tr></table></figure></li></ul><h3 id="事物隔离级别"><a href="#事物隔离级别" class="headerlink" title="事物隔离级别"></a>事物隔离级别</h3><ul><li><p>read uncommitted（读取未提交数据）</p><blockquote><p>我们将事务隔离级别设置为read uncommitted，即便是事务没有commit，但是我们仍然能读到未提交的数据，这是所有隔离级别中最低的一种。</p><p>脏读</p></blockquote></li><li><p>read committed（可以读取其他事务提交的数据）</p><blockquote><p>大多数数据库默认的隔离级别;</p><p>当我们将当前会话的隔离级别设置为read committed的时候，当前会话只能读取到其他事务提交的数据，未提交的数据读不到。</p></blockquote></li><li><p>repeatable read（可重读）</p><blockquote><p>MySQL默认的隔离级别</p><p>当我们将当前会话的隔离级别设置为repeatable read的时候，当前会话可以重复读，就是每次读取的结果集都相同，而不管其他事务有没有提交。</p><p>幻读</p></blockquote></li><li><p>serializable（串行化）</p><blockquote><p>当我们将当前会话的隔离级别设置为serializable的时候，其他会话对该表的写操作将被挂起。可以看到，这是隔离级别中最严格的，但是这样做势必对性能造成影响。所以在实际的选用上，我们要根据当前具体的情况选用合适的。</p></blockquote></li></ul><h3 id="DDL-VS-DML"><a href="#DDL-VS-DML" class="headerlink" title="DDL VS DML"></a>DDL VS DML</h3><p>DML statements are SQL statements that manipulate data. DML stands for Data Manipulation Language. The SQL statements that are in the DML class are INSERT, UPDATE and DELETE. Some people also lump the SELECT statement in the DML classification.</p><p>Data Definition Languages (DDL) are used to define the database structure. Any CREATE, DROP and ALTER commands are examples of DDL SQL statements.</p>]]></content>
      
      <categories>
          
          <category> database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> snippet </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>linux command</title>
      <link href="/2015/10/16/linux%20command/"/>
      <url>/2015/10/16/linux%20command/</url>
      <content type="html"><![CDATA[<p><a href="https://linuxconfig.org/bash-scripting-tutorial-for-beginners" target="_blank" rel="noopener">Bash Scripting Tutorial for Beginners</a></p><h3 id="Bash-Shell-Scripting-Definition"><a href="#Bash-Shell-Scripting-Definition" class="headerlink" title="Bash Shell Scripting Definition"></a>Bash Shell Scripting Definition</h3><ul><li>Bash:Bourne-Again SHell<br>Bash is a command language interpreter. <h2 id="conclusion"><a href="#conclusion" class="headerlink" title="conclusion"></a>conclusion</h2>Do not be afraid to break things as that is perfectly normal. Troubleshooting and fixing code is perhaps the best booster for you to enhance your understanding of bash scripting and to improve your ability.</li></ul><p><a href="https://linuxconfig.org/bash-scripting-tutorial#h24-stdout-to-screen" target="_blank" rel="noopener">Bash scripting Tutorial</a></p><h2 id="session"><a href="#session" class="headerlink" title="session"></a>session</h2><ul><li>kill seesion <code>screen -X -S [session # you want to kill] quit</code></li><li>新建screen会话           screen -S xxx</li><li>恢复指定会话               screen -r xxx</li><li>查看所有会话                screen -ls</li><li>删除指定会话                screen -S xxx -X quit</li><li>回到终端                        Ctrl-a d</li></ul><h2 id="PORT"><a href="#PORT" class="headerlink" title="PORT"></a>PORT</h2><ul><li><p>Check the listening ports</p><p>Run any one of the following command:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo lsof -i -P -n | grep LISTEN </span><br><span class="line">sudo netstat -tulpn | grep LISTEN</span><br><span class="line">sudo nmap -sTU -O IP-address-Here</span><br></pre></td></tr></table></figure></li><li><p>checking remote system tcp 80 port status</p><ol><li><p>Telnet</p></li><li><p>nc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> nc -zvw10 192.168.0.1 22</span><br><span class="line">其中参数：</span><br><span class="line">z: zero-I/O mode which is used for scanning</span><br><span class="line">v: for verbose output</span><br><span class="line">w10: timeout wait seconds</span><br></pre></td></tr></table></figure></li></ol></li></ul><ol start="3"><li>nmap<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">telnet myserver.com 80 </span><br><span class="line">nc -v myserver.com 80</span><br><span class="line">nc -vn 192.168.40.146 2424</span><br><span class="line">nmap myserver.com 80</span><br></pre></td></tr></table></figure></li></ol><ul><li><p>通过进程名查看占用端口</p><ul><li>先查看进程pid    <code>ps -ef | grep 进程名</code></li><li>再通过pid查看占用端口    <code>netstat -nap | grep 进程pid</code></li></ul></li><li><p>通过端口查看进程</p><p><code>netstat -nap | grep 端口号</code>或<code>netstat -apn | grep 端口号</code></p><p><code>netstat -tln | grep 8080</code> 查看端口8080的使用情况</p></li></ul><h2 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h2><ul><li>c – Creates a new .tar archive file.</li><li><p>x — to untar or extract a tar file</p></li><li><p>v – Verbosely show the .tar file progress.</p></li><li><p>f – File name type of the archive file.</p></li><li><p>z — gzip archive file</p></li><li>j —  bz2 feature compress and create archive file</li><li>t — to list the contents of tar archive file</li></ul><h2 id="firewall"><a href="#firewall" class="headerlink" title="firewall"></a>firewall</h2><ul><li>check status : <code>sudo ufw status</code></li><li><p>enable firewall: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ufw <span class="built_in">enable</span></span><br><span class="line">Command may disrupt existing ssh connections. Proceed with operation (y|n)? y</span><br><span class="line">Firewall is active and enabled on system startup</span><br></pre></td></tr></table></figure></li><li><p>disable firewall</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ufw <span class="built_in">disable</span></span><br><span class="line">Firewall stopped and disabled on system startup</span><br></pre></td></tr></table></figure></li></ul><h3 id="查看系统配置"><a href="#查看系统配置" class="headerlink" title="查看系统配置"></a>查看系统配置</h3><ul><li>查看内核<ul><li><code>cat /proc/version</code></li><li><code>uname -a</code></li></ul></li><li>查看linux版本<ul><li><code>lsb_release -a</code></li><li><code>cat /etc/issue</code></li></ul></li></ul><h3 id="磁盘相关"><a href="#磁盘相关" class="headerlink" title="磁盘相关"></a>磁盘相关</h3><ul><li><p>查看系统磁盘占用情况    <code>df -h</code></p></li><li><p>查看目录下文件大小        <code>du -sh</code></p></li><li><p>查看当前目录下一级子文件和子目录占用的磁盘容量: <code>du -lh --max-depth=1</code></p></li></ul><h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><p>查找具体文件    <code>find / -name 文件名称</code></p><h3 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h3><p><code>ls -lh</code>以可读性G、M查看文件的大小</p><h3 id="history"><a href="#history" class="headerlink" title="history"></a>history</h3><p>查看历史命令，支持 grep过滤操作</p><h3 id="卸载安装的软件"><a href="#卸载安装的软件" class="headerlink" title="卸载安装的软件"></a>卸载安装的软件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">浏览已安装的程序dpkg --list</span><br><span class="line">卸载程序和所有配置文件sudo apt-get --purge remove &lt;programname&gt;</span><br><span class="line">只卸载程序sudo apt-get remove &lt;programname&gt;</span><br></pre></td></tr></table></figure><h3 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">r=4，w=2，x=1</span><br><span class="line">若要rwx属性则4+2+1=7；</span><br><span class="line">若要rw-属性则4+2=6；</span><br><span class="line">若要r-x属性则4+1=7</span><br></pre></td></tr></table></figure><p>###　安装deb文件出错时</p><p>使用<code>apt-get -f -y install</code>修复之后，再进行安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.执行命令sudo dpkg　-i　XXX.deb　返回依赖关系错误提示</span><br><span class="line">2.执行sudo apt-get -f install　这条命令将自动安装需要的依赖包．</span><br><span class="line">3.再次执行命令sudo dpkg　-i　XXX.deb　安装成功</span><br></pre></td></tr></table></figure><h2 id="光标"><a href="#光标" class="headerlink" title="光标"></a>光标</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Ctrl+a：光标回到命令行首。 （a：ahead）</span><br><span class="line">Ctrl+e：光标回到命令行尾。 （e：end）</span><br><span class="line">Ctrl+b：光标向行首移动一个字符。 （b：backwards）</span><br><span class="line">Ctrl+ f：光标向行尾移动一个字符。 （f：forwards）</span><br><span class="line">Ctrl+w: 删除光标处到行首的字符。</span><br><span class="line">Ctrl+k：删除光标处到行尾的字符。</span><br><span class="line">Ctrl+u：删除整个命令行文本字符。</span><br><span class="line">Ctrl+h：向行首删除一个字符。</span><br><span class="line">Ctrl+d：向行尾删除一个字符。</span><br></pre></td></tr></table></figure><h3 id="AWK"><a href="#AWK" class="headerlink" title="AWK"></a>AWK</h3><ul><li><p><code>awk -v FS=&quot;输入分隔符&quot; -v OFS=&#39;输出分隔符&#39; &#39;{if($1==$5) print $1,$5,$10} filename&#39;</code></p><p>查找filename文件（文件中列的分隔符为“输入分隔符”）中，每一行第一列和第五列相等的行，并输出第一列、第五列、第十列，切输出字段分隔符为“输出分隔符”。如果不配置FS和OFS，那么输入输出分隔符均默认为空</p></li><li><p><a href="https://www.commandlinefu.com/commands/view/6872/exclude-a-column-with-awk" target="_blank" rel="noopener">exclude a column with awk</a>, 比如打印除第5列的其它所有列</p><p>awk ‘{ $5=””; print }’ file</p></li></ul><h3 id="统计文件行数"><a href="#统计文件行数" class="headerlink" title="统计文件行数"></a>统计文件行数</h3><p>语法：wc [选项] 文件…</p><p>说明：该命令统计给定文件中的字节数、字数、行数。如果没有给出文件名，则从标准输入读取。wc同时也给出所有指定文件的总统计数。字是由空格字符区分开的最大字符串。</p><p>该命令各选项含义如下：</p><p>　　- c 统计字节数。</p><p>　　- l 统计行数。</p><p>　　- w 统计字数。</p><p>这些选项可以组合使用。</p><h3 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h3><p>使文件可以直接执行的命令：chmod +x filename</p><p>使所有用户对目录都有读写权限：sudo chmod ugo+rw /opt</p><h3 id="时区"><a href="#时区" class="headerlink" title="时区"></a>时区</h3><p><a href="https://www.cnblogs.com/zhangeamon/p/5500744.html" target="_blank" rel="noopener">CentOS 7 时区设置</a></p><h3 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h3><p>限定查询结果之后的前几行 <code>grep -m 10 &lt;pattern&gt; &lt;file&gt;</code></p><p>限定查询结果倒数的几行 <code>grep &lt;pattern&gt; &lt;file&gt; | tail -10</code></p><h3 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h3><ul><li><p>判断　day of year     </p><p><code>doy=$(date +%j)</code></p></li><li><p>制定日期减一天</p><p><code>date -d&quot;20140101 -1 days&quot; +&quot;%Y%m%d&quot;</code></p></li></ul><h3 id="剪切板"><a href="#剪切板" class="headerlink" title="剪切板"></a>剪切板</h3><p>将剪切板中的内容输出到文件     echo $(xsel –clipboard) &gt;&gt; a.txt </p><p>将文件的内容复制到剪切板         cat a.txt | xsel –clipboard</p><h4 id="securtCRT"><a href="#securtCRT" class="headerlink" title="securtCRT"></a>securtCRT</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">下载服务器文件sz filename</span><br><span class="line">上传本地文件 rz filename</span><br></pre></td></tr></table></figure><h4 id="格式化json"><a href="#格式化json" class="headerlink" title="格式化json"></a>格式化json</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo '&#123;"kind": "Service", "apiVersion": "v1", "status": &#123;"loadBalancer": true&#125;&#125;'|jq .</span><br></pre></td></tr></table></figure><h4 id="SED"><a href="#SED" class="headerlink" title="SED"></a>SED</h4><ul><li><p>替换字符</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i 's/Search_String/Replacement_String/g' Input_File</span><br></pre></td></tr></table></figure></li></ul><h4 id="转换文件编码格式"><a href="#转换文件编码格式" class="headerlink" title="转换文件编码格式"></a>转换文件编码格式</h4><p>首先我们来看看在 Linux 系统中如何查看文件的编码格式，可以在 vim 中使用如下命令查看：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:set fileencoding</span><br></pre></td></tr></table></figure><p>输出可能是这样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fileencoding=utf-81</span><br></pre></td></tr></table></figure><p>也可以使用 <code>file</code> 和 <code>identify</code> 命令查看。</p><p>然后使用 <code>iconv</code> 进行编码格式的转换，比如将一个 utf-8 编码的文件转换成 GBK 编码，命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> iconv -f UTF-8 -t GBK input.file -o output.file</span></span><br></pre></td></tr></table></figure><ul><li><p>如果遇到]iconv: 未知xxxx处的非法输入序列,一种解决方法是加入 -c选项：忽略无效字符</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iconv -c  -f gb2312 -t utf8 test.txt -o output.file</span><br></pre></td></tr></table></figure></li></ul><p>  iconv -f gb18030 -t UTF-8 input.file -o output.file</p><p>  gb18030</p><h3 id="tr命令"><a href="#tr命令" class="headerlink" title="tr命令"></a>tr命令</h3><p>tr – translate or delete characters </p><ul><li><p>大小写转换</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat file | tr A-Z a-z </span><br><span class="line">cat file | tr a-z A-Z</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> command </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>java 8</title>
      <link href="/2015/09/01/java%208%20feature/"/>
      <url>/2015/09/01/java%208%20feature/</url>
      <content type="html"><![CDATA[<h3 id="forEach-method-in-Iterable-interface"><a href="#forEach-method-in-Iterable-interface" class="headerlink" title="forEach() method in Iterable interface"></a>forEach() method in Iterable interface</h3><h3 id="default-and-static-methods-in-Interfaces"><a href="#default-and-static-methods-in-Interfaces" class="headerlink" title="default and static methods in Interfaces"></a>default and static methods in Interfaces</h3><ul><li>Java 8 introduces the “Default Method” or (Defender methods) feature, which allows the developer to add new methods to the interfaces without breaking their existing implementation. It provides the flexibility to allow interface to define implementation which will use as the default in a situation where a concrete class fails to provide an implementation for that method.</li></ul><h3 id="Functional-Interfaces-and-Lambda-Expressions"><a href="#Functional-Interfaces-and-Lambda-Expressions" class="headerlink" title="Functional Interfaces and Lambda Expressions"></a>Functional Interfaces and Lambda Expressions</h3><h4 id="Functional-Interfaces"><a href="#Functional-Interfaces" class="headerlink" title="Functional Interfaces"></a>Functional Interfaces</h4><blockquote><p>Being object oriented is not bad, but it brings a lot of verbosity to the program. Java 8 Functional Interfaces and Lambda Expressions help us in writing smaller and cleaner code by removing a lot of boiler-plate code.</p><ul><li>An interface with exactly one abstract method is called Functional Interface. @FunctionalInterface annotation is added so that we can mark an interface as functional interface.</li><li>Some of the useful java 8 functional interfaces are Consumer, Supplier, Function and Predicate.</li></ul></blockquote><h4 id="Lambda-Expression"><a href="#Lambda-Expression" class="headerlink" title="Lambda Expression"></a>Lambda Expression</h4><ul><li>Objects are the base of java programming language and we can never have a function without an Object, that’s why Java language provide support for using lambda expressions only with functional interfaces.</li><li>Lambda Expressions syntax is (argument) -&gt; (body). </li></ul><h3 id="Java-Stream-API-for-Bulk-Data-Operations-on-Collections"><a href="#Java-Stream-API-for-Bulk-Data-Operations-on-Collections" class="headerlink" title="Java Stream API for Bulk Data Operations on Collections"></a>Java Stream API for Bulk Data Operations on Collections</h3><h3 id="Java-Time-API"><a href="#Java-Time-API" class="headerlink" title="Java Time API"></a>Java Time API</h3><h3 id="Collection-API-improvements"><a href="#Collection-API-improvements" class="headerlink" title="Collection API improvements"></a>Collection API improvements</h3><h3 id="Concurrency-API-improvements"><a href="#Concurrency-API-improvements" class="headerlink" title="Concurrency API improvements"></a>Concurrency API improvements</h3><h3 id="Java-IO-improvements"><a href="#Java-IO-improvements" class="headerlink" title="Java IO improvements"></a>Java IO improvements</h3><h3 id="Miscellaneous-Core-API-improvements"><a href="#Miscellaneous-Core-API-improvements" class="headerlink" title="Miscellaneous Core API improvements"></a>Miscellaneous Core API improvements</h3>]]></content>
      
      <categories>
          
          <category> learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vim command</title>
      <link href="/2015/08/16/vim%20command/"/>
      <url>/2015/08/16/vim%20command/</url>
      <content type="html"><![CDATA[<p><img src="https://i.imgur.com/8ouxjED.png" alt="vimium"></p>]]></content>
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>session tracking</title>
      <link href="/2015/02/18/session%20tracking/"/>
      <url>/2015/02/18/session%20tracking/</url>
      <content type="html"><![CDATA[<h2 id="session"><a href="#session" class="headerlink" title="session"></a>session</h2><blockquote><p>Session simply means a particular interval of time.<br>Session Tracking is a way to maintain state (data) of an user. It is also known as session management in servlet.</p></blockquote><ul><li><p>HTTP is stateless that means each request is considered as the new request. It is shown in the figure given below:<br><img src="https://www.javatpoint.com/images/newrequest.JPG" alt=""></p></li><li><p>There are four techniques used in Session tracking:</p><ul><li>Cookies</li><li>Hidden Form Field</li><li>URL Rewriting</li><li>HttpSession</li></ul></li></ul><h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><blockquote><p>A cookie is a small piece of information that is persisted between the multiple client requests.<br>A cookie has a name, a single value, and optional attributes such as a comment, path and domain qualifiers, a maximum age, and a version number.</p></blockquote><h3 id="how-cookie-work"><a href="#how-cookie-work" class="headerlink" title="how cookie work"></a>how cookie work</h3><p><img src="https://www.javatpoint.com/phppages/images/cookie.png" alt=""></p><h3 id="type-of-cookie"><a href="#type-of-cookie" class="headerlink" title="type of cookie"></a>type of cookie</h3><ul><li><p>Non-persistent cookie</p><blockquote><p>It is valid for single session only. It is removed each time when user closes the browser.</p></blockquote></li><li><p>Persistent cookie</p><blockquote><p>It is valid for multiple session . It is not removed each time when user closes the browser. It is removed only if user logout or signout.</p></blockquote></li><li><p>Advantage </p><ul><li>Simplest technique of maintaining the state.</li><li>Cookies are maintained at client side.</li></ul></li><li>Disadvantage<ul><li>It will not work if cookie is disabled from the browser.</li><li>Only textual information can be set in Cookie object.</li></ul></li></ul><h2 id="HttpSession-Interface"><a href="#HttpSession-Interface" class="headerlink" title="HttpSession Interface"></a>HttpSession Interface</h2><ul><li>An object of HttpSession can be used to perform two tasks:<ul><li>bind objects</li><li>view and manipulate information about a session, such as the session identifier, creation time, and last accessed time.<br><img src="https://www.javatpoint.com/images/httpsession.JPG" alt=""></li></ul></li></ul>]]></content>
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> learn </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>java servlet</title>
      <link href="/2015/02/16/java%20servlet/"/>
      <url>/2015/02/16/java%20servlet/</url>
      <content type="html"><![CDATA[<h2 id="Web-Application"><a href="#Web-Application" class="headerlink" title="Web Application"></a>Web Application</h2><h3 id="HTML-and-HTTP"><a href="#HTML-and-HTTP" class="headerlink" title="HTML and HTTP"></a>HTML and HTTP</h3><ul><li>HTML:HyperText Markup Language.</li><li>HTTP:HyperText Transfer Protocol<ul><li>HTTP is the communication protocol between server and client. HTTP runs on top of TCP/IP communication protocol.</li><li>Port numbers 0 to 1023 are reserved ports for well known services, for example 80 for HTTP, 443 for HTTPS, 21 for FTP etc.</li></ul></li><li>Java Servlet and JSPs are server side technologies to extend the capability of web servers by providing support for dynamic response and data persistence.</li></ul><h3 id="Web-Container"><a href="#Web-Container" class="headerlink" title="Web Container"></a>Web Container</h3><ul><li>When web container gets the request and if it’s for servlet then container creates two Objects HTTPServletRequest and HTTPServletResponse. Then it finds the correct servlet based on the URL and creates a thread for the request. Then it invokes the servlet service() method and based on the HTTP method service() method invokes doGet() or doPost() methods. Servlet methods generate the dynamic page and write it to response. Once servlet thread is complete, container converts the response to HTTP response and send it back to client.</li><li>Some of the important work done by web container are:<ul><li>Communication Support – Container provides easy way of communication between web server and the servlets and JSPs. Because of container, we don’t need to build a server socket to listen for any request from web server, parse the request and generate response. All these important and complex tasks are done by container and all we need to focus is on our business logic for our applications.<ul><li>Lifecycle and Resource Management – Container takes care of managing the life cycle of servlet. Container takes care of loading the servlets into memory, initializing servlets, invoking servlet methods and destroying them. Container also provides utility like JNDI for resource pooling and management.</li><li>Multithreading Support – Container creates new thread for every request to the servlet and when it’s processed the thread dies. So servlets are not initialized for each request and saves time and memory.</li><li>JSP Support – JSPs doesn’t look like normal java classes and web container provides support for JSP. Every JSP in the application is compiled by container and converted to Servlet and then container manages them like other servlets.</li><li>Miscellaneous Task – Web container manages the resource pool, does memory optimizations, run garbage collector, provides security configurations, support for multiple applications, hot deployment and several other tasks behind the scene that makes our life easier.</li></ul></li></ul></li><li>Java Web Applications are packaged as Web Archive (WAR) and it has a defined structure.<br><img src="https://cdn.journaldev.com/wp-content/uploads/2013/08/WAR-directory-structure.png" alt=""></li></ul><h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><ul><li>Servlet API Hierarchy<br><img src="https://cdn.journaldev.com/wp-content/uploads/2013/08/Servlet-Hierarchy.png" alt=""></li></ul><h2 id="Session-Management"><a href="#Session-Management" class="headerlink" title="Session Management"></a>Session Management</h2><h3 id="What-is-a-Session"><a href="#What-is-a-Session" class="headerlink" title="What is a Session?"></a>What is a Session?</h3><ul><li>HTTP protocol and Web Servers are stateless, what it means is that for web server every request is a new request to process and they can’t identify if it’s coming from client that has been sending request previously.</li><li>Session is a conversional state between client and server and it can consists of multiple request and response between client and server. Since HTTP and Web Server both are stateless, the only way to maintain a session is when some unique information about the session (session id) is passed between server and client in every request and response.</li></ul><h3 id="JSESSIONID-Cookie"><a href="#JSESSIONID-Cookie" class="headerlink" title="JSESSIONID Cookie"></a>JSESSIONID Cookie</h3><ul><li>When we use HttpServletRequest getSession() method and it creates a new request, it creates the new HttpSession object and also add a Cookie to the response object with name JSESSIONID and value as session id. This cookie is used to identify the HttpSession object in further requests from client. If the cookies are disabled at client side and we are using URL rewriting then this method uses the jsessionid value from the request URL to find the corresponding session. JSESSIONID cookie is used for session tracking, so we should not use it for our application purposes to avoid any session related issues.</li><li>When a JSP resource is used, container automatically creates a session for it, so we can’t check if session is null to make sure if user has come through login page, so we are using session attribute to validate request.</li><li>As we saw in last section that we can manage a session with HttpSession but if we disable the cookies in browser, it won’t work because server will not receive the JSESSIONID cookie from client. </li></ul><h4 id="Cookie-Basics"><a href="#Cookie-Basics" class="headerlink" title="Cookie Basics"></a>Cookie Basics</h4><ul><li>a cookie is a small piece of data stored on the client-side which servers use when communicating with clients.They’re used to identify a client when sending a subsequent request. They can also be used for passing some data from one servlet to another.</li></ul>]]></content>
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> learn </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>linux config</title>
      <link href="/2015/01/16/linux%20config/"/>
      <url>/2015/01/16/linux%20config/</url>
      <content type="html"><![CDATA[<h3 id="java-config"><a href="#java-config" class="headerlink" title="java config"></a>java config</h3><ul><li>Use <code>java -XshowSettings:properties</code> to show the java.library.path (and others) value.</li></ul><h3 id="native-lib-config"><a href="#native-lib-config" class="headerlink" title="native lib config"></a>native lib config</h3><ul><li><code>/lib</code> contain “essential” libraries that may be needed even in single-user (admin-only) mode and without /usr mounted</li><li><code>/usr/lib</code> are the libraries for the normal user-programs, that mostly can be found under /usr.</li><li><code>/usr/local/lib</code> are the libraries for locally installed programs and packages ie. things you’ve compiled and installed from source-packages yourself.</li></ul><h3 id="other"><a href="#other" class="headerlink" title="other"></a>other</h3><ul><li><code>/etc/environment</code>是设置整个系统的环境，而<code>/etc/profile</code>是设置所有用户的环境 </li></ul><h3 id="vmware-centos-ip-config"><a href="#vmware-centos-ip-config" class="headerlink" title="vmware centos ip config"></a>vmware centos ip config</h3><ol><li><code>vi /etc/sysconfig/network-scripts/ifcfg-ens33</code>,设置<code>ONBOOT=yes</code></li><li><code>service network restart</code></li><li><code>ip a</code>查看ip</li></ol>]]></content>
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> config </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hello world</title>
      <link href="/2015/01/01/hello-world/"/>
      <url>/2015/01/01/hello-world/</url>
      <content type="html"><![CDATA[<h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><h3 id="Clean"><a href="#Clean" class="headerlink" title="Clean"></a>Clean</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/1970/01/01/Untitled/"/>
      <url>/1970/01/01/Untitled/</url>
      <content type="html"><![CDATA[]]></content>
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/1970/01/01/yarn%20snippet/"/>
      <url>/1970/01/01/yarn%20snippet/</url>
      <content type="html"><![CDATA[]]></content>
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/1970/01/01/hive%20snippet/"/>
      <url>/1970/01/01/hive%20snippet/</url>
      <content type="html"><![CDATA[<h1 id="hive中几种分割符"><a href="#hive中几种分割符" class="headerlink" title="hive中几种分割符"></a>hive中几种分割符</h1><p><strong>分隔符</strong></p><p>\n    每行一条记录<br>^A    分隔列（八进制 \001）<br>^B    分隔ARRAY或者STRUCT中的元素，或者MAP中多个键值对之间分隔（八进制 \002）<br>^C    分隔MAP中键值对的“键”和“值”（八进制 \003）</p><p><strong>用到了系统默认分隔符。通常下面2中情况我们需要需要用到分隔符</strong></p><p>1，制作table的输入文件，有时候我们需要输入一些特殊的分隔符</p><p>2，把hive表格导出到本地时，系统默认的分隔符是^A，这个是特殊字符，直接cat或者vim是看不到的</p><p><strong>分隔符在HIVE中的用途</strong></p><table><thead><tr><th>分隔符</th><th>描述</th></tr></thead><tbody><tr><td>\n</td><td>对于文本文件来说，每行都是一条记录，因此换行符可以分隔记录</td></tr><tr><td>^A(Ctrl+A)</td><td>用于分隔字段(列)。在CREATE TABLE语句中可以使用八进制编码\001表示</td></tr><tr><td>^B(Ctrl+B)</td><td>用于分隔ARRAY或者STRUCT中的元素，或用于MAP中键-值对之间的分隔。在CREATE TABLE语句中可以使用八进制编码\002表示</td></tr><tr><td>^C(Ctrl+C)</td><td>用于MAP中键和值之间的分隔。在CREATE TABLE语句中可以使用八进制编码\003表示</td></tr></tbody></table><blockquote><p>Hive 中没有定义专门的数据格式，数据格式可以由用户指定，用户定义数据格式需要指定三个属性：列分隔符（通常为空格、”\t”、”\x001″）、行分隔符（”\n”）以及读取文件数据的方法。由于在加载数据的过程中，不需要从用户数据格式到 Hive 定义的数据格式的转换，因此，Hive 在加载的过程中不会对数据本身进行任何修改，而只是将数据内容复制或者移动到相应的 HDFS 目录中。</p></blockquote><p>我们可以在create表格的时候，选择如下，表格加载input的文件的时候就会按照下面格式匹配</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">row format delimited </span><br><span class="line">fields terminated by &apos;\001&apos; </span><br><span class="line">collection items terminated by &apos;\002&apos; </span><br><span class="line">map keys terminated by &apos;\003&apos;</span><br><span class="line">lines terminated by &apos;\n&apos; </span><br><span class="line">stored as textfile;</span><br></pre></td></tr></table></figure><h3 id="如何查看和修改分割符，特殊符号"><a href="#如何查看和修改分割符，特殊符号" class="headerlink" title="如何查看和修改分割符，特殊符号"></a>如何查看和修改分割符，特殊符号</h3><ol><li>查看隐藏字符的方法</li></ol><p>1.1，cat -A filename</p><p><img src="http://image.okcode.net/26FFE1BCC5620E19E94B26122C71BA2E.png" alt="img"></p><p>1.2，vim filename后 命令模式下输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set list显示特殊符号</span><br><span class="line">set nolist 取消显示特殊符号</span><br></pre></td></tr></table></figure><ol start="2"><li>修改隐藏字符的方法</li></ol><p>首先按照1.2打开显示特殊符号。进入INSERT模式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ctrl + V 可以输入 ^符号</span><br><span class="line">ctrl + a 可以输入A---&apos;\001&apos;</span><br><span class="line">ctrl + b 可以输入A---&apos;\002&apos;</span><br><span class="line">ctrl + c 可以输入A---&apos;\003&apos;</span><br></pre></td></tr></table></figure><p> 注意：虽然键盘上你能找到^和A但直接输入时不行的，必须按照上面的方法输入。</p><p>第一行是特殊符号颜色蓝色，第二行直接输入不是特殊符号。</p><p><img src="http://image.okcode.net/DD9ED976ABB6F4313B8F0F7C2DD5C33E.png" alt="img"></p><p>特殊号直接cat是不可以看见的，但是第二行是可见的，所以不是特殊符号。</p><p><img src="http://image.okcode.net/75D96F800A1815F7A84A8CF543BD7063.png" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ROW FORMAT DELIMITED </span><br><span class="line">FIELDS TERMINATED BY &apos;\u0001&apos; </span><br><span class="line">COLLECTION ITEMS TERMINATED BY &apos;\u0002&apos; </span><br><span class="line">MAP KEYS TERMINATED BY &apos;\u0003&apos;</span><br><span class="line">\u0001是ASCII编码值，对应java代码中的&quot;\001&quot;</span><br></pre></td></tr></table></figure><p>意义如下：</p><p>（1）FIELDS，字段之间的分隔符是’\u0001’</p><p>（2）COLLECTION ITEMS，多个集合之间的分隔符是’\u0002’，例如（kv1，kv2，kv3）这种多个键值对之间的分隔符就是’\u0002’</p><p>（3）MAP KEYS，单个map的k和v之间的分隔符是\u0003\，例如kv1里，k \u0003 v</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/1970/01/01/hadoop%20snippt/"/>
      <url>/1970/01/01/hadoop%20snippt/</url>
      <content type="html"><![CDATA[<h2 id="1-Create-a-directory-in-HDFS-at-given-path-s"><a href="#1-Create-a-directory-in-HDFS-at-given-path-s" class="headerlink" title="1. Create a directory in HDFS at given path(s)."></a>1. Create a directory in HDFS at given path(s).</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Usage:</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs -mkdir &lt;paths&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Example:</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop dfs -mkdir /user/saurzcode/dir1 /user/saurzcode/dir2</span><br></pre></td></tr></table></figure><h2 id="2-List-the-contents-of-a-directory"><a href="#2-List-the-contents-of-a-directory" class="headerlink" title="2.  List the contents of a directory."></a>2.  List the contents of a directory.</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Usage :</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs -ls &lt;args&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Example:</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs -ls /user/saurzcode</span><br></pre></td></tr></table></figure><h2 id="3-Upload-and-download-a-file-in-HDFS"><a href="#3-Upload-and-download-a-file-in-HDFS" class="headerlink" title="3. Upload and download a file in HDFS."></a>3. Upload and download a file in HDFS.</h2><p><strong>Upload:</strong></p><p><strong>hdfs fs -put:</strong></p><p>Copy single src file, or multiple src files from local file system to the hdfs data file system</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Usage:</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs -put &lt;localsrc&gt; ... &lt;HDFS_dest_Path&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Example:</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs -put /home/saurzcode/Samplefile.txt  /user/saurzcode/dir3/</span><br></pre></td></tr></table></figure><p><strong>*Download:*</strong></p><p><strong>hdfs fs -get:</strong></p><p>Copies/Downloads files to the local file system</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Usage:</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs -get &lt;hdfs_src&gt; &lt;localdst&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Example:</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs -get /user/saurzcode/dir3/Samplefile.txt /home/</span><br></pre></td></tr></table></figure><h2 id="4-See-contents-of-a-file"><a href="#4-See-contents-of-a-file" class="headerlink" title="4. See contents of a file"></a>4. See contents of a file</h2><p>Same as unix cat command:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Usage:</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs -cat &lt;path[filename]&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Example:</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs -cat /user/saurzcode/dir1/abc.txt</span><br></pre></td></tr></table></figure><h2 id="5-Copy-a-file-from-source-to-destination"><a href="#5-Copy-a-file-from-source-to-destination" class="headerlink" title="5. Copy a file from source to destination"></a>5. Copy a file from source to destination</h2><p>This command allows multiple sources as well in which case the destination must be a directory.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Usage:</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs -cp &lt;source&gt; &lt;dest&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Example:</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs -cp /user/saurzcode/dir1/abc.txt /user/saurzcode/dir2</span><br></pre></td></tr></table></figure><h2 id="6-Copy-a-file-from-To-Local-file-system-to-HDFS"><a href="#6-Copy-a-file-from-To-Local-file-system-to-HDFS" class="headerlink" title="6. Copy a file from/To Local file system to HDFS"></a>6. Copy a file from/To Local file system to HDFS</h2><p><strong>copyFromLocal</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Usage:</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs -copyFromLocal &lt;localsrc&gt; URI</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Example:</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs -copyFromLocal /home/saurzcode/abc.txt  /user/saurzcode/abc.txt</span><br></pre></td></tr></table></figure><p>Similar to put command, except that the source is restricted to a local file reference.</p><p><strong>copyToLocal</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Usage:</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs -copyToLocal [-ignorecrc] [-crc] URI &lt;localdst&gt;</span><br></pre></td></tr></table></figure><p>Similar to get command, except that the destination is restricted to a local file reference.</p><h2 id="7-Move-file-from-source-to-destination"><a href="#7-Move-file-from-source-to-destination" class="headerlink" title="7. Move file from source to destination."></a>7. Move file from source to destination.</h2><p>Note:- Moving files across filesystem is not permitted.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Usage :</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs -mv &lt;src&gt; &lt;dest&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Example:</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs -mv /user/saurzcode/dir1/abc.txt /user/saurzcode/dir2</span><br></pre></td></tr></table></figure><h2 id="8-Remove-a-file-or-directory-in-HDFS"><a href="#8-Remove-a-file-or-directory-in-HDFS" class="headerlink" title="8. Remove a file or directory in HDFS."></a>8. Remove a file or directory in HDFS.</h2><p>Remove files specified as argument. Deletes directory only when it is empty</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Usage :</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs -rm &lt;arg&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Example:</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs -rm /user/saurzcode/dir1/abc.txt</span><br></pre></td></tr></table></figure><p><strong>*Recursive version of delete.*</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Usage :</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs -rmr &lt;arg&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Example:</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs -rmr /user/saurzcode/</span><br></pre></td></tr></table></figure><h2 id="9-Display-last-few-lines-of-a-file"><a href="#9-Display-last-few-lines-of-a-file" class="headerlink" title="9. Display last few lines of a file."></a>9. Display last few lines of a file.</h2><p>Similar to tail command in Unix.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Usage :</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs -tail &lt;path[filename]&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Example:</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs -tail /user/saurzcode/dir1/abc.txt</span><br></pre></td></tr></table></figure><h2 id="10-Display-the-aggregate-length-of-a-file"><a href="#10-Display-the-aggregate-length-of-a-file" class="headerlink" title="10. Display the aggregate length of a file."></a>10. Display the aggregate length of a file.</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Usage :</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs -du &lt;path&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Example:</span><br><span class="line">hdfs dfs -du /user/saurzcode/dir1/abc.txt</span><br></pre></td></tr></table></figure><p>Please comment which of these commands you found most useful while dealing with Hadoop /HDFS.</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>next optimize</title>
      <link href="/1970/01/01/next%20optimize/"/>
      <url>/1970/01/01/next%20optimize/</url>
      <content type="html"><![CDATA[<h3 id="安装评论"><a href="#安装评论" class="headerlink" title="安装评论"></a>安装评论</h3><p><a href="https://zhuanlan.zhihu.com/p/33617273" target="_blank" rel="noopener">来必力评论</a></p><p><a href="https://sjq597.github.io/2018/05/18/Hexo-%E4%BD%BF%E7%94%A8Gitment%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/" target="_blank" rel="noopener">使用Gitment评论功能</a></p><h3 id="置顶功能"><a href="#置顶功能" class="headerlink" title="置顶功能"></a>置顶功能</h3><p><a href="https://donlex.cn/archives/caeb67e2.html" target="_blank" rel="noopener">添加置顶</a></p>]]></content>
      
      <categories>
          
          <category> next </category>
          
      </categories>
      
      
        <tags>
            
            <tag> optimize </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
