<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Algorithms + Data Structures = Programs</title>
      <link href="/2018/12/18/Algorithms%20+%20Data%20Structures%20=%20Programs/"/>
      <url>/2018/12/18/Algorithms%20+%20Data%20Structures%20=%20Programs/</url>
      
        <content type="html"><![CDATA[<h3 id="What-is-a-Data-Structure"><a href="#What-is-a-Data-Structure" class="headerlink" title="What is a Data Structure"></a>What is a Data Structure</h3><blockquote><p>a data structure is a container that stores data in a specific layout. </p></blockquote><h3 id="Why-do-we-need-Data-Structure"><a href="#Why-do-we-need-Data-Structure" class="headerlink" title="Why do we need Data Structure"></a>Why do we need Data Structure</h3><blockquote><p>As data structures are used to store data in an organized form, and since data is the most crucial entity in computer science.</p><p>Based on different scenarios, data needs to be stored in a specific format. We have a handful of data structures that cover our need to store data in different formats.</p></blockquote><h3 id="Commonly-used-Data-Structure"><a href="#Commonly-used-Data-Structure" class="headerlink" title="Commonly used Data Structure"></a>Commonly used Data Structure</h3><h4 id="1-Arrays"><a href="#1-Arrays" class="headerlink" title="1. Arrays"></a>1. Arrays</h4><blockquote><p>An array is the simplest and most widely used data structure. Other data structures like stacks and queues are derived from arrays.</p></blockquote><ul><li>the two types of arrays:<ul><li>One-dimensional arrays</li><li>Multi-dimensional arrays</li></ul></li><li>basic operations<ul><li>Inserts an element at given index</li><li>Get — Returns the element at given index</li><li>Delete — Deletes an element at given index</li><li>Size — Get the total number of elements in array</li></ul></li></ul><h4 id="2-Stacks"><a href="#2-Stacks" class="headerlink" title="2. Stacks"></a>2. Stacks</h4><blockquote><p>LIFO (Last In First Out)</p></blockquote><ul><li>basic operations<ul><li>Push — Inserts an element at the top</li><li>Pop — Returns the top element after removing from the stack</li><li>isEmpty — Returns true if the stack is empty</li><li>Top — Returns the top element without removing from the stack</li></ul></li></ul><h4 id="3-Queues"><a href="#3-Queues" class="headerlink" title="3. Queues"></a>3. Queues</h4><blockquote><p>Similar to Stack, Queue is another linear data structure that stores the element in a sequential manner. The only significant difference between Stack and Queue is that instead of using the LIFO method, Queue implements the FIFO method, which is short for First in First Out.</p></blockquote><ul><li>basic operations<ul><li>Enqueue() — Inserts element to the end of the queue</li><li>Dequeue() — Removes an element from the start of the queue</li><li>isEmpty() — Returns true if queue is empty</li><li>Top() — Returns the first element of the queue</li></ul></li></ul><h4 id="4-Linked-List"><a href="#4-Linked-List" class="headerlink" title="4. Linked List"></a>4. Linked List</h4><blockquote><p>A linked list is like a chain of nodes, where each node contains information like data and a pointer to the succeeding node in the chain.</p></blockquote><ul><li>the types of linked lists<ul><li>Singly Linked List (Unidirectional)</li><li>Doubly Linked List (Bi-directional)</li></ul></li><li>basic operations<ul><li><em>InsertAtEnd</em> — Inserts given element at the end of the linked list</li><li><em>InsertAtHead</em> — Inserts given element at the start/head of the linked list</li><li><em>Delete</em> — Deletes given element from the linked list</li><li><em>DeleteAtHead</em> — Deletes first element of the linked list</li><li><em>Search</em> — Returns the given element from a linked list</li><li><em>isEmpty</em> — Returns true if the linked list is empty</li></ul></li></ul><h4 id="5-Graphs"><a href="#5-Graphs" class="headerlink" title="5. Graphs"></a>5. Graphs</h4><blockquote><p>A graph is a set of nodes that are connected to each other in the form of a network. Nodes are also called vertices. A <strong>pair(x,y)</strong> is called an <strong>edge*</strong>,<em> which indicates that vertex <strong>x</strong> is connected to vertex <strong>y</strong>. An edge may contain weight/cost, showing how much cost is required to traverse from vertex x to y</em>.*</p></blockquote><p><img src="https://i.imgur.com/9sHq0Ek.png" alt=""></p><ul><li>types of Graphs<ul><li>Undirected Graph</li><li>Directed Graph</li></ul></li></ul><h4 id="6-Trees"><a href="#6-Trees" class="headerlink" title="6. Trees"></a>6. Trees</h4><blockquote><p>A tree is a hierarchical data structure consisting of vertices (nodes) and edges that connect them. Trees are similar to graphs, but the key point that differentiates a tree from the graph is that a cycle cannot exist in a tree.</p></blockquote><p><img src="https://i.imgur.com/R6zwf9U.png" alt=""></p><ul><li><p>the types of trees</p><ul><li>N-ary Tree</li><li>Balanced Tree</li><li>Binary Tree</li><li>Binary Search Tree</li><li>AVL Tree</li><li>Red Black Tree</li><li>2–3 Tree</li></ul><blockquote><p>Out of the above, Binary Tree and Binary Search Tree are the most commonly used trees.</p></blockquote></li></ul><h4 id="7-Trie"><a href="#7-Trie" class="headerlink" title="7. Trie"></a>7. Trie</h4><blockquote><p>Trie, which is also known as “Prefix Trees”, is a tree-like data structure which proves to be quite efficient for solving problems related to strings. It provides fast retrieval, and is mostly used for searching words in a dictionary, providing auto suggestions in a search engine, and even for IP routing.</p></blockquote><h4 id="8-Hash-Table"><a href="#8-Hash-Table" class="headerlink" title="8. Hash Table"></a>8. Hash Table</h4><blockquote><p>Hashing is a process used to uniquely identify objects and store each object at some pre-calculated unique index called its “key.”</p><p>Hash tables are generally implemented using arrays.</p></blockquote><ul><li>The performance of hashing data structure depends upon these three factors:<ul><li>Hash Function</li><li>Size of the Hash Table</li><li>Collision Handling Method</li></ul></li></ul><p>Here’s an illustration of how the hash is mapped in an array. The index of this array is calculated through a Hash Function.</p><p><img src="https://i.imgur.com/fkxWuxr.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> DSA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> snippet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rpc vs mq</title>
      <link href="/2018/12/08/rpc%20vs%20mq/"/>
      <url>/2018/12/08/rpc%20vs%20mq/</url>
      
        <content type="html"><![CDATA[<h3 id="系统结构"><a href="#系统结构" class="headerlink" title="系统结构"></a>系统结构</h3><ul><li><p>rpc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Consumer =&gt; Provider</span><br><span class="line">Consumer调用的Provider提供的服务。</span><br></pre></td></tr></table></figure><ul><li>同步调用，对于要等待返回结果/处理结果的场景，RPC是可以非常自然直觉的使用方式。</li><li>由于等待结果，Consumer（Client）会有线程消耗。</li><li>RPC也可以是异步调用，如果以异步RPC的方式使用，Consumer（Client）线程消耗可以去掉。但不能做到像消息一样暂存消息/请求，压力会直接传导到服务Provider。</li></ul></li><li><p>message queue</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Sender =&gt; Queue &lt;= Receiver</span><br><span class="line">Sender发送消息给Queue;Receiver从Queue拿到消息来处理</span><br></pre></td></tr></table></figure><ul><li>Message Queue把请求的压力保存一下，逐渐释放出来，让处理者按照自己的节奏来处理。</li><li>Message Queue引入一下新的结点，让系统的可靠性会受Message Queue结点的影响。</li><li>Message Queue是<strong>异步单向</strong>的消息。发送消息设计成是<strong>不需要等待</strong>消息处理的完成。</li></ul></li></ul><h3 id="见解"><a href="#见解" class="headerlink" title="见解"></a>见解</h3><ul><li>这两者可以拿来比较，但是个人感觉并不是同一个层面的问题。RPC是分布式服务之间调用的一种解决方案，是我们在做架构设计决策时同分布式对象，REST等层面的东西比较，决策的一个方案！ 消息系统更多是我们为了解决系统之间的解耦，以及性能问题等方面所考虑的方案。</li></ul>]]></content>
      
      
      <categories>
          
          <category> a vs b </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>words fragment</title>
      <link href="/2018/08/28/words%20fragment/"/>
      <url>/2018/08/28/words%20fragment/</url>
      
        <content type="html"><![CDATA[<h3 id="英文碎片"><a href="#英文碎片" class="headerlink" title="英文碎片"></a>英文碎片</h3><ul><li>Life is measured by thought and action, not by time.</li><li>Books and friends should be few but good.</li><li>Don’t give your past the power to define your future.</li><li>People will forget what you said, people will forget what you did, but people will never forget how you made them feel.</li><li>Success isn’t about being the best. It’s about always getting better.</li><li>Be yourself. Everyone else is already taken.</li><li>It’s kind of fun to do the impossible.</li><li>“Simplicity is the ultimate sophistication.”Leonardo da Vinci</li><li>Build a dream and the dream will build you.</li><li>Always make a total effort, even when the odds are against you.</li><li>You can, you should, and if you’re brave enough to start, you will.</li><li>Never give up, for that is just the place and time that the tide will turn.</li><li>Awareness is the greatest agent for change.</li><li>Nothing can dim the light which shines from within.</li><li>Our dreams can come true if we have the courage to pursue them.</li><li>Patience and perseverance have a magical effect before which difficulties disappear and obstacles vanish.</li><li>What you do makes a difference, and you have to decide what kind of difference you want to make.</li><li>The thing that is really hard, and really amazing, is giving up on being perfect and beginning the work of becoming yourself.</li><li>You are what you do, not what you say you’ll do.</li><li>This is the real secret to life—to be completely engaged with what you are doing in the here and now. And instead of calling it work, realize it is play.</li><li>I am strong because I’ve been weak. I am fearless because I’ve been afraid. I am wise because I’ve been foolish.</li><li>Every moment you live in the past is a moment you waste in the present.</li><li>Some changes look negative on the surface, but you will soon realize that space is being created in your life for something new to emerge.</li><li>The world breaks everyone and afterward many are strong at the broken places.</li><li>Don’t bury your failures. Let them inspire you.</li><li>Whether you think you can or you think you can’t, you are right.</li><li>“An investment in knowledge pays the best interest.”Benjamin Franklin</li></ul><h3 id="中文碎片"><a href="#中文碎片" class="headerlink" title="中文碎片"></a>中文碎片</h3><ul><li>some body<ul><li>谎言不攻不破</li><li>没经历过事，成不了大事</li><li>母亲给了你生命，也会把生命给你<h3 id="名人碎片"><a href="#名人碎片" class="headerlink" title="名人碎片"></a>名人碎片</h3></li></ul></li><li>极深的暴力当中隐藏着极致的温柔    (北野武)</li></ul><h3 id="其它碎片"><a href="#其它碎片" class="headerlink" title="其它碎片"></a>其它碎片</h3><ul><li>arithmetic<ul><li>addition, subtraction, multiplication and division calculations</li></ul></li><li>Promise(承诺)、Earnest(诚挚)、Respect(尊重)、Forgiveness(宽容)、Enioy(享受)、Cherish(珍惜)、Trust(信任)</li><li>In any case, measure, don’t guess! Only a measurement will tell you if the parallelism is worth it or not.(from stack overflow’s someone)</li></ul><h3 id="技术碎片"><a href="#技术碎片" class="headerlink" title="技术碎片"></a>技术碎片</h3><ul><li>compare two things at different points, this not only makes them easy to compare but also makes it easy to remember differences.</li></ul>]]></content>
      
      
      <categories>
          
          <category> fragement </category>
          
      </categories>
      
      
        <tags>
            
            <tag> words </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java thread</title>
      <link href="/2018/06/01/java%20thread/"/>
      <url>/2018/06/01/java%20thread/</url>
      
        <content type="html"><![CDATA[<h3 id="how-to-avoid-deadlock"><a href="#how-to-avoid-deadlock" class="headerlink" title="how to avoid deadlock"></a>how to avoid deadlock</h3><p><img src="https://2.bp.blogspot.com/-63RZ-BTlAFs/VfGeHMnGdFI/AAAAAAAADuw/gwqtrVliMsM/s400/Deadlock%2Bof%2BThreads.jpg" alt=""></p><h3 id="ConcurrentHashMap-faster-than-Hashtable"><a href="#ConcurrentHashMap-faster-than-Hashtable" class="headerlink" title="ConcurrentHashMap faster than Hashtable"></a>ConcurrentHashMap faster than Hashtable</h3><blockquote><p> ConcurrentHashMap is introduced as an alternative of Hashtable in Java 5, it is faster because of its design. ConcurrentHashMap divides the whole map into different segments and only lock a particular segment during the update operation, instead of <a href="http://javarevisited.blogspot.com/2012/01/java-hashtable-example-tutorial-code.html" target="_blank" rel="noopener">Hashtable</a>, which locks whole Map.</p></blockquote><p><img src="https://1.bp.blogspot.com/-s28yqJthVWo/V10_G31sSCI/AAAAAAAAGNY/8oJE5cDD5BUa5VBiCI8Bx-UdpD8_MoeSwCLcB/s400/Internal%2Bimplementation%2Bof%2BConcurrentHashMap%2Bin%2BJava.png" alt=""></p><h3 id="submit-and-execute-method-of-Executor-and-ExecutorService"><a href="#submit-and-execute-method-of-Executor-and-ExecutorService" class="headerlink" title="submit() and execute() method of Executor and ExecutorService"></a>submit() and execute() method of Executor and ExecutorService</h3><blockquote><p> The main difference between submit and execute method from ExecutorService interface is that former return a result in the form of a Future object, while later doesn’t return a result. By the way, both are used to submit a task to thread pool in Java but one is defined in Executor interface,while other is added into ExecutorService interface.</p></blockquote><p><img src="https://2.bp.blogspot.com/-ybewy1bWbFs/VxZFewRdKbI/AAAAAAAAFt4/fuAHJBE1r_8nlfUz34YTKI1j70UdqaMiQCLcB/s640/Difference%2Bbetween%2Bsubmit%2Bvs%2Bexecute%2Bmethod%2Bin%2BJava.png" alt=""></p><h4 id="when-to-use"><a href="#when-to-use" class="headerlink" title="when to use"></a>when to use</h4><blockquote><ul><li>In general, if you are doing computational task e.g. calculating some risk stats, <a href="http://java67.blogspot.com/2015/09/how-to-use-biginteger-class-in-java.html" target="_blank" rel="noopener">calculating factorial of large numbers</a> or doing some time-consuming computation e which results in some value then use the submit() method. It immediately returns a Future object, which can be later queried to get the value of computation by calling get() method.</li></ul></blockquote><blockquote><ul><li>Remember, get() is a <a href="http://javarevisited.blogspot.com/2012/02/what-is-blocking-methods-in-java-and.html" target="_blank" rel="noopener">blocking call</a> so always call the version which accepts a timeout. While you can use the execute() method if you just want your code to be run in parallel by worker threads of the thread pool.</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Future future = executorService.submit(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Asynchronous task"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">future.get();  <span class="comment">//returns null if the task has finished correctly.</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Future future = executorService.submit(<span class="keyword">new</span> Callable()&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Asynchronous Callable"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Callable Result"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"future.get() = "</span> + future.get());</span><br></pre></td></tr></table></figure><h3 id="ReentrantLock-vs-synchronized"><a href="#ReentrantLock-vs-synchronized" class="headerlink" title="ReentrantLock vs synchronized"></a>ReentrantLock vs synchronized</h3><h4 id="the-advantages-of-ReentrantLock"><a href="#the-advantages-of-ReentrantLock" class="headerlink" title="the advantages of ReentrantLock"></a>the advantages of ReentrantLock</h4><ol><li><p>Ability to lock interruptibly.</p></li><li><p>Ability to timeout while waiting for lock.</p></li><li><p>Power to create fair lock.</p></li><li><p>API to get list of waiting thread for lock.</p></li><li><p>Flexibility to try for lock without blocking.</p></li></ol><h4 id="the-disadvantages-of-ReentrantLock"><a href="#the-disadvantages-of-ReentrantLock" class="headerlink" title="the disadvantages of ReentrantLock"></a>the disadvantages of ReentrantLock</h4><ol><li><p>Major drawback of using ReentrantLock in Java is wrapping method body inside <a href="http://javarevisited.blogspot.com/2012/11/difference-between-final-finally-and-finalize-java.html" target="_blank" rel="noopener">try-finally block</a>, which makes code unreadable and hides business logic. </p></li><li><p>programmer is responsible for acquiring and releasing lock, which is a power but also opens gate for new subtle bugs, when programmer forget to release the lock in finally block.</p></li></ol><h3 id="ReadWriteLock"><a href="#ReadWriteLock" class="headerlink" title="ReadWriteLock"></a>ReadWriteLock</h3><p><img src="https://4.bp.blogspot.com/-yYqp8m0BGdk/V11A-s0qwVI/AAAAAAAAGNw/LL_qGX5_qD4dHTFMe3kklI4jYWyDHzIyQCLcB/s400/ReadWriteLock%2Bin%2BJava.jpg" alt=""></p><h3 id="stop-thread"><a href="#stop-thread" class="headerlink" title="stop thread"></a>stop thread</h3><blockquote><ul><li>There was some control methods in JDK 1.0 e.g. stop(), suspend() and resume() which was deprecated in later releases due to potential deadlock threats, from then Java API designers has not made any effort to provide a consistent, thread-safe and elegant way to stop threads.</li></ul></blockquote><blockquote><ul><li>Programmers mainly rely on the fact that thread stops automatically as soon as they finish execution of run() or call() method. To manually stop, programmers either take advantage of volatile boolean variable and check in every iteration if run method has loops or interrupt threads to abruptly cancel tasks.</li></ul></blockquote><h3 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h3><blockquote><ul><li>The <code>ThreadLocal</code> class in Java enables you to create variables that can only be read and written by the same thread. Thus, even if two threads are executing the same code, and the code has a reference to a<code>ThreadLocal</code> variable, then the two threads cannot see each other’s <code>ThreadLocal</code> variables.</li><li>Each thread holds an exclusive copy of ThreadLocal variable which becomes eligible to Garbage collection after thread finished or died, normally or due to any Exception, Given those ThreadLocal variable doesn’t have any other live references.</li><li>ThreadLocal variables in Java are generally private static fields in Classes and maintain its state inside Thread.</li></ul></blockquote><h3 id="synchronized-vs-concurrent-collection"><a href="#synchronized-vs-concurrent-collection" class="headerlink" title="synchronized vs concurrent collection"></a>synchronized vs concurrent collection</h3><blockquote><p>later is more scalable than former</p><p> synchronized collections locks the whole collection e.g. whole Map or List while concurrent collection never locks the whole Map or List. They achieve thread safety by using advanced and sophisticated techniques like lock stripping. For example, the ConcurrentHashMap divides the whole map into several segments and locks only the relevant segments, which allows multiple threads to access other segments of same ConcurrentHashMap without locking.</p></blockquote><h4 id="CopyOnWriteArrayList"><a href="#CopyOnWriteArrayList" class="headerlink" title="CopyOnWriteArrayList"></a>CopyOnWriteArrayList</h4><blockquote><p> CopyOnWriteArrayList allows multiple reader threads to read without synchronization and when a write happens it copies the whole ArrayList and swap with a newer one.</p></blockquote><h3 id="Stack-and-Heap"><a href="#Stack-and-Heap" class="headerlink" title="Stack and Heap"></a>Stack and Heap</h3><blockquote><ul><li>Each thread has their own stack, which is used to store local variables, method parameters and call stack. Variable stored in one Thread’s stack is not visible to other.</li><li>heap is a common memory area which is shared by all threads.Objects whether local or at any level is created inside heap.</li></ul></blockquote><ul><li>To improve performance thread tends to cache values from heap into their stack, which can create problems if that variable is modified by more than one thread, this is where volatile variables comes in picture. volatile suggest threads to read value of variable always from main memory. </li><li>If there is no memory left in the stack for storing function call or local variable, JVM will throw java.lang.StackOverFlowError, while if there is no more heap space for creating an object, JVM will throw java.lang.OutOfMemoryError: Java Heap Space</li><li>Variables stored in stacks are only visible to the owner Thread while objects created in the heap are visible to all thread. In other words, stack memory is kind of private memory of Java Threads while heap memory is shared among all threads.</li></ul><h3 id="thread-pool"><a href="#thread-pool" class="headerlink" title="thread pool"></a>thread pool</h3><blockquote><p>Java API provides Executor framework, which allows you to create different types of thread pools e.g. single thread pool, which process one task at a time, fixed thread pool (a pool of fixed number of thread) or cached thread pool (an expandable thread pool suitable for applications with many short lived tasks).</p></blockquote><h4 id="the-benefits"><a href="#the-benefits" class="headerlink" title="the benefits"></a>the benefits</h4><ul><li><p>Use of Thread Pool reduces response time by avoiding thread creation during request or task processing.</p></li><li><p>Use of Thread Pool allows you to change your execution policy as you need. you can go from single thread to multiple threads by just replacing ExecutorService implementation.</p></li><li>Thread Pool in Java application increases the stability of the system by creating a configured number of threads decided based on system load and available resource.</li><li>Thread Pool frees application developer from thread management stuff and allows to focus on business logic.</li></ul><h3 id="volatile-vs-atomic-variable"><a href="#volatile-vs-atomic-variable" class="headerlink" title="volatile vs atomic variable"></a>volatile vs atomic variable</h3><blockquote><p>Volatile variable provides you happens-before guarantee that a write will happen before any subsequent write, it doesn’t guarantee atomicity. For example count++ operation will not become atomic just by declaring count variable as volatile. On the other hand AtomicInteger class provides atomic method to perform such compound operation atomically.</p></blockquote><h3 id="3-multi-threading-best-practice"><a href="#3-multi-threading-best-practice" class="headerlink" title="3 multi-threading best practice"></a>3 multi-threading best practice</h3><ul><li>Always give meaningful name to your thread</li><li><p>Avoid locking or Reduce scope of Synchronization</p></li><li><p>Prefer Synchronizers over wait and notify</p></li><li>Prefer Concurrent Collection over Synchronized Collection</li></ul><h3 id="Wait、Sleep、Yield"><a href="#Wait、Sleep、Yield" class="headerlink" title="Wait、Sleep、Yield"></a>Wait、Sleep、Yield</h3><ul><li><p>sleep() and yield() methods are defined in thread class while wait() is defined in the Object class</p></li><li><p>The key difference between wait() and sleep() is that former is used for inter-thread communication while later is used to introduced to pause the current thread for a short duration. </p></li><li><p>This difference is more obvious from the fact that, when a thread calls the wait() method, it releases the monitor or lock it was holding on that object, but when a thread calls the sleep() method, it never releases the monitor even if it is holding. </p></li><li><p>yield() just releases the CPU hold by Thread to give another thread an opportunity to run though it’s not guaranteed who will get the CPU. It totally depends upon thread scheduler and <strong>it’s even possible that the thread which calls the yield() method gets the CPU again</strong>(有可能自己会再次获取到cpu执行时间). Hence, it’s not reliable to depend upon yield() method, it’s just on best effort basis.</p><ul><li>If there is no waiting thread or all the waiting threads have a lower priority then the same thread will continue its execution.</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> snippet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java thread code</title>
      <link href="/2018/06/01/java%20thread%20code/"/>
      <url>/2018/06/01/java%20thread%20code/</url>
      
        <content type="html"><![CDATA[<h3 id="Future-and-FutureTask"><a href="#Future-and-FutureTask" class="headerlink" title="Future and FutureTask"></a>Future and FutureTask</h3><blockquote><ul><li>A <strong>Future</strong> interface provides methods <strong>to check if the computation is complete, to wait for its completion and to retrieve the results of the computation</strong>. The result is retrieved using Future’s get() method when the computation has completed, and it blocks until it is completed.</li><li><strong>FutureTask</strong><pre><code>1. FutureTask implementation Future interface and RunnableFuture Interface, means one can use FutureTask as Runnable and can be submitted to ExecutorService for execution.2. When one call Future.submit() Callable or Runnable objects then most of time ExecutorService creates FutureTask, and one can create it manually also.3. FutureTask acts like a latch.4. Computation represent by FutureTask is implemented with Callable interface.5. It implements Future or Callable interface.6. Behaviour of get() method depends on the state of the task. If tasks are not completed get() method waits or blocks till the task is completed. Once task completed, it returns the result or throws an ExecutionException.</code></pre></li></ul></blockquote><p><img src="https://cdncontribute.geeksforgeeks.org/wp-content/uploads/pool2.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java program do two FutureTask </span></span><br><span class="line"><span class="comment">// using Runnable Interface </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*; </span><br><span class="line"><span class="keyword">import</span> java.util.logging.Level; </span><br><span class="line"><span class="keyword">import</span> java.util.logging.Logger; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123; </span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> waitTime; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyRunnable</span><span class="params">(<span class="keyword">int</span> timeInMillis)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">this</span>.waitTime = timeInMillis; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">try</span> &#123; </span><br><span class="line"><span class="comment">// sleep for user given millisecond </span></span><br><span class="line"><span class="comment">// before checking again </span></span><br><span class="line">Thread.sleep(waitTime); </span><br><span class="line"></span><br><span class="line"><span class="comment">// return current thread name </span></span><br><span class="line">System.out.println(Thread </span><br><span class="line">.currentThread() </span><br><span class="line">.getName()); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">catch</span> (InterruptedException ex) &#123; </span><br><span class="line">Logger </span><br><span class="line">.getLogger(MyRunnable.class.getName()) </span><br><span class="line">.log(Level.SEVERE, <span class="keyword">null</span>, ex); </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// Class FutureTaskExample excute two future task </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FutureTaskExample</span> </span>&#123; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="comment">// create two object of MyRunnable class </span></span><br><span class="line"><span class="comment">// for FutureTask and sleep 1000, 2000 </span></span><br><span class="line"><span class="comment">// millisecond before checking again </span></span><br><span class="line">MyRunnable myrunnableobject1 = <span class="keyword">new</span> MyRunnable(<span class="number">1000</span>); </span><br><span class="line">MyRunnable myrunnableobject2 = <span class="keyword">new</span> MyRunnable(<span class="number">2000</span>); </span><br><span class="line"></span><br><span class="line">FutureTask&lt;String&gt; </span><br><span class="line">futureTask1 = <span class="keyword">new</span> FutureTask&lt;&gt;(myrunnableobject1, </span><br><span class="line"><span class="string">"FutureTask1 is complete"</span>); </span><br><span class="line">FutureTask&lt;String&gt; </span><br><span class="line">futureTask2 = <span class="keyword">new</span> FutureTask&lt;&gt;(myrunnableobject2, </span><br><span class="line"><span class="string">"FutureTask2 is complete"</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">// create thread pool of 2 size for ExecutorService </span></span><br><span class="line">ExecutorService executor = Executors.newFixedThreadPool(<span class="number">2</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">// submit futureTask1 to ExecutorService </span></span><br><span class="line">executor.submit(futureTask1); </span><br><span class="line"></span><br><span class="line"><span class="comment">// submit futureTask2 to ExecutorService </span></span><br><span class="line">executor.submit(futureTask2); </span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123; </span><br><span class="line"><span class="keyword">try</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">// if both future task complete </span></span><br><span class="line"><span class="keyword">if</span> (futureTask1.isDone() &amp;&amp; futureTask2.isDone()) &#123; </span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"Both FutureTask Complete"</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">// shut down executor service </span></span><br><span class="line">executor.shutdown(); </span><br><span class="line"><span class="keyword">return</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!futureTask1.isDone()) &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">// wait indefinitely for future </span></span><br><span class="line"><span class="comment">// task to complete </span></span><br><span class="line">System.out.println(<span class="string">"FutureTask1 output = "</span></span><br><span class="line">+ futureTask1.get()); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"Waiting for FutureTask2 to complete"</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">// Wait if necessary for the computation to complete, </span></span><br><span class="line"><span class="comment">// and then retrieves its result </span></span><br><span class="line">String s = futureTask2.get(<span class="number">250</span>, TimeUnit.MILLISECONDS); </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (s != <span class="keyword">null</span>) &#123; </span><br><span class="line">System.out.println(<span class="string">"FutureTask2 output="</span> + s); </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">catch</span> (Exception e) &#123; </span><br><span class="line">Sysmtem.out.println(<span class="string">"Exception: "</span> + e); </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Output:</span><br><span class="line"></span><br><span class="line">FutureTask1 output=FutureTask1 is complete</span><br><span class="line">Waiting for FutureTask2 to complete</span><br><span class="line">Waiting for FutureTask2 to complete</span><br><span class="line">Waiting for FutureTask2 to complete</span><br><span class="line">Waiting for FutureTask2 to complete</span><br><span class="line">FutureTask2 output=FutureTask2 is complete</span><br><span class="line">Both FutureTask Complete</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> thread </category>
          
      </categories>
      
      
        <tags>
            
            <tag> code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>next optimize</title>
      <link href="/2018/05/30/next%20optimize/"/>
      <url>/2018/05/30/next%20optimize/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> next </category>
          
      </categories>
      
      
        <tags>
            
            <tag> optimize </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows snippet</title>
      <link href="/2018/05/22/windows%20snippet/"/>
      <url>/2018/05/22/windows%20snippet/</url>
      
        <content type="html"><![CDATA[<h3 id="进程操作"><a href="#进程操作" class="headerlink" title="进程操作"></a>进程操作</h3><ul><li>netstat -aon|findstr “8080” </li></ul><p>TCP     127.0.0.1:80       0.0.0.0:0             LISTENING    2448<br>端口被进程号为2448的进程占用，继续执行下面命令：</p><ul><li>tasklist|findstr “2448” </li></ul><p>thread.exe                   2016 Console                 0     16,064 K</p><p>很清楚，thread占用了你的端口,Kill it</p><ul><li>taskkill -F -PID 2448</li></ul><p>如果第二步查不到，那就开任务管理器，进程—查看—选择列—pid（进程位标识符）打个勾就可以了</p>]]></content>
      
      
      <categories>
          
          <category> windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> snippet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>socket snippet</title>
      <link href="/2018/05/09/TCP%20and%20UDP/"/>
      <url>/2018/05/09/TCP%20and%20UDP/</url>
      
        <content type="html"><![CDATA[<h2 id="TCP-and-UDP"><a href="#TCP-and-UDP" class="headerlink" title="TCP and UDP"></a>TCP and UDP</h2><blockquote><ul><li>TCP stands for Transmission Control Protocol and UDP stands for User Datagram Protocol, and both are used extensively to build Internet applications.</li><li>The protocol which is the core of internet, HTTP is based on TCP.</li></ul></blockquote><h3 id="why"><a href="#why" class="headerlink" title="why"></a>why</h3><blockquote><p> why Java developer should understand these two protocols in detail is that Java is extensively used to write multi-threaded, concurrent and scalable servers.</p></blockquote><h3 id="where"><a href="#where" class="headerlink" title="where"></a>where</h3><blockquote><p> While UDP is more suitable for applications that need fast, efficient transmission, such as games. UDP’s stateless nature is also useful for servers that answer small queries from huge numbers of clients. In practice, TCP is used in finance domain e.g. <a href="http://javarevisited.blogspot.sg/2011/04/fix-protocol-tutorial-for-beginners.html" target="_blank" rel="noopener">FIX protocol</a> is a TCP based protocol, UDP is used heavily in gaming and entertainment sites.</p></blockquote><h3 id="how"><a href="#how" class="headerlink" title="how"></a>how</h3><ul><li><p>TCP is connection oriented, reliable, slow, provides guaranteed delivery and preserves the order of messages</p></li><li><p>UDP is connectionless, unreliable, no ordering guarantee, but a fast protocol. </p></li><li><p>TCP overhead is also much higher than UDP, as it transmits more metadata per packet than UDP.  that header size of Transmission control protocol is 20 bytes, compared to 8 bytes header of User Datagram protocol.</p></li><li><p>Use TCP, if you can’t afford to lose any message, while UDP is better for high-speed data transmission, where loss of a single packet is acceptable e.g. video streaming or online multiplayer games.</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Socket </category>
          
      </categories>
      
      
        <tags>
            
            <tag> snippet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>design pattern</title>
      <link href="/2018/05/01/design-pattern%20build/"/>
      <url>/2018/05/01/design-pattern%20build/</url>
      
        <content type="html"><![CDATA[<h3 id="build"><a href="#build" class="headerlink" title="build"></a>build</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Computer</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Computer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//required parameters</span></span><br><span class="line"><span class="keyword">private</span> String HDD;</span><br><span class="line"><span class="keyword">private</span> String RAM;</span><br><span class="line"></span><br><span class="line"><span class="comment">//optional parameters</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> isGraphicsCardEnabled;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> isBluetoothEnabled;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getHDD</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> HDD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getRAM</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> RAM;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isGraphicsCardEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> isGraphicsCardEnabled;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isBluetoothEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> isBluetoothEnabled;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Computer</span><span class="params">(ComputerBuilder builder)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.HDD=builder.HDD;</span><br><span class="line">    <span class="keyword">this</span>.RAM=builder.RAM;</span><br><span class="line">    <span class="keyword">this</span>.isGraphicsCardEnabled=builder.isGraphicsCardEnabled;</span><br><span class="line">    <span class="keyword">this</span>.isBluetoothEnabled=builder.isBluetoothEnabled;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Builder Class</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ComputerBuilder</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// required parameters</span></span><br><span class="line">    <span class="keyword">private</span> String HDD;</span><br><span class="line">    <span class="keyword">private</span> String RAM;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// optional parameters</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isGraphicsCardEnabled;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isBluetoothEnabled;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ComputerBuilder</span><span class="params">(String hdd, String ram)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.HDD=hdd;</span><br><span class="line">        <span class="keyword">this</span>.RAM=ram;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ComputerBuilder <span class="title">setGraphicsCardEnabled</span><span class="params">(<span class="keyword">boolean</span> isGraphicsCardEnabled)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.isGraphicsCardEnabled = isGraphicsCardEnabled;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ComputerBuilder <span class="title">setBluetoothEnabled</span><span class="params">(<span class="keyword">boolean</span> isBluetoothEnabled)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.isBluetoothEnabled = isBluetoothEnabled;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Computer <span class="title">build</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Computer(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ComputerBuilder</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.journaldev.design.builder.Computer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBuilderPattern</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//Using builder to get the object in a single line of code and </span></span><br><span class="line">            <span class="comment">//without any inconsistent state or arguments management issues        </span></span><br><span class="line">    Computer comp = <span class="keyword">new</span> Computer.ComputerBuilder(</span><br><span class="line">            <span class="string">"500 GB"</span>, <span class="string">"2 GB"</span>).setBluetoothEnabled(<span class="keyword">true</span>)</span><br><span class="line">            .setGraphicsCardEnabled(<span class="keyword">true</span>).build();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>`</code></p>]]></content>
      
      
      <categories>
          
          <category> design pattern </category>
          
      </categories>
      
      
        <tags>
            
            <tag> code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hibernate snippet</title>
      <link href="/2018/05/01/hibernate%20snippet/"/>
      <url>/2018/05/01/hibernate%20snippet/</url>
      
        <content type="html"><![CDATA[<blockquote><p>ORM is an acronym for Object/Relational mapping. It is a programming strategy to map object with the data stored in the database. It simplifies data creation, data manipulation, and data access.</p></blockquote><h3 id="The-advantages-of-using-ORM-over-JDBC"><a href="#The-advantages-of-using-ORM-over-JDBC" class="headerlink" title="The advantages of using ORM over JDBC"></a>The advantages of using ORM over JDBC</h3><ul><li>Application development is fast.</li><li>Management of transaction.</li><li>Generates key automatically.</li><li>Details of SQL queries are hidden.</li></ul><h3 id="Hibernate-Architecture"><a href="#Hibernate-Architecture" class="headerlink" title="Hibernate Architecture"></a>Hibernate Architecture</h3><ul><li>Java application layer</li><li>Hibernate framework layer</li><li>Backhand api layer</li><li>Database layer</li></ul><p><img src="https://www.javatpoint.com/images/hibernate/arc2.jpg" alt=""></p><p>Hibernate Application Architecture：</p><p><img src="https://www.tutorialspoint.com/hibernate/images/hibernate_architecture.jpg" alt=""></p><blockquote><p>JDBC (Java Database Connectivity)</p><p>JTA (Java Transaction API) </p><p>JNDI (Java Naming Directory Interface)</p></blockquote><h3 id="Elements-of-Hibernate-Architecture"><a href="#Elements-of-Hibernate-Architecture" class="headerlink" title="Elements of Hibernate Architecture"></a>Elements of Hibernate Architecture</h3><ul><li><p>Configuration</p><ul><li><strong>Database Connection</strong> − This is handled through one or more configuration files supported by Hibernate. These files are <strong>hibernate.properties</strong> and <strong>hibernate.cfg.xml</strong>.</li><li><strong>Class Mapping Setup</strong> − This component creates the connection between the Java classes and database tables.</li></ul></li><li><p>SessionFactory</p><blockquote><p>SessionFactory is a thread-safe object, many threads cannot access it simultaneously.</p></blockquote></li><li><p>Session</p><blockquote><ul><li>It maintains a connection between the hibernate application and database.It provides methods to store, update, delete or fetch data from the database such as persist(), update(), delete(), load(), get() etc.</li><li>Session is not a thread-safe object, many threads can access it simultaneously. In other words, you can share it between threads.</li></ul></blockquote></li><li><p>Transaction</p></li><li><p>ConnectionProvider</p></li><li><p>Query</p><blockquote><p>Query objects use SQL or Hibernate Query Language (HQL) string to retrieve data from the database and create objects. A Query instance is used to bind query parameters, limit the number of results returned by the query, and finally to execute the query.</p></blockquote></li><li><p>Criteria</p><blockquote><p>Criteria objects are used to create and execute object oriented criteria queries to retrieve objects.</p></blockquote></li></ul><h3 id="About-SQL"><a href="#About-SQL" class="headerlink" title="About SQL"></a>About SQL</h3><ul><li><p>SQL query created in Hibernate（Native sql）</p><blockquote><p>Session.createSQLQuery</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Session.createSQLQuery()</span><br><span class="line"><span class="comment">//The method createSQLQuery() creates Query object using the native SQL syntax. </span></span><br><span class="line">Query query = session.createSQLQuery(<span class="string">"Select * from Student"</span>);</span><br></pre></td></tr></table></figure></li><li><p>HQL query</p><blockquote><p>Session.createQuery</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Session.createQuery()</span><br><span class="line"><span class="comment">//The method createQuery() creates Query object using the HQL syntax. </span></span><br><span class="line">Query query = session.createQuery(<span class="string">"from Student s where s.name like 'k%'"</span>);</span><br></pre></td></tr></table></figure></li><li><p>criteria query</p><blockquote><p>Session.createCriteria</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Session.createCriteria()</span><br><span class="line"><span class="comment">//The method createCriteria() creates Criteria object for setting the query parameters. This is more useful feature for those who don't want to write the query in hand. You can specify any type of complicated syntax using the Criteria API.</span></span><br><span class="line">Criteria criteria = session.createCriteria(Student.class);</span><br></pre></td></tr></table></figure></li></ul><h3 id="HQL-vs-Criteria"><a href="#HQL-vs-Criteria" class="headerlink" title="HQL vs Criteria"></a>HQL vs Criteria</h3><ul><li>HQL is to perform both select and non-select operations on the data,  but Criteria is only for selecting the data, we cannot perform non-select operations using criteria</li><li>HQL is suitable for executing Static Queries, where as Criteria is suitable for executing Dynamic Queries</li><li>HQL doesn’t support pagination concept, but we can achieve pagination with Criteria</li><li>Criteria used to take more time to execute then HQL</li><li>With Criteria we are safe with SQL Injection because of its dynamic query generation but in HQL as your queries are either fixed or parametrized, there is no safe from SQL Injection.</li></ul><h3 id="Caching"><a href="#Caching" class="headerlink" title="Caching"></a>Caching</h3><blockquote><p>Cache memory stores recently used data items in order to reduce the number of database hits as much as possible.</p></blockquote><p><img src="https://www.tutorialspoint.com/hibernate/images/hibernate_cache.jpg" alt=""></p><ul><li><p>First level Cache</p><blockquote><p>Hibernate first level cache is associated with the Session object. Hibernate first level cache is enabled by default and there is no way to disable it. However hibernate provides methods through which we can delete selected objects from the cache or clear the cache completely.Any object cached in a session will not be visible to other sessions and when the session is closed, all the cached objects will also be lost.</p></blockquote></li><li><p>Second level Cache</p><blockquote><p>Hibernate Second Level cache is disabled by default but we can enable it through configuration. Currently EHCache and Infinispan provides implementation for Hibernate Second level cache and we can use them. </p></blockquote></li><li><p>Query Cache</p><blockquote><p>Hibernate can also cache result set of a query. Hibernate Query Cache doesn’t cache the state of the actual entities in the cache; it caches only identifier values and results of value type. So it should always be used in conjunction with the second-level cache.</p></blockquote></li></ul><hr><h3 id="types-of-association-mapping"><a href="#types-of-association-mapping" class="headerlink" title="types of association mapping"></a>types of association mapping</h3><ol><li><p>One to One</p></li><li><p>One to Many</p><blockquote><p>（一对多）单向：会产生中间表，此时可以用@onetoMany @Joincolumn（name=” “）避免产生中间表**，并且指定了外键的名字（别看 @joincolumn在一中写着，但它存在在多的那个表中）</p></blockquote></li><li><p>Many to One</p><blockquote><p>（多对一）单向：不产生中间表，但可以用@Joincolumn（name=”  “）来指定生成外键的名字，外键在多的一方表中产生！</p></blockquote></li><li><p>Many to Many</p></li></ol><hr><p>可参考<a href="https://www.jianshu.com/p/54108abb070f" target="_blank" rel="noopener">JPA实体关系映射</a></p><h4 id="为什么要有实体关系映射"><a href="#为什么要有实体关系映射" class="headerlink" title="为什么要有实体关系映射"></a>为什么要有实体关系映射</h4><blockquote><p>简化编程操作。把冗余的操作交给底层框架来处理。<br> 例如，如果我要给一位新入学的学生添加一位新的老师。而这个老师又是新来的，在学生数据库与教师数据库中均不存在对应的数据。那么我需要先在教师数据库中保存新来的老师的数据，同时在学生数据库中保存新学生的数据，然后再给两者建立关联。<br> 而如果我们使用了实体关系映射，我们只需要将该新教师实体交给该学生实体，然后保存该学生实体即可完成。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> hibernate </category>
          
      </categories>
      
      
        <tags>
            
            <tag> snippet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis snippet</title>
      <link href="/2018/02/16/redis%20snippet/"/>
      <url>/2018/02/16/redis%20snippet/</url>
      
        <content type="html"><![CDATA[<p>###　数据类型</p><ul><li><p>String</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; SET name &quot;runoob&quot;</span><br><span class="line">OK</span><br><span class="line">redis 127.0.0.1:6379&gt; GET name</span><br><span class="line">&quot;runoob&quot;</span><br></pre></td></tr></table></figure></li><li><p>Hash</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">redis&gt; HMSET myhash field1 &quot;Hello&quot; field2 &quot;World&quot;</span><br><span class="line">&quot;OK&quot;</span><br><span class="line">redis&gt; HGET myhash field1</span><br><span class="line">&quot;Hello&quot;</span><br><span class="line">redis&gt; HGET myhash field2</span><br><span class="line">&quot;World&quot;</span><br></pre></td></tr></table></figure></li><li><p>List</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; lpush runoob redis</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; lpush runoob mongodb</span><br><span class="line">(integer) 2</span><br><span class="line">redis 127.0.0.1:6379&gt; lpush runoob rabitmq</span><br><span class="line">(integer) 3</span><br><span class="line">redis 127.0.0.1:6379&gt; lrange runoob 0 10</span><br><span class="line">1) &quot;rabitmq&quot;</span><br><span class="line">2) &quot;mongodb&quot;</span><br><span class="line">3) &quot;redis&quot;</span><br><span class="line">redis 127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure></li><li><p>Set</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; sadd runoob redis</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; sadd runoob mongodb</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; sadd runoob rabitmq</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; sadd runoob rabitmq</span><br><span class="line">(integer) 0</span><br><span class="line">redis 127.0.0.1:6379&gt; smembers runoob</span><br><span class="line"></span><br><span class="line">1) &quot;redis&quot;</span><br><span class="line">2) &quot;rabitmq&quot;</span><br><span class="line">3) &quot;mongodb&quot;</span><br></pre></td></tr></table></figure></li><li><p>zset(sorted set：有序集合)</p><ul><li><p>Redis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。</p><p>不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。zset的成员是唯一的,但分数(score)却可以重复。</p></li><li><p>命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zadd key score member</span><br></pre></td></tr></table></figure></li><li><p>实例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; zadd runoob 0 redis</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; zadd runoob 0 mongodb</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; zadd runoob 0 rabitmq</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; zadd runoob 0 rabitmq</span><br><span class="line">(integer) 0</span><br><span class="line">redis 127.0.0.1:6379&gt; &gt; ZRANGEBYSCORE runoob 0 1000</span><br><span class="line">1) &quot;mongodb&quot;</span><br><span class="line">2) &quot;rabitmq&quot;</span><br><span class="line">3) &quot;redis&quot;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><ul><li><p>show all keys</p><p><code>KEYS *</code></p></li><li><p>Delete All Keys In Redis</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Delete all keys from all Redis databases:</span><br><span class="line"> `$ redis-cli FLUSHALL`</span><br><span class="line"> Delete all keys of the currently selected Redis database:</span><br><span class="line"> `$ redis-cli FLUSHDB`</span><br><span class="line"> Delete all keys of the specified Redis database:</span><br><span class="line"> `$ redis-cli -n &lt;database_number&gt; FLUSHDB`</span><br></pre></td></tr></table></figure></li></ul><h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><ul><li><p>RedisConnectionFailureException</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">redis.conf中默认的是bind 127.0.0.1，需要将这段注释</span><br><span class="line">设置protected-mode no，因为如果是yes的话，只能进行本地访问。如果设置了密码和bind这个可以开启，如果没有设置，这个属性可以设置为no即可。</span><br><span class="line">daemonize  yes表示后台运行</span><br></pre></td></tr></table></figure></li><li><p>需要安装gcc</p></li><li><p>make时，提示fatal error: jemalloc/jemalloc.h: No such file or directory</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">解决：   </span><br><span class="line"><span class="built_in">cd</span> src/deps</span><br><span class="line">make hiredis jemalloc linenoise lua geohash-int</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><h3 id="自定义配置redis-server"><a href="#自定义配置redis-server" class="headerlink" title="自定义配置redis server"></a>自定义配置redis server</h3><p>涉及到的目录或文件有</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> 1.配置文件/etc/redis/xxxx.conf</span><br><span class="line"> 2.日志、数据文件/data/redis/xxxx</span><br><span class="line"> 3.启动脚本/etc/init.d/redis_xxxx</span><br><span class="line"> </span><br><span class="line">客户端启动时redis-cli -p xxxx</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> snippet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>neo4j snippet</title>
      <link href="/2018/01/21/course%20snippet/"/>
      <url>/2018/01/21/course%20snippet/</url>
      
        <content type="html"><![CDATA[<p>高并发处理技术老司机带你玩RabbitMq实现性能倍增<br>链接：<a href="https://pan.baidu.com/s/1tdWyeXgXzbWsltY8NlhdaQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1tdWyeXgXzbWsltY8NlhdaQ</a></p><p>密码：ripd</p><p>缓存那些事,缓存一致性问题爬坑记<br>链接：<a href="https://pan.baidu.com/s/10aX13k6GjIr7XUcrb6j-Pw" target="_blank" rel="noopener">https://pan.baidu.com/s/10aX13k6GjIr7XUcrb6j-Pw</a></p><p>密码：f5kl</p><p>分布式事务处理你不得不听的踩坑故事－让你的代码经得起考验<br>链接：<a href="https://pan.baidu.com/s/1PeiCr0DYMI7x4LwGJktrOg" target="_blank" rel="noopener">https://pan.baidu.com/s/1PeiCr0DYMI7x4LwGJktrOg</a></p><p>密码：phsp</p><p>大咖带你玩转分布式锁 Zookeeper篇<br>链接：<a href="https://pan.baidu.com/s/1Nh8mTrLNwtmh4hwU2khksg" target="_blank" rel="noopener">https://pan.baidu.com/s/1Nh8mTrLNwtmh4hwU2khksg</a></p><p>密码：fznh</p>]]></content>
      
      
      <categories>
          
          <category> course </category>
          
      </categories>
      
      
        <tags>
            
            <tag> resource </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jvm snippet</title>
      <link href="/2018/01/18/JVM%20snippet/"/>
      <url>/2018/01/18/JVM%20snippet/</url>
      
        <content type="html"><![CDATA[<h2 id="JRE-JVM-JDK"><a href="#JRE-JVM-JDK" class="headerlink" title="JRE JVM JDK"></a>JRE JVM JDK</h2><ul><li>JRE:    java run-time</li></ul><blockquote><p>Java is every where in browser, in mobile, in TV or in set-top boxes and if you are into Java programming language than you know that Java code which is bundled in JAR (Java archive) file require Java virtual machine JVM to execute it. </p></blockquote><ul><li>JVM:    java virtual machine</li></ul><blockquote><p> Java Virtual Machine is get created when you run a java program using java command e.g. java HelloWorld. JVM is responsible for converting byte code into machine specific code</p></blockquote><ul><li>JDK:    java development kit</li></ul><blockquote><p> JDK is also loosely referred as JRE but its lot more than JRE and it provides all the tools and executable require to compile debug and execute Java Program.</p></blockquote><h2 id="basic-architecture-of-the-JVM"><a href="#basic-architecture-of-the-JVM" class="headerlink" title="basic architecture of the JVM"></a>basic architecture of the JVM</h2><p><img src="https://i.imgur.com/yI8u4Hr.jpg" alt=""></p><h3 id="Class-Loader-Sub-System"><a href="#Class-Loader-Sub-System" class="headerlink" title="Class Loader Sub System"></a>Class Loader Sub System</h3><h4 id="1-Loading"><a href="#1-Loading" class="headerlink" title="1. Loading"></a>1. Loading</h4><ul><li><p>loading the class file and store inside method area</p><p><img src="https://i.imgur.com/57IalMb.png" alt=""></p></li><li><p>Created object is not student object or customer object. It is a predefined class “Class” object that is presently in java.lang package.</p><p><img src="https://i.imgur.com/9hHykjw.png" alt=""></p></li><li><p>For every loaded .class file, only one class “Class” object will be created by JVM, even though we are using that class multiple times in our program. Example,</p><p><img src="https://i.imgur.com/KKpqYVn.png" alt=""></p></li></ul><h4 id="2-Linking"><a href="#2-Linking" class="headerlink" title="2. Linking"></a>2. Linking</h4><ul><li><p><strong>verification</strong> </p><blockquote><p>This Byte Code Verifier is responsible to verify weather .class file is properly formatted or not, structurally correct or not, generated by valid compiler or not.</p></blockquote></li><li><p><strong>preparation</strong> </p><blockquote><p>allocate memory for class level static variables and assigned default values.</p><p>E.g. For int —&gt; 0, For double —&gt; 0.0, For boolean —&gt; false</p></blockquote></li><li><p><strong>Resolution</strong></p><blockquote><p>It is the process of replacing all symbolic references used in our class with original direct references from method area.</p></blockquote><p><img src="https://i.imgur.com/jTM8BJz.png" alt=""></p></li><li><p><strong>Initialization</strong></p></li></ul><blockquote><p>In Initialization activity, for class level static variables assigns original values and static blocks will be executed from top to bottom.</p></blockquote><ul><li>Types of class loaders in class loader subsystem<ul><li>Bootstrap class loader/ Primordial class loader</li><li>Extension class loader</li><li>Application class loader/System class loader</li></ul></li></ul><h4 id="3-Class-loader-sub-system-follows-delegation-hierarchy-algorithm"><a href="#3-Class-loader-sub-system-follows-delegation-hierarchy-algorithm" class="headerlink" title="3. Class loader sub system follows delegation hierarchy algorithm"></a>3. Class loader sub system follows delegation hierarchy algorithm</h4><p><img src="https://4.bp.blogspot.com/-iMNVExYkMHU/VyMRlZEllzI/AAAAAAAAAZk/slOt-86cWUIR5bLdRRYo5d83O63-7iGqgCLcB/s640/JVM3.png" alt=""></p><ul><li><p><strong>Customized class loader</strong></p><p>Sometimes we may not satisfy with default class loader mechanism then we can go for Customized class loader. For example:</p><p><img src="https://2.bp.blogspot.com/-eaOaDxPhWh4/VyMvvGfOO9I/AAAAAAAAAZ4/3v1d3iuqieMWMp5_HfKiRLaChQFcmFIMACLcB/s640/JVM4.png" alt=""></p></li></ul><h3 id="Various-Memory-Areas-in-JVM"><a href="#Various-Memory-Areas-in-JVM" class="headerlink" title="Various Memory Areas in JVM"></a>Various Memory Areas in JVM</h3><h4 id="1-Method-Area"><a href="#1-Method-Area" class="headerlink" title="1. Method Area"></a>1. Method Area</h4><ul><li><p>Inside method area class level binary data including static variables will be stored</p></li><li><p>Constant pools of a class will be stored inside method area.</p></li><li><p>Method area can be accessed by multiple threads simultaneously.</p><blockquote><p>All threads share the same method area, so access to the method area’s data structures must be designed to be thread-safe. </p></blockquote><p><img src="https://2.bp.blogspot.com/-u01Q_6NhvPk/VyM_pBkp3kI/AAAAAAAAAag/MgiZfTRTz0wxG6-6SEB02hTM7_ZE3SMHQCKgB/s1600/Untitled.png" alt=""></p></li></ul><h4 id="2-Heap-Area"><a href="#2-Heap-Area" class="headerlink" title="2. Heap Area"></a>2. Heap Area</h4><ul><li>Objects and corresponding instance variables will be stored in the heap area.</li><li><p>Every array in java is object only hence arrays also will be stored in the heap area.</p></li><li><p>Heap area can be access by multiple threads and hence the data stored in the heap area is not thread safe.</p></li></ul><p><img src="https://2.bp.blogspot.com/-oLUpq44AMXM/VyNIAVtyZ3I/AAAAAAAAAa0/lCVcaictQnk0MxCpCwxbUpXyL4Fy_83gACLcB/s1600/Untitled.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Set Maximum and Minimum heap size</span><br><span class="line">-Xmx</span><br><span class="line">     To set maximum heap size , i.e., maxMemory</span><br><span class="line">    java -Xmx512m HeapSpaceDemo</span><br><span class="line">     Here mx = maximum size</span><br><span class="line">              512m = 512 MB</span><br><span class="line">              HeapSpaceDemo = Java class name</span><br><span class="line">-Xms</span><br><span class="line">     To set minimum heap size , i.e., total memory </span><br><span class="line">        java -Xms65m HeapSpaceDemo   </span><br><span class="line">      Here ms = minimum size</span><br><span class="line">              65m = 65 MB</span><br><span class="line">              HeapSpaceDemo = Java class name</span><br><span class="line">or, you can set a minimum maximum heap size at a time</span><br><span class="line">java -Xms256m -Xmx1024m HeapSpaceDemo</span><br></pre></td></tr></table></figure><h4 id="3-Stack-Memory"><a href="#3-Stack-Memory" class="headerlink" title="3. Stack Memory"></a>3. Stack Memory</h4><ul><li><p>Each and every method call performed by the thread and corresponding local variables will be stored by in the stack,</p><p><img src="https://2.bp.blogspot.com/-K03M6Uni9m4/VyRNcS9tf4I/AAAAAAAAAbQ/MYBamJ20cb08iQTbDmnNmO4DyxMR_2giACLcB/s1600/Untitled.png" alt=""></p></li></ul><h5 id="Stack-Frame-Structure"><a href="#Stack-Frame-Structure" class="headerlink" title="Stack Frame Structure"></a>Stack Frame Structure</h5><ul><li><p>Local Variable Array</p><ul><li><p>It contains all parameters and local variables of the method.</p></li><li><p>the occupied slot </p><p><img src="https://4.bp.blogspot.com/-ROv0VjQvVGs/VyRf_zpQSpI/AAAAAAAAAbk/4kX92SN32gwi5KW4tPgQlEYmcnADWqrwgCLcB/s1600/Untitled.png" alt=""></p></li></ul></li><li><p>Operand Stack</p><ul><li><p>JVM uses operand stack as work space.</p></li><li><p>last-in first-out (LIFO) </p></li><li><p>how a Java virtual machine would add two local variables that contain ints and store the int result in a third local variable:</p><p><img src="https://3.bp.blogspot.com/-z0BIzBb7RSk/VyRoO5281LI/AAAAAAAAAb4/xU2X3082YSA7qyoelCxDj36l8luQkWjgwCLcB/s1600/Untitled.png" alt=""></p></li></ul></li><li><p>Frame Data</p></li></ul><h4 id="4-PC-Registers-Program-Counter-Registers"><a href="#4-PC-Registers-Program-Counter-Registers" class="headerlink" title="4. PC Registers(Program Counter Registers)"></a>4. PC Registers(Program Counter Registers)</h4><blockquote><p>For every thread a separate PC register will be created at the time of thread creation. PC register contains address of current executing instruction. Once instruction execution completes automatically PC register will be incremented to hold address of next instruction. An “address” can be a native pointer or an offset from the beginning of a method’s byte codes.   </p></blockquote><h4 id="5-Native-Method-Stacks"><a href="#5-Native-Method-Stacks" class="headerlink" title="5. Native Method Stacks"></a>5. Native Method Stacks</h4><blockquote><p>Here also for every Thread a separate run time stack will be created. It contains all the native methods used in the application. Native method means methods written in a language other than the Java programming language. In other words, it is a stack used to execute C/C++ codes invoked through JNI (Java Native Interface). According to the language, a C stack or C++ stack is created.</p></blockquote><p><img src="https://4.bp.blogspot.com/-4bE2RL52NtA/VyRuBlfum-I/AAAAAAAAAcM/LzCOXj-d1F81ipQsZWs17QohYqrolOo0gCLcB/s1600/Untitled.png" alt=""></p><p><img src="https://1.bp.blogspot.com/-YIMpPCtloyM/VyRvvs1tf0I/AAAAAAAAAcY/XkvoL2nuRS8hKUDMHR3gw0OCjaUeePrzQCLcB/s1600/Untitled.png" alt=""></p><h3 id="Execution-Engine"><a href="#Execution-Engine" class="headerlink" title="Execution Engine"></a>Execution Engine</h3><h4 id="1-Interpreter"><a href="#1-Interpreter" class="headerlink" title="1. Interpreter"></a>1. Interpreter</h4><blockquote><p>It is responsible to read byte code and interpret into machine code (native code) and execute that machine code line by line. </p></blockquote><h4 id="2-JIT-Compiler"><a href="#2-JIT-Compiler" class="headerlink" title="2. JIT Compiler"></a>2. JIT Compiler</h4><blockquote><p>The JIT compiler has been introduced to compensate for the disadvantages of the interpreter. The main purpose of JIT compiler is to improve the performance. Internally JIT compiler maintains a separate count for every method. Whenever JVM across any method call, first that method will be interpreted normally by the interpreter and JIT compiler increments the corresponding count variable. </p></blockquote><ul><li><strong>Profiler</strong> which is the part of JIT compiler is responsible to identify Hotspot(Repeated Used Methods).</li></ul><p><img src="https://1.bp.blogspot.com/-ANGvCzUbah4/VyXPF7DZ_vI/AAAAAAAAAdw/WXoC1nvYlLcPgVxyyLfSQtD6wM2fCDzMwCLcB/s1600/Untitled.png" alt=""></p><h3 id="Java-Native-Interface-JNI"><a href="#Java-Native-Interface-JNI" class="headerlink" title="Java Native Interface(JNI)"></a>Java Native Interface(JNI)</h3><blockquote><p>JNI is acts as a bridge (Mediator) for java method calls and corresponding native libraries. </p></blockquote><p><img src="https://3.bp.blogspot.com/-0qA9I4nPJ5s/VyXRhVVabDI/AAAAAAAAAeE/JYW4byFQCMICubzScaBIaQvEVblinG7cgCLcB/s1600/Untitled.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> snippet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maven snippet</title>
      <link href="/2018/01/09/maven%20snippet/"/>
      <url>/2018/01/09/maven%20snippet/</url>
      
        <content type="html"><![CDATA[<h3 id="命令介绍"><a href="#命令介绍" class="headerlink" title="命令介绍"></a>命令介绍</h3><ol><li><strong>mvn compile</strong> 编译,将Java 源程序编译成 class 字节码文件。</li><li><strong>mvn test</strong> 测试，并生成测试报告</li><li><strong>mvn clean</strong> 将以前编译得到的旧的 class 字节码文件删除</li><li><strong>mvn pakage</strong> 打包,动态 web工程打 war包，Java工程打 jar 包。</li><li><strong>mvn install</strong> 将项目生成 jar 包放在仓库中，以便别的模块调用</li><li><a href="https://www.cnblogs.com/zhangxh20/p/6298062.html" target="_blank" rel="noopener">Maven的几个常用plugin</a></li></ol><h3 id="tomcat项目的部署"><a href="#tomcat项目的部署" class="headerlink" title="tomcat项目的部署"></a>tomcat项目的部署</h3><ul><li>参照 <a href="https://blog.csdn.net/u012076316/article/details/46907823" target="_blank" rel="noopener">tomcat 设置热部署</a></li><li>参照<a href="http://www.jb51.net/article/117334.htm" target="_blank" rel="noopener">war和war exploded区别及问题汇总</a></li><li>参照<a href="https://www.jianshu.com/p/fb0ed26c35d5" target="_blank" rel="noopener">tomcat部署的不同方式</a></li><li>启动项目时，如果test包里面有测试程序，为了忽略编译test测试程序，需要运行命令打包<code>mvn clean package -DskipTests</code>，另外运行tomcat的时候以debug模式进行启动。</li></ul><h3 id="maven多项目之间相互引用"><a href="#maven多项目之间相互引用" class="headerlink" title="maven多项目之间相互引用"></a>maven多项目之间相互引用</h3><ul><li>应该在父目录下进行maven install操作，会自动生成子模块的jar或war包。</li></ul><ul><li><p><strong>解决maven无法加载本地lib/下的jar包问题(程序包XXX不存在)</strong></p><ul><li><p>原因</p><p>若该程序包是第三方的jar，解决方案是让maven既加载maven库中的jar包，又要加载本地WEB-INF/lib下的jar包。 </p></li><li><p>解决</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;3.6.0&lt;/version&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">&lt;source&gt;1.8&lt;/source&gt;</span><br><span class="line">&lt;target&gt;1.8&lt;/target&gt;</span><br><span class="line">&lt;encoding&gt;UTF-8&lt;/encoding&gt;</span><br><span class="line">&lt;compilerArguments&gt;</span><br><span class="line">&lt;extdirs&gt;$&#123;project.basedir&#125;/src/main/webapp/WEB-INF/lib&lt;/extdirs&gt;</span><br><span class="line">&lt;/compilerArguments&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="相关问题"><a href="#相关问题" class="headerlink" title="相关问题"></a>相关问题</h1><ul><li><a href="https://www.cnblogs.com/baixiaoshuai/p/8939989.html" target="_blank" rel="noopener">idea中的maven模块变成灰色的可能原因</a></li><li><a href="https://blog.csdn.net/qq_38663729/article/details/78275209" target="_blank" rel="noopener">jar包和war包的介绍与区别</a></li></ul><ul><li>由于没有mvn install操作，没有在本地下载依赖包到lib目录下，所以启动项目，会提示java.lang.ClassNotFoundException: org.springframework.web.context.ContextLoaderListener错误</li></ul>]]></content>
      
      
      <categories>
          
          <category> maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> snippet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java design pattern</title>
      <link href="/2017/12/20/java%20design%20pattern/"/>
      <url>/2017/12/20/java%20design%20pattern/</url>
      
        <content type="html"><![CDATA[<h2 id="Creational-Design-Patterns"><a href="#Creational-Design-Patterns" class="headerlink" title="Creational Design Patterns"></a>Creational Design Patterns</h2><h3 id="Singleton"><a href="#Singleton" class="headerlink" title="Singleton"></a>Singleton</h3><ul><li>different approaches to implement:<ul><li>Private constructor to restrict instantiation of the class from other classes.</li><li>Private static variable of the same class that is the only instance of the class.</li><li>Public static method that returns the instance of the class, this is the global access point for outer world to get the instance of the singleton class.</li></ul></li><li>design concerns with the implementation<ul><li>Eager initialization</li><li>Static block initialization</li><li>Lazy Initialization</li><li>Thread Safe Singleton</li><li>Bill Pugh Singleton Implementation</li><li>Using Reflection to destroy Singleton Pattern</li><li>Enum Singleton</li><li>Serialization and Singleton</li></ul></li></ul><h3 id="Factory"><a href="#Factory" class="headerlink" title="Factory"></a>Factory</h3><ul><li>Factory design pattern provides approach to code for interface rather than implementation.</li><li>Factory pattern removes the instantiation of actual implementation classes from client code. Factory pattern makes our code more robust, less coupled and easy to extend. For example, we can easily change PC class implementation because client program is unaware of this.</li><li>Factory pattern provides abstraction between implementation and client classes through inheritance.</li></ul><h3 id="Abstract-Factory"><a href="#Abstract-Factory" class="headerlink" title="Abstract Factory"></a>Abstract Factory</h3><ul><li>Abstract Factory design pattern provides approach to code for interface rather than implementation.</li><li>Abstract Factory pattern is “factory of factories” and can be easily extended to accommodate more products, for example we can add another sub-class Laptop and a factory LaptopFactory.</li><li>Abstract Factory pattern is robust and avoid conditional logic of Factory pattern.</li></ul><h3 id="Builder"><a href="#Builder" class="headerlink" title="Builder"></a>Builder</h3><ul><li>Builder pattern solves the issue with large number of optional parameters and inconsistent state by providing a way to build the object step-by-step and provide a method that will actually return the final Object.</li></ul><h3 id="Prototype"><a href="#Prototype" class="headerlink" title="Prototype"></a>Prototype</h3><ul><li>Prototype design pattern is used when the Object creation is a costly affair and requires a lot of time and resources and you have a similar object already existing.Prototype pattern provides a mechanism to copy the original object to a new object and then modify it according to our needs. Prototype design pattern uses java cloning to copy the object.</li></ul><h2 id="Structural-Design-Patterns"><a href="#Structural-Design-Patterns" class="headerlink" title="Structural Design Patterns"></a>Structural Design Patterns</h2><h3 id="Adapter"><a href="#Adapter" class="headerlink" title="Adapter"></a>Adapter</h3><ul><li>Adapter design pattern is one of the structural design pattern and its used so that two unrelated interfaces can work together. The object that joins these unrelated interface is called an Adapter.</li></ul><h3 id="Composite"><a href="#Composite" class="headerlink" title="Composite"></a>Composite</h3><ul><li>Composite design pattern is used when we have to represent a part-whole hierarchy.</li></ul><h3 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h3><ul><li>Proxy design pattern common uses are to control access or to provide a wrapper implementation for better performance.</li></ul><h3 id="Flyweight"><a href="#Flyweight" class="headerlink" title="Flyweight"></a>Flyweight</h3><ul><li>Use sharing to support large numbers of fine-grained objects efficiently</li></ul><h3 id="Facade"><a href="#Facade" class="headerlink" title="Facade"></a>Facade</h3><ul><li>Provide a unified interface to a set of interfaces in a subsystem. Facade Pattern defines a higher-level interface that makes the subsystem easier to use.</li></ul><h3 id="Bridge"><a href="#Bridge" class="headerlink" title="Bridge"></a>Bridge</h3><ul><li>Decouple an abstraction from its implementation so that the two can vary independently.</li></ul><h3 id="Decorator"><a href="#Decorator" class="headerlink" title="Decorator"></a>Decorator</h3><ul><li>Decorator design pattern is helpful in providing runtime modification abilities and hence more flexible. Its easy to maintain and extend when the number of choices are more.</li><li>The disadvantage of decorator design pattern is that it uses a lot of similar kind of objects (decorators).</li></ul><h2 id="Behavioral-Design-Patterns"><a href="#Behavioral-Design-Patterns" class="headerlink" title="Behavioral Design Patterns"></a>Behavioral Design Patterns</h2><h3 id="Template-Method"><a href="#Template-Method" class="headerlink" title="Template Method"></a>Template Method</h3><ul><li>Template method should consists of certain steps whose order is fixed and for some of the methods, implementation differs from base class to subclass. Template method should be final.</li><li>Most of the times, subclasses calls methods from super class but in template pattern, superclass template method calls methods from subclasses, this is known as Hollywood Principle – “don’t call us, we’ll call you.”.</li><li>Methods in base class with default implementation are referred as Hooks and they are intended to be overridden by subclasses, if you want some of the methods to be not overridden, you can make them final, for example in our case we can make buildFoundation() method final because if we don’t want subclasses to override it.</li></ul><h3 id="Media"><a href="#Media" class="headerlink" title="Media"></a>Media</h3><ul><li>Allows loose coupling by encapsulating the way disparate sets of objects interact and communicate with each other. Allows for the actions of each object set to vary independently of one another.</li></ul>]]></content>
      
      
      <categories>
          
          <category> design pattern </category>
          
      </categories>
      
      
        <tags>
            
            <tag> learn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rpc snippet</title>
      <link href="/2017/12/16/rpc%20snippet/"/>
      <url>/2017/12/16/rpc%20snippet/</url>
      
        <content type="html"><![CDATA[<p>RPC<br>Remote Procedure Call，远程过程调用</p><hr><p>服务之间的调用大多采用rpc的方式调用，或者消息队列的方式进行解耦。</p><p>RPC与http调用的区别<br>rpc是基于TCP/IP协议的，而HTTP服务主要是基于HTTP协议的，而http协议是在传输层协议TCP之上的。所以rpc效率更好。</p><p>RPC是指远程过程调用，也就是说两台服务器A，B，一个应用部署在A服务器上，想要调用B服务器上应用提供的函数/方法，<br>由于不在一个内存空间，不能直接调用，需要通过网络来表达调用的语义和传达调用的数据。</p><p>由于计算能力需要横向扩展，需要在多台机器组成的集群上部署应用。</p>]]></content>
      
      
      <categories>
          
          <category> rpc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> snippet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>restful snippet</title>
      <link href="/2017/12/08/restful%20snippet/"/>
      <url>/2017/12/08/restful%20snippet/</url>
      
        <content type="html"><![CDATA[<p><strong>用 URL 表示要操作的资源，用不同的 HTTP 请求（GET，POST，PUT，DELETE）描述对资源的操作，通过 HTTP 的状态码来判断此次对资源操作的结果</strong>，这就是 Restful风格。 </p><ol><li>GET 用来获取资源</li><li>POST 用来新增资源</li><li>PUT 用来更新资源</li><li>DELETE 用来删除资源</li></ol><ul><li>put和delete虽然是http协议的规范 ,但是遗憾的是,所有的无论是html4还是h5都不支持,所以我们在实际开开发过程当中要模拟这两种状态。 </li></ul><h3 id="Restful有什么意义"><a href="#Restful有什么意义" class="headerlink" title="Restful有什么意义"></a>Restful有什么意义</h3><ul><li>网络上的所有的信息体都看作一种资源，对网络资源的某种操作，都是通过 method 来确定的。 </li><li>对于现在的数据或者资源提供方，对外透露的接口一般是 restful 风格的，有利于不同系统之间的资源共享,而且只需要遵守规范不需要做另外的配置就能达到资源共享。 </li></ul><p><strong>restful 是用来外提供接口的，主要用于在不同的系统之间进行数据的交互。</strong></p><p><strong>ps：其实在做内部系统的时候并不会使用 restful 风格的 url 请求，只用普通的 @RequestMapping 来匹配请求就行了。</strong></p>]]></content>
      
      
      <categories>
          
          <category> restful </category>
          
      </categories>
      
      
        <tags>
            
            <tag> snippet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue snippet</title>
      <link href="/2017/12/07/vue%20snippet/"/>
      <url>/2017/12/07/vue%20snippet/</url>
      
        <content type="html"><![CDATA[<ul><li><p>vue实例初始化过程：</p><ul><li>设置数据监听</li><li>编译模板</li><li>将实例挂载到DOM并在数据变化时更新DOM等</li></ul></li><li><p>生命周期钩子：提供用户在不同阶段添加自己的代码的机会</p><ul><li>created，用来实例被创建之后执行代码</li><li>mounted,</li><li>updated,</li><li>destoryed</li></ul></li><li><p>指令（Directives）是带有<code>v-</code>前缀的特殊特性。指令特性的值预期是单个JavaScript表达式（<code>v-for</code>是例外情况），指令的职责是：当表达式的值改变时，将其产生的连带影响，响应式地作用于DOM。</p><ul><li><p><code>v-bind</code>，可以接受一个参数，用于响应式地更新HTML特性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 完整语法 --&gt;</span><br><span class="line">&lt;a v-bind:href=&quot;url&quot;&gt;...&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 缩写 --&gt;</span><br><span class="line">&lt;a :href=&quot;url&quot;&gt;...&lt;/a&gt;</span><br></pre></td></tr></table></figure></li><li><p><code>v-on</code>，用于监听DOM事件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 完整语法 --&gt;</span><br><span class="line">&lt;a v-on:click=&quot;doSomething&quot;&gt;...&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 缩写 --&gt;</span><br><span class="line">&lt;a @click=&quot;doSomething&quot;&gt;...&lt;/a&gt;</span><br></pre></td></tr></table></figure></li><li><p>修饰符<code>v-on:submit.prevent</code>,<code>.prevent</code> 修饰符告诉 <code>v-on</code> 指令对于触发的事件调用 <code>event.preventDefault()</code>。</p></li></ul></li></ul><hr><ul><li><p>计算属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;example&quot;&gt;</span><br><span class="line">  &lt;p&gt;Original message: &quot;&#123;&#123; message &#125;&#125;&quot;&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;Computed reversed message: &quot;&#123;&#123; reversedMessage &#125;&#125;&quot;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  el: &apos;#example&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: &apos;Hello&apos;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    // 计算属性的 getter</span><br><span class="line">    reversedMessage: function () &#123;</span><br><span class="line">      // `this` 指向 vm 实例</span><br><span class="line">      return this.message.split(&apos;&apos;).reverse().join(&apos;&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><p>计算属性缓存vs方法</p><p>在方法中实现同计算属性同样的效果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;Reversed message: &quot;&#123;&#123; reversedMessage() &#125;&#125;&quot;&lt;/p&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 在组件中</span><br><span class="line">methods: &#123;</span><br><span class="line">  reversedMessage: function () &#123;</span><br><span class="line">    return this.message.split(&apos;&apos;).reverse().join(&apos;&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>计算属性是基于它们的依赖进行缓存的</strong>。只在相关依赖发生改变时它们才会重新求值。 </p></li><li><p>计算属性vs侦听属性</p><p>侦听属性的用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;demo&quot;&gt;&#123;&#123; fullName &#125;&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  el: &apos;#demo&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    firstName: &apos;Foo&apos;,</span><br><span class="line">    lastName: &apos;Bar&apos;,</span><br><span class="line">    fullName: &apos;Foo Bar&apos;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    firstName: function (val) &#123;</span><br><span class="line">      this.fullName = val + &apos; &apos; + this.lastName</span><br><span class="line">    &#125;,</span><br><span class="line">    lastName: function (val) &#123;</span><br><span class="line">      this.fullName = this.firstName + &apos; &apos; + val</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>与计算属性的版本进行对比：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  el: &apos;#demo&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    firstName: &apos;Foo&apos;,</span><br><span class="line">    lastName: &apos;Bar&apos;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    fullName: function () &#123;</span><br><span class="line">      return this.firstName + &apos; &apos; + this.lastName</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>计算属性的setter</p><p>计算属性默认只有 getter ，不过在需要时你也可以提供一个 setter ： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// ...</span><br><span class="line">computed: &#123;</span><br><span class="line">  fullName: &#123;</span><br><span class="line">    // getter</span><br><span class="line">    get: function () &#123;</span><br><span class="line">      return this.firstName + &apos; &apos; + this.lastName</span><br><span class="line">    &#125;,</span><br><span class="line">    // setter</span><br><span class="line">    set: function (newValue) &#123;</span><br><span class="line">      var names = newValue.split(&apos; &apos;)</span><br><span class="line">      this.firstName = names[0]</span><br><span class="line">      this.lastName = names[names.length - 1]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">// ...</span><br></pre></td></tr></table></figure><p>现在再运行 <code>vm.fullName = &#39;John Doe&#39;</code> 时，setter 会被调用，<code>vm.firstName</code> 和 <code>vm.lastName</code> 也会相应地被更新。 </p></li></ul></li><li><p>侦听器</p><p>使用场景：当需要在数据变化时执行异步或开销较大的操作时 </p></li></ul><hr><ul><li><p>条件渲染</p><p><code>v-if</code></p></li><li><p>展示元素</p><p><code>v-show</code>，它只是简单地切换元素的css属性<code>display</code></p><p><em>**注意</em>：<code>v-show</code> 不支持 <code>&lt;template&gt;</code> 元素，也不支持 <code>v-else</code>。 </p><ul><li><p><code>v-if</code>vs<code>v-show</code></p><p>一般来说，<code>v-if</code> 有更高的切换开销，而 <code>v-show</code> 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用 <code>v-show</code> 较好；如果在运行时条件很少改变，则使用 <code>v-if</code> 较好。 </p></li></ul></li><li><p>列表渲染</p><p><code>v-for</code></p><ul><li><p>实例一</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul id=&quot;example-1&quot;&gt;</span><br><span class="line">  &lt;li v-for=&quot;item in items&quot;&gt;</span><br><span class="line">    &#123;&#123; item.message &#125;&#125;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var example1 = new Vue(&#123;</span><br><span class="line">  el: &apos;#example-1&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    items: [</span><br><span class="line">      &#123; message: &apos;Foo&apos; &#125;,</span><br><span class="line">      &#123; message: &apos;Bar&apos; &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>实例二</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul id=&quot;example-2&quot;&gt;</span><br><span class="line">  &lt;li v-for=&quot;(item, index) in items&quot;&gt;</span><br><span class="line">    &#123;&#123; parentMessage &#125;&#125; - &#123;&#123; index &#125;&#125; - &#123;&#123; item.message &#125;&#125;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var example2 = new Vue(&#123;</span><br><span class="line">  el: &apos;#example-2&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    parentMessage: &apos;Parent&apos;,</span><br><span class="line">    items: [</span><br><span class="line">      &#123; message: &apos;Foo&apos; &#125;,</span><br><span class="line">      &#123; message: &apos;Bar&apos; &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>可以用 of 替代 in 作为分隔符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-for=&quot;item of items&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></li><li><p>实例三</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#v-for-object&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    object: &#123;</span><br><span class="line">      firstName: &apos;John&apos;,</span><br><span class="line">      lastName: &apos;Doe&apos;,</span><br><span class="line">      age: 30</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul id=&quot;v-for-object&quot; class=&quot;demo&quot;&gt;</span><br><span class="line">  &lt;li v-for=&quot;value in object&quot;&gt;</span><br><span class="line">    &#123;&#123; value &#125;&#125;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-for=&quot;(value, key) in object&quot;&gt;</span><br><span class="line">  &#123;&#123; key &#125;&#125;: &#123;&#123; value &#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-for=&quot;(value, key, index) in object&quot;&gt;</span><br><span class="line">  &#123;&#123; index &#125;&#125;. &#123;&#123; key &#125;&#125;: &#123;&#123; value &#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>数组更新检测</p><ul><li>变异方法，会改变被这些方法调用的原始数组 <ul><li><code>push()</code></li><li><code>pop()</code></li><li><code>shift()</code></li><li><code>unshift()</code></li><li><code>splice()</code></li><li><code>sort()</code></li><li><code>reverse()</code></li></ul></li><li>也有非变异 (non-mutating method) 方法，例如：<code>filter()</code>, <code>concat()</code> 和 <code>slice()</code> 。这些不会改变原始数组，但<strong>总是返回一个新数组</strong>。</li></ul><hr></li><li><p>vue组件实例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 定义一个名为 button-counter 的新组件</span><br><span class="line">Vue.component(&apos;button-counter&apos;, &#123;</span><br><span class="line">  data: function () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      count: 0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  template: &apos;&lt;button v-on:click=&quot;count++&quot;&gt;You clicked me &#123;&#123; count &#125;&#125; times.&lt;/button&gt;&apos;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><p>prop可以在组件上注册的一些自定义特性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&apos;blog-post&apos;, &#123;</span><br><span class="line">  props: [&apos;title&apos;],</span><br><span class="line">  template: &apos;&lt;h3&gt;&#123;&#123; title &#125;&#125;&lt;/h3&gt;&apos;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;blog-post title=&quot;My journey with Vue&quot;&gt;&lt;/blog-post&gt;</span><br><span class="line">&lt;blog-post title=&quot;Blogging with Vue&quot;&gt;&lt;/blog-post&gt;</span><br><span class="line">&lt;blog-post title=&quot;Why Vue is so fun&quot;&gt;&lt;/blog-post&gt;</span><br></pre></td></tr></table></figure></li><li><p>调用内建的 <a href="https://cn.vuejs.org/v2/api/#vm-emit" target="_blank" rel="noopener"><strong>$emit</strong> 方法</a>并传入事件的名字，来向父级组件触发一个事件： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;button v-on:click=&quot;$emit(&apos;enlarge-text&apos;)&quot;&gt;</span><br><span class="line">  Enlarge text</span><br><span class="line">&lt;/button&gt;</span><br></pre></td></tr></table></figure><p>然后我们可以用 <code>v-on</code> 在博文组件上监听这个事件，就像监听一个原生 DOM 事件一样 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;blog-post</span><br><span class="line">...</span><br><span class="line">v-on:enlarge-text=&quot;postFontSize += 0.1&quot;</span><br><span class="line">&gt;&lt;/blog-post&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h3 id="组件注册"><a href="#组件注册" class="headerlink" title="组件注册"></a>组件注册</h3><ul><li><p>全局注册</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&apos;my-component-name&apos;, &#123;</span><br><span class="line">  // ... 选项 ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>局部注册</p><p>定义组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var ComponentA = &#123; /* ... */ &#125;</span><br><span class="line">var ComponentB = &#123; /* ... */ &#125;</span><br><span class="line">var ComponentC = &#123; /* ... */ &#125;</span><br></pre></td></tr></table></figure><p>使用组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">el: &apos;#app&apos;,</span><br><span class="line">components: &#123;</span><br><span class="line">  &apos;component-a&apos;: ComponentA,</span><br><span class="line">  &apos;component-b&apos;: ComponentB</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><p><strong>全局注册的行为必须在根 Vue 实例 (通过 new Vue) 创建之前发生</strong> </p><hr><h3 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h3>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> snippet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>neo4j snippet</title>
      <link href="/2017/11/21/neo4j%20snippet/"/>
      <url>/2017/11/21/neo4j%20snippet/</url>
      
        <content type="html"><![CDATA[<ul><li>cypher语法对大小写敏感，注意属性的大小写</li><li>导入csv出现乱码时，需要通过记事本更改编码格式，如果文本过大，需要一段一段的复制粘贴到新文本中，且以UTF-8格式编码</li><li>MERGE命令是CREATE命令和MATCH命令的组合。<code>MERGE = CREATE + MATCH</code></li></ul><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>1.<br>​    <strong>现象</strong>： 在外部处理csv数据，导入服务器，然后load csv到neo4j中，可能由于文件所属问题，不能成功导入csv，提示<code>Couldn&#39;t load the external resource</code>的错误。<br>​    <strong>解决</strong>：复制可以导入的csv文件为副本，把待导入的数据粘贴到副本中，load csv副本即可</p><p>2.<br>​    <strong>现象</strong>： 在外部处理csv数据，进行merge操作的时候，提示<code>cannot merge using null property value for uid</code>的错误。<br>​    <strong>解决</strong>：经发现，是由于指令中的属性拼写错误，导致<code>Neo.ClientError.Statement.SemanticError</code>的错误，例如把<code>sfzh</code>拼写成<code>sfhm</code>。</p><p>3.<br>​    <strong>现象</strong>： 大量数据的导入问题。<br>​    <strong>解决</strong>：需使用<a href="https://neo4j.com/docs/operations-manual/current/tools/import/" title="大量数据的导入" target="_blank" rel="noopener">https://neo4j.com/docs/operations-manual/current/tools/import/</a><br>​    <strong>注意</strong>：<code>Import tool is only for newly created databases.</code><br>​        <code>You can use LOAD CSV cypher command to load into an existing database.</code>也就是说neo4j-admin import只会在新建数据库的时候会用到</p>]]></content>
      
      
      <categories>
          
          <category> neo4j </category>
          
      </categories>
      
      
        <tags>
            
            <tag> snippet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jpa snippet</title>
      <link href="/2017/10/16/jpa%20snippet/"/>
      <url>/2017/10/16/jpa%20snippet/</url>
      
        <content type="html"><![CDATA[<h3 id="What-is"><a href="#What-is" class="headerlink" title="What is"></a>What is</h3><blockquote><p>Java Persistence API is a collection of classes and methods to persistently store the vast amounts of data into a database which is provided by the Oracle Corporation.</p></blockquote><h3 id="Where-to-use"><a href="#Where-to-use" class="headerlink" title="Where to use"></a>Where to use</h3><blockquote><p>To reduce the burden of writing codes for relational object management, a programmer follows the ‘JPA Provider’ framework, which allows easy interaction with database instance. Here the required framework is taken over by JPA.</p></blockquote><p><img src="https://www.tutorialspoint.com/jpa/images/jpa_provider.png" alt=""></p><ul><li><p>JPA Pro</p><blockquote><p>JPA is an open source API, therefore various enterprise vendors such as Oracle, Redhat, Eclipse, etc. provide new products by adding the JPA persistence flavor in them. Some of these products include:<strong>Hibernate, Eclipselink, Toplink, Spring Data JPA, etc.</strong></p></blockquote></li></ul><h3 id="Architecture"><a href="#Architecture" class="headerlink" title="Architecture"></a>Architecture</h3><p><img src="https://www.tutorialspoint.com/jpa/images/jpa_class_level_architecture.png" alt=""></p><ul><li><p>jpa class relationships</p><p><img src="https://www.tutorialspoint.com/jpa/images/jpa_class_relationships.png" alt=""></p></li><li><p>ORM Architecture</p><p><img src="https://www.tutorialspoint.com/jpa/images/object_relational_mapping.png" alt=""></p></li></ul><ul><li>Entity Relationships<ul><li>@ManyToOne Relation</li><li>@OneToMany Relation</li><li>@OneToOne Relation</li><li>@ManyToMany Relation</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> jpa </category>
          
      </categories>
      
      
        <tags>
            
            <tag> snippet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java stream</title>
      <link href="/2017/10/16/java%20stream/"/>
      <url>/2017/10/16/java%20stream/</url>
      
        <content type="html"><![CDATA[<h3 id="Creating-Java-Streams"><a href="#Creating-Java-Streams" class="headerlink" title="Creating Java Streams"></a>Creating Java Streams</h3><ol><li><p>We can use Stream.of() to create a stream from similar type of data. For example, we can create Java Stream of integers from a group of int or Integer objects.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;Integer&gt; stream = Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br></pre></td></tr></table></figure></li><li><p>We can use Stream.of() with an array of Objects to return the stream. Note that it doesn’t support autoboxing, so we can’t pass primitive type array.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;Integer&gt; stream = Stream.of(<span class="keyword">new</span> Integer[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;); </span><br><span class="line"><span class="comment">//works fine</span></span><br><span class="line"></span><br><span class="line">Stream&lt;Integer&gt; stream1 = Stream.of(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;); </span><br><span class="line"><span class="comment">//Compile time error, Type mismatch: cannot convert from Stream&lt;int[]&gt; to Stream&lt;Integer&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>We can use Collection stream() to create sequential stream and parallelStream() to create parallel stream.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; myList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++) myList.add(i);</span><br><span class="line"></span><br><span class="line"><span class="comment">//sequential stream</span></span><br><span class="line">Stream&lt;Integer&gt; sequentialStream = myList.stream();</span><br><span class="line"></span><br><span class="line"><span class="comment">//parallel stream</span></span><br><span class="line">Stream&lt;Integer&gt; parallelStream = myList.parallelStream();</span><br></pre></td></tr></table></figure></li><li><p>We can use Stream.generate() and Stream.iterate() methods to create Stream.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;String&gt; stream1 = Stream.generate(() -&gt; &#123;<span class="keyword">return</span> <span class="string">"abc"</span>;&#125;);</span><br><span class="line">Stream&lt;String&gt; stream2 = Stream.iterate(<span class="string">"abc"</span>, (i) -&gt; i);</span><br></pre></td></tr></table></figure></li><li><p>Using Arrays.stream() and String.chars() methods.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LongStream is = Arrays.stream(<span class="keyword">new</span> <span class="keyword">long</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;);</span><br><span class="line">IntStream is2 = <span class="string">"abc"</span>.chars();</span><br></pre></td></tr></table></figure></li></ol><h3 id="Converting-Java-Stream-to-Collection-or-Array"><a href="#Converting-Java-Stream-to-Collection-or-Array" class="headerlink" title="Converting Java Stream to Collection or Array"></a>Converting Java Stream to Collection or Array</h3><ol><li><p>We can use java Stream collect() method to get List, Map or Set from stream.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;Integer&gt; intStream = Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line">List&lt;Integer&gt; intList = intStream.collect(Collectors.toList());</span><br><span class="line">System.out.println(intList); <span class="comment">//prints [1, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line">intStream = Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>); <span class="comment">//stream is closed, so we need to create it again</span></span><br><span class="line">Map&lt;Integer,Integer&gt; intMap = intStream.collect(Collectors.toMap(i -&gt; i, i -&gt; i+<span class="number">10</span>));</span><br><span class="line">System.out.println(intMap); <span class="comment">//prints &#123;1=11, 2=12, 3=13, 4=14&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>We can use stream toArray() method to create an array from the stream.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;Integer&gt; intStream = Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line">Integer[] intArray = intStream.toArray(Integer[]::<span class="keyword">new</span>);</span><br><span class="line">System.out.println(Arrays.toString(intArray)); <span class="comment">//prints [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="Java-Stream-Intermediate-Operations"><a href="#Java-Stream-Intermediate-Operations" class="headerlink" title="Java Stream Intermediate Operations"></a>Java Stream Intermediate Operations</h3><ol><li><p>Stream filter() : We can use filter() method to test stream elements for a condition and generate filtered list.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; myList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++) myList.add(i);</span><br><span class="line">Stream&lt;Integer&gt; sequentialStream = myList.stream();</span><br><span class="line"></span><br><span class="line">Stream&lt;Integer&gt; highNums = sequentialStream.filter(p -&gt; p &gt; <span class="number">90</span>); <span class="comment">//filter numbers greater than 90</span></span><br><span class="line">System.out.print(<span class="string">"High Nums greater than 90="</span>);</span><br><span class="line">highNums.forEach(p -&gt; System.out.print(p+<span class="string">" "</span>));</span><br><span class="line"><span class="comment">//prints "High Nums greater than 90=91 92 93 94 95 96 97 98 99 "</span></span><br></pre></td></tr></table></figure></li><li><p>Stream map() : We can use map() to apply functions to an stream. Let’s see how we can use it to apply upper case function to a list of Strings.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;String&gt; names = Stream.of(<span class="string">"aBc"</span>, <span class="string">"d"</span>, <span class="string">"ef"</span>);</span><br><span class="line">System.out.println(names.map(s -&gt; &#123;</span><br><span class="line"><span class="keyword">return</span> s.toUpperCase();</span><br><span class="line">&#125;).collect(Collectors.toList()));</span><br><span class="line"><span class="comment">//prints [ABC, D, EF]</span></span><br></pre></td></tr></table></figure></li><li><p>Stream sorted() : We can use sorted() to sort the stream elements by passing Comparator argument.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;String&gt; names2 = Stream.of(<span class="string">"aBc"</span>, <span class="string">"d"</span>, <span class="string">"ef"</span>, <span class="string">"123456"</span>);</span><br><span class="line">List&lt;String&gt; reverseSorted = names2.sorted(Comparator.reverseOrder()).collect(Collectors.toList());</span><br><span class="line">System.out.println(reverseSorted); <span class="comment">// [ef, d, aBc, 123456]</span></span><br><span class="line"></span><br><span class="line">Stream&lt;String&gt; names3 = Stream.of(<span class="string">"aBc"</span>, <span class="string">"d"</span>, <span class="string">"ef"</span>, <span class="string">"123456"</span>);</span><br><span class="line">List&lt;String&gt; naturalSorted = names3.sorted().collect(Collectors.toList());</span><br><span class="line">System.out.println(naturalSorted); <span class="comment">//[123456, aBc, d, ef]</span></span><br></pre></td></tr></table></figure></li><li><p>Stream flatMap() : We can use flatMap() to create a stream from the stream of list. Let’s see a simple example to clear this doubt.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;List&lt;String&gt;&gt; namesOriginalList = Stream.of(</span><br><span class="line">Arrays.asList(<span class="string">"Pankaj"</span>), </span><br><span class="line">Arrays.asList(<span class="string">"David"</span>, <span class="string">"Lisa"</span>),</span><br><span class="line">Arrays.asList(<span class="string">"Amit"</span>));</span><br><span class="line"><span class="comment">//flat the stream from List&lt;String&gt; to String stream</span></span><br><span class="line">Stream&lt;String&gt; flatStream = namesOriginalList</span><br><span class="line">.flatMap(strList -&gt; strList.stream());</span><br><span class="line"></span><br><span class="line">flatStream.forEach(System.out::println);</span><br></pre></td></tr></table></figure></li></ol><h3 id="Java-Stream-Terminal-Operations"><a href="#Java-Stream-Terminal-Operations" class="headerlink" title="Java Stream Terminal Operations"></a>Java Stream Terminal Operations</h3><ol><li><p>Stream reduce() example: We can use reduce() to perform a reduction on the elements of the stream, using an associative accumulation function, and return an Optional. Let’s see how we can use it multiply the integers in a stream.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;Integer&gt; numbers = Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">Optional&lt;Integer&gt; intOptional = numbers.reduce((i,j) -&gt; &#123;<span class="keyword">return</span> i*j;&#125;);</span><br><span class="line"><span class="keyword">if</span>(intOptional.isPresent()) System.out.println(<span class="string">"Multiplication = "</span>+intOptional.get()); <span class="comment">//120</span></span><br></pre></td></tr></table></figure></li><li><p>Stream count() example: We can use this terminal operation to count the number of items in the stream.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;Integer&gt; numbers1 = Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line">System.out.println(<span class="string">"Number of elements in stream="</span>+numbers1.count()); <span class="comment">//5</span></span><br></pre></td></tr></table></figure></li><li><p>Stream forEach() example: This can be used for iterating over the stream. We can use this in place of iterator. Let’s see how to use it for printing all the elements of the stream.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;Integer&gt; numbers2 = Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line">numbers2.forEach(i -&gt; System.out.print(i+<span class="string">","</span>)); <span class="comment">//1,2,3,4,5,</span></span><br></pre></td></tr></table></figure></li><li><p>Stream match() examples: Let’s see some of the examples for matching methods in Stream API.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;Integer&gt; numbers3 = Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line">System.out.println(<span class="string">"Stream contains 4? "</span>+numbers3.anyMatch(i -&gt; i==<span class="number">4</span>));</span><br><span class="line"><span class="comment">//Stream contains 4? true</span></span><br><span class="line"></span><br><span class="line">Stream&lt;Integer&gt; numbers4 = Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line">System.out.println(<span class="string">"Stream contains all elements less than 10? "</span>+numbers4.allMatch(i -&gt; i&lt;<span class="number">10</span>));</span><br><span class="line"><span class="comment">//Stream contains all elements less than 10? true</span></span><br><span class="line"></span><br><span class="line">Stream&lt;Integer&gt; numbers5 = Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line">System.out.println(<span class="string">"Stream doesn't contain 10? "</span>+numbers5.noneMatch(i -&gt; i==<span class="number">10</span>));</span><br><span class="line"><span class="comment">//Stream doesn't contain 10? true</span></span><br></pre></td></tr></table></figure></li><li><p>Stream findFirst() :This is a short circuiting terminal operation, let’s see how we can use it to find the first string from a stream starting with D.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;String&gt; names4 = Stream.of(<span class="string">"Pankaj"</span>,<span class="string">"Amit"</span>,<span class="string">"David"</span>, <span class="string">"Lisa"</span>);</span><br><span class="line">Optional&lt;String&gt; firstNameWithD = names4.filter(i -&gt; i.startsWith(<span class="string">"D"</span>)).findFirst();</span><br><span class="line"><span class="keyword">if</span>(firstNameWithD.isPresent())&#123;</span><br><span class="line">System.out.println(<span class="string">"First Name starting with D="</span>+firstNameWithD.get()); <span class="comment">//David</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="some-example"><a href="#some-example" class="headerlink" title="some example"></a>some example</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//merge collection</span></span><br><span class="line">List&lt;String&gt; resultPersonnos = Stream.of(list1, list2)</span><br><span class="line">                .flatMap(Collection::stream)</span><br><span class="line">                .distinct()</span><br><span class="line">                .sorted()</span><br><span class="line">                .collect(Collectors.toList());</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> learn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sublime snippet</title>
      <link href="/2017/09/07/sublime%20snippet/"/>
      <url>/2017/09/07/sublime%20snippet/</url>
      
        <content type="html"><![CDATA[<ul><li><p>安装插件</p><p><code>CTRL + SHIFT + P并且输入Package Control: Install Package</code></p></li><li><p>html格式化</p><p><code>输入！，然后按 TAB</code></p></li><li><p>Pretty JSON插件</p><p><code>格式化  CTRL + ALT + J</code></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> sublime </category>
          
      </categories>
      
      
        <tags>
            
            <tag> command </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jquery snippet</title>
      <link href="/2017/08/05/jquery%20snippet/"/>
      <url>/2017/08/05/jquery%20snippet/</url>
      
        <content type="html"><![CDATA[<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><ul><li><p>设置标签属性</p><p><code>$(&quot;div&quot;).attr(&quot;属性名&quot;,&quot;属性值&quot;);</code></p></li><li><p>设置标签样式</p><p><code>$(&quot;div&quot;).css(&quot;color&quot;,&quot;yellow&quot;);</code>或<code>$(&quot;div&quot;).css(&quot;padding-left&quot;))</code></p></li><li><p>移除属性</p><p><code>$(&quot;div&quot;).removeAttr(&quot;id&quot;);</code></p></li><li><p>遍历数组</p><ul><li><p>原生js有两种方法都可以使用[for(var i;i&lt;arr.length;i++){},for(var i in arr){}] </p></li><li><p>jquery有两个函数共计四种方法都可以使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$.each(arr,<span class="function"><span class="keyword">function</span>(<span class="params">i,item</span>)</span>&#123;&#125;),</span><br><span class="line">$(arr).each(<span class="function"><span class="keyword">function</span>(<span class="params">i,item</span>)</span>&#123;&#125;), </span><br><span class="line">$.map(arr,<span class="function"><span class="keyword">function</span>(<span class="params">i,item</span>)</span>&#123;&#125;), </span><br><span class="line">$(arr).map(<span class="function"><span class="keyword">function</span>(<span class="params">i,item</span>)</span>&#123;&#125;)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>遍历对象 </p><ul><li><p>原生js有一种方法可以使用[for(var i in obj){}] </p></li><li><p>jquery有两个函数共计两种方法可以使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$.each(obj,<span class="function"><span class="keyword">function</span>(<span class="params">i,item</span>)</span>&#123;&#125;)</span><br><span class="line">$.map(obj,<span class="function"><span class="keyword">function</span>(<span class="params">i,item</span>)</span>&#123;&#125;)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Jquery中的ajax在默认不写async情况下，请求为异步请求；即：async:true</p></li><li><p><code>$(function(){ })</code>是定义一个匿名函数，它是<code>$(document).ready(function(){})</code>的简写</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> jquery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> snippet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>word record</title>
      <link href="/2017/05/30/work%20record/"/>
      <url>/2017/05/30/work%20record/</url>
      
        <content type="html"><![CDATA[<p><strong>关于代码编译的事情</strong></p><ul><li><p>问题</p><ul><li>由于一些配置项写在统一的配置文档中，代码从配置文件中读取确定的配置项；此时操作的文本路径是要追加上根目录的路径，然而开发环境和生成环境是不一样的。项目在打包的过程中，就确定了文本路径，这样导致两边环境的配置文档读取结果不一致。</li></ul></li><li><p>解决办法</p><ul><li>把文件路径精确写入</li><li>在生成环境下编译代码</li></ul></li></ul><hr><p><strong>关于读取数据量大的excel文件</strong></p><ul><li><p>问题</p><ul><li>项目部署到tomcat中，每次读取大于1M的文件时，会停滞在<code>org.apache.poi.ss.usermodel.Workbook workbook = new XSSFWorkbook(is);</code>,直到tomcat出现报错信息<code>java.lang.OutOfMemoryError: Java heap space</code>,即java虚拟机堆溢出的错误。</li></ul></li><li><p>现象描述</p><ul><li><p>手动设置Xms,Xmx的大小，在/bin/catalina.bat（windows环境）配置中，添加<code>JAVA_OPTS=&quot;-server -Xms10G -Xmx20G&quot;</code>,不知道什么原因，重启服务，仍旧报一样的错。（当我在自己电脑上运行程序，操作同样大小的文档时，也没有报错，何况自己电脑才8G内存，远不及服务器，再则就是自身电脑tomcat的配置也是默认的）</p></li><li><p>内存总体分为年轻代(young),老年代(old),永久代(permanent),如图</p><p><img src="https://s1.ax2x.com/2018/05/31/7OCHl.jpg" alt="7OCHl.jpg"></p></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> tips </category>
          
      </categories>
      
      
        <tags>
            
            <tag> work </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux snippet</title>
      <link href="/2017/05/09/linux%20snippet/"/>
      <url>/2017/05/09/linux%20snippet/</url>
      
        <content type="html"><![CDATA[<ul><li>/bin/    用以存储二进制可执行命令文件，/usr/bin/也存储了一些基于用户的命令文件。</li><li>/sbin/    许多系统命令的存储位置，/usr/sbin/中也包括了许多命令。</li><li>/root/    超级用户，即根用户的主目录。</li><li>/home/    普通用户的默认目录，在该目录下，每个用户拥有一个以用户名命名的文件夹。</li><li>/boot/    存放Ubuntu内核和系统启动文件。</li><li>/mnt/     通常包括系统引导后被挂载的文件系统的挂载点。</li><li>/dev/    存储设备文件，包括计算机的所有外部设备，如硬盘、是、键盘、鼠标等。</li><li>/etc/    存放文件管理配置文件和目录。</li><li>/lib/    存储各种程序所需要的共享库文件。</li><li>/lost+found/    一般为空，当非法关机时，会存放一些零散的文件。</li><li>/var/    用于存放很多不断变化的文件，例如日志文件等。</li><li>/usr/    包括与系统用户直接有关的文件和目录</li><li>/media/    存放Ubuntu系统自动挂载的设备文件。</li><li>/proc/    这是一个虚拟目录，它是内存的映射，包括系统信息和进程信息。</li><li>/tmp/    存储系统和用户的临时信息。</li><li>/initrd/    用来加载启动时临时挂载的initrd.img映像文件，以及载入所要的设备模块目录。</li><li>/opt/    作为可选文件和程序的存放目录，否则将无法引导计算机进入操作系统。</li><li>/srv/    存储系统提供的服务数据。</li><li>/sys/    系统设备和文件层次结构，并向用户程序提供详细的内核数据信息。</li></ul>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> snippet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cache snippet</title>
      <link href="/2017/03/07/cache%20snippet/"/>
      <url>/2017/03/07/cache%20snippet/</url>
      
        <content type="html"><![CDATA[<ul><li>what is cache ?    why use cache ?<ol><li>Cache是高速缓冲存储器 一种特殊的存储器子系统，其中复制了频繁使用的数据以利于快速访问</li><li>凡是位于速度相差较大的两种硬件/软件之间的，用于协调两者数据传输速度差异的结构，均可称之为 Cache </li></ol></li><li>缓存的分类<ul><li>操作系统磁盘缓存-&gt;减少磁盘机械操作</li><li>数据库缓存-&gt;减少文件系统I/O</li><li>应用程序缓存-&gt;减少对数据库的查询 </li><li>Web服务器缓存-&gt;减少应用服务器请求</li><li>客户端浏览器缓存-&gt;减少对网站的访问</li></ul></li></ul><h3 id="技术框架"><a href="#技术框架" class="headerlink" title="技术框架"></a>技术框架</h3><ul><li><strong>Encache</strong><ul><li>设计于提高在数据从RDBMS中取出来的高花费、高延迟采取的一种缓存方案 </li><li>java编写，直接在jvm虚拟机中缓存，速度快，效率高；但是缓存共享麻烦，集群分布式应用不方便。</li><li>特点：<ul><li>快</li><li>简单</li><li>袖珍</li><li>轻量</li><li>扩展</li><li>监听器</li></ul></li></ul></li><li><strong>memcache</strong><ul><li>一种高性能、分布式对象缓存系统，最初设计于缓解动态网站数据库加载数据的延迟性，你可以把它想象成一个大的内存HashTable，就是一个key-value键值缓存。</li><li>C语言编写</li><li>特点：<ul><li>依赖</li><li>多线程支持</li><li>高性能</li></ul></li></ul></li><li><strong>redis</strong><ul><li>通过socket访问到缓存服务，效率比encache低，比数据库要快很多，处理集群和分布式缓存方便，有成熟的方案。</li><li>特性：<ul><li>支持持久化</li><li>丰富的数据类型</li><li>高性能</li><li>主从复制</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> cache </category>
          
      </categories>
      
      
        <tags>
            
            <tag> snippet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>other snippet</title>
      <link href="/2017/02/16/other%20tips/"/>
      <url>/2017/02/16/other%20tips/</url>
      
        <content type="html"><![CDATA[<h2 id="other-snippet"><a href="#other-snippet" class="headerlink" title="other snippet"></a>other snippet</h2><h3 id="generate-code-based-proto-file"><a href="#generate-code-based-proto-file" class="headerlink" title="generate code based proto file"></a>generate code based proto file</h3><p><code>protoc --proto_path=扫描目录 --java_out=代码生成目录 proto文件目录</code></p><blockquote><p>protoc –proto_path=src –java_out=build/gen src/foo.proto</p></blockquote><h3 id="Spring-provides-three-way-of-scheduling"><a href="#Spring-provides-three-way-of-scheduling" class="headerlink" title="Spring provides three way of scheduling:"></a>Spring provides three way of scheduling:</h3><ul><li>@Scheduled</li><li>Via Quartz</li><li>Via JDK Timer</li></ul><hr><h3 id="one-word"><a href="#one-word" class="headerlink" title="one word"></a>one word</h3><ul><li>\x对应的是UTF-8编码的数据</li></ul>]]></content>
      
      
      <categories>
          
          <category> fragment </category>
          
      </categories>
      
      
        <tags>
            
            <tag> snippet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html snippet</title>
      <link href="/2017/02/10/html%20snippet/"/>
      <url>/2017/02/10/html%20snippet/</url>
      
        <content type="html"><![CDATA[<h3 id="label"><a href="#label" class="headerlink" title="label"></a>label</h3><ul><li><p>chrome页面跳转，需要使用 i 标签，不能使用 button 标签，因为在button的点击事件中，window.location.href不起作用。（但firefox起作用）</p></li><li><p>textarea标签里面的属性要紧靠书写，且不要换行，不然，会显示textarea默认赋值为多个空格</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">type</span>=<span class="string">"text"</span><span class="attr">class</span>=<span class="string">"form-control"</span><span class="attr">id</span>=<span class="string">"obj_address"</span><span class="attr">placeholder</span>=<span class="string">"地址（必填）"</span><span class="attr">name</span>=<span class="string">"address"</span><span class="attr">isvalid</span>=<span class="string">"yes"</span><span class="attr">checkexpession</span>=<span class="string">"NotNull"</span><span class="attr">errormsg</span>=<span class="string">"地址"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><h4 id="mbp"><a href="#mbp" class="headerlink" title="mbp"></a>mbp</h4><ul><li><p>margin</p><blockquote><p>是设置两个标签的间隔，也就是距离</p></blockquote></li><li><p>padding</p><blockquote><p>比如一个p标签，它是100px*100px,我们使用的时候p标签的文字是贴着p标签的最左侧的，想要它的文字距离边界远一点，好看一点，就是需要做一个样式的调整，我们可以用到padding这个属性，假如说设置是10px，就是说这个p标签的大小依然是100px<em>100px，但是它的内容是变成了90px\</em>90px；</p></blockquote></li><li><p>border</p><blockquote><p>boarder是设置边框的意思，他和padding的区别在于，padding是在标签边缘往里缩减，而border是在标签的边缘往外扩展，也就是说是一个100px*100px的标签，我设置他的border为20px，我们就可以看到整个标签的大小是变成了120px*120px，也就是说多出来了120px，其标签的内容也还是100px*100px的</p></blockquote></li></ul><h3 id="块级、行级"><a href="#块级、行级" class="headerlink" title="块级、行级"></a>块级、行级</h3><ul><li>p标签是块级元素，span元素是行内元素。内元素可以写在块级元素里面  比如<code>&lt;p&gt;&lt;span&gt;内容&lt;/span&gt;&lt;/p&gt;</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> snippet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea skill</title>
      <link href="/2016/12/16/idea%20skill/"/>
      <url>/2016/12/16/idea%20skill/</url>
      
        <content type="html"><![CDATA[<h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><ul><li>参照<a href="https://blog.csdn.net/q547550831/article/details/79129311" target="_blank" rel="noopener">一大坨插件</a></li><li>现在已安装的插件：<ul><li>Translation(翻译工具)</li><li>CheckStyle-IDEA（代码规范）</li><li>FindBugs-IDEA(静态分析工具)</li><li>BashSupport（Linux Bash支持，对bash语法的高亮支持）</li><li>CodeGlance（类似SublimeText的Mini Map插件 ）</li><li>Key promoter（提示功能快捷键）</li><li>GsonFormat（暂未安装，其功能为把json格式的内容转成Object）</li><li>jRebel（暂未安装，热部署插件）</li></ul></li></ul><ul><li><p><strong>scratches草稿功能</strong></p><ul><li>参照<a href="https://blog.csdn.net/theape/article/details/70194185" target="_blank" rel="noopener">强大的草稿功能</a></li></ul></li><li><p><strong>Lombok </strong>插件</p><p>提高编码效率</p></li></ul><h3 id="中文编码配置"><a href="#中文编码配置" class="headerlink" title="中文编码配置"></a>中文编码配置</h3><ul><li><p>有关Properties文件中的中文unicode转码问题</p><p>在IDEA中创建了properties文件，发现默认中文不会自动进行unicode转码，需要配置</p><p><img src="https://i.imgur.com/W2a0nMR.jpg" alt=""></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> idea </category>
          
      </categories>
      
      
        <tags>
            
            <tag> skill </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack snippet</title>
      <link href="/2016/12/16/webpack%20snippet/"/>
      <url>/2016/12/16/webpack%20snippet/</url>
      
        <content type="html"><![CDATA[<ul><li><p>四个核心概念：</p><p>入口    entry</p><p>输出    output</p><p>loader</p><p>插件    plugins</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> snippet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tomcat snippet</title>
      <link href="/2016/12/16/tomcat%20snippet/"/>
      <url>/2016/12/16/tomcat%20snippet/</url>
      
        <content type="html"><![CDATA[<h3 id="配置项"><a href="#配置项" class="headerlink" title="配置项"></a>配置项</h3><ul><li>项目部署到linux的tomcat中，验证码在页面中刷新不了，需要修改<code>catalina.sh</code>,添加<code>JAVA_OPTS=&quot;$JAVA_OPTS -Djava.awt.headless=true&quot;</code>配置</li></ul><h3 id="设置虚拟路径的两种方法"><a href="#设置虚拟路径的两种方法" class="headerlink" title="设置虚拟路径的两种方法"></a>设置虚拟路径的两种方法</h3><ul><li>使用tomcat自身设置虚拟路径</li></ul><ol><li><p>在tomcat的server.xml配置文件中，配置context标签</p><p>Context标签中的相关属性：</p><ul><li>path: 指定访问该web应用的URL入口，即虚拟文件目录</li><li>docBase:为访问的真实路径</li><li>reloadable:如果这个属性设为true，tomcat服务器在运行状态下会监视在WEB-INF/classes和WEB-INF/lib目录下class文件的改动， 如果监测到有class文件被更新的，服务器会自动重新加载Web应用。 </li></ul></li><li><p>如果这事使用idea启动项目，需要将Deploy applications configured in Tomcat instance勾上 </p></li></ol><ul><li><p>单独设置IDEA进行设置虚拟路径</p><ol><li><p>上图的中<code>Deploy applications configured in Tomcat instance</code>不要勾上 </p></li><li><p>选中<code>edit configurations</code>，点击加号按钮，选择实际路径，并在<code>Appication context</code>中填写虚拟路径。</p></li></ol></li></ul><h3 id="设置URL请求参数长度"><a href="#设置URL请求参数长度" class="headerlink" title="设置URL请求参数长度"></a>设置URL请求参数长度</h3><ul><li><p>问题描述</p><p>post请求，本身请求参数无大小限制，但是一般的服务器像tomcat都有默认大小，如果传输的参数超过了默认大小，则会报错<code>http post request header is too large</code></p></li><li><p>解决办法</p><p>在server.xml中<code>&lt;Connector connectionTimeout=&quot;20000&quot; port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot; redirectPort=&quot;8443&quot;/&gt;</code>，添加设置项<code>maxHttpHeaderSize =&quot;102400&quot;</code></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> tomcat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> snippet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring snippet</title>
      <link href="/2016/10/16/spring%20snippet/"/>
      <url>/2016/10/16/spring%20snippet/</url>
      
        <content type="html"><![CDATA[<h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><h4 id="传JSON字符串-RequestBody接收"><a href="#传JSON字符串-RequestBody接收" class="headerlink" title="传JSON字符串+@RequestBody接收"></a>传JSON字符串+@RequestBody接收</h4><ul><li><p>前端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">function <span class="title">icheckDelete</span><span class="params">(url)</span></span>&#123;</span><br><span class="line">    var parms = &#123;</span><br><span class="line">        list : array <span class="comment">//这是个数组</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        dataType: <span class="string">"JSON"</span>,</span><br><span class="line">        contentType:<span class="string">'application/json;charset=UTF-8'</span>,<span class="comment">//关键是要加上这行</span></span><br><span class="line">        traditional:<span class="keyword">true</span>,<span class="comment">//这使json格式的字符不会被转码</span></span><br><span class="line">        data: JSON.stringify(parms),</span><br><span class="line">        type: <span class="string">"DELETE"</span>, </span><br><span class="line">        timeout: <span class="number">20000</span>,</span><br><span class="line">        url: url,</span><br><span class="line">        success : function () &#123;</span><br><span class="line">            alert(<span class="string">"删除成功！"</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        error : function (data)&#123;</span><br><span class="line">            alert(data.responseText);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>后端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Controller:</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"deleteList"</span>, method = RequestMethod.DELETE)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">delete</span><span class="params">(@RequestBody DeleteListRequest request)</span> <span class="keyword">throws</span> WebTransException</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 逻辑代码 */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> snippet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java Concept of The Day</title>
      <link href="/2016/10/16/Java%20Concept%20of%20The%20Day/"/>
      <url>/2016/10/16/Java%20Concept%20of%20The%20Day/</url>
      
        <content type="html"><![CDATA[<ul><li>Stack is used only for execution purpose. Heap is used for storage purpose.<h3 id="Non-Static-Members-And-Their-Memory-Management-In-Java"><a href="#Non-Static-Members-And-Their-Memory-Management-In-Java" class="headerlink" title="Non-Static Members And Their Memory Management In Java"></a>Non-Static Members And Their Memory Management In Java</h3></li><li>Non-Static variables and Non-Static methods are non-static components of a class. These are also called instance components of a class. Non-static components are stored inside the object memory. Each object will have their own copy of non-static components. But,  static components are common to all objects of that class.<h3 id="IIB-Instance-Initialization-Block"><a href="#IIB-Instance-Initialization-Block" class="headerlink" title="IIB-Instance Initialization Block"></a>IIB-Instance Initialization Block</h3></li><li>IIB is used to initialize instance variables or non-static variables.</li><li>IIB blocks will not be called from the constructor in which this() statement is written as a first statement. <h3 id="super-and-this-keywords-in-java"><a href="#super-and-this-keywords-in-java" class="headerlink" title="super and this keywords in java"></a>super and this keywords in java</h3></li><li>super class constructor is called by super() calling statement. You can’t use super() calling statement outside the constructor. By default, super() calling statement is the first statement in any constructor. </li><li>this() is the calling statement to same class constructor. It must be used within constructor only. If it is used, it must be the first statement in the constructor.</li><li>You can’t use super and this keywords in a static method and in a static initialization block even though you are referring static members.<h3 id="10-Points-Every-Java-Programmer-Should-Know-About-final-keyword-in-java"><a href="#10-Points-Every-Java-Programmer-Should-Know-About-final-keyword-in-java" class="headerlink" title="10 Points Every Java Programmer Should Know About final keyword in java"></a>10 Points Every Java Programmer Should Know About final keyword in java</h3></li><li>Any class or any method can be either abstract or final but not both. abstract and final are totally opposite. Because, abstract class or abstract method must be implemented or modified in the sub classes but final does not allow this. This creates an ambiguity.</li><li>The global variable which is declared as final and static remains unchanged for the whole execution. Because, Static members are stored in the class memory and they are loaded only once in the whole execution. They are common to all objects of the class. If you declare static variables as final, any of the objects can’t change their value as it is final. Therefore, variables declared as final and static are sometimes referred to as Constants. All fields of interfaces are referred as constants, because they are final and static by default.<h3 id="Garbage-Collection-And-finalize-method-In-Java"><a href="#Garbage-Collection-And-finalize-method-In-Java" class="headerlink" title="Garbage Collection And finalize() method In Java"></a>Garbage Collection And finalize() method In Java</h3></li><li>Whenever you run a java program, JVM creates three threads. 1) main thread   2) Thread Scheduler   3) Garbage Collector Thread. In these three threads, main thread is a user thread and remaining two are daemon threads which run in background.<h3 id="Access-Modifiers-In-Java"><a href="#Access-Modifiers-In-Java" class="headerlink" title="Access Modifiers In Java"></a>Access Modifiers In Java</h3></li><li>Class can not be a private except inner classes. Inner classes are nothing but again members of outer class. So members of a class (field, method, constructor and inner class) can be private but not the class itself.<br><img src="https://i.imgur.com/6h3llC0.jpg" alt=""><h3 id="What-Are-Access-And-Non-Access-Modifiers-In-Java"><a href="#What-Are-Access-And-Non-Access-Modifiers-In-Java" class="headerlink" title="What Are Access And Non-Access Modifiers In Java?"></a>What Are Access And Non-Access Modifiers In Java?</h3><img src="https://i.imgur.com/nB7eV1i.jpg" alt=""><h3 id="Type-Casting-In-Java"><a href="#Type-Casting-In-Java" class="headerlink" title="Type Casting In Java"></a>Type Casting In Java</h3>Please note that by using casting, data can not be modified but only type of data can be modified.</li><li>Primitive Casting.<ul><li>memory size <code>byte &lt; short &lt; int &lt; long &lt; float &lt; double.</code><ul><li>Auto Widening</li><li>Explicit Narrowing</li></ul></li></ul></li><li>Derived Casting<ul><li>Auto-up Casting<ul><li>Explicit Down Casting<h3 id="Abstraction-In-Java"><a href="#Abstraction-In-Java" class="headerlink" title="Abstraction In Java"></a>Abstraction In Java</h3></li></ul></li></ul></li><li>Abstract classes contain abstract methods (you can refer them as ideas) so that they can be implemented in sub classes according to their requirements. They are also called as incomplete classes as they have some unimplemented abstract methods(ideas).<h3 id="Interfaces-In-Java"><a href="#Interfaces-In-Java" class="headerlink" title="Interfaces In Java"></a>Interfaces In Java</h3></li><li>Interfaces in java are very much similar to abstract classes but interfaces contain only abstract methods (you can refer to them as only ideas). Abstract classes may contain both abstract methods as well as concrete methods. But interfaces must contain only abstract methods. Concrete methods are not allowed in interfaces. Therefore, Interfaces show 100% abstractness.<h3 id="Auto-Widening-Vs-Auto-Boxing-Vs-Auto-UpCasting-In-Java"><a href="#Auto-Widening-Vs-Auto-Boxing-Vs-Auto-UpCasting-In-Java" class="headerlink" title="Auto-Widening Vs Auto-Boxing Vs Auto-UpCasting In Java"></a>Auto-Widening Vs Auto-Boxing Vs Auto-UpCasting In Java</h3><img src="https://javaconceptoftheday.com/wp-content/uploads/2014/11/widening-Vs-boxing.png?x70034" alt=""><h3 id="Exception-Handing"><a href="#Exception-Handing" class="headerlink" title="Exception Handing"></a>Exception Handing</h3>java.lang.Throwable is the super class of all errors and exceptions in java.<br><img src="https://javaconceptoftheday.com/wp-content/uploads/2014/11/Exceptions.png?x70034" alt=""><br><img src="https://i.imgur.com/xHC2xQo.jpg" alt=""></li><li>java.lang.Error class represents the errors which are mainly caused by the environment in which application is running. For example, OutOfMemoryError occurs when JVM runs out of memory or StackOverflowError occurs when stack overflows.</li><li>Where as java.lang.Exception class represents the exceptions which are mainly caused by the application itself. For example, NullPointerException occurs when an application tries to access null object or ClassCastException occurs when an application tries to cast incompatible class types. <h3 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h3></li><li>Array can hold the references to any type of objects. It is important to note that array can contain only references to the objects, not the objects itself. <h3 id="Threads"><a href="#Threads" class="headerlink" title="Threads"></a>Threads</h3></li><li>Processes and threads can be diagrammatically represented as this<br><img src="https://javaconceptoftheday.com/wp-content/uploads/2014/11/ThreadsAndProcesses.png?x70034" alt=""></li><li>User threads are threads which are created by the application or user.</li><li>Daemon threads are threads which are mostly created by the JVM.</li><li><p>There are three constant fields in java.lang.Thread class related to priority of a thread. They are,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> MIN_PRIORITY   —&gt; It defines the lowest priority that a thread can have and It’s value is 1.</span><br><span class="line">NORM_PRIORITY  —&gt; It defines the normal priority that a thread can have and it’s value is 5.</span><br><span class="line">MAX_PRIORITY  —&gt; It defines the highest priority that a thread can have and it’s value is 10.</span><br></pre></td></tr></table></figure><p>  The priority of a main thread, if explicitly not set, is always 5 i.e NORM_PRIORITY.</p></li><li><p>avoid thread interference </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> By declaring the method as synchronized.</span><br><span class="line">By declaring the variables as final.</span><br><span class="line">By declaring the variable as volatile.</span><br><span class="line">By creating the immutable objects.</span><br><span class="line">By using Atomic operations.</span><br><span class="line">By restricting the access to same object by multiple threads.</span><br></pre></td></tr></table></figure></li><li><p>The Logic Behind The Synchronization In Java :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  The synchronization in java is built around an entity called object lock or monitor. Here is the brief description about lock or monitor.</span><br><span class="line">- Whenever an object is created to any class, an object lock is created and is stored inside the object.</span><br><span class="line">- One object will have only one object lock associated with it.</span><br><span class="line">- Any thread wants to enter into synchronized methods or blocks of any object, they must acquire object lock associated with that object and release the lock after they are done with the execution.</span><br><span class="line">- The other threads which wants to enter into synchronized methods of that object have to wait until the currently executing thread releases the object lock.</span><br><span class="line">- To enter into static synchronized methods or blocks, threads have to acquire class lock associated with that class as static members are stored inside the class memory.</span><br></pre></td></tr></table></figure></li><li><p>mutex</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">class Shared</span><br><span class="line">&#123;</span><br><span class="line">    static void staticMethod()</span><br><span class="line">    &#123;</span><br><span class="line">        synchronized (Shared.class)</span><br><span class="line">        &#123;</span><br><span class="line">            //static synchronized block</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    void NonStaticMethod()</span><br><span class="line">    &#123;</span><br><span class="line">        synchronized (this)</span><br><span class="line">        &#123;</span><br><span class="line">            //Non-static synchronized block</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    void anotherNonStaticMethod()</span><br><span class="line">    &#123;</span><br><span class="line">        synchronized (new Shared())</span><br><span class="line">        &#123;</span><br><span class="line">            //Non-static synchronized block</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>10 Points-To-Remember About Synchronization In Java :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1. You can use synchronized keyword only with methods but not with variables, constructors, static initializer and instance initializers.</span><br><span class="line">2. Constructors, Static initializer and instance initializer can’t be declared with synchronized keyword, but they can contain synchronized blocks.</span><br><span class="line">3. Both static and non-static methods can use synchronized keyword. For static methods, thread need class level lock and for non-static methods, thread need object level lock.</span><br><span class="line">4. It is possible that both static synchronized and non-static synchronized methods can run simultaneously. Because, static methods need class level lock and non-static methods need object level lock.</span><br><span class="line">5. A method can contain any number of synchronized blocks. This is like synchronizing multiple parts of a method.</span><br><span class="line">6. Synchronization blocks can be nested.</span><br><span class="line">7. Lock acquired by the thread before executing a synchronized method or block must be released after the completion of execution, no matter whether execution is completed normally or abnormally (due to exceptions).</span><br><span class="line">8. Synchronization in java is Re-entrant in nature. A thread can not acquire a lock that is owned by another thread. But, a thread can acquire a lock that it already owns. That means if a synchronized method gives a call to another synchronized method which needs same lock, then currently executing thread can directly enter into that method or block without acquiring the lock.</span><br><span class="line">9. synchronized method or block is very slow. They decrease the performance of an application. So, special care need to be taken while using synchronization. Use synchronization only when you needed it the most.</span><br><span class="line">10. Use synchronized blocks instead of synchronized methods. Because, synchronizing some part of a method improves the performance than synchronizing the whole method.</span><br></pre></td></tr></table></figure></li><li><p>wait(), notify() and notifyAll()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">These methods are final methods of java.lang.Object class. That means every class in java will have these methods. Below is the method signatures of these methods.</span><br><span class="line">1. public final void wait() throws InterruptedException</span><br><span class="line">This method tells the currently executing thread to release the lock of this object and wait until some other thread acquires the same lock and notify it using either notify() or notifyAll() methods. This method throws InterruptedException if waiting thread is interrupted.</span><br><span class="line">2. public final void notify()</span><br><span class="line">This method wakes up one thread randomly that called wait() method on this object.</span><br><span class="line">3. public final void notifyAll()</span><br><span class="line">This method wakes up all the threads that called wait() method on this object. But, only one thread will acquire lock of this object depending upon the priority.</span><br><span class="line"></span><br><span class="line">Important Note : These three methods must be called within synchronized method or block. Any thread which calls these methods must have lock of that object.</span><br></pre></td></tr></table></figure></li><li><p>Some Things-To-Remember About wait(), notify() and notifyAll() :</p><ul><li>If a thread calls notify() method and more than one threads are waiting for the object lock, then only one thread will be notified randomly.</li><li>When a thread calls notifyAll() method on an object, it notifies all the threads which are waiting for this object lock. But, only one thread will acquire this object lock depending upon priority.</li><li>When you call sleep() method on a thread, thread goes to sleep with holding the object lock with it. But, if you call wait() method, thread releases the object lock and goes for sleep. This is the main difference between wait() and sleep() methods.</li><li>wait(), notify() and notifyAll() are final methods of java.lang.Object class not java.lang.Thread class.</li><li>wait(), notify() and notifyAll() – all these three methods throw IllegalMonitorStateException if the calling thread does not owns the object lock.</li><li>wait() method is overloaded in Object class. There are two more wait() methods available in Object class.</li></ul></li><li><p>Thread Life Cycle OR Thread States In Java</p><ul><li>NEW,    A thread will be in this state before calling start() method.<ul><li>RUNNABLE, A thread will be in this state after calling the start() method.</li><li>BLOCKED, A thread will be in this state when a thread is waiting for object lock to enter into synchronized method/block or a thread will be in this state if deadlock occurs. </li><li>WAITING, A thread will be in this state when wait() or join() method is called.</li><li>TIMED_WAITING, A thread will be in this state when thread is sleeping. i.e A thread will be in this state when sleep() or wait() with timeOut or join() with timeOut is called.</li><li>TERMINATED, A thread will be in this state once it finishes it’s execution.<br><img src="https://javaconceptoftheday.com/wp-content/uploads/2014/11/JavaThreadLifeCycle.png?x70034" alt=""></li></ul></li></ul></li><li><p>7 Things Every Java Programmer Should Know About Threads In Java</p><ul><li><strong>Runnable interface vs Thread class</strong> : I am of opinion that when multiple threads need to execute same task, then use Runnable interface. If multiple threads need to execute different tasks, then go for Thread class.</li></ul></li><li><p>Difference Between wait() and sleep() Methods In Java</p><ul><li><p><strong>wait()</strong>:  releases the lock or monitor</p><ul><li><strong>sleep()</strong>: not  releases the lock or monitor</li></ul><p><img src="https://javaconceptoftheday.com/wp-content/uploads/2015/02/WaitAndSleep.png" alt=""></p></li></ul></li><li><p>Extends Thread Vs Implements Runnable In Java<br><img src="https://javaconceptoftheday.com/wp-content/uploads/2015/12/RunnableVsThread.png" alt=""><br>From the above all findings, it is clear that “Implements Runnable” is the preferred method to create the threads in java.</p></li><li><p>How To Stop A Thread In Java</p><ul><li>One is using boolean variable and second one is using interrupt() method. In this post, we will discuss both of these methods.</li></ul></li><li><p>Difference Between notify And notifyAll In Java</p><ul><li>wait(), notify() and notifyAll() must be called within synchronized method or synchronized block.<br><img src="https://javaconceptoftheday.com/wp-content/uploads/2016/03/NotifyVsNotifyAll.png" alt=""></li></ul></li><li><p>Difference Between BLOCKED Vs WAITING States In Java</p><ul><li>There are six thread states in java. They are <strong>NEW, RUNNABLE, BLOCKED, WAITING, TIMED_WAITING and TERMINATED</strong>.<br><img src="https://javaconceptoftheday.com/wp-content/uploads/2016/06/WaitingVsBlocked.png" alt=""></li></ul></li></ul><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><ul><li>strings are treated as objects.</li><li>JVM allocates some memory specially meant for string literals. This part of the heap memory is called String Constant Pool.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">String s1 = &quot;abc&quot;; </span><br><span class="line">String s2 = &quot;xyz&quot;;</span><br><span class="line">String s3 = &quot;123&quot;;</span><br><span class="line">String s4 = &quot;A&quot;;</span><br><span class="line">   String s5 = new String(&quot;abc&quot;);</span><br><span class="line">char[] c = &#123;&apos;J&apos;, &apos;A&apos;, &apos;V&apos;, &apos;A&apos;&#125;;</span><br><span class="line">String s6 = new String(c);</span><br><span class="line">String s7 = new String(new StringBuffer());</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://javaconceptoftheday.com/wp-content/uploads/2014/11/String-Constant-Pool.png" alt=""></p><ul><li>String Constant Pool is allocated to an object depending upon it’s content. There will be no two objects in the pool having the same content.</li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">“When you create a string object using string literal, JVM first checks the content of to be created object. If there exist an object in the pool with the same content, then it returns the reference of that object. It doesn’t create new object. If the content is different from the existing objects then only it creates new object.”</span><br></pre></td></tr></table></figure>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In simple words, there can not be two string objects with same content in the string constant pool. But, there can be two string objects with the same content in the heap memory.</span><br></pre></td></tr></table></figure></li><li><p>Immutability is the fundamental property of string objects. In whatever way you create the string objects, either using string literals or using new operator, they are immutable.</p></li></ul><h3 id="Generic"><a href="#Generic" class="headerlink" title="Generic"></a>Generic</h3><ul><li><p>Defining Generic Class</p><ul><li>Generics Work Only With Derived Types</li></ul></li><li><p>Rules To Follow While Implementing Generic Interfaces</p><ul><li><p>Only generic classes can implement generic interfaces.<br><code>class GenericClass&lt;T&gt; implements GenericInterface&lt;T&gt;</code><br>-A normal class can implement a generic interface if type parameter of generic interface is a wrapper class. For example, below implementation of GenericInterface is legal.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">interface GenericInterface&lt;Integer&gt;&#123;</span><br><span class="line">    //Generic interface with Integer as type parameter</span><br><span class="line">&#125;</span><br><span class="line">class NormalClass implements GenericInterface&lt;Integer&gt;&#123;</span><br><span class="line">    //Normal class implementing generic interface</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Class implementing generic interface at least must have same number and same type of parameters and at most can have any number and any type of parameters.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class GenericClass2&lt;T, V&gt; implements GenericInterface&lt;T&gt;&#123;</span><br><span class="line">  //Class with two type parameters</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Define Methods And Constructors As Generic</p><ul><li>Generic Methods:<br><code>&lt;type-Parameters&gt; return_type method_name(parameter list)</code></li><li>Constructors As Generics,As we all know that constructors are like methods but without return types</li></ul></li><li><p>Bounded Types</p><ul><li>the syntax for declaring Bounded type parameters.<br><code>&lt;T extends SuperClass&gt;</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public static &lt;T extends Number&gt; void printNumbers(T[] t)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Wildcard arguments </p><ul><li>The syntax for declaring this type of wildcard arguments is:<code>GenericType&lt;?&gt;</code></li><li>To specify an upper bound for wildcards:<code>GenericType&lt;? extends SuperClass&gt;</code></li><li>specify a lower bound for wildcard argument using super clause:<code>GenericType&lt;? super SubClass&gt;</code></li></ul></li><li>Type Erasure</li></ul><h3 id="Collection-Framework"><a href="#Collection-Framework" class="headerlink" title="Collection Framework"></a>Collection Framework</h3><ul><li>Collection Framework – Class Hierarchy<ul><li>All classes and interfaces related to Collection Framework are placed in java.util package.<br><img src="https://javaconceptoftheday.com/wp-content/uploads/2014/11/CollectionHierarchy.png" alt=""></li></ul></li><li><p>Collection Framework – Collection Interface<br>  <img src="https://javaconceptoftheday.com/wp-content/uploads/2014/11/CollectionInterface.png" alt=""></p><ul><li>equals() and hashcode() methods in the Collection interface are not the methods of java.lang.Object class. Because, interfaces does not inherit from Object class. Only classes in java are inherited from Object class. Any classes implementing Collection interface must provide their own version of equals() and hashcode() methods or they can retain default version inherited from Object class.</li></ul></li><li>Collection Framework – List Interface<ul><li>the class diagram of List interface：<br><img src="https://javaconceptoftheday.com/wp-content/uploads/2014/11/ListInterface.png" alt=""></li></ul></li><li>Collection Framework – The ArrayList Class<ul><li>Default initial capacity of an ArrayList is 10.<ul><li>the hierarchy diagram of ArrayList class.<br><img src="https://javaconceptoftheday.com/wp-content/uploads/2014/12/ArrayListClass.png" alt=""></li><li>Properties Of ArrayList :<ul><li>Size of the ArrayList is not fixed. It can increase and decrease dynamically as we add or delete the elements.<ul><li>ArrayList can have any number of null elements.</li><li>ArrayList can have duplicate elements.</li><li>As ArrayList implements RandomAccess, you can get, set, insert and remove elements of the ArrayList from  any arbitrary position.<br><img src="https://javaconceptoftheday.com/wp-content/uploads/2014/12/ArrayListTemplateNew.png" alt=""></li></ul></li></ul></li></ul></li></ul></li><li><p>Differences Between Array Vs ArrayList In Java</p><ul><li><p>Array is static in nature,ArrayList is dynamic in nature</p><ul><li>when you try to add elements to ArrayList beyond its capacity, it creates the new array with increased size and copies the elements from old array to new array.</li><li>if adding an element requires resizing of an ArrayList, then it gets slightly slower as it involves creating a new array in the background and copying all elements from old array to new array.</li><li>Array can hold both primitive data types (int, float….) as well as objects. Where as ArrayList can hold only objects. If you try to insert primitive data into ArrayList, data is automatically boxed into corresponding wrapper class.<br><img src="https://javaconceptoftheday.com/wp-content/uploads/2016/09/ArrayVsArrayList.png" alt=""></li><li>ArrayList to Array,<strong>toArray()</strong> method returns an array containing all elements of the ArrayList.<code>Object[] array = list.toArray();</code></li><li><p>Array To ArrayList:</p><ul><li><p>Arrays.asList() </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String[] array = new String[] &#123;&quot;ANDROID&quot;, &quot;JSP&quot;, &quot;JAVA&quot;, &quot;STRUTS&quot;, &quot;HADOOP&quot;, &quot;JSF&quot;&#125;;</span><br><span class="line">ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;(Arrays.asList(array));</span><br></pre></td></tr></table></figure><ul><li><p>Collection.addAll()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String[] array = new String[] &#123;&quot;ANDROID&quot;, &quot;JSP&quot;, &quot;JAVA&quot;, &quot;STRUTS&quot;, &quot;HADOOP&quot;, &quot;JSF&quot;&#125;;</span><br><span class="line">ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;();</span><br><span class="line">Collections.addAll(list, array);</span><br></pre></td></tr></table></figure></li><li><p>ArrayList.addAll()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String[] array = new String[] &#123;&quot;ANDROID&quot;, &quot;JSP&quot;, &quot;JAVA&quot;, &quot;STRUTS&quot;, &quot;HADOOP&quot;, &quot;JSF&quot;&#125;;</span><br><span class="line">ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;();</span><br><span class="line">list.addAll(Arrays.asList(array));</span><br></pre></td></tr></table></figure></li><li><p>Using streams from java 8</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String[] array = new String[] &#123;&quot;ANDROID&quot;, &quot;JSP&quot;, &quot;JAVA&quot;, &quot;STRUTS&quot;, &quot;HADOOP&quot;, &quot;JSF&quot;&#125;;</span><br><span class="line">List&lt;Object&gt; list = Arrays.stream(array).collect(Collectors.toList());</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://javaconceptoftheday.com/wp-content/uploads/2016/07/ArrayToArrayList.png" alt=""></p></li></ul></li></ul></li></ul></li><li><p>Remove Duplicate Elements From ArrayList</p><ul><li><p>Using HashSet</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HashSet&lt;String&gt; set = new HashSet&lt;String&gt;(listWithDuplicateElements);</span><br><span class="line">ArrayList&lt;String&gt; listWithoutDuplicateElements = new ArrayList&lt;String&gt;(set);</span><br></pre></td></tr></table></figure><ul><li>Using LinkedHashSet<br><code>LinkedHashSet&lt;String&gt; set = new LinkedHashSet&lt;String&gt;(listWithDuplicateElements);</code><br><img src="https://javaconceptoftheday.com/wp-content/uploads/2015/07/RemovingDuplicateElementsFromArrayList.png" alt=""></li></ul></li></ul></li><li>Collection Framework – The Vector Class<ul><li>Vector class is synchronized. <ul><li>All methods of Vector class are synchronized </li><li>capacity of the vector will be doubled whenever size exceeds capacity.</li><li>Why Not To Use Vector Class In Your Code<ul><li>you can achieve thread safe ArrayList by using synchronizedList() method of Collections class. </li></ul></li></ul></li></ul></li><li>Java Collection Framework – The LinkedList Class<ul><li>In general terms, LinkedList is a data structure where each element consist of three things. First one is the reference to previous element, second one is the actual value of the element and last one is the reference to next element.<br><img src="https://javaconceptoftheday.com/wp-content/uploads/2014/12/HowLinkedListWorks.png" alt=""></li></ul></li><li><p>Collection Framework – The Queue Interface</p><ul><li>First-In-First-Out.<ul><li>You can’t add or get or set elements at an arbitrary position in the queues.<br><img src="https://javaconceptoftheday.com/wp-content/uploads/2014/11/HowQueueWorks.png" alt=""></li><li>Properties Of Queue :<ul><li>Null elements are not allowed in the queue. <ul><li>Queue can have duplicate elements.</li><li>Unlike a normal list, queue is not random access. i.e you can’t set or insert or get elements at an arbitrary positions.</li><li>In the Queue Interface, there are two methods to obtain and remove the elements from the head of the queue. They are poll() and remove(). The difference between them is, poll() returns null if the queue is empty and remove() throws an exception if the queue is empty.</li><li>There are two methods in the Queue interface to obtain the elements but don’t remove. They are peek() and element(). peek() returns null if the queue is empty and element() throws an exception if the queue is empty.</li></ul></li></ul></li></ul></li></ul></li><li><p>Collection Framework – The Deque Interface</p><ul><li>the hierarchy diagram of Deque interface：<br><img src="https://javaconceptoftheday.com/wp-content/uploads/2014/11/Deque.png" alt=""><ul><li>The main advantage of Deque is that you can use it as both Queue (FIFO) as well as Stack (LIFO).</li><li>Deque is nothing but the double ended queue. That means, you can insert, retrieve and remove the elements from both the ends.<br><img src="https://javaconceptoftheday.com/wp-content/uploads/2014/11/HowDequeWorks.png" alt=""></li></ul></li></ul></li><li><p>Collection Framework – The Set Interface</p><ul><li>Order of elements in a set is implementation dependent. HashSet elements are ordered on hash code of elements. TreeSet elements are ordered according to supplied Comparator (If no Comparator is supplied, elements will be placed in ascending order) and LinkedHashSet maintains insertion order.</li><li>The HashSet internally uses HashMap to store the objects. The elements you insert in HashSet will be stored as keys of that HashMap object and their values will be a constant called PRESENT. This constant is defined as private static final Object PRESENT = new Object() in the source code of HashSet class.</li><li>HashSet can have maximum one null element.<br><img src="https://javaconceptoftheday.com/wp-content/uploads/2015/01/HowHashSetWorks.png" alt=""></li><li>LinkedHashSet internally uses LinkedHashMap to store it’s elements just like HashSet which internally uses HashMap to store it’s elements.</li><li>LinkedHashSet maintains insertion order. This is the main difference between LinkedHashSet and HashSet.</li><li>SortedSet elements are sorted according to supplied Comparator. If you don’t mention any Comparator while creating a SortedSet, elements will be placed in ascending order.</li><li>SortedSet Inserted elements must be of Comparable type and they must be mutually Comparable.</li><li>Elements inserted in the TreeSet must be of Comparable type and elements must be mutually comparable. </li><li>TreeSet internally uses TreeMap to store it’s elements just like HashSet and LinkedHashSet which use HashMap and LinkedHashMap respectively to store their elements.</li></ul></li><li>Java Collection Framework – The Map Interface<br><img src="https://javaconceptoftheday.com/wp-content/uploads/2015/01/MapInterface.png" alt=""><ul><li>Each key-value pairs of the map are stored as Map.Entry objects. Map.Entry is an inner interface of Map interface.</li><li>HashMap doesn’t maintain any order of elements. LinkedHashMap maintains insertion order of elements. Where as TreeMap places the elements according to supplied Comparator.</li><li>Default initial capacity of HashMap is 16.</li><li>Hashing is nothing but the function or algorithm or method which when applied on any object/variable returns an unique integer value representing that object/variable.</li><li>The capacity of an HashMap is the number of buckets in the hash table. The initial capacity is the capacity of an HashMap at the time of its creation. The default initial capacity of the HashMap is 24 i.e 16. The capacity of the HashMap is doubled each time it reaches the threshold. i.e the capacity is increased to 25=32, 26=64, 27=128….. when the threshold is reached.</li><li>HashMap internally uses an array of Entry&lt;K, V&gt; objects to store the data.</li><li>HashTable is a legacy class. It is almost considered as due for deprecation. Since JDK 1.5, ConcurrentHashMap is considered as better option than the HashTable.</li></ul></li></ul><h3 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h3><ul><li><p>Java Database Connectivity API which is used by the java application to interact with the database.</p><ul><li>JDBC API not directly interacts with the database. It uses JDBC driver of that database to interact with the database.<br><img src="https://javaconceptoftheday.com/wp-content/uploads/2015/06/JavaJDBCDriverDatabase.png" alt=""></li><li><p>JDBC driver is a software component provided along with the database which is required by the JDBC API to interact with the database. Each database will have its own JDBC driver.</p><blockquote><p>In simple terms, JDBC drivers are nothing but the implementations of interfaces provided in the JDBC API (java.sql and javax.sql packages) with respect to a particular database. These implementations are bundled in a JAR file and supplied along with the database. These implementations are used by the JDBC API to interact with that database.</p></blockquote></li></ul></li></ul><h3 id="Big-O-Notations"><a href="#Big-O-Notations" class="headerlink" title="Big O Notations"></a>Big O Notations</h3><ul><li>Big O notations consist of O and an expression enclosed within ( ). Expression within ( ) represents the number of computations a particular algorithm has to perform to solve a given problem.</li><li><p><strong>O(1)</strong> represents an algorithm which has to perform exact one computation to solve a problem. O(1) represents an algorithm which takes same time to execute for any size of input data. In other words, O(1) denotes an algorithm which performance is not affected by the size of the input data. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">boolean isFirstElementZero(int[] inputData)</span><br><span class="line">&#123;</span><br><span class="line">if(inputData[0] == 0)</span><br><span class="line">&#123;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>O(N)</strong> represents an algorithm which has to perform ‘N’ computations to solve a problem. Where ‘N’ is the number of elements in input data. That means algorithm will take more time as number of elements in input data increases. In the other words, O(N) denotes an algorithm whose performance is directly proportional to size of the input data.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">boolean searchForElement(int[] inputData, int n)</span><br><span class="line">&#123;</span><br><span class="line">for (int i = 0; i &lt; inputData.length; i++)</span><br><span class="line">&#123;</span><br><span class="line">if(inputData[i] == n)</span><br><span class="line">&#123;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>O(N^2)</strong> denotes an algorithm which has to perform N^2 computations to solve a problem. Where N is the number of elements in input data. In the other words, O(N^2) represents an algorithm whose performance is directly proportional to square of the size of the input data. The algorithms which have nested iterations over the input data will give O(N^2) performance. Further deeper iterations over the input data will give O(N^3), O(N^4) and so on.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">boolean findDuplicates(int[] inputData)</span><br><span class="line">&#123;</span><br><span class="line">for (int i = 0; i &lt; inputData.length; i++)</span><br><span class="line">&#123;</span><br><span class="line">for (int j = 0; j &lt; inputData.length; j++)</span><br><span class="line">&#123;</span><br><span class="line">if(inputData[i] == inputData[j] &amp;&amp; i!=j)</span><br><span class="line">&#123;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>O(log N)</strong> represents an algorithm whose number of computations grows linearly as input data grows exponentially. i.e O(log N) represents the algorithms whose execution time grows linearly as input data grows exponentially. That means if an algorithm takes 1 second to compute 10 elements, then it will take 2 seconds to compute 100 elements, 3 seconds to compute 1000 elements and so on. The best example for O(log N) is binary search algorithm which uses divide and conquer rule to search for an element.</p></li><li><strong>O(2N)</strong> represents an algorithm whose execution time is doubled for every extra element in the input data. For example, if an algorithm takes 4 seconds to compute 2 elements, then it will take 8 seconds to compute 3 elements, 16 seconds for 4 elements, 32 seconds for 5 elements and so on.</li><li><strong>O(N!)</strong> represents an algorithm which has to perform N! computations to solve a problem. Where N is the number of elements in the input data. For example, if an algorithm takes 2 seconds to compute 2 elements, then it will take 6 seconds to compute 3 elements, 24 seconds to compute 4 elements and so on.<br><img src="https://javaconceptoftheday.com/wp-content/uploads/2015/05/Big-O-Notation.png" alt=""></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> learn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybatis snippet</title>
      <link href="/2016/10/16/mybatis%20snippet/"/>
      <url>/2016/10/16/mybatis%20snippet/</url>
      
        <content type="html"><![CDATA[<h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><ul><li><p>about date jdbcType</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#&#123;beginDate,jdbcType=DATE&#125; (no time of the day), or</span><br><span class="line">#&#123;beginDate,jdbcType=TIMESTAMP&#125; (if you need to include the time of the day).</span><br></pre></td></tr></table></figure></li></ul><p>And the Java parameter you want to apply should be of type:<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java.sql.Date (date without time)</span><br><span class="line">java.sql.Timestamp (timestamp)</span><br><span class="line">java.util.Date (date and time).</span><br></pre></td></tr></table></figure></p><ul><li>the Greater Than/Equal Operator and the Less Than/Equal Operators:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ROWNUM &amp;gt;= 20</span><br><span class="line">ROWNUM &amp;lt;= 20</span><br></pre></td></tr></table></figure></li></ul><h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><p>使用SpringMVC+Mybatis框架写项目的时候，在mapper里面的sql语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"updateTime != null"</span>&gt;</span></span><br><span class="line">and update_time &amp;gt; #&#123;updateTime,jdbcType=TIMESTAMP&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br></pre></td></tr></table></figure><p>出错：<code>There is no getter for property named &#39;updateTime&#39; in &#39;class java.util.Date&#39;</code></p><p>原因是：<br>如果将and语句中的#｛属性｝写在if语句中，mybatis会去对象中从它的get方法中取值，而我之前是直接传递的值，并没有封装对象。<br>解决办法：</p><pre><code> 1. 把updateTime需改为date2. 把updateTime代表的参数封装到一个对象中</code></pre>]]></content>
      
      
      <categories>
          
          <category> mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> snippet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot snippet</title>
      <link href="/2016/08/14/springboot%20snippet/"/>
      <url>/2016/08/14/springboot%20snippet/</url>
      
        <content type="html"><![CDATA[<h2 id="问题随记"><a href="#问题随记" class="headerlink" title="问题随记"></a>问题随记</h2><ol><li>Spring Boot通过Mybatis，使用mapper接口和xml配置sql，连接数据库</li></ol><ul><li><p>首先在配置文件application.properties</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">spring.datasource.url=jdbc:mysql://localhost:3306/test</span><br><span class="line">spring.datasource.username=***</span><br><span class="line">spring.datasource.password=***</span><br><span class="line">spring.datasource.driverClassName=com.mysql.jdbc.Driver</span><br><span class="line"></span><br><span class="line">#mybatis.typeAliasesPackage：为实体对象所在的包，跟数据库表一一对应</span><br><span class="line">#mybatis.mapperLocations：mapper文件的位置</span><br><span class="line"></span><br><span class="line">mybatis.typeAliasesPackage=com.xxx.model</span><br><span class="line">mybatis.mapperLocations=classpath:mybatis/mapper/*Mapper.xml</span><br></pre></td></tr></table></figure></li><li><p>在启动类Application.java中写上配置信息 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.xxx.dao"</span>) <span class="comment">// mybatis扫描路径，针对的是接口Mapper类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DailyreportApplication</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DailyreportApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li>mysql连接异常<code>java.sql.SQLException: Value &#39;0000-00-00&#39; can not be represented as java.sql.Date</code></li></ol><ul><li><p>解决办法</p><p><code>jdbc:mysql://yourserver:3306/yourdatabase?zeroDateTimeBehavior=convertToNull</code></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> snippet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git skill</title>
      <link href="/2016/08/05/git%20snippet/"/>
      <url>/2016/08/05/git%20snippet/</url>
      
        <content type="html"><![CDATA[<ul><li><p>Git修改.gitignore不生效 </p><ul><li><p>在git中，如果想忽略某个文件，不让这个文件提交到版本库中，可以修改根目录中的.gitignore文件</p><p>但有时候把某些目录或者文件加入忽略规则，发现并未生效</p></li><li><p>未生效原因：.gitignore只能忽略那些原来没有被追踪(track)的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的</p></li><li><p>解决方案：先把本地缓存删除（改变成未track状态），然后提交。</p></li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git rm -r --cached &lt;要忽略的具体文件或者目录&gt; 或者 git rm -r --cached . </span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;update .gitignore&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> skill </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java skill</title>
      <link href="/2016/05/20/java%20skill/"/>
      <url>/2016/05/20/java%20skill/</url>
      
        <content type="html"><![CDATA[<ul><li><p>int变量自增 效率问题 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i++;和i += 1;形成的指令数较少，且不需要操作数栈。相对而言，i = i+1;需要至少2个操作数栈深度，并且形成的指令数较多。故，i++;和i+= 1;的效率一样，并且二者的效率都优于i = i+1;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> skill </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shiro snippet</title>
      <link href="/2016/05/20/shiro%20snippet/"/>
      <url>/2016/05/20/shiro%20snippet/</url>
      
        <content type="html"><![CDATA[<p><strong>对于一个好的框架，从外部来看应该具有非常简单易于使用的 API，且 API 契约明确；从内部来看的话，其应该有一个可扩展的架构，即非常容易插入用户自定义实现，因为任何框架都不能满足所有需求。 </strong></p><hr><ul><li><p>Subject</p><p>主体，代表了当前的用户</p></li><li><p>SecurityManager</p><p>安全管理器，它管理着所有Subject，相当于springmvc中的DispatcherServlet(前端控制器)</p></li><li><p>Realm</p><p>域，Shiro从Realm获取安全数据（如用户、角色、权限） ，是验证主体subject的数据源</p></li></ul><p>流程如图：</p><p><img src="http://wiki.jikexueyuan.com/project/shiro/images/2.png" alt=""></p><p><strong>流程说明</strong>：</p><ol><li>应用代码通过 Subject 来进行认证和授权，而 Subject 又委托给 SecurityManager；</li><li>我们需要给 Shiro 的 SecurityManager 注入 Realm，从而让 SecurityManager 能得到合法的用户及其权限进行判断。</li></ol><p><strong>从以上也可以看出，Shiro 不提供维护用户 / 权限，而是通过 Realm 让开发人员自己注入。</strong> </p><hr><p>shiro的内部结构如图：</p><p><img src="http://wiki.jikexueyuan.com/project/shiro/images/3.png" alt=""></p><hr><h3 id="身份验证"><a href="#身份验证" class="headerlink" title="身份验证"></a>身份验证</h3><p><strong>principals</strong>：身份，即主体的标识属性，可以是任何东西，如用户名、邮箱等，唯一即可。 </p><p><strong>credentials</strong>：证明 / 凭证，即只有主体知道的安全值，如密码 / 数字证书等。 </p><ul><li>身份认证流程</li></ul><p><img src="http://wiki.jikexueyuan.com/project/shiro/images/4.png" alt=""></p><hr><h3 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h3><p>授权，也叫访问控制，即在应用中控制谁能访问哪些资源（如访问页面/编辑数据/页面操作等）。在授权中需了解的几个关键对象：主体（Subject）、资源（Resource）、权限（Permission）、角色（Role）。 </p><ul><li><p>授权方式</p><p>编程式、注解式、jsp/gsp标签式</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> shiro </category>
          
      </categories>
      
      
        <tags>
            
            <tag> snippet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux config</title>
      <link href="/2016/05/16/version%20sort/"/>
      <url>/2016/05/16/version%20sort/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">1 Α α alpha a:lf 阿尔法</span><br><span class="line">2 Β β beta bet 贝塔</span><br><span class="line">3 Γ γ gamma ga:m 伽马</span><br><span class="line">4 Δ δ delta delt 德尔塔</span><br><span class="line">5 Ε ε epsilon ep`silon 伊普西龙</span><br><span class="line">6 Ζ ζ zeta zat 截塔</span><br><span class="line">7 Η η eta eit 艾塔</span><br><span class="line">8 Θ θ theta θit 西塔</span><br><span class="line">9 Ι ι iota aiot 约塔</span><br><span class="line">10Κ κ kappa kap 卡帕</span><br><span class="line">11∧ λ lambda lambd 兰布达</span><br><span class="line">12Μ μ mu mju 缪</span><br><span class="line">13Ν ν nu nju 纽</span><br><span class="line">14Ξ ξ xi ksi 克西</span><br><span class="line">15Ο ο omicron omik`ron 奥密克戎</span><br><span class="line">16∏ π pi pai 派</span><br><span class="line">17Ρ ρ rho rou 肉</span><br><span class="line">18∑ σ sigma `sigma 西格马</span><br><span class="line">19Τ τ tau tau 套</span><br><span class="line">20 Υ υ upsilon ju:p`sailon 宇普西龙</span><br><span class="line">21 Φ φ phi fai 佛爱</span><br><span class="line">22 Χ χ chi phai 西</span><br><span class="line">23 Ψ ψ psi psai 普西</span><br><span class="line">24 Ω ω omega o`miga 欧米伽</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> version </category>
          
      </categories>
      
      
        <tags>
            
            <tag> snippet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>filter in servlet</title>
      <link href="/2016/03/16/filter%20in%20servlet/"/>
      <url>/2016/03/16/filter%20in%20servlet/</url>
      
        <content type="html"><![CDATA[<blockquote><p>A filter is an object that is invoked at the preprocessing and postprocessing of a request.</p><ul><li>It is mainly used to perform filtering tasks such as conversion, logging, compression, encryption and decryption, input validation etc.</li><li>The servlet filter is pluggable, i.e. its entry is defined in the web.xml file, if we remove the entry of filter from the web.xml file, filter will be removed automatically and we don’t need to change the servlet.</li></ul></blockquote><p><img src="https://www.javatpoint.com/images/filter.JPG" alt=""></p><h3 id="Usage-of-Filter"><a href="#Usage-of-Filter" class="headerlink" title="Usage of Filter"></a>Usage of Filter</h3><ul><li>recording all incoming requests</li><li>logs the IP addresses of the computers from which the requests originate</li><li>conversion</li><li>data compression</li><li>encryption and decryption</li><li>input validation etc.</li></ul><h3 id="Advantage-of-Fliter"><a href="#Advantage-of-Fliter" class="headerlink" title="Advantage of Fliter"></a>Advantage of Fliter</h3><ul><li>Filter is pluggable.</li><li>One filter don’t have dependency onto another resource.</li><li>Less Maintenance</li></ul><h3 id="Filter-API"><a href="#Filter-API" class="headerlink" title="Filter API"></a>Filter API</h3><ul><li><p>Filter</p><blockquote><p>For creating any filter, you must implement the Filter interface. Filter interface provides the life cycle methods for a filter.</p></blockquote></li><li><p>FilterChain</p><blockquote><p>The object of FilterChain is responsible to invoke the next filter or resource in the chain.This object is passed in the doFilter method of Filter interface.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span></span>&#123;  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig arg0)</span> <span class="keyword">throws</span> ServletException </span>&#123;&#125;  </span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse resp,  </span></span></span><br><span class="line"><span class="function"><span class="params">    FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;  </span><br><span class="line">          </span><br><span class="line">    PrintWriter out=resp.getWriter();  </span><br><span class="line">    out.print(<span class="string">"filter is invoked before"</span>);  </span><br><span class="line">          </span><br><span class="line">    chain.doFilter(req, resp);<span class="comment">//sends request to next resource  </span></span><br><span class="line">          </span><br><span class="line">    out.print(<span class="string">"filter is invoked after"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;&#125;  </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>FilterConfig</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> learn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Event and Listen</title>
      <link href="/2016/03/01/Event%20and%20Listen/"/>
      <url>/2016/03/01/Event%20and%20Listen/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Events are basically occurrence of something. Changing the state of an object is known as an event.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">We can perform some important tasks at the occurrence of these exceptions, such as counting total and current logged-in users, creating tables of the database at time of deploying the project, creating database connection object etc.</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="Event-classes"><a href="#Event-classes" class="headerlink" title="Event classes"></a>Event classes</h3><ul><li>ServletRequestEvent</li><li>ServletContextEvent</li><li>ServletRequestAttributeEvent</li><li>ServletContextAttributeEvent</li><li>HttpSessionEvent</li><li>HttpSessionBindingEvent</li></ul><h3 id="Event-interfaces"><a href="#Event-interfaces" class="headerlink" title="Event interfaces"></a>Event interfaces</h3><ul><li>ServletRequestListener</li><li>ServletRequestAttributeListener</li><li>ServletContextListener</li><li>ServletContextAttributeListener</li><li>HttpSessionListener</li><li>HttpSessionAttributeListener</li><li>HttpSessionBindingListener</li><li>HttpSessionActivationListener</li></ul><hr><h3 id="ServletContextEvent-and-ServletContextListener"><a href="#ServletContextEvent-and-ServletContextListener" class="headerlink" title="ServletContextEvent and ServletContextListener"></a>ServletContextEvent and ServletContextListener</h3><ul><li>The ServletContextEvent is notified when web application is deployed on the server.</li><li>If you want to perform some action at the time of deploying the web application such as creating database connection, creating all the tables of the project etc, you need to implement ServletContextListener interface and provide the implementation of its methods.</li></ul><p><code>Web application &gt; ServletContextEvent &gt; ServletContextListener</code></p><h3 id="HttpSessionEvent-and-HttpSessionListener"><a href="#HttpSessionEvent-and-HttpSessionListener" class="headerlink" title="HttpSessionEvent and HttpSessionListener"></a>HttpSessionEvent and HttpSessionListener</h3><ul><li>The HttpSessionEvent is notified when session object is changed. The corresponding Listener interface for this event is HttpSessionListener.</li><li>We can perform some operations at this event such as counting total and current logged-in users, maintaing a log of user details such as login time, logout time etc.</li></ul><p><code>session object &gt; HttpSessionEvent &gt; HttpSessionListener</code></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> learn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java code snippet</title>
      <link href="/2016/02/16/java%20code%20snippet/"/>
      <url>/2016/02/16/java%20code%20snippet/</url>
      
        <content type="html"><![CDATA[<h2 id="base64ToByte"><a href="#base64ToByte" class="headerlink" title="base64ToByte"></a>base64ToByte</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">String string = <span class="string">"SmF2YWNvZGVnZWVrcw=="</span>;</span><br><span class="line"><span class="comment">// Get bytes from string</span></span><br><span class="line"><span class="keyword">byte</span>[] byteArray = Base64.decodeBase64(string.getBytes());</span><br><span class="line"></span><br><span class="line"><span class="comment">// Print the decoded array</span></span><br><span class="line">System.out.println(Arrays.toString(byteArray));</span><br><span class="line"><span class="comment">// Print the decoded string </span></span><br><span class="line">String decodedString = <span class="keyword">new</span> String(byteArray);</span><br><span class="line">System.out.println(string + <span class="string">" = "</span> + decodedString);</span><br></pre></td></tr></table></figure><h2 id="TimeConvert"><a href="#TimeConvert" class="headerlink" title="TimeConvert"></a>TimeConvert</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//date format</span></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.time.DateFormatUtils;</span><br><span class="line">String timeStr = DateFormatUtils.format(dateDate,<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">Date dateTime = DateUtils.parseDate(dateTimeStr,<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line"></span><br><span class="line">SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">Date dateWithoutTime = sdf.parse(sdf.format(<span class="keyword">new</span> Date()));</span><br><span class="line"></span><br><span class="line"><span class="comment">//capitalize the first letter of word</span></span><br><span class="line">String output = input.substring(<span class="number">0</span>, <span class="number">1</span>).toUpperCase() + input.substring(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//measure the time cost</span></span><br><span class="line"><span class="keyword">long</span> start = System.nanoTime();</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="keyword">long</span> end = System.nanoTime();</span><br><span class="line"><span class="keyword">long</span> used = end-start;</span><br><span class="line">System.out.println(<span class="string">"used:"</span>+TimeUnit.NANOSECONDS.toMillis(used)+<span class="string">" ms"</span>);</span><br></pre></td></tr></table></figure><h2 id="Lambda"><a href="#Lambda" class="headerlink" title="Lambda"></a>Lambda</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//stream read database   </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testStreamRead</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        oracleSqlSessionTemplate.select(<span class="string">"xxxx.OracleMapper.getPersonInfos"</span>, <span class="keyword">new</span> ResultHandler() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleResult</span><span class="params">(ResultContext resultContext)</span> </span>&#123;</span><br><span class="line">                PersonInfo personInfo = (PersonInfo) resultContext.getResultObject();</span><br><span class="line">                LOG.debug(<span class="string">"result count:[&#123;&#125;],result info:[&#123;&#125;]"</span>, resultContext.getResultCount(), personInfo.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testStreamRead2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        oracleSqlSessionTemplate.select(<span class="string">"xxxx.OracleMapper.getPersonInfos"</span>,</span><br><span class="line">                resultContext -&gt; &#123;</span><br><span class="line">                    PersonInfo personInfo = (PersonInfo) resultContext.getResultObject();</span><br><span class="line">                    LOG.debug(<span class="string">"result count:[&#123;&#125;],result info:[&#123;&#125;]"</span>, resultContext.getResultCount(), personInfo.getName());</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//iterate list</span></span><br><span class="line">myFinalList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">myListToParse.stream()</span><br><span class="line">        .filter(elt -&gt; elt != <span class="keyword">null</span>)</span><br><span class="line">        .forEach(elt -&gt; myFinalList.add(doSomething(elt)));</span><br><span class="line"><span class="comment">//prefer</span></span><br><span class="line">myFinalList = myListToParse.stream()</span><br><span class="line">        .filter(elt -&gt; elt != <span class="keyword">null</span>)</span><br><span class="line">        .map(elt -&gt; doSomething(elt))</span><br><span class="line">        .collect(Collectors.toList());</span><br></pre></td></tr></table></figure><h2 id="thread"><a href="#thread" class="headerlink" title="thread"></a>thread</h2><h3 id="notify-thread"><a href="#notify-thread" class="headerlink" title="notify thread"></a>notify thread</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shared</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">waitMethod</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Thread t = Thread.currentThread();</span><br><span class="line">         </span><br><span class="line">        System.out.println(t.getName()+<span class="string">" is releasing the lock and going to wait"</span>);</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            wait();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (InterruptedException e) </span><br><span class="line">        &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        System.out.println(t.getName()+<span class="string">" has been notified and acquired the lock back"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">notifyOneThread</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Thread t = Thread.currentThread();</span><br><span class="line">         </span><br><span class="line">        notify();</span><br><span class="line">         </span><br><span class="line">        System.out.println(t.getName()+<span class="string">" has notified one thread waiting for this object lock"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainClass</span> </span></span><br><span class="line"><span class="class"></span>&#123;   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Shared s = <span class="keyword">new</span> Shared();</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//Thread t1 will be waiting for lock of object 's'</span></span><br><span class="line">         </span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread() </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                s.waitMethod();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">         </span><br><span class="line">        t1.start();</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//Thread t2 will be waiting for lock of object 's'</span></span><br><span class="line">         </span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread() </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                s.waitMethod();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"> </span><br><span class="line">        t2.start();</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//Thread t3 will be waiting for lock of object 's'</span></span><br><span class="line">         </span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread() </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                s.waitMethod();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">         </span><br><span class="line">        t3.start();</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">catch</span> (InterruptedException e) </span><br><span class="line">        &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//Thread t4 will notify only one thread which is waiting for lock of object 's'</span></span><br><span class="line">         </span><br><span class="line">        Thread t4 = <span class="keyword">new</span> Thread() </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                s.notifyOneThread();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">         </span><br><span class="line">        t4.start(); </span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="stop-thread"><a href="#stop-thread" class="headerlink" title="stop thread"></a>stop thread</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">//Initially setting the flag as true</span></span><br><span class="line">     </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//This method will set flag as false</span></span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stopRunning</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        flag = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//Keep the task in while loop</span></span><br><span class="line">         </span><br><span class="line">        <span class="comment">//This will make thread continue to run until flag becomes false</span></span><br><span class="line">         </span><br><span class="line">        <span class="keyword">while</span> (flag)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">"I am running...."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        System.out.println(<span class="string">"Stopped Running...."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainClass</span> </span></span><br><span class="line"><span class="class"></span>&#123;   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        MyThread thread = <span class="keyword">new</span> MyThread();</span><br><span class="line">         </span><br><span class="line">        thread.start();</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">catch</span> (InterruptedException e) </span><br><span class="line">        &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//call stopRunning() method whenever you want to stop a thread</span></span><br><span class="line">         </span><br><span class="line">        thread.stopRunning();</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span></span><br><span class="line"><span class="class"></span>&#123;   </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (!Thread.interrupted())</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">"I am running...."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        System.out.println(<span class="string">"Stopped Running....."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainClass</span> </span></span><br><span class="line"><span class="class"></span>&#123;   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        MyThread thread = <span class="keyword">new</span> MyThread();</span><br><span class="line">         </span><br><span class="line">        thread.start();</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">catch</span> (InterruptedException e) </span><br><span class="line">        &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//interrupting the thread</span></span><br><span class="line">         </span><br><span class="line">        thread.interrupt();</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="try-catch-finally"><a href="#try-catch-finally" class="headerlink" title="try-catch-finally"></a>try-catch-finally</h3><ol><li>不管有木有出现异常，finally块中代码都会执行** </li><li><strong>当try和catch中有return时，finally仍然会执行</strong> </li><li><strong>finally是在return后面的表达式运算后执行的（此时并没有返回运算后的值，而是先把要返回的值保存起来，管finally中的代码怎么样，返回的值都不会改变，仍然是之前保存的值），所以函数返回值是在finally执行前确定的；</strong> </li><li><strong>finally中最好不要包含return，否则程序会提前退出，返回值不是try或catch中保存的返回值。</strong> </li><li>任何执行try 或者catch中的return语句之前，都会先执行finally语句，如果finally中有return语句，那么程序就return了，所以finally中的return是一定会被return的。</li></ol><h3 id="ReentrantLock"><a href="#ReentrantLock" class="headerlink" title="ReentrantLock"></a>ReentrantLock</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.Level;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.Logger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Java program to show, how to use ReentrantLock in Java.</span></span><br><span class="line"><span class="comment"> * Reentrant lock is an alternative way of locking</span></span><br><span class="line"><span class="comment"> * apart from implicit locking provided by synchronized keyword in Java.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>  Javin Paul</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReentrantLockHowto</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//Locking using Lock and ReentrantLock</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">" gets Count: "</span> + count);</span><br><span class="line">            <span class="keyword">return</span> count++;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//Implicit locking using synchronized keyword</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">getCountTwo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> count++;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ThreadTest counter = <span class="keyword">new</span> ThreadTest();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">while</span> (counter.getCount() &amp;lt; <span class="number">6</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException ex) &#123;</span><br><span class="line">                        ex.printStackTrace();                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">      </span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">while</span> (counter.getCount() &amp;lt; <span class="number">6</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException ex) &#123;</span><br><span class="line">                        ex.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">      </span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Output:</span><br><span class="line">Thread-0 gets Count: 0</span><br><span class="line">Thread-1 gets Count: 1</span><br><span class="line">Thread-1 gets Count: 2</span><br><span class="line">Thread-0 gets Count: 3</span><br><span class="line">Thread-1 gets Count: 4</span><br><span class="line">Thread-0 gets Count: 5</span><br><span class="line">Thread-0 gets Count: 6</span><br><span class="line">Thread-1 gets Count: 7</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> snippet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>websocket tracking</title>
      <link href="/2016/01/18/webservice%20snippet/"/>
      <url>/2016/01/18/webservice%20snippet/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/49d7997ad3b7" target="_blank" rel="noopener">https://www.jianshu.com/p/49d7997ad3b7</a></p><p><a href="https://blog.csdn.net/qq_33546747/article/details/53304097" target="_blank" rel="noopener">https://blog.csdn.net/qq_33546747/article/details/53304097</a></p><hr><h2 id="WebService是一种跨编程语言和跨操作系统平台的远程调用技术。"><a href="#WebService是一种跨编程语言和跨操作系统平台的远程调用技术。" class="headerlink" title="WebService是一种跨编程语言和跨操作系统平台的远程调用技术。"></a>WebService是一种跨编程语言和跨操作系统平台的远程调用技术。</h2><p>多个角度来理解WebService<br>​    从表面上看，WebService就是一个应用程序向外界暴露出一个能通过Web进行调用的API，也就是说能用编程的方法通过Web来调用这个应用程序。<br>​    我们把调用这个WebService的应用程序叫做客户端，而把提供这个WebService的应用程序叫做服务端<br>​    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">从深层次看，WebService是建立可互操作的分布式应用程序的新平台，是一个平台，是一套标准。</span><br><span class="line">它定义了应用程序如何在Web上实现互操作性，你可以用任何你喜欢的语言，在任何你喜欢的平台上写Web service ，只要我们可以通过Web service标准对这些服务进行查询和访问。</span><br></pre></td></tr></table></figure><hr><p>构成WebService平台的三大技术：<br>​    XML+XSD,SOAP和WSDL<br>​<br>WebService采用HTTP协议传输数据，采用XML格式封装数据（即XML中说明调用远程服务对象的哪个方法，传递的参数是什么，以及服务对象的返回结果是什么）<br>WebService用XSD来作为其数据类型系统<br>HTTP消息头和XML内容格式就是SOAP协议。SOAP提供了标准的RPC方法来调用Web Service。</p><p>SOAP协议 = HTTP协议 + XML数据格式</p><p>比喻：HTTP就是普通公路，XML就是中间的绿色隔离带和两边的防护栏，SOAP就是普通公路经过加隔离带和防护栏改造过的高速公路。</p><p>WSDL(Web Services Description Language)是基于XML的语言，用于描述Web Service及其函数、参数和返回值。</p><p>WSDL文件保存在Web服务器上，通过一个url地址就可以访问到它。客户端要调用一个WebService服务之前，要知道该服务的WSDL文件的地址。<br>WebService服务提供商可以通过两种方式来暴露它的WSDL文件地址：1.注册到UDDI服务器，以便被人查找；2.直接告诉给客户端调用者。</p><p>======================================================================================<br><a href="https://www.cnblogs.com/snake-hand/archive/2013/06/09/3129915.html" target="_blank" rel="noopener">https://www.cnblogs.com/snake-hand/archive/2013/06/09/3129915.html</a></p><hr><p>Axis和CXF，这两个产品都是Apache孵化器下面的Web Service开源开发工具</p><p>CXF支持 WS-Addressing，WS-Policy， WS-RM， WS-Security和WS-I Basic Profile<br>Axis2不支持WS-Policy</p><p>CXF可以很好支持Spring<br>Axis2不能很好支持Spring</p><p> CXF只支持JAXB和Aegis。<br> AXIS2支持更广泛的数据并对，如XMLBeans，JiBX，JaxMe和JaxBRI和它自定义的数据绑定ADB。注意JaxME和JaxBRI都还是试验性的。AXIS2支持更广泛的数据并对，如XMLBeans，JiBX，JaxMe和JaxBRI和它自定义的数据绑定ADB。注意JaxME和JaxBRI都还是试验性的。</p><hr><p> 如何抉择：<br>1、如果应用程序需要多语言的支持，Axis2 应当是首选了；<br>2、如果应用程序是遵循Spring 哲学路线的话，Apache CXF 是一种更好的选择，特别对嵌入式的Web Services 来说；<br>3、如果应用程序没有新的特性需要的话，就仍是用原来项目所用的框架，比如Axis1，XFire，Celtrix或 BEA等等厂家自己的 WebServices 实现，就别劳民伤财了</p>]]></content>
      
      
      <categories>
          
          <category> webservice </category>
          
      </categories>
      
      
        <tags>
            
            <tag> learn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css snippet</title>
      <link href="/2016/01/16/css%20snippet/"/>
      <url>/2016/01/16/css%20snippet/</url>
      
        <content type="html"><![CDATA[<h3 id="display"><a href="#display" class="headerlink" title="display"></a>display</h3><p>每个元素都有一个默认的 display 类型<br>不过你可以随时随地的重写它！如常见的例子是：把 li 元素修改成 inline，制作成水平菜单。</p><ul><li>block</li></ul><p>值为block的为块级元素， 如：p、form、header、footer、section</p><ul><li>inline</li></ul><p>值为inline的为行内元素</p><h3 id="position"><a href="#position" class="headerlink" title="position"></a>position</h3><ul><li>static</li></ul><p>static是默认值，一个static元素表示它不会被”positioned”,一个position属性被设置为其它值得元素表示它会被”positioned”</p><ul><li>relative</li></ul><p>relative,在一个相对定位（position属性的值为relative）的元素上设置 top 、 right 、 bottom 和 left 属性会使其偏离其正常位置。<br>其他的元素的位置则不会受该元素的影响发生位置改变来弥补它偏离后剩下的空隙。</p><ul><li>fixed</li></ul><p>fixed,一个固定定位（position属性的值为fixed）元素会相对于视窗来定位，这意味着即便页面滚动，它还是会停留在相同的位置。<br>和 relative 一样， top 、 right 、 bottom 和 left 属性都可用。</p><ul><li>absolute</li></ul><p>absolute, 它与 fixed 的表现类似，但是它不是相对于视窗而是相对于最近的“positioned”祖先元素。<br>如果绝对定位（position属性的值为absolute）的元素没有“positioned”祖先元素，那么它是相对于文档的 body 元素，并且它会随着页面滚动而移动。<br>记住一个“positioned”元素是指 position 值不是 static 的元素。</p>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> snippet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>websocket tracking</title>
      <link href="/2015/12/18/websocket%20snippit/"/>
      <url>/2015/12/18/websocket%20snippit/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/LOVELONG8808/article/details/52235132" target="_blank" rel="noopener">https://blog.csdn.net/LOVELONG8808/article/details/52235132</a></p><p><a href="https://blog.csdn.net/w1992wishes/article/details/79583543" target="_blank" rel="noopener">https://blog.csdn.net/w1992wishes/article/details/79583543</a></p><hr><p>WebSocket API是下一代客户端-服务器的异步通信方法。<br>WebSocket API最伟大之处在于服务器和客户端可以在给定的时间范围内的任意时刻，相互推送信息。<br>WebSocket并不限于以Ajax(或XHR)方式通信，因为Ajax技术需要客户端发起请求，而WebSocket服务器和客户端可以彼此相互推送信息；<br>​    XHR受到域的限制，而WebSocket允许跨域通信。<br>​    Ajax技术很聪明的一点是没有设计要使用的方式。WebSocket为指定目标创建，用于双向推送消息。</p><hr><p>activemq是消息中间件，主要实现是队列。用于处理消息。 </p><h2 id="websocket是-html5的一种传议实现前台向后台，后台向前台发出请求。"><a href="#websocket是-html5的一种传议实现前台向后台，后台向前台发出请求。" class="headerlink" title="websocket是 html5的一种传议实现前台向后台，后台向前台发出请求。"></a>websocket是 html5的一种传议实现前台向后台，后台向前台发出请求。</h2><p>websocket是HTML5协议，实时，全双工通信，长连接。WebSocket的服务端可以将数据推送到客户端，<br>​    如实时将证券信息反馈到客户端，实时天气数据，比http请求响应模式更灵活，代替了以往一些需要轮训的业务。</p><p>STOMP协议的前身是TTMP协议（一个简单的基于文本的协议），专为消息中间件设计。</p><p>这两个协议的介绍来看设计的目的不同。目前一些消息队列都是基于STOMP协议的比如ActiveMQ，RabbitMQ，消息队列一般用于一些需要异步处理的服务器任务或者一些通知类的任务。</p><p>websocket更多的使用场景是需要服务端主动通知客户端的实时通讯业务。</p>]]></content>
      
      
      <categories>
          
          <category> websocket </category>
          
      </categories>
      
      
        <tags>
            
            <tag> learn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql snippet</title>
      <link href="/2015/12/16/mysql%20snippet/"/>
      <url>/2015/12/16/mysql%20snippet/</url>
      
        <content type="html"><![CDATA[<h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><ul><li><p>the size of blob column</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  A BLOB can be 65535 bytes (64 KB) maximum.</span><br><span class="line">If you need more consider using:</span><br><span class="line">a MEDIUMBLOB for 16777215 bytes (16 MB)</span><br><span class="line">a LONGBLOB for 4294967295 bytes (4 GB).</span><br></pre></td></tr></table></figure></li><li><p>join sql<br><img src="https://i.stack.imgur.com/VQ5XP.png" alt=""></p></li><li><p>string convert to timstamp</p><p><code>SELECT STR_TO_DATE(&#39;2014-05-28 11:30:10&#39;,&#39;%Y-%m-%d %H:%i:%s&#39;);</code></p></li></ul><h3 id="sql语句"><a href="#sql语句" class="headerlink" title="sql语句"></a>sql语句</h3><ul><li>IN</li></ul><p>确定给定的值是否与子查询或列表中的值相匹配。in在查询的时候，首先查询子查询的表，然后将内表和外表做一个笛卡尔积，然后按照条件进行筛选。所以相对内表比较小的时候，in的速度较快。 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    *</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    <span class="string">`user`</span></span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    <span class="string">`user`</span>.id <span class="keyword">IN</span> (</span><br><span class="line">        <span class="keyword">SELECT</span></span><br><span class="line">            <span class="string">`order`</span>.user_id</span><br><span class="line">        <span class="keyword">FROM</span></span><br><span class="line">            <span class="string">`order`</span></span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p>以上查询使用了in语句,in()只执行一次,它查出B表中的所有id字段并缓存起来.之后,检查A表的id是否与B表中的id相等,如果相等则将A表的记录加入结果集中,直到遍历完A表的所有记录。</p><p>可以看出,当B表数据较大时不适合使用in(),因为它会B表数据全部遍历一次. 如:A表有10000条记录,B表有1000000条记录,那么最多有可能遍历10000<code>*</code>1000000次,效率很差. 再如:A表有10000条记录,B表有100条记录,那么最多有可能遍历10000*100次,遍历次数大大减少,效率大大提升。</p><ul><li>exists</li></ul><p>指定一个子查询，检测行的存在。遍历循环外表，然后看外表中的记录有没有和内表的数据一样的。匹配上就将结果放入结果集中。 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> a.* <span class="keyword">from</span> A a <span class="keyword">where</span> <span class="keyword">exists</span>(<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> B b <span class="keyword">where</span> a.id=b.id)</span><br></pre></td></tr></table></figure><p>以上查询使用了exists语句,exists()会执行A.length次,它并不缓存exists()结果集,因为exists()结果集的内容并不重要,重要的是结果集中是否有记录,如果有则返回true,没有则返回false。</p><p>当B表比A表数据大时适合使用exists(),因为它没有那么遍历操作,只需要再执行一次查询就行. 如:A表有10000条记录,B表有1000000条记录,那么exists()会执行10000次去判断A表中的id是否与B表中的id相等. 如:A表有10000条记录,B表有100000000条记录,那么exists()还是执行10000次,因为它只执行A.length次,可见B表数据越多,越适合exists()发挥效果. 再如:A表有10000条记录,B表有100条记录,那么exists()还是执行10000次,还不如使用in()遍历10000*100次,因为in()是在内存里遍历比较,而exists()需要查询数据库,我们都知道查询数据库所消耗的性能更高,而内存比较很快. </p><ul><li>where</li></ul><p>sql查询条件中<code>where 1=1,1=2和1=0</code>，这种写法，主要是为了拼凑动态的sql语句，如果使用不好会起到副作用的，是根据个人的一些习惯，是为了避免where 关键字后面的第一个词直接就是 “and”而导致语法错误，是为了后面附加and …方便程序逻辑处理用的。 </p><ul><li><p>select count(*)和select count(1)的区别</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一般情况下，Select Count(*)和Select Count(1)两着返回结果是一样的，假如表没有主键(Primary key), 那么count(1)比count(*)快，如果有主键的话，那主键作为count的条件时候count(主键)最快，如果你的表只有一个字段的话那count(*)就是最快的。</span><br></pre></td></tr></table></figure></li></ul><h3 id="事物隔离级别"><a href="#事物隔离级别" class="headerlink" title="事物隔离级别"></a>事物隔离级别</h3><ul><li><p>read uncommitted（读取未提交数据）</p><blockquote><p>我们将事务隔离级别设置为read uncommitted，即便是事务没有commit，但是我们仍然能读到未提交的数据，这是所有隔离级别中最低的一种。</p><p>脏读</p></blockquote></li><li><p>read committed（可以读取其他事务提交的数据）</p><blockquote><p>大多数数据库默认的隔离级别;</p><p>当我们将当前会话的隔离级别设置为read committed的时候，当前会话只能读取到其他事务提交的数据，未提交的数据读不到。</p></blockquote></li><li><p>repeatable read（可重读）</p><blockquote><p>MySQL默认的隔离级别</p><p>当我们将当前会话的隔离级别设置为repeatable read的时候，当前会话可以重复读，就是每次读取的结果集都相同，而不管其他事务有没有提交。</p><p>幻读</p></blockquote></li><li><p>serializable（串行化）</p><blockquote><p>当我们将当前会话的隔离级别设置为serializable的时候，其他会话对该表的写操作将被挂起。可以看到，这是隔离级别中最严格的，但是这样做势必对性能造成影响。所以在实际的选用上，我们要根据当前具体的情况选用合适的。</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> snippet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux command</title>
      <link href="/2015/10/16/linux%20command/"/>
      <url>/2015/10/16/linux%20command/</url>
      
        <content type="html"><![CDATA[<p><a href="https://linuxconfig.org/bash-scripting-tutorial-for-beginners" target="_blank" rel="noopener">Bash Scripting Tutorial for Beginners</a></p><h3 id="Bash-Shell-Scripting-Definition"><a href="#Bash-Shell-Scripting-Definition" class="headerlink" title="Bash Shell Scripting Definition"></a>Bash Shell Scripting Definition</h3><ul><li>Bash:Bourne-Again SHell<br>Bash is a command language interpreter. <h2 id="conclusion"><a href="#conclusion" class="headerlink" title="conclusion"></a>conclusion</h2>Do not be afraid to break things as that is perfectly normal. Troubleshooting and fixing code is perhaps the best booster for you to enhance your understanding of bash scripting and to improve your ability.</li></ul><p><a href="https://linuxconfig.org/bash-scripting-tutorial#h24-stdout-to-screen" target="_blank" rel="noopener">Bash scripting Tutorial</a></p><h2 id="session"><a href="#session" class="headerlink" title="session"></a>session</h2><ul><li>kill seesion <code>screen -X -S [session # you want to kill] quit</code></li><li>新建screen会话           screen -S xxx</li><li>恢复指定会话               screen -r xxx</li><li>查看所有会话                screen -ls</li><li>删除指定会话                screen -S xxx -X quit</li><li>回到终端                        Ctrl-a d</li></ul><h2 id="PORT"><a href="#PORT" class="headerlink" title="PORT"></a>PORT</h2><ul><li><p>Check the listening ports</p><p>Run any one of the following command:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo lsof -i -P -n | grep LISTEN </span><br><span class="line">sudo netstat -tulpn | grep LISTEN</span><br><span class="line">sudo nmap -sTU -O IP-address-Here</span><br></pre></td></tr></table></figure></li><li><p>checking remote system tcp 80 port status</p><ol><li>Telnet</li><li>nc</li><li>nmap<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">telnet myserver.com 80 </span><br><span class="line">nc -v myserver.com 80</span><br><span class="line">nmap myserver.com 80</span><br></pre></td></tr></table></figure></li></ol></li><li><p>通过进程名查看占用端口</p><ul><li>先查看进程pid    <code>ps -ef | grep 进程名</code></li><li>再通过pid查看占用端口    <code>netstat -nap | grep 进程pid</code></li></ul></li><li><p>通过端口查看进程</p><p><code>netstat -nap | grep 端口号</code>或<code>netstat -apn | grep 端口号</code></p></li></ul><h2 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h2><ul><li>c – Creates a new .tar archive file.</li><li><p>x — to untar or extract a tar file</p></li><li><p>v – Verbosely show the .tar file progress.</p></li><li><p>f – File name type of the archive file.</p></li><li><p>z — gzip archive file</p></li><li>j —  bz2 feature compress and create archive file</li><li>t — to list the contents of tar archive file</li></ul><h2 id="firewall"><a href="#firewall" class="headerlink" title="firewall"></a>firewall</h2><ul><li>check status : <code>sudo ufw status</code></li><li><p>enable firewall: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ufw <span class="built_in">enable</span></span><br><span class="line">Command may disrupt existing ssh connections. Proceed with operation (y|n)? y</span><br><span class="line">Firewall is active and enabled on system startup</span><br></pre></td></tr></table></figure></li><li><p>disable firewall</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ufw <span class="built_in">disable</span></span><br><span class="line">Firewall stopped and disabled on system startup</span><br></pre></td></tr></table></figure></li></ul><h3 id="查看系统配置"><a href="#查看系统配置" class="headerlink" title="查看系统配置"></a>查看系统配置</h3><ul><li>查看内核<ul><li><code>cat /proc/version</code></li><li><code>uname -a</code></li></ul></li><li>查看linux版本<ul><li><code>lsb_release -a</code></li><li><code>cat /etc/issue</code></li></ul></li></ul><h3 id="磁盘相关"><a href="#磁盘相关" class="headerlink" title="磁盘相关"></a>磁盘相关</h3><ul><li><p>查看系统磁盘占用情况    <code>df -h</code></p></li><li><p>查看目录下文件大小        <code>du -sh</code></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> command </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java 8</title>
      <link href="/2015/09/01/java%208%20feature/"/>
      <url>/2015/09/01/java%208%20feature/</url>
      
        <content type="html"><![CDATA[<h3 id="forEach-method-in-Iterable-interface"><a href="#forEach-method-in-Iterable-interface" class="headerlink" title="forEach() method in Iterable interface"></a>forEach() method in Iterable interface</h3><h3 id="default-and-static-methods-in-Interfaces"><a href="#default-and-static-methods-in-Interfaces" class="headerlink" title="default and static methods in Interfaces"></a>default and static methods in Interfaces</h3><ul><li>Java 8 introduces the “Default Method” or (Defender methods) feature, which allows the developer to add new methods to the interfaces without breaking their existing implementation. It provides the flexibility to allow interface to define implementation which will use as the default in a situation where a concrete class fails to provide an implementation for that method.</li></ul><h3 id="Functional-Interfaces-and-Lambda-Expressions"><a href="#Functional-Interfaces-and-Lambda-Expressions" class="headerlink" title="Functional Interfaces and Lambda Expressions"></a>Functional Interfaces and Lambda Expressions</h3><h4 id="Functional-Interfaces"><a href="#Functional-Interfaces" class="headerlink" title="Functional Interfaces"></a>Functional Interfaces</h4><blockquote><p>Being object oriented is not bad, but it brings a lot of verbosity to the program. Java 8 Functional Interfaces and Lambda Expressions help us in writing smaller and cleaner code by removing a lot of boiler-plate code.</p><ul><li>An interface with exactly one abstract method is called Functional Interface. @FunctionalInterface annotation is added so that we can mark an interface as functional interface.</li><li>Some of the useful java 8 functional interfaces are Consumer, Supplier, Function and Predicate.</li></ul></blockquote><h4 id="Lambda-Expression"><a href="#Lambda-Expression" class="headerlink" title="Lambda Expression"></a>Lambda Expression</h4><ul><li>Objects are the base of java programming language and we can never have a function without an Object, that’s why Java language provide support for using lambda expressions only with functional interfaces.</li><li>Lambda Expressions syntax is (argument) -&gt; (body). </li></ul><h3 id="Java-Stream-API-for-Bulk-Data-Operations-on-Collections"><a href="#Java-Stream-API-for-Bulk-Data-Operations-on-Collections" class="headerlink" title="Java Stream API for Bulk Data Operations on Collections"></a>Java Stream API for Bulk Data Operations on Collections</h3><h3 id="Java-Time-API"><a href="#Java-Time-API" class="headerlink" title="Java Time API"></a>Java Time API</h3><h3 id="Collection-API-improvements"><a href="#Collection-API-improvements" class="headerlink" title="Collection API improvements"></a>Collection API improvements</h3><h3 id="Concurrency-API-improvements"><a href="#Concurrency-API-improvements" class="headerlink" title="Concurrency API improvements"></a>Concurrency API improvements</h3><h3 id="Java-IO-improvements"><a href="#Java-IO-improvements" class="headerlink" title="Java IO improvements"></a>Java IO improvements</h3><h3 id="Miscellaneous-Core-API-improvements"><a href="#Miscellaneous-Core-API-improvements" class="headerlink" title="Miscellaneous Core API improvements"></a>Miscellaneous Core API improvements</h3>]]></content>
      
      
      <categories>
          
          <category> learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim command</title>
      <link href="/2015/08/16/vim%20command/"/>
      <url>/2015/08/16/vim%20command/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.imgur.com/8ouxjED.png" alt="vimium"></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>session tracking</title>
      <link href="/2015/02/18/session%20tracking/"/>
      <url>/2015/02/18/session%20tracking/</url>
      
        <content type="html"><![CDATA[<h2 id="session"><a href="#session" class="headerlink" title="session"></a>session</h2><blockquote><p>Session simply means a particular interval of time.<br>Session Tracking is a way to maintain state (data) of an user. It is also known as session management in servlet.</p></blockquote><ul><li><p>HTTP is stateless that means each request is considered as the new request. It is shown in the figure given below:<br><img src="https://www.javatpoint.com/images/newrequest.JPG" alt=""></p></li><li><p>There are four techniques used in Session tracking:</p><ul><li>Cookies</li><li>Hidden Form Field</li><li>URL Rewriting</li><li>HttpSession</li></ul></li></ul><h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><blockquote><p>A cookie is a small piece of information that is persisted between the multiple client requests.<br>A cookie has a name, a single value, and optional attributes such as a comment, path and domain qualifiers, a maximum age, and a version number.</p></blockquote><h3 id="how-cookie-work"><a href="#how-cookie-work" class="headerlink" title="how cookie work"></a>how cookie work</h3><p><img src="https://www.javatpoint.com/phppages/images/cookie.png" alt=""></p><h3 id="type-of-cookie"><a href="#type-of-cookie" class="headerlink" title="type of cookie"></a>type of cookie</h3><ul><li><p>Non-persistent cookie</p><blockquote><p>It is valid for single session only. It is removed each time when user closes the browser.</p></blockquote></li><li><p>Persistent cookie</p><blockquote><p>It is valid for multiple session . It is not removed each time when user closes the browser. It is removed only if user logout or signout.</p></blockquote></li><li><p>Advantage </p><ul><li>Simplest technique of maintaining the state.</li><li>Cookies are maintained at client side.</li></ul></li><li>Disadvantage<ul><li>It will not work if cookie is disabled from the browser.</li><li>Only textual information can be set in Cookie object.</li></ul></li></ul><h2 id="HttpSession-Interface"><a href="#HttpSession-Interface" class="headerlink" title="HttpSession Interface"></a>HttpSession Interface</h2><ul><li>An object of HttpSession can be used to perform two tasks:<ul><li>bind objects</li><li>view and manipulate information about a session, such as the session identifier, creation time, and last accessed time.<br><img src="https://www.javatpoint.com/images/httpsession.JPG" alt=""></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> learn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java servlet</title>
      <link href="/2015/02/16/java%20servlet/"/>
      <url>/2015/02/16/java%20servlet/</url>
      
        <content type="html"><![CDATA[<h2 id="Web-Application"><a href="#Web-Application" class="headerlink" title="Web Application"></a>Web Application</h2><h3 id="HTML-and-HTTP"><a href="#HTML-and-HTTP" class="headerlink" title="HTML and HTTP"></a>HTML and HTTP</h3><ul><li>HTML:HyperText Markup Language.</li><li>HTTP:HyperText Transfer Protocol<ul><li>HTTP is the communication protocol between server and client. HTTP runs on top of TCP/IP communication protocol.</li><li>Port numbers 0 to 1023 are reserved ports for well known services, for example 80 for HTTP, 443 for HTTPS, 21 for FTP etc.</li></ul></li><li>Java Servlet and JSPs are server side technologies to extend the capability of web servers by providing support for dynamic response and data persistence.</li></ul><h3 id="Web-Container"><a href="#Web-Container" class="headerlink" title="Web Container"></a>Web Container</h3><ul><li>When web container gets the request and if it’s for servlet then container creates two Objects HTTPServletRequest and HTTPServletResponse. Then it finds the correct servlet based on the URL and creates a thread for the request. Then it invokes the servlet service() method and based on the HTTP method service() method invokes doGet() or doPost() methods. Servlet methods generate the dynamic page and write it to response. Once servlet thread is complete, container converts the response to HTTP response and send it back to client.</li><li>Some of the important work done by web container are:<ul><li>Communication Support – Container provides easy way of communication between web server and the servlets and JSPs. Because of container, we don’t need to build a server socket to listen for any request from web server, parse the request and generate response. All these important and complex tasks are done by container and all we need to focus is on our business logic for our applications.<ul><li>Lifecycle and Resource Management – Container takes care of managing the life cycle of servlet. Container takes care of loading the servlets into memory, initializing servlets, invoking servlet methods and destroying them. Container also provides utility like JNDI for resource pooling and management.</li><li>Multithreading Support – Container creates new thread for every request to the servlet and when it’s processed the thread dies. So servlets are not initialized for each request and saves time and memory.</li><li>JSP Support – JSPs doesn’t look like normal java classes and web container provides support for JSP. Every JSP in the application is compiled by container and converted to Servlet and then container manages them like other servlets.</li><li>Miscellaneous Task – Web container manages the resource pool, does memory optimizations, run garbage collector, provides security configurations, support for multiple applications, hot deployment and several other tasks behind the scene that makes our life easier.</li></ul></li></ul></li><li>Java Web Applications are packaged as Web Archive (WAR) and it has a defined structure.<br><img src="https://cdn.journaldev.com/wp-content/uploads/2013/08/WAR-directory-structure.png" alt=""></li></ul><h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><ul><li>Servlet API Hierarchy<br><img src="https://cdn.journaldev.com/wp-content/uploads/2013/08/Servlet-Hierarchy.png" alt=""></li></ul><h2 id="Session-Management"><a href="#Session-Management" class="headerlink" title="Session Management"></a>Session Management</h2><h3 id="What-is-a-Session"><a href="#What-is-a-Session" class="headerlink" title="What is a Session?"></a>What is a Session?</h3><ul><li>HTTP protocol and Web Servers are stateless, what it means is that for web server every request is a new request to process and they can’t identify if it’s coming from client that has been sending request previously.</li><li>Session is a conversional state between client and server and it can consists of multiple request and response between client and server. Since HTTP and Web Server both are stateless, the only way to maintain a session is when some unique information about the session (session id) is passed between server and client in every request and response.</li></ul><h3 id="JSESSIONID-Cookie"><a href="#JSESSIONID-Cookie" class="headerlink" title="JSESSIONID Cookie"></a>JSESSIONID Cookie</h3><ul><li>When we use HttpServletRequest getSession() method and it creates a new request, it creates the new HttpSession object and also add a Cookie to the response object with name JSESSIONID and value as session id. This cookie is used to identify the HttpSession object in further requests from client. If the cookies are disabled at client side and we are using URL rewriting then this method uses the jsessionid value from the request URL to find the corresponding session. JSESSIONID cookie is used for session tracking, so we should not use it for our application purposes to avoid any session related issues.</li><li>When a JSP resource is used, container automatically creates a session for it, so we can’t check if session is null to make sure if user has come through login page, so we are using session attribute to validate request.</li><li>As we saw in last section that we can manage a session with HttpSession but if we disable the cookies in browser, it won’t work because server will not receive the JSESSIONID cookie from client. </li></ul><h4 id="Cookie-Basics"><a href="#Cookie-Basics" class="headerlink" title="Cookie Basics"></a>Cookie Basics</h4><ul><li>a cookie is a small piece of data stored on the client-side which servers use when communicating with clients.They’re used to identify a client when sending a subsequent request. They can also be used for passing some data from one servlet to another.</li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> learn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux config</title>
      <link href="/2015/01/16/linux%20config/"/>
      <url>/2015/01/16/linux%20config/</url>
      
        <content type="html"><![CDATA[<h3 id="java-config"><a href="#java-config" class="headerlink" title="java config"></a>java config</h3><ul><li>Use <code>java -XshowSettings:properties</code> to show the java.library.path (and others) value.</li></ul><h3 id="native-lib-config"><a href="#native-lib-config" class="headerlink" title="native lib config"></a>native lib config</h3><ul><li><code>/lib</code> contain “essential” libraries that may be needed even in single-user (admin-only) mode and without /usr mounted</li><li><code>/usr/lib</code> are the libraries for the normal user-programs, that mostly can be found under /usr.</li><li><code>/usr/local/lib</code> are the libraries for locally installed programs and packages ie. things you’ve compiled and installed from source-packages yourself.</li></ul><h3 id="other"><a href="#other" class="headerlink" title="other"></a>other</h3><ul><li><code>/etc/environment</code>是设置整个系统的环境，而<code>/etc/profile</code>是设置所有用户的环境 </li></ul>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> config </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hello world</title>
      <link href="/2015/01/01/hello-world/"/>
      <url>/2015/01/01/hello-world/</url>
      
        <content type="html"><![CDATA[<h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><h3 id="Clean"><a href="#Clean" class="headerlink" title="Clean"></a>Clean</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
