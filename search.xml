<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Awareness</title>
    <url>/2021/04/14/$Awareness/</url>
    <content><![CDATA[<ul>
<li><p>行动为王，思想为妃</p>
</li>
<li><p>自律且专注</p>
</li>
</ul>
]]></content>
      <categories>
        <category>will</category>
      </categories>
      <tags>
        <tag>Awareness</tag>
      </tags>
  </entry>
  <entry>
    <title>Daily_Flag</title>
    <url>/2021/04/14/$Daily/</url>
    <content><![CDATA[<h3 id="2021-04-14"><a href="#2021-04-14" class="headerlink" title="2021-04-14"></a>2021-04-14</h3><p>今天记录了一个ignite问题，并更新于post，提交到github，打开github发现2020年只有四个绿点。<br>2021年以后的时间，争取一个周可以有一个绿点吧</p>
<h3 id="2021-04-16"><a href="#2021-04-16" class="headerlink" title="2021-04-16"></a>2021-04-16</h3>]]></content>
      <categories>
        <category>will</category>
      </categories>
      <tags>
        <tag>Flag</tag>
      </tags>
  </entry>
  <entry>
    <title>打卡</title>
    <url>/2021/04/16/$%E6%89%93%E5%8D%A1/</url>
    <content><![CDATA[<blockquote>
<p>金钱换不来的东西才算珍贵，比如时间、健康、知识</p>
</blockquote>
<p>✔️ </p>
<h3 id="身体是本钱"><a href="#身体是本钱" class="headerlink" title="身体是本钱"></a>身体是本钱</h3><h3 id="英语是编程语言的基础语言"><a href="#英语是编程语言的基础语言" class="headerlink" title="英语是编程语言的基础语言"></a>英语是编程语言的基础语言</h3><pre><code>    April   2021
</code></pre>
<table>
<thead>
<tr>
<th>Sun</th>
<th>Mon</th>
<th>Tue</th>
<th>Wed</th>
<th>Thu</th>
<th>Fri</th>
<th>Sat</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td><a href="#41">1</a></td>
<td><a href="#42">2</a></td>
<td><a href="#43">3</a></td>
</tr>
<tr>
<td><a href="#44">4</a></td>
<td><a href="#45">5</a></td>
<td><a href="#46">6</a></td>
<td><a href="#47">7</a></td>
<td><a href="#48">8</a></td>
<td><a href="#49">9</a></td>
<td><a href="#410">10</a></td>
</tr>
<tr>
<td><a href="#411">11</a></td>
<td><a href="#412">12</a></td>
<td><a href="#413">13</a></td>
<td><a href="#414">14</a></td>
<td><a href="#415">15</a></td>
<td><a href="#416">16</a> ✔️</td>
<td><a href="#417">17</a></td>
</tr>
<tr>
<td><a href="#418">18</a></td>
<td><a href="#419">19</a></td>
<td><a href="#420">20</a></td>
<td><a href="#421">21</a></td>
<td><a href="#422">22</a></td>
<td><a href="#423">23</a></td>
<td><a href="#424">24</a></td>
</tr>
<tr>
<td><a href="#425">25</a></td>
<td><a href="#426">26</a></td>
<td><a href="#427">27</a></td>
<td><a href="#428">28</a></td>
<td><a href="#429">29</a></td>
<td><a href="#430">30</a></td>
<td></td>
</tr>
</tbody></table>
<pre><code>     June   2021          
</code></pre>
<table>
<thead>
<tr>
<th>Sun</th>
<th>Mon</th>
<th>Tue</th>
<th>Wed</th>
<th>Thu</th>
<th>Fri</th>
<th>Sat</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td><a href="#61">1</a></td>
<td><a href="#62">2</a></td>
<td><a href="#63">3</a></td>
<td><a href="#64">4</a></td>
<td><a href="#65">5</a></td>
</tr>
<tr>
<td><a href="#66">6</a></td>
<td><a href="#67">7</a></td>
<td><a href="#68">8</a></td>
<td><a href="#69">9</a></td>
<td><a href="#610">10</a></td>
<td><a href="#611">11</a></td>
<td><a href="#612">12</a></td>
</tr>
<tr>
<td><a href="#613">13</a></td>
<td><a href="#614">14</a></td>
<td><a href="#615">15</a></td>
<td><a href="#616">16</a></td>
<td><a href="#617">17</a></td>
<td><a href="#618">18</a></td>
<td><a href="#619">19</a></td>
</tr>
<tr>
<td><a href="#620">20</a></td>
<td><a href="#621">21</a></td>
<td><a href="#622">22</a></td>
<td><a href="#623">23</a></td>
<td><a href="#624">24</a></td>
<td><a href="#625">25</a></td>
<td><a href="#626">26</a></td>
</tr>
<tr>
<td><a href="#627">27</a></td>
<td><a href="#628">28</a></td>
<td><a href="#629">29</a>✔️</td>
<td><a href="#630">30</a>✔️</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<pre><code>     July   2021          
</code></pre>
<table>
<thead>
<tr>
<th>Sun</th>
<th>Mon</th>
<th>Tue</th>
<th>Wed</th>
<th>Thu</th>
<th>Fri</th>
<th>Sat</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td><a href="#2021%E5%B9%B407%E6%9C%8801%E6%97%A5">1</a></td>
<td><a href="#72">2</a></td>
<td><a href="#73">3</a></td>
</tr>
<tr>
<td><a href="#74">4</a></td>
<td><a href="#75">5</a></td>
<td><a href="#76">6</a></td>
<td><a href="#77">7</a></td>
<td><a href="#78">8</a></td>
<td><a href="#79">9</a></td>
<td><a href="#710">10</a></td>
</tr>
<tr>
<td><a href="#711">11</a></td>
<td><a href="#712">12</a></td>
<td><a href="#713">13</a></td>
<td><a href="#714">14</a></td>
<td><a href="#715">15</a></td>
<td><a href="#716">16</a></td>
<td><a href="#717">17</a></td>
</tr>
<tr>
<td><a href="#718">18</a></td>
<td><a href="#719">19</a></td>
<td><a href="#720">20</a></td>
<td><a href="#721">21</a></td>
<td><a href="#722">22</a></td>
<td><a href="#723">23</a></td>
<td><a href="#724">24</a></td>
</tr>
<tr>
<td><a href="#725">25</a></td>
<td><a href="#726">26</a></td>
<td><a href="#727">27</a></td>
<td><a href="#728">28</a></td>
<td><a href="#729">29</a></td>
<td><a href="#730">30</a></td>
<td><a href="#731">31</a></td>
</tr>
</tbody></table>
<h1 id="2021年07月01日"><a href="#2021年07月01日" class="headerlink" title="2021年07月01日"></a>2021年07月01日</h1><p>测试链接<br>后面可以修改连接处标题由71改为2021年07月01日</p>
]]></content>
      <categories>
        <category>will</category>
      </categories>
      <tags>
        <tag>record</tag>
      </tags>
  </entry>
  <entry>
    <title>Output</title>
    <url>/2021/04/14/$Output/</url>
    <content><![CDATA[<blockquote>
<p>知识的成长周期，只有输入，没有输出，那么输入就失去了意义，输入的东西生命也不会长久，并且浪费了之前付出的时间。<br>输出，不限于做一件事情，解决一个问题，还可能只是一行文字，一点领悟。</p>
</blockquote>
]]></content>
      <categories>
        <category>will</category>
      </categories>
      <tags>
        <tag>Output</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithms + Data Structures = Programs</title>
    <url>/2018/12/18/Algorithms%20+%20Data%20Structures%20=%20Programs/</url>
    <content><![CDATA[<h3 id="What-is-a-Data-Structure"><a href="#What-is-a-Data-Structure" class="headerlink" title="What is a Data Structure"></a>What is a Data Structure</h3><blockquote>
<p>a data structure is a container that stores data in a specific layout. </p>
</blockquote>
<h3 id="Why-do-we-need-Data-Structure"><a href="#Why-do-we-need-Data-Structure" class="headerlink" title="Why do we need Data Structure"></a>Why do we need Data Structure</h3><blockquote>
<p>As data structures are used to store data in an organized form, and since data is the most crucial entity in computer science.</p>
<p>Based on different scenarios, data needs to be stored in a specific format. We have a handful of data structures that cover our need to store data in different formats.</p>
</blockquote>
<h3 id="Commonly-used-Data-Structure"><a href="#Commonly-used-Data-Structure" class="headerlink" title="Commonly used Data Structure"></a>Commonly used Data Structure</h3><h4 id="1-Arrays"><a href="#1-Arrays" class="headerlink" title="1. Arrays"></a>1. Arrays</h4><blockquote>
<p>An array is the simplest and most widely used data structure. Other data structures like stacks and queues are derived from arrays.</p>
</blockquote>
<ul>
<li>the two types of arrays:<ul>
<li>One-dimensional arrays</li>
<li>Multi-dimensional arrays</li>
</ul>
</li>
<li>basic operations<ul>
<li>Inserts an element at given index</li>
<li>Get — Returns the element at given index</li>
<li>Delete — Deletes an element at given index</li>
<li>Size — Get the total number of elements in array</li>
</ul>
</li>
</ul>
<h4 id="2-Stacks"><a href="#2-Stacks" class="headerlink" title="2. Stacks"></a>2. Stacks</h4><blockquote>
<p>LIFO (Last In First Out)</p>
</blockquote>
<ul>
<li>basic operations<ul>
<li>Push — Inserts an element at the top</li>
<li>Pop — Returns the top element after removing from the stack</li>
<li>isEmpty — Returns true if the stack is empty</li>
<li>Top — Returns the top element without removing from the stack</li>
</ul>
</li>
</ul>
<h4 id="3-Queues"><a href="#3-Queues" class="headerlink" title="3. Queues"></a>3. Queues</h4><blockquote>
<p>Similar to Stack, Queue is another linear data structure that stores the element in a sequential manner. The only significant difference between Stack and Queue is that instead of using the LIFO method, Queue implements the FIFO method, which is short for First in First Out.</p>
</blockquote>
<ul>
<li>basic operations<ul>
<li>Enqueue() — Inserts element to the end of the queue</li>
<li>Dequeue() — Removes an element from the start of the queue</li>
<li>isEmpty() — Returns true if queue is empty</li>
<li>Top() — Returns the first element of the queue</li>
</ul>
</li>
</ul>
<h4 id="4-Linked-List"><a href="#4-Linked-List" class="headerlink" title="4. Linked List"></a>4. Linked List</h4><blockquote>
<p>A linked list is like a chain of nodes, where each node contains information like data and a pointer to the succeeding node in the chain.</p>
</blockquote>
<ul>
<li>the types of linked lists<ul>
<li>Singly Linked List (Unidirectional)</li>
<li>Doubly Linked List (Bi-directional)</li>
</ul>
</li>
<li>basic operations<ul>
<li><em>InsertAtEnd</em> — Inserts given element at the end of the linked list</li>
<li><em>InsertAtHead</em> — Inserts given element at the start/head of the linked list</li>
<li><em>Delete</em> — Deletes given element from the linked list</li>
<li><em>DeleteAtHead</em> — Deletes first element of the linked list</li>
<li><em>Search</em> — Returns the given element from a linked list</li>
<li><em>isEmpty</em> — Returns true if the linked list is empty</li>
</ul>
</li>
</ul>
<h4 id="5-Graphs"><a href="#5-Graphs" class="headerlink" title="5. Graphs"></a>5. Graphs</h4><blockquote>
<p>A graph is a set of nodes that are connected to each other in the form of a network. Nodes are also called vertices. A <strong>pair(x,y)</strong> is called an <strong>edge</strong><em>,</em> which indicates that vertex <strong>x</strong> is connected to vertex <strong>y</strong>. An edge may contain weight/cost, showing how much cost is required to traverse from vertex x to y*.*</p>
</blockquote>
<p><img src="https://i.imgur.com/9sHq0Ek.png"></p>
<ul>
<li>types of Graphs<ul>
<li>Undirected Graph</li>
<li>Directed Graph</li>
</ul>
</li>
</ul>
<h4 id="6-Trees"><a href="#6-Trees" class="headerlink" title="6. Trees"></a>6. Trees</h4><blockquote>
<p>A tree is a hierarchical data structure consisting of vertices (nodes) and edges that connect them. Trees are similar to graphs, but the key point that differentiates a tree from the graph is that a cycle cannot exist in a tree.</p>
</blockquote>
<p><img src="https://i.imgur.com/R6zwf9U.png"></p>
<ul>
<li>the types of trees<ul>
<li>N-ary Tree</li>
<li>Balanced Tree</li>
<li>Binary Tree</li>
<li>Binary Search Tree</li>
<li>AVL Tree</li>
<li>Red Black Tree</li>
<li>2–3 Tree</li>
</ul>
<blockquote>
<p>Out of the above, Binary Tree and Binary Search Tree are the most commonly used trees.</p>
</blockquote>
</li>
</ul>
<h4 id="7-Trie"><a href="#7-Trie" class="headerlink" title="7. Trie"></a>7. Trie</h4><blockquote>
<p>Trie, which is also known as “Prefix Trees”, is a tree-like data structure which proves to be quite efficient for solving problems related to strings. It provides fast retrieval, and is mostly used for searching words in a dictionary, providing auto suggestions in a search engine, and even for IP routing.</p>
</blockquote>
<h4 id="8-Hash-Table"><a href="#8-Hash-Table" class="headerlink" title="8. Hash Table"></a>8. Hash Table</h4><blockquote>
<p>Hashing is a process used to uniquely identify objects and store each object at some pre-calculated unique index called its “key.”</p>
<p>Hash tables are generally implemented using arrays.</p>
</blockquote>
<ul>
<li>The performance of hashing data structure depends upon these three factors:<ul>
<li>Hash Function</li>
<li>Size of the Hash Table</li>
<li>Collision Handling Method</li>
</ul>
</li>
</ul>
<p>Here’s an illustration of how the hash is mapped in an array. The index of this array is calculated through a Hash Function.</p>
<p><img src="https://i.imgur.com/fkxWuxr.png"></p>
<p>reference:</p>
<ul>
<li><a href="https://www.cnblogs.com/xdecode/p/9321848.html">图解Java常用数据结构</a></li>
</ul>
]]></content>
      <categories>
        <category>DSA</category>
      </categories>
      <tags>
        <tag>snippet</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6 learn</title>
    <url>/2019/04/04/ES6%20learn/</url>
    <content><![CDATA[<h3 id="Let"><a href="#Let" class="headerlink" title="Let"></a>Let</h3><p>let is similar to var but let has scope. let is only accessible in the block level it is defined.</p>
<p>example:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"> <span class="keyword">let</span> a = <span class="number">40</span>;</span><br><span class="line"> <span class="built_in">console</span>.log(a); <span class="comment">//40</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<p>and</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">50</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"> <span class="keyword">let</span> a = <span class="number">60</span>;</span><br><span class="line"> <span class="keyword">var</span> c = <span class="number">10</span>;</span><br><span class="line"> <span class="built_in">console</span>.log(a/c); <span class="comment">// 6</span></span><br><span class="line"> <span class="built_in">console</span>.log(b/c); <span class="comment">// 10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(c); <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 50</span></span><br></pre></td></tr></table></figure>

<h3 id="Const"><a href="#Const" class="headerlink" title="Const"></a>Const</h3><p>Const is used to assign a constant value to the variable. And the value cannot be changed. Its fixed.</p>
<p>example:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">50</span>;</span><br><span class="line">a = <span class="number">60</span>; <span class="comment">// shows error. You cannot change the value of const.</span></span><br><span class="line"><span class="keyword">const</span> b = <span class="string">&quot;Constant variable&quot;</span>;</span><br><span class="line">b = <span class="string">&quot;Assigning new value&quot;</span>; <span class="comment">// shows error.</span></span><br></pre></td></tr></table></figure>

<p>Whenever you define a const variable, Javascript references the address of the value to the variable.</p>
<p>example:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> LANGUAGES = [<span class="string">&#x27;Js&#x27;</span>, <span class="string">&#x27;Ruby&#x27;</span>, <span class="string">&#x27;Python&#x27;</span>, <span class="string">&#x27;Go&#x27;</span>];</span><br><span class="line">LANGUAGES = <span class="string">&quot;Javascript&quot;</span>; <span class="comment">// shows error.</span></span><br><span class="line">LANGUAGES.push(<span class="string">&#x27;Java&#x27;</span>); <span class="comment">// Works fine.</span></span><br><span class="line"><span class="built_in">console</span>.log(LANGUAGES); <span class="comment">// [&#x27;Js&#x27;, &#x27;Ruby&#x27;, &#x27;Python&#x27;, &#x27;Go&#x27;, &#x27;Java&#x27;]</span></span><br></pre></td></tr></table></figure>

<p>the variable ‘LANGUAGES’ actually references to the memory allocated to the array. So you cannot change the variable to reference some other memory location later. Throughout the program it only references to the array.</p>
<h3 id="Arrow-Function"><a href="#Arrow-Function" class="headerlink" title="Arrow Function"></a>Arrow Function</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Old Syntax</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">oldOne</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&quot;Hello World..!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// New Syntax</span></span><br><span class="line"><span class="keyword">var</span> newOne = <span class="function">() =&gt;</span> &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&quot;Hello World..!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>and</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> NewOneWithParameters = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(a+b); <span class="comment">// 30</span></span><br><span class="line">&#125;</span><br><span class="line">NewOneWithParameters(<span class="number">10</span>, <span class="number">20</span>);</span><br></pre></td></tr></table></figure>

<p>There are two things to explain here.</p>
<ol>
<li>If you have a function with single parameter, you don’t need (). In our case <strong>element</strong> is the parameter.</li>
<li>And If you have single line as the body of the function you don’t need {} and also JS will implicitly returns the value after executing the function. You don’t have to use <strong>return</strong> keyword.</li>
<li>Arrow functions shine best with anything that requires <code>this</code> to be bound to the context, and not the function itself.</li>
</ol>
<h3 id="For-of-loop"><a href="#For-of-loop" class="headerlink" title="For of loop"></a>For of loop</h3><p>for..of iterates through list of elements (i.e) like Array and returns the elements (not their index) one by one.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> arr) &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="attr">Output</span>:</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>and</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> string = <span class="string">&quot;Javascript&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> char <span class="keyword">of</span> string) &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(char);</span><br><span class="line">&#125;</span><br><span class="line"><span class="attr">Output</span>:</span><br><span class="line">J</span><br><span class="line">a</span><br><span class="line">v</span><br><span class="line">a</span><br><span class="line">s</span><br><span class="line">c</span><br><span class="line">r</span><br><span class="line">i</span><br><span class="line">p</span><br><span class="line">t</span><br></pre></td></tr></table></figure>

<h3 id="Spread-attributes"><a href="#Spread-attributes" class="headerlink" title="Spread attributes"></a>Spread attributes</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> SumElements = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line"> 	<span class="built_in">console</span>.log(arr); <span class="comment">// [10, 20, 40, 60, 90]</span></span><br><span class="line"> 	</span><br><span class="line">	<span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line"> 	<span class="keyword">for</span> (<span class="keyword">let</span> element <span class="keyword">of</span> arr) &#123;</span><br><span class="line"> 		sum += element;</span><br><span class="line"> 	&#125;</span><br><span class="line"> 	<span class="built_in">console</span>.log(sum); <span class="comment">// 220. </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SumElements([<span class="number">10</span>, <span class="number">20</span>, <span class="number">40</span>, <span class="number">60</span>, <span class="number">90</span>]);</span><br></pre></td></tr></table></figure>

<p>consider the same example with spread attributes:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> SumElements = <span class="function">(<span class="params">...arr</span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(arr); <span class="comment">// [10, 20, 40, 60, 90]</span></span><br><span class="line"><span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">let</span> element <span class="keyword">of</span> arr) &#123;</span><br><span class="line"> sum += element;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="built_in">console</span>.log(sum); <span class="comment">// 220. </span></span><br><span class="line">&#125;</span><br><span class="line">SumElements(<span class="number">10</span>, <span class="number">20</span>, <span class="number">40</span>, <span class="number">60</span>, <span class="number">90</span>); <span class="comment">// Note we are not passing array here. Instead we are passing the elements as arguments.</span></span><br></pre></td></tr></table></figure>

<p>Math.max is a simple method that returns the maximum element from given list. It doesn’t accept an array.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">60</span>];</span><br><span class="line"><span class="built_in">Math</span>.max(arr); <span class="comment">// Shows error. Doesn&#x27;t accept an array.</span></span><br></pre></td></tr></table></figure>

<p>So lets use our savior:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">60</span>];</span><br><span class="line"><span class="built_in">Math</span>.max(...arr); <span class="comment">// 60</span></span><br></pre></td></tr></table></figure>

<h3 id="Maps"><a href="#Maps" class="headerlink" title="Maps"></a>Maps</h3><p>Map holds key-value pairs. It’s similar to an array but we can define our own index. And indexes are unique in maps.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">map.set(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;John&#x27;</span>);</span><br><span class="line">map.set(<span class="string">&#x27;id&#x27;</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">map.get(<span class="string">&#x27;name&#x27;</span>); <span class="comment">// John</span></span><br><span class="line">map.get(<span class="string">&#x27;id&#x27;</span>); <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line">map.size; <span class="comment">// 2. Returns the size of the map.</span></span><br><span class="line">map.keys(); <span class="comment">// outputs only the keys. </span></span><br><span class="line">map.values(); <span class="comment">// outputs only the values.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> map.keys()) &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="attr">Output</span>:</span><br><span class="line">name</span><br><span class="line">id</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> map) &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(key+<span class="string">&quot; - &quot;</span>+value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="attr">Output</span>:</span><br><span class="line">name - John</span><br><span class="line">id - <span class="number">10</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Sets"><a href="#Sets" class="headerlink" title="Sets"></a>Sets</h3><p>Sets are used to store the unique values of any type.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sets = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">sets.add(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">sets.add(<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">sets.add(<span class="string">&#x27;a&#x27;</span>); <span class="comment">// We are adding duplicate value.</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> element <span class="keyword">of</span> sets) &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(element);</span><br><span class="line">&#125;</span><br><span class="line"><span class="attr">Output</span>:</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line"></span><br><span class="line">sets.size; <span class="comment">// returns 2. Size of the set.</span></span><br><span class="line">sets.has(<span class="string">&#x27;a&#x27;</span>); <span class="comment">// returns true. </span></span><br><span class="line">sets.has(<span class="string">&#x27;c&#x27;</span>); <span class="comment">// returns false.</span></span><br></pre></td></tr></table></figure>

<h3 id="Static-methods"><a href="#Static-methods" class="headerlink" title="Static methods"></a>Static methods</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span> </span>&#123;</span><br><span class="line"> <span class="keyword">static</span> <span class="function"><span class="title">Callme</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&quot;Static method&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">Example.Callme();</span><br><span class="line">Output:</span><br><span class="line">Static method</span><br></pre></td></tr></table></figure>

<p> you can call the function without creating any instance for the class.</p>
<h3 id="Getters-and-Setters"><a href="#Getters-and-Setters" class="headerlink" title="Getters and Setters"></a>Getters and Setters</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line"> <span class="built_in">this</span>.name = name;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="title">getName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="title">setName</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line"> <span class="built_in">this</span>.name = name;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> People(<span class="string">&quot;Jon Snow&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(person.getName());</span><br><span class="line">person.setName(<span class="string">&quot;Dany&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(person.getName());</span><br><span class="line">Output:</span><br><span class="line">Jon Snow</span><br><span class="line">Dany</span><br></pre></td></tr></table></figure>

<h3 id="Promises"><a href="#Promises" class="headerlink" title="Promises"></a>Promises</h3><p> They are used to make <strong>async</strong> operations such as API request, file handling, downloading images, etc.</p>
<p>Before promises, programmers used to define <strong>callbacks.</strong> Callbacks are normal functions in Javascript which executes when the async operation is complete.</p>
<ul>
<li><p>three states in promises</p>
<ol>
<li><strong>Pending</strong>: In this state the promise is just executing the async operation. For example, It’s making some API request to the server or downloading some images from cdn.  from this state promise can move to either to <strong>Fulfilled</strong> or to <strong>Rejected</strong></li>
<li><strong>Fulfilled</strong>: If the promise has reached this state, then it means that the async operation is complete and we have the output. For example, we have the response from the API.</li>
<li><strong>Rejected:</strong> If the promise has reached this state, it means that the async operation is not successful and we have the error which caused the operation to fail.</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> apiCall = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">if</span> ( API request to get some data ) &#123;</span><br><span class="line">  resolve(<span class="string">&quot;The request is successful and the response is &quot;</span>+ response);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span> &#123;</span><br><span class="line">  reject(<span class="string">&quot;The request is not successful. The error is &quot;</span>+error);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>Then the <strong>resolve</strong> function is called if we get the response from the server. And if there is some error <strong>reject</strong> function is called with the error message.</p>
</li>
<li><p>We use <strong>handlers</strong> to get the output from the promise.</p>
<blockquote>
<p>Handlers are just functions which executes when some event occurs such as clicking a button, moving the cursor, etc.</p>
<p>So we can use handlers to handle when the <strong>resolve</strong> function is called or **reject **function is called.</p>
</blockquote>
<ul>
<li>The handler <strong>then</strong> executes its <strong>function parameter</strong> when the <strong>resolve</strong> function is called inside the promise.</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// calling the promise with some handlers.</span></span><br><span class="line">apiCall.then(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;<span class="built_in">console</span>.log(x); &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Output</span></span><br><span class="line">The request is successful and the response is &#123;<span class="attr">name</span>: <span class="string">&quot;Jon Snow&quot;</span>&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>Catch</strong> handler looks out for <strong>reject</strong> function.</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">apiCall</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(x); </span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;) </span><br><span class="line"></span><br><span class="line"><span class="comment">// Assuming the request is not successful ( reject function is called in the promise. )</span></span><br><span class="line"><span class="attr">Output</span>:</span><br><span class="line">The request is not successful</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Async-Await"><a href="#Async-Await" class="headerlink" title="Async / Await"></a>Async / Await</h3><h4 id="async"><a href="#async" class="headerlink" title="async"></a>async</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="string">&quot;Hello Promise..!&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The above code is equivalent to the below code:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line"> <span class="comment">// executor function body.</span></span><br><span class="line"> &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>example:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">if</span> (a &lt; b) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;Greater&quot;</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;Not Greater&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">hello(<span class="number">14</span>, <span class="number">10</span>)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&quot;Good..! &quot;</span> + x); </span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&quot;Oops..! &quot;</span> + x); </span><br><span class="line">&#125;)</span><br><span class="line"><span class="attr">Output</span>:</span><br><span class="line">Oops..! Not Greater. </span><br><span class="line"><span class="comment">// if you call hello(4, 10) you get &quot;Good..! Greater&quot;</span></span><br></pre></td></tr></table></figure>

<p>Don’t forget that async function will return a promise. So of course, you can call <strong>resolve</strong> and <strong>reject</strong> function inside <strong>async</strong> function too. </p>
<p>example:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">Max</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">if</span> (a &gt; b) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(<span class="string">&quot;Success&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="string">&quot;Error&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">Max(<span class="number">4</span>, <span class="number">10</span>)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&quot;Good &quot;</span> + x); </span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&quot;Oops &quot;</span> + x); </span><br><span class="line">&#125;);</span><br><span class="line">Output:</span><br><span class="line">Oops <span class="built_in">Error</span></span><br><span class="line"><span class="comment">// If we pass Max(14, 10) then we should get &quot;Good Success&quot; :)</span></span><br></pre></td></tr></table></figure>

<h4 id="await"><a href="#await" class="headerlink" title="await"></a>await</h4><p> It makes the Javascript to wait until you get the response from the endpoint. And then it resumes the execution.</p>
<p><strong>await can be used only inside async function. It doesn’t work outside async function</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">let</span> response = <span class="keyword">await</span> fetch(<span class="string">&#x27;https://api.github.com/&#x27;</span>);</span><br><span class="line"> <span class="comment">// above line fetches the response from the given API endpoint.</span></span><br><span class="line"> <span class="keyword">return</span> response;</span><br><span class="line">&#125;</span><br><span class="line">hello()</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(x); </span><br><span class="line">&#125;);</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="attr">Output</span>:</span><br><span class="line">Response <span class="keyword">from</span> the API.</span><br></pre></td></tr></table></figure>

<h3 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h3><h4 id="Array-Map"><a href="#Array-Map" class="headerlink" title="Array Map"></a>Array Map</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> modifiedArr = arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">element, index, arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> element * <span class="number">10</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(modifiedArr);</span><br><span class="line">Output:</span><br><span class="line">[<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>]</span><br></pre></td></tr></table></figure>

<p>And also note we have to return some value in the end. Which will be the modified value of that element. If you didn’t return anything then the particular element will be undefined.</p>
<p>One more thing I like to add is the second and third parameter is only optional. Only the first parameter is mandatory. for example :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> modifiedArr = arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> element * <span class="number">10</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>write the map operator with arrow functions:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> modifiedArr = arr.map(<span class="function">(<span class="params">element, index</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;index &quot;</span>+index);</span><br><span class="line">  <span class="keyword">return</span> element * <span class="number">10</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(modifiedArr);</span><br><span class="line">Output:</span><br><span class="line">index <span class="number">0</span></span><br><span class="line">index <span class="number">1</span></span><br><span class="line">index <span class="number">2</span></span><br><span class="line">index <span class="number">3</span></span><br><span class="line">index <span class="number">4</span></span><br><span class="line">[<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>]</span><br></pre></td></tr></table></figure>

<p>better:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> modifiedArr = arr.map(<span class="function"><span class="params">element</span> =&gt;</span> element * <span class="number">10</span>);</span><br><span class="line"><span class="built_in">console</span>.log(modifiedArr);</span><br></pre></td></tr></table></figure>

<h4 id="Array-Filter"><a href="#Array-Filter" class="headerlink" title="Array Filter"></a>Array Filter</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="keyword">let</span> modifiedArr = arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">element, index, array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> element % <span class="number">2</span> == <span class="number">0</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(modifiedArr);</span><br><span class="line">Output:</span><br><span class="line">[<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>]</span><br></pre></td></tr></table></figure>

<p>try by arrow function:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> modifiedAarr = arr.filter(<span class="function">(<span class="params">element, index</span>) =&gt;</span> element%<span class="number">2</span> == <span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<p>we have to return a boolean value for each element of the array. If you won’t return any boolean value at the end then the filter takes it as <strong>false</strong> and deletes the element.</p>
<h4 id="Array-Reduce"><a href="#Array-Reduce" class="headerlink" title="Array Reduce"></a>Array Reduce</h4><p>Array reduce is used to aggregate all the elements of an array and return a single value.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="keyword">let</span> total= arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">sum, element, index, array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> sum + element;</span><br><span class="line">&#125;,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;total is &quot;</span>+total);</span><br><span class="line">Output:</span><br><span class="line">total is <span class="number">21</span></span><br></pre></td></tr></table></figure>

<p>Unlike filter and map, reduce takes a function with four parameters and also a additional element. Unlike filter and map, the first two parameters are mandatory. Other two are optional.</p>
<p>The first parameter is the aggregator element.In our case it’s 0. </p>
<p>Like filter and map you have to return the end result.</p>
<p>write the same code with arrow functions:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> totalSum = arr.reduce(<span class="function">(<span class="params">sum, element</span>) =&gt;</span> element+sum, <span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<h3 id="Template-Literals"><a href="#Template-Literals" class="headerlink" title="Template Literals"></a>Template Literals</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;Srebalaji&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> languages = <span class="function">() =&gt;</span> &#123;<span class="keyword">return</span> <span class="string">&quot;Ruby, Js, Java, Python&quot;</span>&#125;</span><br><span class="line"><span class="keyword">let</span> msg = <span class="string">`My name is <span class="subst">$&#123;name&#125;</span></span></span><br><span class="line"><span class="string">My age is <span class="subst">$&#123;<span class="number">20</span>+<span class="number">3</span>&#125;</span></span></span><br><span class="line"><span class="string">And I code in <span class="subst">$&#123;languages()&#125;</span>`</span></span><br><span class="line"><span class="attr">Output</span>:</span><br><span class="line">My name is Srebalaji</span><br><span class="line">My age is <span class="number">23</span></span><br><span class="line">And I code <span class="keyword">in</span> Ruby, Js, Java, Python</span><br></pre></td></tr></table></figure>

<h3 id="Imports-and-Exports"><a href="#Imports-and-Exports" class="headerlink" title="Imports and Exports"></a>Imports and Exports</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//app.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> name = <span class="string">&quot;Jon&quot;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> age = <span class="number">23</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;name, age&#125; <span class="keyword">from</span> <span class="string">&#x27;./app&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(name);</span><br><span class="line"><span class="built_in">console</span>.log(age);</span><br><span class="line"></span><br><span class="line"><span class="comment">//index.html</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">Jon</span><br><span class="line"><span class="number">23</span></span><br></pre></td></tr></table></figure>

<p>and:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//app.js</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">let</span> sum = <span class="function">() =&gt;</span> a+b;</span><br><span class="line"><span class="keyword">export</span> &#123;a,b&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> sum</span><br><span class="line"></span><br><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> variables <span class="keyword">from</span> <span class="string">&#x27;./app&#x27;</span></span><br><span class="line"><span class="keyword">import</span> addition <span class="keyword">from</span> <span class="string">&#x27;./app&#x27;</span> <span class="comment">// default value</span></span><br><span class="line"><span class="built_in">console</span>.log(variables.a);</span><br><span class="line"><span class="built_in">console</span>.log(variables.b);</span><br><span class="line"><span class="built_in">console</span>.log(addition());</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure>

<ol>
<li><p>If you are using * to import values then you have to use <strong>alias</strong> (i.e) names that will refer to imported values. In our example we have used <strong>variables</strong> as alias.</p>
</li>
<li><p>Using * to import values doesn’t import default value. You have to import it separately.</p>
<p>for example:<code>import addition, * as variables from &#39;./app&#39;</code></p>
</li>
</ol>
<h3 id="Destructuring-objects-and-arrays"><a href="#Destructuring-objects-and-arrays" class="headerlink" title="Destructuring objects and arrays"></a>Destructuring objects and arrays</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;<span class="attr">firstName</span>: <span class="string">&quot;Jon&quot;</span>, <span class="attr">lastName</span>: <span class="string">&quot;Snow&quot;</span>, <span class="attr">age</span>: <span class="number">23</span>&#125;</span><br><span class="line"><span class="keyword">const</span> &#123;firstName, lastName, age&#125; = person</span><br><span class="line"><span class="built_in">console</span>.log(firstName);</span><br><span class="line"><span class="built_in">console</span>.log(lastName);</span><br><span class="line"><span class="built_in">console</span>.log(age);</span><br><span class="line">Output:</span><br><span class="line">Jon</span><br><span class="line">Snow</span><br><span class="line"><span class="number">23</span></span><br></pre></td></tr></table></figure>

<h3 id="Extend-and-Super"><a href="#Extend-and-Super" class="headerlink" title="Extend and Super"></a>Extend and Super</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"> <span class="function"><span class="title">constructor</span>(<span class="params">firstName, lastName, age</span>)</span> &#123;</span><br><span class="line">   <span class="built_in">this</span>.firstName = firstName;</span><br><span class="line">   <span class="built_in">this</span>.lastName = lastName;</span><br><span class="line">   <span class="built_in">this</span>.age = age;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="title">displayName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.firstName&#125;</span> - <span class="subst">$&#123;<span class="built_in">this</span>.lastName&#125;</span>`</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="title">constructor</span>(<span class="params">firstName, lastName, age, salary</span>)</span> &#123;</span><br><span class="line">  <span class="built_in">super</span>(firstName, lastName, age);</span><br><span class="line">  <span class="built_in">this</span>.salary = salary;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="title">displaySalary</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.salary&#125;</span>`</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="title">displayName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">super</span>.displayName();</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="title">displayAge</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.age;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> manager = <span class="keyword">new</span> Employee(<span class="string">&quot;Jon&quot;</span>, <span class="string">&quot;Snow&quot;</span>, <span class="number">23</span>, <span class="number">100</span>);</span><br><span class="line"><span class="built_in">console</span>.log(manager.displaySalary());</span><br><span class="line"><span class="built_in">console</span>.log(manager.displayName());</span><br><span class="line"><span class="built_in">console</span>.log(manager.displayAge());</span><br><span class="line">Output:</span><br><span class="line"><span class="number">100</span></span><br><span class="line">Jon Snow</span><br><span class="line"><span class="number">23</span></span><br></pre></td></tr></table></figure>

<p>And then we have used <strong>super</strong> keyword to call the constructor of the parent class. And we also have called the method declared in the parent class using <strong>super</strong>.</p>
<h3 id="Generator-functions"><a href="#Generator-functions" class="headerlink" title="Generator functions"></a>Generator functions</h3><ul>
<li>Generator functions are written using the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*"><code>function*</code></a> syntax. When called initially, generator functions do not execute any of their code, instead returning a type of iterator called a Generator. </li>
<li>When a value is consumed by calling the generator’s <strong>next</strong> method, the Generator function executes until it encounters the <strong>yield</strong> keyword.<ul>
<li>Each <code>yield</code> in a generator basically represents an asynchronous step in a more synchronous/sequential process — somewhat like <code>await</code> in an <code>async</code>function.</li>
</ul>
</li>
<li>The function can be called as many times as desired and returns a new Generator each time, however each Generator may only be iterated once.</li>
</ul>
<h3 id="some-method"><a href="#some-method" class="headerlink" title="some method"></a>some method</h3><ul>
<li><p>includes</p>
<p>construct an array of the items, and use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes"><code>includes</code></a>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>].includes(<span class="string">&#x27;b&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>ES6</category>
      </categories>
      <tags>
        <tag>learn</tag>
      </tags>
  </entry>
  <entry>
    <title>Event and Listen</title>
    <url>/2016/03/01/Event%20and%20Listen/</url>
    <content><![CDATA[<blockquote>
<p>Events are basically occurrence of something. Changing the state of an object is known as an event.</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">We can perform some important tasks at the occurrence of these exceptions, such as counting total and current logged-in users, creating tables of the database at time of deploying the project, creating database connection object etc.</span><br></pre></td></tr></table></figure>
<h3 id="Event-classes"><a href="#Event-classes" class="headerlink" title="Event classes"></a>Event classes</h3><ul>
<li>ServletRequestEvent</li>
<li>ServletContextEvent</li>
<li>ServletRequestAttributeEvent</li>
<li>ServletContextAttributeEvent</li>
<li>HttpSessionEvent</li>
<li>HttpSessionBindingEvent</li>
</ul>
<h3 id="Event-interfaces"><a href="#Event-interfaces" class="headerlink" title="Event interfaces"></a>Event interfaces</h3><ul>
<li>ServletRequestListener</li>
<li>ServletRequestAttributeListener</li>
<li>ServletContextListener</li>
<li>ServletContextAttributeListener</li>
<li>HttpSessionListener</li>
<li>HttpSessionAttributeListener</li>
<li>HttpSessionBindingListener</li>
<li>HttpSessionActivationListener</li>
</ul>
<hr>
<h3 id="ServletContextEvent-and-ServletContextListener"><a href="#ServletContextEvent-and-ServletContextListener" class="headerlink" title="ServletContextEvent and ServletContextListener"></a>ServletContextEvent and ServletContextListener</h3><ul>
<li>The ServletContextEvent is notified when web application is deployed on the server.</li>
<li>If you want to perform some action at the time of deploying the web application such as creating database connection, creating all the tables of the project etc, you need to implement ServletContextListener interface and provide the implementation of its methods.</li>
</ul>
<p><code>Web application &gt; ServletContextEvent &gt; ServletContextListener</code></p>
<h3 id="HttpSessionEvent-and-HttpSessionListener"><a href="#HttpSessionEvent-and-HttpSessionListener" class="headerlink" title="HttpSessionEvent and HttpSessionListener"></a>HttpSessionEvent and HttpSessionListener</h3><ul>
<li>The HttpSessionEvent is notified when session object is changed. The corresponding Listener interface for this event is HttpSessionListener.</li>
<li>We can perform some operations at this event such as counting total and current logged-in users, maintaing a log of user details such as login time, logout time etc.</li>
</ul>
<p><code>session object &gt; HttpSessionEvent &gt; HttpSessionListener</code></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>learn</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM Learn</title>
    <url>/2021/09/01/JVM%20learn/</url>
    <content><![CDATA[<h2 id="堆内与堆外"><a href="#堆内与堆外" class="headerlink" title="堆内与堆外"></a>堆内与堆外</h2><h3 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h3><ul>
<li><p>常说的堆，指的是堆内内存，由JVM「托管」的内存区域。对应的英文是：on-heap Memory。所有的对象都是放在堆中。</p>
</li>
<li><p>堆的特点：</p>
</li>
<li><ul>
<li>由GC管理，一旦堆大小大于1GB会出现比较明显的暂停。</li>
<li>对象存储到GC中无需进行序列化、反序列化的。</li>
</ul>
</li>
</ul>
<h3 id="堆外"><a href="#堆外" class="headerlink" title="堆外"></a>堆外</h3><ul>
<li><p>堆外就是JVM开辟出来的，堆以外的一块「非托管」内存区域。对应的英文是：off-heap Memory。堆外内存也是 JVM 进程开辟的一块内存空间。只不过，GC不会「光顾」这里。</p>
</li>
<li><p>堆外的特点：</p>
</li>
<li><ul>
<li>由操作系统直接管理。别的进程能够直接访问。</li>
<li>特别适合分配次数少，读写非常频繁的场景。</li>
<li>可以避免在分配GB级别的内存而造成GC开销。</li>
</ul>
</li>
<li><p>堆外的缺点：</p>
</li>
<li><ul>
<li>容易出现内存泄漏，难以排查。</li>
<li>对象的存储需要序列化、和反序列化。</li>
</ul>
</li>
</ul>
<p>因为堆外内存由此特点，很多高性能的应用组件基于off-heap来提高性能。</p>
<h4 id="堆外内存常配合使用System-GC"><a href="#堆外内存常配合使用System-GC" class="headerlink" title="堆外内存常配合使用System GC"></a>堆外内存常配合使用System GC</h4><blockquote>
<p>堆外内存主要针对java.nio.DirectByteBuffer，这些对象的创建过程会通过Unsafe接口直接通过os::malloc来分配内存，然后将内存的起始地址和大小存到java.nio.DirectByteBuffer对象里，这样就可以直接操作这些内存。这些内存只有在DirectByteBuffer回收掉之后才有机会被回收，因此如果这些对象大部分都移到了old，但是一直没有触发CMS GC或者Full GC，那么悲剧将会发生，因为你的物理内存被他们耗尽了，因此为了避免这种悲剧的发生，通过-XX:MaxDirectMemorySize来指定最大的堆外内存大小，当使用达到了阈值的时候将调用System.gc来做一次full gc，以此来回收掉没有被使用的堆外内存。</p>
</blockquote>
<h3 id="System-gc常识"><a href="#System-gc常识" class="headerlink" title="System.gc常识"></a>System.gc常识</h3><ul>
<li>system.gc其实是做一次full gc</li>
<li>system.gc会暂停整个进程</li>
<li>system.gc一般情况下我们要禁掉，使用-XX:+DisableExplicitGC</li>
<li>system.gc在cms gc下我们通过-XX:+ExplicitGCInvokesConcurrent来做一次稍微高效点的GC(效果比Full GC要好些)</li>
<li>system.gc最常见的场景是RMI/NIO下的堆外内存分配等</li>
</ul>
<h1 id="jvm常用参数的设置和含义"><a href="#jvm常用参数的设置和含义" class="headerlink" title="jvm常用参数的设置和含义"></a>jvm常用参数的设置和含义</h1><p><strong>1.设置堆的最大和最小值</strong><br> -Xmx20M(最大值) ,-Xms20M(最小值)。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-Xms和-Xmx实际上是 -XX:InitialHeapSize 和-XX:MaxHeapSize 的缩写</span><br></pre></td></tr></table></figure>

<p><strong>2.设置栈的大小</strong><br> -Xss128k： 设置每个线程的堆栈大小。JDK5.0以后每个线程堆栈大小为1M，以前每个线程堆栈大小为256K。更具应用的线程所需内存大小进行调整。在相同物理内 存下，减小这个值能生成更多的线程。但是操作系统对一个进程内的线程数还是有限制的，不能无限生成，经验值在3000~5000左右。</p>
<p>功能开关:</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>默认值或限制</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>-XX:-AllowUserSignalHandlers</td>
<td>限于Linux和Solaris，默认不启用</td>
<td>允许为java进程安装信号处理器,信号处理参见类:sun.misc.Signal, sun.misc.SignalHandler</td>
</tr>
<tr>
<td>-XX:+DisableExplicitGC</td>
<td>默认启用</td>
<td>禁止在运行期显式地调用System.gc()</td>
</tr>
<tr>
<td>-XX:+FailOverToOldVerifier</td>
<td>Java6新引入选项，默认启用</td>
<td>如果新的Class校验器检查失败，则使用老的校验器(失败原因:因为JDK6最高向下兼容到JDK1.2，而JDK1.2的class info 与JDK6的info存在较大的差异，所以新校验器可能会出现校验失败的情况)</td>
</tr>
<tr>
<td>-XX:+HandlePromotionFailure</td>
<td>java5以前是默认不启用，java6默认启用</td>
<td>关闭新生代收集担保</td>
</tr>
<tr>
<td>-XX:+MaxFDLimit</td>
<td>限于Solaris，默认启用</td>
<td>设置java进程可用文件描述符为操作系统允许的最大值。</td>
</tr>
<tr>
<td>-XX:PreBlockSpin=10</td>
<td>-XX:+UseSpinning 必须先启用，对于java6来说已经默认启用了，这里默认自旋10次</td>
<td>控制多线程自旋锁优化的自旋次数</td>
</tr>
<tr>
<td>-XX:-RelaxAccessControlCheck</td>
<td>默认不启用</td>
<td>在Class校验器中，放松对访问控制的检查,作用与reflection里的setAccessible类似</td>
</tr>
<tr>
<td>-XX:+ScavengeBeforeFullGC</td>
<td>默认启用</td>
<td>在Full GC前触发一次Minor GC</td>
</tr>
<tr>
<td>-XX:+UseAltSigs</td>
<td>限于Solaris，默认启用</td>
<td>为了防止与其他发送信号的应用程序冲突，允许使用候补信号替代 SIGUSR1和SIGUSR2</td>
</tr>
<tr>
<td>-XX:+UseBoundThreads</td>
<td>限于Solaris, 默认启用</td>
<td>绑定所有的用户线程到内核线程, 减少线程进入饥饿状态（得不到任何cpu time）的次数</td>
</tr>
<tr>
<td>-XX:-UseConcMarkSweepGC</td>
<td>默认不启用</td>
<td>启用CMS低停顿垃圾收集器,减少FGC的暂停时间</td>
</tr>
<tr>
<td>-XX:+UseGCOverheadLimit</td>
<td>默认启用</td>
<td>限制GC的运行时间。如果GC耗时过长，就抛OOM</td>
</tr>
<tr>
<td>-XX:+UseLWPSynchronization</td>
<td>限于solaris，默认启用</td>
<td>使用轻量级进程（内核线程）替换线程同步</td>
</tr>
<tr>
<td>-XX:-UseParallelGC</td>
<td>-server时启用,其他情况下，默认不启用</td>
<td>策略为新生代使用并行清除，年老代使用单线程Mark-Sweep-Compact的垃圾收集器</td>
</tr>
<tr>
<td>-XX:-UseParallelOldGC</td>
<td>默认不启用</td>
<td>策略为老年代和新生代都使用并行清除的垃圾收集器</td>
</tr>
<tr>
<td>-XX:-UseSerialGC</td>
<td>-client时启用,其他情况下，默认不启用</td>
<td>使用串行垃圾收集器</td>
</tr>
<tr>
<td>-XX:-UseSpinning</td>
<td>java1.4.2和1.5需要手动启用, java6默认已启用</td>
<td>启用多线程自旋锁优化</td>
</tr>
<tr>
<td>-XX:+UseTLAB</td>
<td>1.4.2以前和使用-client选项时，默认不启用，其余版本默认启用</td>
<td>启用线程本地缓存区</td>
</tr>
<tr>
<td>-XX:+UseSplitVerifier</td>
<td>java5默认不启用, java6默认启用</td>
<td>使用新的Class类型校验器</td>
</tr>
<tr>
<td>-XX:+UseThreadPriorities</td>
<td>默认启用</td>
<td>使用本地线程的优先级</td>
</tr>
<tr>
<td>-XX:+UseVMInterruptibleIO</td>
<td>限于solaris，默认启用</td>
<td>在solaris中，允许运行时中断线程</td>
</tr>
</tbody></table>
<p>性能参数:</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>默认值或限制</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>-XX:+AggressiveOpts</td>
<td>JDK 5 update 6后引入，但需要手动启用, JDK6默认启用</td>
<td>启用JVM开发团队最新的调优成果。例如编译优化，偏向锁，并行年老代收集等</td>
</tr>
<tr>
<td>-XX:CompileThreshold=10000</td>
<td>1000</td>
<td>通过JIT编译器，将方法编译成机器码的触发阀值，可以理解为调用方法的次数，例如调1000次，将方法编译为机器码</td>
</tr>
<tr>
<td>-XX:LargePageSizeInBytes=4m</td>
<td>默认4m, amd64位：2m</td>
<td>设置堆内存的内存页大小</td>
</tr>
<tr>
<td>-XX:MaxHeapFreeRatio=70</td>
<td>70</td>
<td>GC后，如果发现空闲堆内存占到整个预估上限值的70%，则收缩预估上限值</td>
</tr>
<tr>
<td>-XX:MaxNewSize=size</td>
<td>1.3.1 Sparc: 32m, 1.3.1 x86: 2.5m</td>
<td>新生代占整个堆内存的最大值</td>
</tr>
<tr>
<td>-XX:MaxPermSize=64m</td>
<td>5.0以后: 64 bit VMs会增大预设值的30%, 1.4 amd64: 96m, 1.3.1 -client: 32m, 其他默认 64m</td>
<td>Perm（俗称方法区）占整个堆内存的最大值</td>
</tr>
<tr>
<td>-XX:MinHeapFreeRatio=40</td>
<td>40</td>
<td>GC后，如果发现空闲堆内存占到整个预估上限值的40%，则增大上限值</td>
</tr>
<tr>
<td>-XX:NewRatio=2</td>
<td>Sparc -client: 8, x86 -server: 8, x86 -client: 12, -client: 4 (1.3), 8 (1.3.1+), x86: 12, 其他默认 2</td>
<td>新生代和年老代的堆内存占用比例, 例如2表示新生代占年老代的1/2，占整个堆内存的1/3</td>
</tr>
<tr>
<td>-XX:NewSize=2.125m</td>
<td>5.0以后: 64 bit Vms 会增大预设值的30%, x86: 1m, x86, 5.0以后: 640k, 其他默认 2.125m</td>
<td>新生代预估上限的默认值</td>
</tr>
<tr>
<td>-XX:ReservedCodeCacheSize=32m</td>
<td>Solaris 64-bit, amd64, -server x86: 48m, 1.5.0_06之前, Solaris 64-bit amd64: 1024m, 其他默认 32m</td>
<td>设置代码缓存的最大值，编译时用</td>
</tr>
<tr>
<td>-XX:SurvivorRatio=8</td>
<td>Solaris amd64: 6, Sparc in 1.3.1: 25, Solaris platforms 5.0以前: 32, 其他默认 8</td>
<td>Eden与Survivor的占用比例。例如8表示，一个survivor区占用 1/8 的Eden内存，即1/10的新生代内存，为什么不是1/9？ 因为我们的新生代有2个survivor，即S0和S1。所以survivor总共是占用新生代内存的 2/10，Eden与新生代的占比则为 8/10</td>
</tr>
<tr>
<td>-XX:TargetSurvivorRatio=50</td>
<td>50</td>
<td>实际使用的survivor空间大小占比。默认是50%，最高90%</td>
</tr>
<tr>
<td>-XX:ThreadStackSize=512</td>
<td>Sparc: 512, Solaris x86: 320 (5.0以前 256), Sparc 64 bit: 1024, Linux amd64: 1024 (5.0 以前 0), 其他默认 512.</td>
<td>线程堆栈大小</td>
</tr>
<tr>
<td>-XX:+UseBiasedLocking</td>
<td>JDK 5 update 6后引入，但需要手动启用, JDK6默认启用</td>
<td>启用偏向锁</td>
</tr>
<tr>
<td>-XX:+UseFastAccessorMethods</td>
<td>默认启用</td>
<td>优化原始类型的getter方法性能(get/set:Primitive Type)</td>
</tr>
<tr>
<td>-XX:-UseISM</td>
<td>默认启用</td>
<td>启用solaris的ISM</td>
</tr>
<tr>
<td>-XX:+UseLargePages</td>
<td>JDK 5 update 5后引入，但需要手动启用, JDK6默认启用</td>
<td>启用大内存分页</td>
</tr>
<tr>
<td>-XX:+UseMPSS</td>
<td>1.4.1 之前: 不启用, 其余版本默认启用</td>
<td>启用solaris的MPSS，不能与ISM同时使用</td>
</tr>
<tr>
<td>-XX:+UseStringCache</td>
<td>默认开启</td>
<td>启用缓存常用的字符串。</td>
</tr>
<tr>
<td>-XX:AllocatePrefetchLines=1</td>
<td>1</td>
<td>Number of cache lines to load after the last object allocation using prefetch instructions generated in JIT compiled code. Default values are 1 if the last allocated object was an instance and 3 if it was an array.</td>
</tr>
<tr>
<td>-XX:AllocatePrefetchStyle=1</td>
<td>1</td>
<td>Generated code style for prefetch instructions. 0 – no prefetch instructions are generate<em>d</em>, 1 – execute prefetch instructions after each allocation, 2 – use TLAB allocation watermark pointer to gate when prefetch instructions are executed.</td>
</tr>
<tr>
<td>-XX:+UseCompressedStrings</td>
<td>Java 6 update 21有一选项</td>
<td>其中，对于不需要16位字符的字符串，可以使用byte[] 而非char[]。对于许多应用，这可以节省内存，但速度较慢（5％-10％）</td>
</tr>
<tr>
<td>-XX:+OptimizeStringConcat</td>
<td>在Java 6更新20中引入</td>
<td>优化字符串连接操作在可能的情况下</td>
</tr>
</tbody></table>
<p>调试参数:</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>默认值或限制</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>-XX:-CITime</td>
<td></td>
<td>打印发费在JIT编译上的时间</td>
</tr>
<tr>
<td>-XX:ErrorFile=./hs_err_pid<pid>.log</td>
<td>JDK6中引入</td>
<td>错误文件</td>
</tr>
<tr>
<td>-XX:-ExtendedDTraceProbes</td>
<td>JDK6中引入仅在Solaris</td>
<td>启用性能的影响DTrace探测器</td>
</tr>
<tr>
<td>-XX:HeapDumpPath=./java_pid<pid>.hprof</td>
<td>1.4.2 update 12, 5.0 update 7</td>
<td>指定HeapDump的文件路径或目录</td>
</tr>
<tr>
<td>-XX:-HeapDumpOnOutOfMemoryError</td>
<td>1.4.2 update 12, 5.0 update 7</td>
<td>当抛出OOM时进行HeapDump</td>
</tr>
<tr>
<td>-XX:OnError=”<cmd args>;<cmd args>”</td>
<td>1.4.2 update 9</td>
<td>当发生错误时执行用户指定的命令</td>
</tr>
<tr>
<td>-XX:OnOutOfMemoryError=”<cmd args>; <cmd args>”</td>
<td>1.4.2 update 12, 6</td>
<td>当发生OOM时执行用户指定的命令</td>
</tr>
<tr>
<td>-XX:-PrintClassHistogram</td>
<td>1.4.2</td>
<td>当Ctrl+Break发生时打印Class实例信息,与jmap -histo相同</td>
</tr>
<tr>
<td>-XX:-PrintConcurrentLocks</td>
<td>6</td>
<td>当Ctrl+Break发生时打印java.util.concurrent的锁信息, 与jstack -l相同</td>
</tr>
<tr>
<td>-XX:-PrintCommandLineFlags</td>
<td>5</td>
<td>打印命令行上的标记</td>
</tr>
<tr>
<td>-XX:-PrintCompilation</td>
<td></td>
<td>当方法被编译时打印信息</td>
</tr>
<tr>
<td>-XX:-PrintGC</td>
<td></td>
<td>当GC发生时打印信息</td>
</tr>
<tr>
<td>-XX:-PrintGCDetails</td>
<td>1.4.0</td>
<td>打印GC详细信息</td>
</tr>
<tr>
<td>-XX:-PrintGCTimeStamps</td>
<td>1.4.0</td>
<td>打印GC用时</td>
</tr>
<tr>
<td>-XX:-PrintTenuringDistribution</td>
<td></td>
<td>打印Tenuring年龄信息</td>
</tr>
<tr>
<td>-XX:-TraceClassLoading</td>
<td></td>
<td>跟踪类加载</td>
</tr>
<tr>
<td>-XX:-TraceClassLoadingPreorder</td>
<td>1.4.2</td>
<td>跟踪所有加载的引用类</td>
</tr>
<tr>
<td>-XX:-TraceClassResolution</td>
<td>1.4.2</td>
<td>跟踪常量池的变化</td>
</tr>
<tr>
<td>-XX:-TraceClassUnloading</td>
<td></td>
<td>跟踪类的卸载</td>
</tr>
<tr>
<td>-XX:-TraceLoaderConstraints</td>
<td>6</td>
<td>Trace recording of loader constraints</td>
</tr>
<tr>
<td>-XX:+PerfSaveDataToFile</td>
<td></td>
<td>退出时保存jvmstat二进制文件</td>
</tr>
<tr>
<td>-XX:ParallelGCThreads=</td>
<td></td>
<td>设置新生代与老年代并行垃圾回收器的线程数</td>
</tr>
<tr>
<td>-XX:+UseCompressedOops</td>
<td></td>
<td>Enables the use of compressed pointers (object references represented as 32 bit offsets instead of 64-bit pointers) for optimized 64-bit performance with Java heap sizes less than 32gb.</td>
</tr>
<tr>
<td>-XX:+AlwaysPreTouch</td>
<td></td>
<td>Pre-touch the Java heap during JVM initialization. Every page of the heap is thus demand-zeroed during initialization rather than incrementally during application execution.</td>
</tr>
<tr>
<td>-XX:AllocatePrefetchDistance=</td>
<td></td>
<td>Sets the prefetch distance for object allocation. Memory about to be written with the value of new objects is prefetched into cache at this distance (in bytes) beyond the address of the last allocated object. Each Java thread has its own allocation point. The default value varies with the platform on which the JVM is running.</td>
</tr>
<tr>
<td>-XX:InlineSmallCode=</td>
<td></td>
<td>当编译的代码小于指定的值时,内联编译的代码</td>
</tr>
<tr>
<td>-XX:MaxInlineSize=35</td>
<td></td>
<td>内联方法的最大字节数</td>
</tr>
<tr>
<td>-XX:FreqInlineSize=</td>
<td></td>
<td>内联频繁执行的方法的最大字节码大小</td>
</tr>
<tr>
<td>-XX:LoopUnrollLimit=</td>
<td></td>
<td>Unroll loop bodies with server compiler intermediate representation node count less than this value. The limit used by the server compiler is a function of this value, not the actual value. The default value varies with the platform on which the JVM is running.</td>
</tr>
<tr>
<td>-XX:InitialTenuringThreshold=7</td>
<td></td>
<td>设置初始的对象在新生代中最大存活次数</td>
</tr>
<tr>
<td>-XX:MaxTenuringThreshold=</td>
<td></td>
<td>设置对象在新生代中最大的存活次数,最大值15,并行回收机制默认为15,CMS默认为4</td>
</tr>
</tbody></table>
<h1 id="Garbage-Collectors"><a href="#Garbage-Collectors" class="headerlink" title="Garbage Collectors"></a>Garbage Collectors</h1><p>The JVM (Java Virtual Machine) has several different garbage collectors, including the <strong>Parallel Scavenge collector</strong> and the <strong>G1 (Garbage-First) collector</strong>. Both collectors have a “young generation” that is responsible for storing newly created objects, but they work in different ways.</p>
<ul>
<li>Parallel Scavenge collector</li>
</ul>
<p>The Parallel Scavenge collector’s young generation, also known as the “PS young generation”, is divided into two regions called “Eden” and “Survivor”. The Eden region is where newly created objects are initially allocated, while the Survivor regions are used to store objects that have survived one or more garbage collection cycles. The idea is to quickly identify and collect objects that are no longer needed, while promoting long-lived objects to the older generation.</p>
<ul>
<li>G1 collector</li>
</ul>
<p>The G1 collector also has a young generation, which is referred to as the “G1 young generation”. Unlike the PS young generation, the G1 young generation does not have fixed regions like Eden and Survivor. Instead, the G1 collector divides the heap into equal-sized “regions” that can be used for both young and old objects, depending on their age and usage patterns. The G1 collector also uses a “remembered set” to keep track of references between regions, which allows it to more efficiently identify and collect objects that are no longer needed.</p>
<p>Overall, both the PS and G1 collectors have their own strengths and weaknesses, and the best choice depends on the specific requirements and characteristics of the application. The G1 collector is generally considered to be more flexible and adaptive to different usage patterns, but the PS collector may be better suited for applications with short-lived objects and high object creation rates.</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>learn</tag>
      </tags>
  </entry>
  <entry>
    <title>jvm snippet</title>
    <url>/2018/01/18/JVM%20snippet/</url>
    <content><![CDATA[<h2 id="JRE-JVM-JDK"><a href="#JRE-JVM-JDK" class="headerlink" title="JRE JVM JDK"></a>JRE JVM JDK</h2><ul>
<li>JRE:    java run-time</li>
</ul>
<blockquote>
<p>Java is every where in browser, in mobile, in TV or in set-top boxes and if you are into Java programming language than you know that Java code which is bundled in JAR (Java archive) file require Java virtual machine JVM to execute it. </p>
</blockquote>
<ul>
<li>JVM:    java virtual machine</li>
</ul>
<blockquote>
<p> Java Virtual Machine is get created when you run a java program using java command e.g. java HelloWorld. JVM is responsible for converting byte code into machine specific code</p>
</blockquote>
<ul>
<li>JDK:    java development kit</li>
</ul>
<blockquote>
<p> JDK is also loosely referred as JRE but its lot more than JRE and it provides all the tools and executable require to compile debug and execute Java Program.</p>
</blockquote>
<h2 id="basic-architecture-of-the-JVM"><a href="#basic-architecture-of-the-JVM" class="headerlink" title="basic architecture of the JVM"></a>basic architecture of the JVM</h2><p><img src="https://i.imgur.com/yI8u4Hr.jpg"></p>
<h3 id="Class-Loader-Sub-System"><a href="#Class-Loader-Sub-System" class="headerlink" title="Class Loader Sub System"></a>Class Loader Sub System</h3><h4 id="1-Loading"><a href="#1-Loading" class="headerlink" title="1. Loading"></a>1. Loading</h4><ul>
<li><p>loading the class file and store inside method area</p>
<p><img src="https://i.imgur.com/57IalMb.png"></p>
</li>
<li><p>Created object is not student object or customer object. It is a predefined class “Class” object that is presently in java.lang package.</p>
<p><img src="https://i.imgur.com/9hHykjw.png"></p>
</li>
<li><p>For every loaded .class file, only one class “Class” object will be created by JVM, even though we are using that class multiple times in our program. Example,</p>
<p><img src="https://i.imgur.com/KKpqYVn.png"></p>
</li>
</ul>
<h4 id="2-Linking"><a href="#2-Linking" class="headerlink" title="2. Linking"></a>2. Linking</h4><ul>
<li><p><strong>verification</strong> </p>
<blockquote>
<p>This Byte Code Verifier is responsible to verify weather .class file is properly formatted or not, structurally correct or not, generated by valid compiler or not.</p>
</blockquote>
</li>
<li><p><strong>preparation</strong> </p>
<blockquote>
<p>allocate memory for class level static variables and assigned default values.</p>
<p>E.g. For int —&gt; 0, For double —&gt; 0.0, For boolean —&gt; false</p>
</blockquote>
</li>
<li><p><strong>Resolution</strong></p>
<blockquote>
<p>It is the process of replacing all symbolic references used in our class with original direct references from method area.</p>
</blockquote>
<p><img src="https://i.imgur.com/jTM8BJz.png"></p>
</li>
<li><p><strong>Initialization</strong></p>
</li>
</ul>
<blockquote>
<p>In Initialization activity, for class level static variables assigns original values and static blocks will be executed from top to bottom.</p>
</blockquote>
<ul>
<li>Types of class loaders in class loader subsystem<ul>
<li>Bootstrap class loader/ Primordial class loader</li>
<li>Extension class loader</li>
<li>Application class loader/System class loader</li>
</ul>
</li>
</ul>
<h4 id="3-Class-loader-sub-system-follows-delegation-hierarchy-algorithm"><a href="#3-Class-loader-sub-system-follows-delegation-hierarchy-algorithm" class="headerlink" title="3. Class loader sub system follows delegation hierarchy algorithm"></a>3. Class loader sub system follows delegation hierarchy algorithm</h4><ul>
<li><strong>Customized class loader</strong>Sometimes we may not satisfy with default class loader mechanism then we can go for Customized class loader. For example:</li>
</ul>
<h3 id="Various-Memory-Areas-in-JVM"><a href="#Various-Memory-Areas-in-JVM" class="headerlink" title="Various Memory Areas in JVM"></a>Various Memory Areas in JVM</h3><h4 id="1-Method-Area"><a href="#1-Method-Area" class="headerlink" title="1. Method Area"></a>1. Method Area</h4><ul>
<li><p>Inside method area class level binary data including static variables will be stored</p>
</li>
<li><p>Constant pools of a class will be stored inside method area.</p>
</li>
<li><p>Method area can be accessed by multiple threads simultaneously.</p>
<blockquote>
<p>All threads share the same method area, so access to the method area’s data structures must be designed to be thread-safe. </p>
</blockquote>
</li>
</ul>
<h4 id="2-Heap-Area"><a href="#2-Heap-Area" class="headerlink" title="2. Heap Area"></a>2. Heap Area</h4><blockquote>
<p><strong>Heap space in Java is used for dynamic memory allocation for Java objects and JRE classes at the runtime</strong>. New objects are always created in heap space and the references to this objects are stored in stack memory.</p>
</blockquote>
<p>These objects have global access and can be accessed from anywhere in the application.</p>
<p>This memory model is further broken into smaller parts called generations, these are:</p>
<ol>
<li><strong>Young Generation –</strong> this is where all new objects are allocated and aged. A minor Garbage collection occurs when this fills up</li>
<li><strong>Old or Tenured Generation –</strong> this is where long surviving objects are stored. When objects are stored in the Young Generation, a threshold for the object’s age is set and when that threshold is reached, the object is moved to the old generation</li>
<li><strong>Permanent Generation –</strong> this consists of JVM metadata for the runtime classes and application methods</li>
</ol>
<ul>
<li>It’s accessed via complex memory management techniques that include Young Generation, Old or Tenured Generation, and Permanent Generation</li>
<li>If heap space is full, Java throws <em>java.lang.OutOfMemoryError</em></li>
<li>Access to this memory is relatively slower than stack memory</li>
<li>This memory, in contrast to stack, isn’t automatically deallocated. It needs Garbage Collector to free up unused objects so as to keep the efficiency of the memory usage</li>
<li>Unlike stack, a heap isn’t threadsafe and needs to be guarded by properly synchronizing the code</li>
</ul>
<hr>
<ul>
<li><p>Objects and corresponding instance variables will be stored in the heap area.</p>
</li>
<li><p>Every array in java is object only hence arrays also will be stored in the heap area.</p>
</li>
<li><p>Heap area can be access by multiple threads and hence the data stored in the heap area is not thread safe.</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Set Maximum and Minimum heap size</span><br><span class="line">-Xmx</span><br><span class="line">     To set maximum heap size , i.e., maxMemory</span><br><span class="line">    java -Xmx512m HeapSpaceDemo</span><br><span class="line">     Here mx = maximum size</span><br><span class="line">              512m = 512 MB</span><br><span class="line">              HeapSpaceDemo = Java class name</span><br><span class="line">-Xms</span><br><span class="line">     To set minimum heap size , i.e., total memory </span><br><span class="line">        java -Xms65m HeapSpaceDemo   </span><br><span class="line">      Here ms = minimum size</span><br><span class="line">              65m = 65 MB</span><br><span class="line">              HeapSpaceDemo = Java class name</span><br><span class="line">or, you can set a minimum maximum heap size at a time</span><br><span class="line">java -Xms256m -Xmx1024m HeapSpaceDemo</span><br></pre></td></tr></table></figure>

<h4 id="3-Stack-Memory"><a href="#3-Stack-Memory" class="headerlink" title="3. Stack Memory"></a>3. Stack Memory</h4><blockquote>
<p><strong>Stack Memory in Java is used for static memory allocation and the execution of a thread.</strong> It contains primitive values that are specific to a method and references to objects that are in a heap, referred from the method.</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Access to this memory is in Last-In-First-Out (LIFO) order. Whenever a new method is called, a new block on top of the stack is created which contains values specific to that method, like primitive variables and references to objects.</span><br><span class="line"></span><br><span class="line">When the method finishes execution, it’s corresponding stack frame is flushed, the flow goes back to the calling method and space becomes available for the next method.</span><br></pre></td></tr></table></figure>

<ul>
<li><p>It grows and shrinks as new methods are called and returned respectively</p>
</li>
<li><p>Variables inside stack exist only as long as the method that created them is running</p>
</li>
<li><p>It’s automatically allocated and deallocated when method finishes execution</p>
</li>
<li><p>If this memory is full, Java throws <em>java.lang.StackOverFlowError</em></p>
</li>
<li><p>Access to this memory is fast when compared to heap memory</p>
</li>
<li><p>This memory is threadsafe as each thread operates in its own stack</p>
</li>
</ul>
<hr>
<ul>
<li><p>Local Variable Array</p>
<ul>
<li><p>It contains all parameters and local variables of the method.</p>
</li>
<li><p>the occupied slot </p>
</li>
</ul>
</li>
<li><p>Operand Stack</p>
<ul>
<li><p>JVM uses operand stack as work space.</p>
</li>
<li><p>last-in first-out (LIFO) </p>
</li>
<li><p>how a Java virtual machine would add two local variables that contain ints and store the int result in a third local variable:</p>
</li>
</ul>
</li>
<li><p>Frame Data</p>
</li>
</ul>
<p><strong>Stack Memory vs Heap Space</strong></p>
<table>
<thead>
<tr>
<th>Parameter</th>
<th>Stack Memory</th>
<th>Heap Space</th>
</tr>
</thead>
<tbody><tr>
<td>Application</td>
<td>Stack is used in parts, one at a time during execution of a thread</td>
<td>The entire application uses Heap space during runtime</td>
</tr>
<tr>
<td>Size</td>
<td>Stack has size limits depending upon OS and is usually smaller then Heap</td>
<td>There is no size limit on Heap</td>
</tr>
<tr>
<td>Storage</td>
<td>Stores only primitive variables and references to objects that are created in Heap Space</td>
<td>All the newly created objects are stored here</td>
</tr>
<tr>
<td>Order</td>
<td>It is accessed using Last-in First-out (LIFO) memory allocation system</td>
<td>This memory is accessed via complex memory management techniques that include Young Generation, Old or Tenured Generation, and Permanent Generation.</td>
</tr>
<tr>
<td>Life</td>
<td>Stack memory only exists as long as the current method is running</td>
<td>Heap space exists as long as the application runs</td>
</tr>
<tr>
<td>Efficiency</td>
<td>Comparatively much faster to allocate when compared to heap</td>
<td>Slower to allocate when compared to stack</td>
</tr>
<tr>
<td>Allocation/Deallocation</td>
<td>This Memory is automatically allocated and deallocated when a method is called and returned respectively</td>
<td>Heap space is allocated when new objects are created and deallocated by Gargabe Collector when they are no longer referenced</td>
</tr>
</tbody></table>
<h4 id="4-PC-Registers-Program-Counter-Registers"><a href="#4-PC-Registers-Program-Counter-Registers" class="headerlink" title="4. PC Registers(Program Counter Registers)"></a>4. PC Registers(Program Counter Registers)</h4><blockquote>
<p>For every thread a separate PC register will be created at the time of thread creation. PC register contains address of current executing instruction. Once instruction execution completes automatically PC register will be incremented to hold address of next instruction. An “address” can be a native pointer or an offset from the beginning of a method’s byte codes.   </p>
</blockquote>
<h4 id="5-Native-Method-Stacks"><a href="#5-Native-Method-Stacks" class="headerlink" title="5. Native Method Stacks"></a>5. Native Method Stacks</h4><blockquote>
<p>Here also for every Thread a separate run time stack will be created. It contains all the native methods used in the application. Native method means methods written in a language other than the Java programming language. In other words, it is a stack used to execute C/C++ codes invoked through JNI (Java Native Interface). According to the language, a C stack or C++ stack is created.</p>
</blockquote>
<h3 id="Execution-Engine"><a href="#Execution-Engine" class="headerlink" title="Execution Engine"></a>Execution Engine</h3><h4 id="1-Interpreter"><a href="#1-Interpreter" class="headerlink" title="1. Interpreter"></a>1. Interpreter</h4><blockquote>
<p>It is responsible to read byte code and interpret into machine code (native code) and execute that machine code line by line. </p>
</blockquote>
<h4 id="2-JIT-Compiler"><a href="#2-JIT-Compiler" class="headerlink" title="2. JIT Compiler"></a>2. JIT Compiler</h4><blockquote>
<p>The JIT compiler has been introduced to compensate for the disadvantages of the interpreter. The main purpose of JIT compiler is to improve the performance. Internally JIT compiler maintains a separate count for every method. Whenever JVM across any method call, first that method will be interpreted normally by the interpreter and JIT compiler increments the corresponding count variable. </p>
</blockquote>
<ul>
<li><strong>Profiler</strong> which is the part of JIT compiler is responsible to identify Hotspot(Repeated Used Methods).</li>
</ul>
<h3 id="Java-Native-Interface-JNI"><a href="#Java-Native-Interface-JNI" class="headerlink" title="Java Native Interface(JNI)"></a>Java Native Interface(JNI)</h3><blockquote>
<p>JNI is acts as a bridge (Mediator) for java method calls and corresponding native libraries. </p>
</blockquote>
<h3 id="内存大小设置"><a href="#内存大小设置" class="headerlink" title="内存大小设置"></a>内存大小设置</h3><ul>
<li>在命令行下用  java -Xmx1200m -XX:Max Perm Size=60m -version 命令来进行测试，然后逐渐的增大XXXX的值，如果执行正常就表示指定的内存大小可用，否则会打印错误信息。<br>最后得到的虚拟机实际分配到的<br>总内存大小=堆内存+非堆内存<br>1200m：为堆内存大小，如果不指定后者参数则有最大数限制，网上很多文章认为这就是JVM内存， -Xmx为设置最大堆内存<br>60m： 为非堆内存大小， -XX: Max PermSize实为 永久域内存，在堆内存之外，属于非堆内存部分，jdk1.5我测了好像默认为62m，即得到非堆部分默认内存）</li>
</ul>
<h1 id="进程内存"><a href="#进程内存" class="headerlink" title="进程内存"></a>进程内存</h1><h2 id="查看进程对象大小"><a href="#查看进程对象大小" class="headerlink" title="查看进程对象大小"></a>查看进程对象大小</h2><ul>
<li><p><strong>jmap -histo 进程id</strong>  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jmap -histo 123456 | head -n15</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="查看内存分布及回收情况"><a href="#查看内存分布及回收情况" class="headerlink" title="查看内存分布及回收情况"></a>查看内存分布及回收情况</h2><ul>
<li><p><strong>jstat -gc 进程id 毫秒</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jstat -gc 1692 5000</span><br></pre></td></tr></table></figure>

<p>S0C: Young Generation第一个survivor space的内存大小 (kB).<br>S1C: Young Generation第二个survivor space的内存大小 (kB).<br>S0U: Young Generation第一个Survivor space当前已使用的内存大小 (kB).<br>S1U: Young Generation第二个Survivor space当前已经使用的内存大小 (kB).<br>EC: Young Generation中eden space的内存大小 (kB).<br>EU: Young Generation中Eden space当前已使用的内存大小 (kB).<br>OC: Old Generation的内存大小 (kB).<br>OU: Old Generation当前已使用的内存大小 (kB).<br>MC: Permanent Generation的内存大小 (kB)<br>MU: Permanent Generation当前已使用的内存大小 (kB).<br>YGC: 从启动到采样时Young Generation GC的次数<br>YGCT: 从启动到采样时Young Generation GC所用的时间 (s).<br>FGC: 从启动到采样时Old Generation GC的次数.<br>FGCT: 从启动到采样时Old Generation GC所用的时间 (s).<br>GCT: 从启动到采样时GC所用的总时间 (s).</p>
</li>
</ul>
<h2 id="查看堆栈占用"><a href="#查看堆栈占用" class="headerlink" title="查看堆栈占用"></a>查看堆栈占用</h2><ul>
<li><p><strong>jmap -heap 进程id</strong>  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">S0： 新生代中Survivor space 0区已使用空间的百分比</span><br><span class="line">S1： 新生代中Survivor space 1区已使用空间的百分比</span><br><span class="line">E ：新生代已使用空间的百分比 Eden space</span><br><span class="line">O： 老年代已使用空间的百分比（P:  永久带已使用空间的百分比）</span><br><span class="line"></span><br><span class="line">M： 元空间使用百分比</span><br><span class="line">CCS： 压缩类空间利用率为百分比</span><br><span class="line">YGC： YGC次数</span><br><span class="line">YGCT： 年轻一代垃圾收集时间</span><br><span class="line">FGC： FGC次数.</span><br><span class="line">FGCT： 完全垃圾收集时间</span><br><span class="line">GCT： 垃圾回收总时间</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>snippet</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Concept of The Day</title>
    <url>/2016/10/16/Java%20Concept%20of%20The%20Day/</url>
    <content><![CDATA[<ul>
<li><p>Stack is used only for execution purpose. Heap is used for storage purpose.</p>
<h3 id="Non-Static-Members-And-Their-Memory-Management-In-Java"><a href="#Non-Static-Members-And-Their-Memory-Management-In-Java" class="headerlink" title="Non-Static Members And Their Memory Management In Java"></a>Non-Static Members And Their Memory Management In Java</h3></li>
<li><p>Non-Static variables and Non-Static methods are non-static components of a class. These are also called instance components of a class. Non-static components are stored inside the object memory. Each object will have their own copy of non-static components. But,  static components are common to all objects of that class.</p>
<h3 id="IIB-Instance-Initialization-Block"><a href="#IIB-Instance-Initialization-Block" class="headerlink" title="IIB-Instance Initialization Block"></a>IIB-Instance Initialization Block</h3></li>
<li><p>IIB is used to initialize instance variables or non-static variables.</p>
</li>
<li><p>IIB blocks will not be called from the constructor in which this() statement is written as a first statement. </p>
<h3 id="super-and-this-keywords-in-java"><a href="#super-and-this-keywords-in-java" class="headerlink" title="super and this keywords in java"></a>super and this keywords in java</h3></li>
<li><p>super class constructor is called by super() calling statement. You can’t use super() calling statement outside the constructor. By default, super() calling statement is the first statement in any constructor. </p>
</li>
<li><p>this() is the calling statement to same class constructor. It must be used within constructor only. If it is used, it must be the first statement in the constructor.</p>
</li>
<li><p>You can’t use super and this keywords in a static method and in a static initialization block even though you are referring static members.</p>
<h3 id="10-Points-Every-Java-Programmer-Should-Know-About-final-keyword-in-java"><a href="#10-Points-Every-Java-Programmer-Should-Know-About-final-keyword-in-java" class="headerlink" title="10 Points Every Java Programmer Should Know About final keyword in java"></a>10 Points Every Java Programmer Should Know About final keyword in java</h3></li>
<li><p> Any class or any method can be either abstract or final but not both. abstract and final are totally opposite. Because, abstract class or abstract method must be implemented or modified in the sub classes but final does not allow this. This creates an ambiguity.</p>
</li>
<li><p> The global variable which is declared as final and static remains unchanged for the whole execution. Because, Static members are stored in the class memory and they are loaded only once in the whole execution. They are common to all objects of the class. If you declare static variables as final, any of the objects can’t change their value as it is final. Therefore, variables declared as final and static are sometimes referred to as Constants. All fields of interfaces are referred as constants, because they are final and static by default.</p>
<h3 id="Garbage-Collection-And-finalize-method-In-Java"><a href="#Garbage-Collection-And-finalize-method-In-Java" class="headerlink" title="Garbage Collection And finalize() method In Java"></a>Garbage Collection And finalize() method In Java</h3></li>
<li><p>Whenever you run a java program, JVM creates three threads. 1) main thread   2) Thread Scheduler   3) Garbage Collector Thread. In these three threads, main thread is a user thread and remaining two are daemon threads which run in background.</p>
<h3 id="Access-Modifiers-In-Java"><a href="#Access-Modifiers-In-Java" class="headerlink" title="Access Modifiers In Java"></a>Access Modifiers In Java</h3></li>
<li><p>Class can not be a private except inner classes. Inner classes are nothing but again members of outer class. So members of a class (field, method, constructor and inner class) can be private but not the class itself.<br><img src="https://i.imgur.com/6h3llC0.jpg"></p>
<h3 id="What-Are-Access-And-Non-Access-Modifiers-In-Java"><a href="#What-Are-Access-And-Non-Access-Modifiers-In-Java" class="headerlink" title="What Are Access And Non-Access Modifiers In Java?"></a>What Are Access And Non-Access Modifiers In Java?</h3><p><img src="https://i.imgur.com/nB7eV1i.jpg"></p>
<h3 id="Type-Casting-In-Java"><a href="#Type-Casting-In-Java" class="headerlink" title="Type Casting In Java"></a>Type Casting In Java</h3><p>Please note that by using casting, data can not be modified but only type of data can be modified.</p>
</li>
<li><p>Primitive Casting.</p>
<ul>
<li>memory size <code>byte &lt; short &lt; int &lt; long &lt; float &lt; double.</code><ul>
<li>Auto Widening</li>
<li>Explicit Narrowing</li>
</ul>
</li>
</ul>
</li>
<li><p>Derived Casting</p>
<ul>
<li>Auto-up Casting<ul>
<li>Explicit Down Casting<h3 id="Abstraction-In-Java"><a href="#Abstraction-In-Java" class="headerlink" title="Abstraction In Java"></a>Abstraction In Java</h3></li>
</ul>
</li>
</ul>
</li>
<li><p>Abstract classes contain abstract methods (you can refer them as ideas) so that they can be implemented in sub classes according to their requirements. They are also called as incomplete classes as they have some unimplemented abstract methods(ideas).</p>
<h3 id="Interfaces-In-Java"><a href="#Interfaces-In-Java" class="headerlink" title="Interfaces In Java"></a>Interfaces In Java</h3></li>
<li><p>Interfaces in java are very much similar to abstract classes but interfaces contain only abstract methods (you can refer to them as only ideas). Abstract classes may contain both abstract methods as well as concrete methods. But interfaces must contain only abstract methods. Concrete methods are not allowed in interfaces. Therefore, Interfaces show 100% abstractness.</p>
<h3 id="Auto-Widening-Vs-Auto-Boxing-Vs-Auto-UpCasting-In-Java"><a href="#Auto-Widening-Vs-Auto-Boxing-Vs-Auto-UpCasting-In-Java" class="headerlink" title="Auto-Widening Vs Auto-Boxing Vs Auto-UpCasting In Java"></a>Auto-Widening Vs Auto-Boxing Vs Auto-UpCasting In Java</h3><p><img src="https://javaconceptoftheday.com/wp-content/uploads/2014/11/widening-Vs-boxing.png?x70034"></p>
<h3 id="Exception-Handing"><a href="#Exception-Handing" class="headerlink" title="Exception Handing"></a>Exception Handing</h3><p>java.lang.Throwable is the super class of all errors and exceptions in java.<br><img src="https://javaconceptoftheday.com/wp-content/uploads/2014/11/Exceptions.png?x70034"><br><img src="https://i.imgur.com/xHC2xQo.jpg"></p>
</li>
<li><p>java.lang.Error class represents the errors which are mainly caused by the environment in which application is running. For example, OutOfMemoryError occurs when JVM runs out of memory or StackOverflowError occurs when stack overflows.</p>
</li>
<li><p>Where as java.lang.Exception class represents the exceptions which are mainly caused by the application itself. For example, NullPointerException occurs when an application tries to access null object or ClassCastException occurs when an application tries to cast incompatible class types. </p>
<h3 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h3></li>
<li><p>Array can hold the references to any type of objects. It is important to note that array can contain only references to the objects, not the objects itself. </p>
<h3 id="Threads"><a href="#Threads" class="headerlink" title="Threads"></a>Threads</h3></li>
<li><p>Processes and threads can be diagrammatically represented as this<br><img src="https://javaconceptoftheday.com/wp-content/uploads/2014/11/ThreadsAndProcesses.png?x70034"></p>
</li>
<li><p>User threads are threads which are created by the application or user.</p>
</li>
<li><p>Daemon threads are threads which are mostly created by the JVM.</p>
</li>
<li><p>There are three constant fields in java.lang.Thread class related to priority of a thread. They are,</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> 	MIN_PRIORITY   —&gt; It defines the lowest priority that a thread can have and It’s value is 1.</span><br><span class="line">NORM_PRIORITY  —&gt; It defines the normal priority that a thread can have and it’s value is 5.</span><br><span class="line">MAX_PRIORITY  —&gt; It defines the highest priority that a thread can have and it’s value is 10.</span><br></pre></td></tr></table></figure>
<p>  The priority of a main thread, if explicitly not set, is always 5 i.e NORM_PRIORITY.</p>
</li>
<li><p>avoid thread interference </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> 	By declaring the method as synchronized.</span><br><span class="line">By declaring the variables as final.</span><br><span class="line">By declaring the variable as volatile.</span><br><span class="line">By creating the immutable objects.</span><br><span class="line">By using Atomic operations.</span><br><span class="line">By restricting the access to same object by multiple threads.</span><br></pre></td></tr></table></figure></li>
<li><p>The Logic Behind The Synchronization In Java :</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  The synchronization in java is built around an entity called object lock or monitor. Here is the brief description about lock or monitor.</span><br><span class="line">- Whenever an object is created to any class, an object lock is created and is stored inside the object.</span><br><span class="line">- One object will have only one object lock associated with it.</span><br><span class="line">- Any thread wants to enter into synchronized methods or blocks of any object, they must acquire object lock associated with that object and release the lock after they are done with the execution.</span><br><span class="line">- The other threads which wants to enter into synchronized methods of that object have to wait until the currently executing thread releases the object lock.</span><br><span class="line">- To enter into static synchronized methods or blocks, threads have to acquire class lock associated with that class as static members are stored inside the class memory.</span><br></pre></td></tr></table></figure></li>
<li><p>mutex</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Shared</span><br><span class="line">&#123;</span><br><span class="line">    static void staticMethod()</span><br><span class="line">    &#123;</span><br><span class="line">        synchronized (Shared.class)</span><br><span class="line">        &#123;</span><br><span class="line">            //static synchronized block</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    void NonStaticMethod()</span><br><span class="line">    &#123;</span><br><span class="line">        synchronized (this)</span><br><span class="line">        &#123;</span><br><span class="line">            //Non-static synchronized block</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    void anotherNonStaticMethod()</span><br><span class="line">    &#123;</span><br><span class="line">        synchronized (new Shared())</span><br><span class="line">        &#123;</span><br><span class="line">            //Non-static synchronized block</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>10 Points-To-Remember About Synchronization In Java :</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. You can use synchronized keyword only with methods but not with variables, constructors, static initializer and instance initializers.</span><br><span class="line">2. Constructors, Static initializer and instance initializer can’t be declared with synchronized keyword, but they can contain synchronized blocks.</span><br><span class="line">3. Both static and non-static methods can use synchronized keyword. For static methods, thread need class level lock and for non-static methods, thread need object level lock.</span><br><span class="line">4. It is possible that both static synchronized and non-static synchronized methods can run simultaneously. Because, static methods need class level lock and non-static methods need object level lock.</span><br><span class="line">5. A method can contain any number of synchronized blocks. This is like synchronizing multiple parts of a method.</span><br><span class="line">6. Synchronization blocks can be nested.</span><br><span class="line">7. Lock acquired by the thread before executing a synchronized method or block must be released after the completion of execution, no matter whether execution is completed normally or abnormally (due to exceptions).</span><br><span class="line">8. Synchronization in java is Re-entrant in nature. A thread can not acquire a lock that is owned by another thread. But, a thread can acquire a lock that it already owns. That means if a synchronized method gives a call to another synchronized method which needs same lock, then currently executing thread can directly enter into that method or block without acquiring the lock.</span><br><span class="line">9. synchronized method or block is very slow. They decrease the performance of an application. So, special care need to be taken while using synchronization. Use synchronization only when you needed it the most.</span><br><span class="line">10. Use synchronized blocks instead of synchronized methods. Because, synchronizing some part of a method improves the performance than synchronizing the whole method.</span><br></pre></td></tr></table></figure></li>
<li><p>wait(), notify() and notifyAll()</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">These methods are final methods of java.lang.Object class. That means every class in java will have these methods. Below is the method signatures of these methods.</span><br><span class="line">1. public final void wait() throws InterruptedException</span><br><span class="line">This method tells the currently executing thread to release the lock of this object and wait until some other thread acquires the same lock and notify it using either notify() or notifyAll() methods. This method throws InterruptedException if waiting thread is interrupted.</span><br><span class="line">2. public final void notify()</span><br><span class="line">This method wakes up one thread randomly that called wait() method on this object.</span><br><span class="line">3. public final void notifyAll()</span><br><span class="line">This method wakes up all the threads that called wait() method on this object. But, only one thread will acquire lock of this object depending upon the priority.</span><br><span class="line"></span><br><span class="line">Important Note : These three methods must be called within synchronized method or block. Any thread which calls these methods must have lock of that object.</span><br></pre></td></tr></table></figure></li>
<li><p>Some Things-To-Remember About wait(), notify() and notifyAll() :</p>
<ul>
<li>If a thread calls notify() method and more than one threads are waiting for the object lock, then only one thread will be notified randomly.</li>
<li>When a thread calls notifyAll() method on an object, it notifies all the threads which are waiting for this object lock. But, only one thread will acquire this object lock depending upon priority.</li>
<li>When you call sleep() method on a thread, thread goes to sleep with holding the object lock with it. But, if you call wait() method, thread releases the object lock and goes for sleep. This is the main difference between wait() and sleep() methods.</li>
<li>wait(), notify() and notifyAll() are final methods of java.lang.Object class not java.lang.Thread class.</li>
<li>wait(), notify() and notifyAll() – all these three methods throw IllegalMonitorStateException if the calling thread does not owns the object lock.</li>
<li>wait() method is overloaded in Object class. There are two more wait() methods available in Object class.</li>
</ul>
</li>
<li><p>Thread Life Cycle OR Thread States In Java</p>
<ul>
<li>NEW,    A thread will be in this state before calling start() method.<ul>
<li>RUNNABLE, A thread will be in this state after calling the start() method.</li>
<li>BLOCKED, A thread will be in this state when a thread is waiting for object lock to enter into synchronized method/block or a thread will be in this state if deadlock occurs. </li>
<li>WAITING, A thread will be in this state when wait() or join() method is called.</li>
<li>TIMED_WAITING, A thread will be in this state when thread is sleeping. i.e A thread will be in this state when sleep() or wait() with timeOut or join() with timeOut is called.</li>
<li>TERMINATED, A thread will be in this state once it finishes it’s execution.<br><img src="https://javaconceptoftheday.com/wp-content/uploads/2014/11/JavaThreadLifeCycle.png?x70034"></li>
</ul>
</li>
</ul>
</li>
<li><p>7 Things Every Java Programmer Should Know About Threads In Java</p>
<ul>
<li><strong>Runnable interface vs Thread class</strong> : I am of opinion that when multiple threads need to execute same task, then use Runnable interface. If multiple threads need to execute different tasks, then go for Thread class.</li>
</ul>
</li>
<li><p>Difference Between wait() and sleep() Methods In Java</p>
<ul>
<li><p><strong>wait()</strong>:  releases the lock or monitor</p>
<ul>
<li><strong>sleep()</strong>: not  releases the lock or monitor</li>
</ul>
<p><img src="https://javaconceptoftheday.com/wp-content/uploads/2015/02/WaitAndSleep.png"></p>
</li>
</ul>
</li>
<li><p>Extends Thread Vs Implements Runnable In Java<br><img src="https://javaconceptoftheday.com/wp-content/uploads/2015/12/RunnableVsThread.png"><br>From the above all findings, it is clear that “Implements Runnable” is the preferred method to create the threads in java.</p>
</li>
<li><p>How To Stop A Thread In Java</p>
<ul>
<li>One is using boolean variable and second one is using interrupt() method. In this post, we will discuss both of these methods.</li>
</ul>
</li>
<li><p>Difference Between notify And notifyAll In Java</p>
<ul>
<li>wait(), notify() and notifyAll() must be called within synchronized method or synchronized block.<br><img src="https://javaconceptoftheday.com/wp-content/uploads/2016/03/NotifyVsNotifyAll.png"></li>
</ul>
</li>
<li><p>Difference Between BLOCKED Vs WAITING States In Java</p>
<ul>
<li>There are six thread states in java. They are <strong>NEW, RUNNABLE, BLOCKED, WAITING, TIMED_WAITING and TERMINATED</strong>.<br><img src="https://javaconceptoftheday.com/wp-content/uploads/2016/06/WaitingVsBlocked.png"></li>
</ul>
</li>
</ul>
<h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><ul>
<li>strings are treated as objects.</li>
<li>JVM allocates some memory specially meant for string literals. This part of the heap memory is called String Constant Pool.<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">String s1 = &quot;abc&quot;; </span><br><span class="line">String s2 = &quot;xyz&quot;;</span><br><span class="line">String s3 = &quot;123&quot;;</span><br><span class="line">String s4 = &quot;A&quot;;</span><br><span class="line">   String s5 = new String(&quot;abc&quot;);</span><br><span class="line">char[] c = &#123;&#x27;J&#x27;, &#x27;A&#x27;, &#x27;V&#x27;, &#x27;A&#x27;&#125;;</span><br><span class="line">String s6 = new String(c);</span><br><span class="line">String s7 = new String(new StringBuffer());</span><br></pre></td></tr></table></figure>
<img src="https://javaconceptoftheday.com/wp-content/uploads/2014/11/String-Constant-Pool.png"></li>
<li>String Constant Pool is allocated to an object depending upon it’s content. There will be no two objects in the pool having the same content.</li>
<li>```<br>“When you create a string object using string literal, JVM first checks the content of to be created object. If there exist an object in the pool with the same content,     then it returns the reference of that object. It doesn’t create new object. If the content is different from the existing objects then only it creates new object.”<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line">	In simple words, there can not be two string objects with same content in the string constant pool. But, there can be two string objects with the same content in the heap memory.</span><br></pre></td></tr></table></figure></li>
<li>Immutability is the fundamental property of string objects. In whatever way you create the string objects, either using string literals or using new operator, they are immutable.</li>
</ul>
<h3 id="Generic"><a href="#Generic" class="headerlink" title="Generic"></a>Generic</h3><ul>
<li><p>Defining Generic Class</p>
<ul>
<li>Generics Work Only With Derived Types</li>
</ul>
</li>
<li><p>Rules To Follow While Implementing Generic Interfaces</p>
<ul>
<li>Only generic classes can implement generic interfaces.<br><code>class GenericClass&lt;T&gt; implements GenericInterface&lt;T&gt;</code><br>-A normal class can implement a generic interface if type parameter of generic interface is a wrapper class. For example, below implementation of GenericInterface is legal.<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">interface GenericInterface&lt;Integer&gt;&#123;</span><br><span class="line">    			//Generic interface with Integer as type parameter</span><br><span class="line">&#125;</span><br><span class="line">class NormalClass implements GenericInterface&lt;Integer&gt;&#123;</span><br><span class="line">   			 //Normal class implementing generic interface</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>Class implementing generic interface at least must have same number and same type of parameters and at most can have any number and any type of parameters.<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class GenericClass2&lt;T, V&gt; implements GenericInterface&lt;T&gt;&#123;</span><br><span class="line">  		//Class with two type parameters</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Define Methods And Constructors As Generic</p>
<ul>
<li>Generic Methods:<br><code>&lt;type-Parameters&gt; return_type method_name(parameter list)</code></li>
<li>Constructors As Generics,As we all know that constructors are like methods but without return types</li>
</ul>
</li>
<li><p>Bounded Types</p>
<ul>
<li>the syntax for declaring Bounded type parameters.<br><code>&lt;T extends SuperClass&gt;</code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static &lt;T extends Number&gt; void printNumbers(T[] t)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Wildcard arguments </p>
<ul>
<li>The syntax for declaring this type of wildcard arguments is:<code>GenericType&lt;?&gt;</code></li>
<li>To specify an upper bound for wildcards:<code>GenericType&lt;? extends SuperClass&gt;</code></li>
<li>specify a lower bound for wildcard argument using super clause:<code>GenericType&lt;? super SubClass&gt;</code></li>
</ul>
</li>
<li><p>Type Erasure</p>
</li>
</ul>
<h3 id="Collection-Framework"><a href="#Collection-Framework" class="headerlink" title="Collection Framework"></a>Collection Framework</h3><ul>
<li><p>Collection Framework – Class Hierarchy</p>
<ul>
<li>All classes and interfaces related to Collection Framework are placed in java.util package.<br><img src="https://javaconceptoftheday.com/wp-content/uploads/2014/11/CollectionHierarchy.png"></li>
</ul>
</li>
<li><p>Collection Framework – Collection Interface<br>  <img src="https://javaconceptoftheday.com/wp-content/uploads/2014/11/CollectionInterface.png"></p>
<ul>
<li>equals() and hashcode() methods in the Collection interface are not the methods of java.lang.Object class. Because, interfaces does not inherit from Object class. Only classes in java are inherited from Object class. Any classes implementing Collection interface must provide their own version of equals() and hashcode() methods or they can retain default version inherited from Object class.</li>
</ul>
</li>
<li><p>Collection Framework – List Interface</p>
<ul>
<li>the class diagram of List interface：<br><img src="https://javaconceptoftheday.com/wp-content/uploads/2014/11/ListInterface.png"></li>
</ul>
</li>
<li><p>Collection Framework – The ArrayList Class</p>
<ul>
<li>Default initial capacity of an ArrayList is 10.<ul>
<li>the hierarchy diagram of ArrayList class.<br><img src="https://javaconceptoftheday.com/wp-content/uploads/2014/12/ArrayListClass.png"></li>
<li>Properties Of ArrayList :<ul>
<li>Size of the ArrayList is not fixed. It can increase and decrease dynamically as we add or delete the elements.<ul>
<li>ArrayList can have any number of null elements.</li>
<li>ArrayList can have duplicate elements.</li>
<li>As ArrayList implements RandomAccess, you can get, set, insert and remove elements of the ArrayList from  any arbitrary position.<br><img src="https://javaconceptoftheday.com/wp-content/uploads/2014/12/ArrayListTemplateNew.png"></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>Differences Between Array Vs ArrayList In Java</p>
<ul>
<li>Array is static in nature,ArrayList is dynamic in nature<ul>
<li>when you try to add elements to ArrayList beyond its capacity, it creates the new array with increased size and copies the elements from old array to new array.</li>
<li>if adding an element requires resizing of an ArrayList, then it gets slightly slower as it involves creating a new array in the background and copying all elements from old array to new array.</li>
<li>Array can hold both primitive data types (int, float….) as well as objects. Where as ArrayList can hold only objects. If you try to insert primitive data into ArrayList, data is automatically boxed into corresponding wrapper class.<br><img src="https://javaconceptoftheday.com/wp-content/uploads/2016/09/ArrayVsArrayList.png"></li>
<li>ArrayList to Array,<strong>toArray()</strong> method returns an array containing all elements of the ArrayList.<code> Object[] array = list.toArray();</code></li>
<li>Array To ArrayList:<ul>
<li>Arrays.asList() <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">String[] array = new String[] &#123;&quot;ANDROID&quot;, &quot;JSP&quot;, &quot;JAVA&quot;, &quot;STRUTS&quot;, &quot;HADOOP&quot;, &quot;JSF&quot;&#125;;</span><br><span class="line">ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;(Arrays.asList(array));</span><br></pre></td></tr></table></figure>
<ul>
<li>Collection.addAll()<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">String[] array = new String[] &#123;&quot;ANDROID&quot;, &quot;JSP&quot;, &quot;JAVA&quot;, &quot;STRUTS&quot;, &quot;HADOOP&quot;, &quot;JSF&quot;&#125;;</span><br><span class="line">ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;();</span><br><span class="line">		Collections.addAll(list, array);</span><br></pre></td></tr></table></figure></li>
<li>ArrayList.addAll()<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">String[] array = new String[] &#123;&quot;ANDROID&quot;, &quot;JSP&quot;, &quot;JAVA&quot;, &quot;STRUTS&quot;, &quot;HADOOP&quot;, &quot;JSF&quot;&#125;;</span><br><span class="line">ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;();</span><br><span class="line">	list.addAll(Arrays.asList(array));</span><br></pre></td></tr></table></figure></li>
<li>Using streams from java 8<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">String[] array = new String[] &#123;&quot;ANDROID&quot;, &quot;JSP&quot;, &quot;JAVA&quot;, &quot;STRUTS&quot;, &quot;HADOOP&quot;, &quot;JSF&quot;&#125;;</span><br><span class="line">List&lt;Object&gt; list = Arrays.stream(array).collect(Collectors.toList());</span><br></pre></td></tr></table></figure>
<img src="https://javaconceptoftheday.com/wp-content/uploads/2016/07/ArrayToArrayList.png"></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>Remove Duplicate Elements From ArrayList</p>
<ul>
<li>Using HashSet<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HashSet&lt;String&gt; set = new HashSet&lt;String&gt;(listWithDuplicateElements);</span><br><span class="line">ArrayList&lt;String&gt; listWithoutDuplicateElements = new ArrayList&lt;String&gt;(set);</span><br></pre></td></tr></table></figure>
<ul>
<li>Using LinkedHashSet<br><code>LinkedHashSet&lt;String&gt; set = new LinkedHashSet&lt;String&gt;(listWithDuplicateElements);</code><br><img src="https://javaconceptoftheday.com/wp-content/uploads/2015/07/RemovingDuplicateElementsFromArrayList.png"></li>
</ul>
</li>
</ul>
</li>
<li><p>Collection Framework – The Vector Class</p>
<ul>
<li>Vector class is synchronized. <ul>
<li>All methods of Vector class are synchronized </li>
<li>capacity of the vector will be doubled whenever size exceeds capacity.</li>
<li>Why Not To Use Vector Class In Your Code<ul>
<li>you can achieve thread safe ArrayList by using synchronizedList() method of Collections class. </li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>Java Collection Framework – The LinkedList Class</p>
<ul>
<li>In general terms, LinkedList is a data structure where each element consist of three things. First one is the reference to previous element, second one is the actual value of the element and last one is the reference to next element.<br><img src="https://javaconceptoftheday.com/wp-content/uploads/2014/12/HowLinkedListWorks.png"></li>
</ul>
</li>
<li><p>Collection Framework – The Queue Interface</p>
<ul>
<li>First-In-First-Out.<ul>
<li>You can’t add or get or set elements at an arbitrary position in the queues.<br><img src="https://javaconceptoftheday.com/wp-content/uploads/2014/11/HowQueueWorks.png"></li>
<li>Properties Of Queue :<ul>
<li>Null elements are not allowed in the queue. <ul>
<li>Queue can have duplicate elements.</li>
<li>Unlike a normal list, queue is not random access. i.e you can’t set or insert or get elements at an arbitrary positions.</li>
<li>In the Queue Interface, there are two methods to obtain and remove the elements from the head of the queue. They are poll() and remove(). The difference between them is, poll() returns null if the queue is empty and remove() throws an exception if the queue is empty.</li>
<li>There are two methods in the Queue interface to obtain the elements but don’t remove. They are peek() and element(). peek() returns null if the queue is empty and element() throws an exception if the queue is empty.</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>Collection Framework – The Deque Interface</p>
<ul>
<li>the hierarchy diagram of Deque interface：<br>  <img src="https://javaconceptoftheday.com/wp-content/uploads/2014/11/Deque.png"></li>
<li>The main advantage of Deque is that you can use it as both Queue (FIFO) as well as Stack (LIFO).</li>
<li>Deque is nothing but the double ended queue. That means, you can insert, retrieve and remove the elements from both the ends.<br><img src="https://javaconceptoftheday.com/wp-content/uploads/2014/11/HowDequeWorks.png"></li>
</ul>
</li>
<li><p>Collection Framework – The Set Interface</p>
<ul>
<li>Order of elements in a set is implementation dependent. HashSet elements are ordered on hash code of elements. TreeSet elements are ordered according to supplied Comparator (If no Comparator is supplied, elements will be placed in ascending order) and LinkedHashSet maintains insertion order.</li>
<li>The HashSet internally uses HashMap to store the objects. The elements you insert in HashSet will be stored as keys of that HashMap object and their values will be a constant called PRESENT. This constant is defined as private static final Object PRESENT = new Object() in the source code of HashSet class.</li>
<li>HashSet can have maximum one null element.<br><img src="https://javaconceptoftheday.com/wp-content/uploads/2015/01/HowHashSetWorks.png"></li>
<li>LinkedHashSet internally uses LinkedHashMap to store it’s elements just like HashSet which internally uses HashMap to store it’s elements.</li>
<li>LinkedHashSet maintains insertion order. This is the main difference between LinkedHashSet and HashSet.</li>
<li>SortedSet elements are sorted according to supplied Comparator. If you don’t mention any Comparator while creating a SortedSet, elements will be placed in ascending order.</li>
<li>SortedSet Inserted elements must be of Comparable type and they must be mutually Comparable.</li>
<li>Elements inserted in the TreeSet must be of Comparable type and elements must be mutually comparable. </li>
<li>TreeSet internally uses TreeMap to store it’s elements just like HashSet and LinkedHashSet which use HashMap and LinkedHashMap respectively to store their elements.</li>
</ul>
</li>
<li><p>Java Collection Framework – The Map Interface<br><img src="https://javaconceptoftheday.com/wp-content/uploads/2015/01/MapInterface.png"></p>
<ul>
<li>Each key-value pairs of the map are stored as Map.Entry objects. Map.Entry is an inner interface of Map interface.</li>
<li>HashMap doesn’t maintain any order of elements. LinkedHashMap maintains insertion order of elements. Where as TreeMap places the elements according to supplied Comparator.</li>
<li>Default initial capacity of HashMap is 16.</li>
<li>Hashing is nothing but the function or algorithm or method which when applied on any object/variable returns an unique integer value representing that object/variable.</li>
<li>The capacity of an HashMap is the number of buckets in the hash table. The initial capacity is the capacity of an HashMap at the time of its creation. The default initial capacity of the HashMap is 24 i.e 16. The capacity of the HashMap is doubled each time it reaches the threshold. i.e the capacity is increased to 25=32, 26=64, 27=128….. when the threshold is reached.</li>
<li>HashMap internally uses an array of Entry&lt;K, V&gt; objects to store the data.</li>
<li>HashTable is a legacy class. It is almost considered as due for deprecation. Since JDK 1.5, ConcurrentHashMap is considered as better option than the HashTable.</li>
</ul>
</li>
</ul>
<h3 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h3><ul>
<li><p>Java Database Connectivity API which is used by the java application to interact with the database.</p>
<ul>
<li>JDBC API not directly interacts with the database. It uses JDBC driver of that database to interact with the database.<br><img src="https://javaconceptoftheday.com/wp-content/uploads/2015/06/JavaJDBCDriverDatabase.png"></li>
<li>JDBC driver is a software component provided along with the database which is required by the JDBC API to interact with the database. Each database will have its own JDBC driver.</li>
</ul>
<blockquote>
<p>In simple terms, JDBC drivers are nothing but the implementations of interfaces provided in the JDBC API (java.sql and javax.sql packages) with respect to a particular database. These implementations are bundled in a JAR file and supplied along with the database. These implementations are used by the JDBC API to interact with that database.</p>
</blockquote>
</li>
</ul>
<h3 id="Big-O-Notations"><a href="#Big-O-Notations" class="headerlink" title="Big O Notations"></a>Big O Notations</h3><ul>
<li>Big O notations consist of O and an expression enclosed within ( ). Expression within ( ) represents the number of computations a particular algorithm has to perform to solve a given problem.</li>
<li><strong>O(1)</strong> represents an algorithm which has to perform exact one computation to solve a problem. O(1) represents an algorithm which takes same time to execute for any size of input data. In other words, O(1) denotes an algorithm which performance is not affected by the size of the input data. <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">boolean isFirstElementZero(int[] inputData)</span><br><span class="line">	&#123;</span><br><span class="line">		if(inputData[0] == 0)</span><br><span class="line">		&#123;</span><br><span class="line">			return true;</span><br><span class="line">		&#125;</span><br><span class="line">	</span><br><span class="line">		return false;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></li>
<li><strong>O(N)</strong> represents an algorithm which has to perform ‘N’ computations to solve a problem. Where ‘N’ is the number of elements in input data. That means algorithm will take more time as number of elements in input data increases. In the other words, O(N) denotes an algorithm whose performance is directly proportional to size of the input data.<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">boolean searchForElement(int[] inputData, int n)</span><br><span class="line">	&#123;</span><br><span class="line">		for (int i = 0; i &lt; inputData.length; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			if(inputData[i] == n)</span><br><span class="line">			&#123;</span><br><span class="line">				return true;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	</span><br><span class="line">		return false;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></li>
<li><strong>O(N^2)</strong> denotes an algorithm which has to perform N^2 computations to solve a problem. Where N is the number of elements in input data. In the other words, O(N^2) represents an algorithm whose performance is directly proportional to square of the size of the input data. The algorithms which have nested iterations over the input data will give O(N^2) performance. Further deeper iterations over the input data will give O(N^3), O(N^4) and so on.<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">boolean findDuplicates(int[] inputData)</span><br><span class="line">&#123;</span><br><span class="line">	for (int i = 0; i &lt; inputData.length; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		for (int j = 0; j &lt; inputData.length; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			if(inputData[i] == inputData[j] &amp;&amp; i!=j)</span><br><span class="line">			&#123;</span><br><span class="line">				return true;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><strong>O(log N)</strong> represents an algorithm whose number of computations grows linearly as input data grows exponentially. i.e O(log N) represents the algorithms whose execution time grows linearly as input data grows exponentially. That means if an algorithm takes 1 second to compute 10 elements, then it will take 2 seconds to compute 100 elements, 3 seconds to compute 1000 elements and so on. The best example for O(log N) is binary search algorithm which uses divide and conquer rule to search for an element.</li>
<li><strong>O(2N)</strong> represents an algorithm whose execution time is doubled for every extra element in the input data. For example, if an algorithm takes 4 seconds to compute 2 elements, then it will take 8 seconds to compute 3 elements, 16 seconds for 4 elements, 32 seconds for 5 elements and so on.</li>
<li><strong>O(N!)</strong> represents an algorithm which has to perform N! computations to solve a problem. Where N is the number of elements in the input data. For example, if an algorithm takes 2 seconds to compute 2 elements, then it will take 6 seconds to compute 3 elements, 24 seconds to compute 4 elements and so on.<br><img src="https://javaconceptoftheday.com/wp-content/uploads/2015/05/Big-O-Notation.png"></li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>learn</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes learn</title>
    <url>/2021/12/02/Kubernetes%20snippet/</url>
    <content><![CDATA[<p>Kubernetes is pronounced <strong>coo-ber-net-ees</strong>, not coo-ber-neats. People also use the shortened version k8s a lot. Please don’t pronounce that one k-eights—it is still coo-ber-net-ees.</p>
<h3 id="Difference-between-Docker-and-Kubernetes"><a href="#Difference-between-Docker-and-Kubernetes" class="headerlink" title="Difference between Docker and Kubernetes"></a>Difference between Docker and Kubernetes</h3><blockquote>
<p>Docker is a containerization platform, and Kubernetes is a container orchestrator for container platforms like Docker. </p>
</blockquote>
<h3 id="Docker-Container-Problems"><a href="#Docker-Container-Problems" class="headerlink" title="Docker Container Problems:"></a>Docker Container Problems:</h3><ul>
<li>How would all of these containers be coordinated and scheduled? </li>
<li>How do you seamlessly upgrade an application without any interruption of service? </li>
<li>How do you monitor the health of an application, know when something goes wrong and seamlessly restart it? </li>
</ul>
<p>When most people talk about “Kubernetes vs. Docker,” what they really mean is “Kubernetes vs. Docker Swarm.” </p>
<h3 id="Kubernetes-architecture-and-its-components"><a href="#Kubernetes-architecture-and-its-components" class="headerlink" title="Kubernetes architecture and its components"></a>Kubernetes architecture and its components</h3><p>We can break down the components into three main parts.</p>
<ol>
<li>The Control Plane - The Master.</li>
<li>Nodes - Where pods get scheduled.</li>
<li>Pods - Holds containers.</li>
</ol>
<p><img src="./img/kubernetes_cluster.png"></p>
<p>Docker is a platform and tool for building, distributing, and running Docker containers. It offers its own native clustering tool that can be used to orchestrate and schedule containers on machine clusters. Kubernetes is a container orchestration system for Docker containers that is more extensive than Docker Swarm and is meant to coordinate clusters of nodes at scale in production in an efficient manner. It works around the concept of pods, which are scheduling units (and can contain one or more containers) in the Kubernetes ecosystem, and they are distributed among nodes to provide high availability. One can easily run a Docker build on a Kubernetes cluster, but Kubernetes itself is not a complete solution and is meant to include custom plugins.</p>
<h1 id="command"><a href="#command" class="headerlink" title="command"></a>command</h1><h2 id="查看运行程序"><a href="#查看运行程序" class="headerlink" title="查看运行程序"></a>查看运行程序</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl get pod -n 命令空间</span><br></pre></td></tr></table></figure>



<h2 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl logs -f 容器id -n 命令空间</span><br></pre></td></tr></table></figure>



<h2 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl exec -it  容器id -n 命令空间 -c entity-server-server -- sh</span><br></pre></td></tr></table></figure>



<h2 id="复制服务器文件到宿主机"><a href="#复制服务器文件到宿主机" class="headerlink" title="复制服务器文件到宿主机"></a>复制服务器文件到宿主机</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl cp 命令空间/容器id:/path/to/source_file ./path/to/local_file</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>learn</tag>
      </tags>
  </entry>
  <entry>
    <title>socket snippet</title>
    <url>/2018/05/09/TCP%20and%20UDP/</url>
    <content><![CDATA[<h2 id="TCP-and-UDP"><a href="#TCP-and-UDP" class="headerlink" title="TCP and UDP"></a>TCP and UDP</h2><blockquote>
<ul>
<li>TCP stands for Transmission Control Protocol and UDP stands for User Datagram Protocol, and both are used extensively to build Internet applications.</li>
<li>The protocol which is the core of internet, HTTP is based on TCP.</li>
</ul>
</blockquote>
<h3 id="why"><a href="#why" class="headerlink" title="why"></a>why</h3><blockquote>
<p> why Java developer should understand these two protocols in detail is that Java is extensively used to write multi-threaded, concurrent and scalable servers.</p>
</blockquote>
<h3 id="where"><a href="#where" class="headerlink" title="where"></a>where</h3><blockquote>
<p> While UDP is more suitable for applications that need fast, efficient transmission, such as games. UDP’s stateless nature is also useful for servers that answer small queries from huge numbers of clients. In practice, TCP is used in finance domain e.g. <a href="http://javarevisited.blogspot.sg/2011/04/fix-protocol-tutorial-for-beginners.html">FIX protocol</a> is a TCP based protocol, UDP is used heavily in gaming and entertainment sites.</p>
</blockquote>
<h3 id="how"><a href="#how" class="headerlink" title="how"></a>how</h3><ul>
<li><p>  TCP is connection oriented, reliable, slow, provides guaranteed delivery and preserves the order of messages</p>
</li>
<li><p>  UDP is connectionless, unreliable, no ordering guarantee, but a fast protocol. </p>
</li>
<li><p>  TCP overhead is also much higher than UDP, as it transmits more metadata per packet than UDP.  that header size of Transmission control protocol is 20 bytes, compared to 8 bytes header of User Datagram protocol.</p>
</li>
<li><p>  Use TCP, if you can’t afford to lose any message, while UDP is better for high-speed data transmission, where loss of a single packet is acceptable e.g. video streaming or online multiplayer games.</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Socket</category>
      </categories>
      <tags>
        <tag>snippet</tag>
      </tags>
  </entry>
  <entry>
    <title>ansible snippet</title>
    <url>/2021/09/26/ansible%20snippet/</url>
    <content><![CDATA[<h3 id="roles"><a href="#roles" class="headerlink" title="roles"></a>roles</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">defaults    参数</span><br><span class="line">tasks        启动脚本</span><br><span class="line">templates    配置文档</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ansible</category>
      </categories>
      <tags>
        <tag>snippet</tag>
      </tags>
  </entry>
  <entry>
    <title>bigdata snippet</title>
    <url>/2019/05/05/bigdata/</url>
    <content><![CDATA[<h2 id="BIG-DATA-What-is-Types-Characteristics-amp-Example"><a href="#BIG-DATA-What-is-Types-Characteristics-amp-Example" class="headerlink" title="BIG DATA: What is, Types, Characteristics &amp; Example"></a>BIG DATA: What is, Types, Characteristics &amp; Example</h2><ul>
<li>Big Data is defined as data that is huge in size. Bigdata is a term used to describe a collection of data that is huge in size and yet growing exponentially with time.</li>
<li>Examples of Big Data generation includes stock exchanges, social media sites, jet engines, etc.</li>
<li>Big Data could be 1) Structured, 2) Unstructured, 3) Semi-structured</li>
<li>Volume, Variety, Velocity, and Variability are few Characteristics of Bigdata</li>
<li>Improved customer service, better operational efficiency, Better Decision Making are few advantages of Bigdata</li>
</ul>
<h2 id="Hadoop-EcoSystem-and-Components"><a href="#Hadoop-EcoSystem-and-Components" class="headerlink" title="Hadoop EcoSystem and Components"></a>Hadoop EcoSystem and Components</h2><p><img src="./img/061114_0803_LearnHadoop4.png"></p>
<h3 id="Hadoop-Architecture"><a href="#Hadoop-Architecture" class="headerlink" title="Hadoop Architecture"></a>Hadoop Architecture</h3><p><img src="./img/hadoop-architecture.png"></p>
<h4 id="HDFS-Architecture"><a href="#HDFS-Architecture" class="headerlink" title="HDFS Architecture"></a>HDFS Architecture</h4><p>HDFS cluster primarily consists of a <strong>NameNode</strong> that manages the file system <strong>Metadata</strong> and a <strong>DataNodes</strong> that stores the <strong>actual data</strong>.</p>
<ul>
<li><p>Read Operation In HDFS</p>
<p><img src="./img/061114_0923_LearnHDFSAB1.png"></p>
</li>
<li><p>Write Operation In HDFS</p>
<p><img src="./img/061114_0923_LearnHDFSAB2.png"></p>
</li>
</ul>
<h4 id="MapReduce"><a href="#MapReduce" class="headerlink" title="MapReduce"></a>MapReduce</h4><p>The whole process goes through four phases of execution namely, splitting, mapping, shuffling, and reducing.</p>
<p><img src="./img/061114_0930_Introductio1.png"></p>
<ol>
<li><strong>Jobtracker</strong>: Acts like a <strong>master</strong> (responsible for complete execution of submitted job)</li>
<li><strong>Multiple Task Trackers</strong>: Acts like <strong>slaves,</strong> each of them performing the job</li>
</ol>
<p><img src="./img/061114_0930_Introductio2.png"></p>
]]></content>
      <categories>
        <category>bigdata</category>
      </categories>
      <tags>
        <tag>snippet</tag>
      </tags>
  </entry>
  <entry>
    <title>antlr point</title>
    <url>/2022/04/20/antlr%20point/</url>
    <content><![CDATA[<hr>
<p><a href="https://wizardforcel.gitbooks.io/antlr4-short-course/content/getting-started.html">简明教程</a></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>point</tag>
      </tags>
  </entry>
  <entry>
    <title>cache snippet</title>
    <url>/2017/03/07/cache%20snippet/</url>
    <content><![CDATA[<ul>
<li>what is cache ?    why use cache ?<ol>
<li>Cache是高速缓冲存储器 一种特殊的存储器子系统，其中复制了频繁使用的数据以利于快速访问</li>
<li>凡是位于速度相差较大的两种硬件/软件之间的，用于协调两者数据传输速度差异的结构，均可称之为 Cache </li>
</ol>
</li>
<li>缓存的分类<ul>
<li>操作系统磁盘缓存-&gt;减少磁盘机械操作</li>
<li>数据库缓存-&gt;减少文件系统I/O</li>
<li>应用程序缓存-&gt;减少对数据库的查询 </li>
<li>Web服务器缓存-&gt;减少应用服务器请求</li>
<li>客户端浏览器缓存-&gt;减少对网站的访问</li>
</ul>
</li>
</ul>
<h3 id="技术框架"><a href="#技术框架" class="headerlink" title="技术框架"></a>技术框架</h3><ul>
<li><strong>Encache</strong><ul>
<li>设计于提高在数据从RDBMS中取出来的高花费、高延迟采取的一种缓存方案 </li>
<li>java编写，直接在jvm虚拟机中缓存，速度快，效率高；但是缓存共享麻烦，集群分布式应用不方便。</li>
<li>特点：<ul>
<li>快</li>
<li>简单</li>
<li>袖珍</li>
<li>轻量</li>
<li>扩展</li>
<li>监听器</li>
</ul>
</li>
</ul>
</li>
<li><strong>memcache</strong><ul>
<li>一种高性能、分布式对象缓存系统，最初设计于缓解动态网站数据库加载数据的延迟性，你可以把它想象成一个大的内存HashTable，就是一个key-value键值缓存。</li>
<li>C语言编写</li>
<li>特点：<ul>
<li>依赖</li>
<li>多线程支持</li>
<li>高性能</li>
</ul>
</li>
</ul>
</li>
<li><strong>redis</strong><ul>
<li>通过socket访问到缓存服务，效率比encache低，比数据库要快很多，处理集群和分布式缓存方便，有成熟的方案。</li>
<li>特性：<ul>
<li>支持持久化</li>
<li>丰富的数据类型</li>
<li>高性能</li>
<li>主从复制</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>cache</category>
      </categories>
      <tags>
        <tag>snippet</tag>
      </tags>
  </entry>
  <entry>
    <title>cdc &amp; 实时数仓 points</title>
    <url>/2021/12/29/cdc/</url>
    <content><![CDATA[<p><strong>Change Data Capture（变更数据获取）</strong></p>
<p>核心思想是，监测并捕获数据库的变动（包括数据或数据表的插入、更新以及删除等），将这些变更按发生的顺序完整记录下来，写入到消息中间件中以供其他服务进行订阅及消费。</p>
<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul>
<li><strong>数据同步</strong>，用于备份，容灾；</li>
<li><strong>数据分发</strong>，一个数据源分发给多个下游；</li>
<li><strong>数据采集</strong>(E)，面向数据仓库/数据湖的 ETL 数据集成。</li>
</ul>
<h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>主要分为<strong>基于查询</strong>和<strong>基于 Binlog</strong> 两种方式</p>
<h3 id="传统-CDC-ETL"><a href="#传统-CDC-ETL" class="headerlink" title="传统 CDC ETL"></a>传统 CDC ETL</h3><p><img src="/images/cdc/cdc_etl.png"></p>
<h3 id="基于-Flink-CDC-的-ETL-分析"><a href="#基于-Flink-CDC-的-ETL-分析" class="headerlink" title="基于 Flink CDC 的 ETL 分析"></a>基于 Flink CDC 的 ETL 分析</h3><p><img src="/images/cdc/flink_cdc_etl.png"></p>
<h3 id="基于-Flink-CDC-的聚合分析"><a href="#基于-Flink-CDC-的聚合分析" class="headerlink" title="基于 Flink CDC 的聚合分析"></a>基于 Flink CDC 的聚合分析</h3><p><img src="/images/cdc/flink_cdc_aggregate.png"></p>
<h3 id="基于-Flink-CDC-的数据打宽"><a href="#基于-Flink-CDC-的数据打宽" class="headerlink" title="基于 Flink CDC 的数据打宽"></a>基于 Flink CDC 的数据打宽</h3><p><img src="/images/cdc/flink_cdc_merge.png"></p>
<h2 id="性能点"><a href="#性能点" class="headerlink" title="性能点"></a>性能点</h2><p>大数据领域的 4 类场景：</p>
<p><strong>B</strong>    batch    离线计算</p>
<p><strong>A</strong>    Analytical    交互式分析</p>
<p><strong>S</strong>    Servering    高并发的在线服务</p>
<p><strong>T</strong>    Transaction    事务隔离机制</p>
<blockquote>
<p>离线计算通常在计算层，所以应该重点考虑 A、S 和 T</p>
</blockquote>
<h2 id="考虑点"><a href="#考虑点" class="headerlink" title="考虑点"></a>考虑点</h2><ul>
<li><p>保证端到端的数据一致性，包括维度一致性以及全流程数据一致性;</p>
</li>
<li><p>实时流处理过程中数据到达顺序无法预知时，如何保证双流 join 时数据能及时关联同时不造成数据堵塞；</p>
</li>
<li><p>Oracle</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.Oracle 是第三方厂商维护的，不允许对线上系统有过多的侵入，容易造成监听故障甚至系统瘫痪，</span><br><span class="line">2.归档日志是在开启那一刻起才开始生成的，之前的存量数据难以进入 kafka，但是后来实时数据又必须依赖前面的计算结果</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="实时数仓方案"><a href="#实时数仓方案" class="headerlink" title="实时数仓方案"></a>实时数仓方案</h2><h3 id="Lambda-架构"><a href="#Lambda-架构" class="headerlink" title="Lambda 架构"></a>Lambda 架构</h3><blockquote>
<p>目前主流的一套实时数仓架构，存在离线和实时两条链路。实时部分以消息队列的方式实时增量消费，一般以 Flink+Kafka 的组合实现，维度表存在关系型数据库或者 HBase；离线部分一般采用 T+1 周期调度分析历史存量数据，每天凌晨产出，更新覆盖前一天的结果数据，计算引擎通常会选择 Hive 或者 Spark。</p>
</blockquote>
<p><img src="/images/cdc/structure_lambda.png"></p>
<h3 id="Kappa-架构"><a href="#Kappa-架构" class="headerlink" title="Kappa 架构"></a>Kappa 架构</h3><blockquote>
<p>相较于 Lambda 架构，它移除了离线生产链路，思路是通过传递任意想要的 offset(偏移量)来达到重新消费处理历史数据的目的。优点是架构相对简化，数据来源单一，共用一套代码，开发效率高；缺点是必须要求消息队列中保存了存量数据，而且主要业务逻辑在计算层，比较消耗内存资源。</p>
</blockquote>
<p><img src="/images/cdc/structure_kappa.png"></p>
<h3 id="OLAP-变体架构"><a href="#OLAP-变体架构" class="headerlink" title="OLAP 变体架构"></a>OLAP 变体架构</h3><blockquote>
<p>是 Kappa 架构的进一步演化，它的思路是将聚合分析计算由 OLAP 引擎承担，减轻实时计算部分的聚合处理压力。优点是自由度高，可以满足数据分析师的实时自助分析需求，减轻了计算引擎的处理压力；缺点是必须要求消息队列中保存存量数据，且因为是将计算部分的压力转移到了查询层，对查询引擎的吞吐和实时摄入性能要求较高。</p>
</blockquote>
<p><img src="/images/cdc/structure_olap.png"></p>
<h3 id="数据湖架构"><a href="#数据湖架构" class="headerlink" title="数据湖架构"></a>数据湖架构</h3><blockquote>
<p>存储、计算和查询，分别由三个独立产品负责，分别是数据湖、Flink 和 Clickhouse。数仓分层存储和维度表管理均由数据湖承担，Flink SQL 负责批流任务的 SQL 化协同开发，Clickhouse 实现变体的事务机制，为用户提供离线分析和交互查询。CDC 到消息队列这一链路将来是完全可以去掉的，只需要 Flink CDC 家族中再添加 Oracle CDC 一员。未来，实时数仓架构将得到极致的简化并且性能有质的提升。</p>
</blockquote>
<p><img src="/images/cdc/structure_rtdb.png"></p>
]]></content>
      <categories>
        <category>cdc</category>
      </categories>
      <tags>
        <tag>point</tag>
      </tags>
  </entry>
  <entry>
    <title>clickhouse points</title>
    <url>/2021/12/29/clickhouse/</url>
    <content><![CDATA[<h2 id="存储架构"><a href="#存储架构" class="headerlink" title="存储架构"></a>存储架构</h2><blockquote>
<p>Clickhouse 存储中的最小单位是 DataPart，写入链路为了提升吞吐，放弃了部分写入实时可见性，即数据攒批写入，一次批量写入的数据会落盘成一个 DataPart.</p>
<p>它不像 Druid 那样一条一条实时摄入。但 ClickHouse 把数据延迟攒批写入的工作交给来客户端实现，比如达到 10 条记录或每过 5s 间隔写入，换句话说就是可以在用户侧平衡吞吐量和时延，如果在业务高峰期流量不是太大，可以结合实际场景将参数调小，以达到极致的实时效果。</p>
</blockquote>
<h2 id="查询架构"><a href="#查询架构" class="headerlink" title="查询架构"></a>查询架构</h2><h3 id="计算能力方面"><a href="#计算能力方面" class="headerlink" title="计算能力方面"></a>计算能力方面</h3><p>Clickhouse 采用向量化函数和 aggregator 算子极大地提升了聚合计算性能，配合完备的 SQL 能力使得数据分析变得更加简单、灵活。</p>
<h3 id="数据扫描方面"><a href="#数据扫描方面" class="headerlink" title="数据扫描方面"></a>数据扫描方面</h3><p>ClickHouse 是完全列式的存储计算引擎，而且是以有序存储为核心，在查询扫描数据的过程中，首先会根据存储的有序性、列存块统计信息、分区键等信息推断出需要扫描的列存块，然后进行并行的数据扫描，像表达式计算、聚合算子都是在正规的计算引擎中处理。从计算引擎到数据扫描，数据流转都是以列存块为单位，高度向量化的。</p>
<h3 id="高并发服务方面"><a href="#高并发服务方面" class="headerlink" title="高并发服务方面"></a>高并发服务方面</h3><p>Clickhouse 的并发能力其实是与并行计算量和机器资源决定的。如果查询需要扫描的数据量和计算复杂度很大，并发度就会降低，但是如果保证单个 query 的 latency 足够低（增加内存和 cpu 资源），部分场景下用户可以通过设置合适的系统参数来提升并发能力，比如 max_threads 等。其他分析型系统（例如 Elasticsearch）的并发能力为什么很好，从 Cache 设计层面来看，ES 的 Cache 包括 Query Cache, Request Cache，Data Cache，Index Cache，从查询结果到索引扫描结果层层的 Cache 加速，因为 Elasticsearch 认为它的场景下存在热点数据，可能被反复查询。反观 ClickHouse，只有一个面向 IO 的 UnCompressedBlockCache 和系统的 PageCache，为了实现更优秀的并发，我们很容易想到在 Clickhouse 外面加一层 Cache，比如 redis，但是分析场景下的数据和查询都是多变的，查询结果等 Cache 都不容易命中，而且在广投业务中实时查询的数据是基于 T 之后不断更新的数据，如果外挂缓存将降低数据查询的时效性。</p>
<h2 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h2><h3 id="唯一键约束"><a href="#唯一键约束" class="headerlink" title="唯一键约束"></a>唯一键约束</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> qilu.t_01(</span><br><span class="line">	C1 String,</span><br><span class="line">	C2 String,</span><br><span class="line">	C3 String,</span><br><span class="line">	C4 <span class="type">Date</span>,</span><br><span class="line">	<span class="keyword">PRIMARY</span> KEY (C1) # 要设置主键</span><br><span class="line">) engine<span class="operator">=</span>ReplacingMergeTree() # 引擎要用ReplacingMergeTree</span><br><span class="line"> <span class="keyword">ORDER</span> <span class="keyword">BY</span> C1; # 要设置排序</span><br><span class="line"></span><br><span class="line">optimize <span class="keyword">table</span> t_01 <span class="keyword">FINAL</span>; # 要强制合并分区</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>clickhouse</category>
      </categories>
      <tags>
        <tag>point</tag>
      </tags>
  </entry>
  <entry>
    <title>挖矿程序</title>
    <url>/2019/07/31/coin/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">config.json （挖矿配置）、</span><br><span class="line">sysupdate （XMR 挖矿软件）、</span><br><span class="line">update.sh （本脚本）、</span><br><span class="line">networkservice(scanner扫描并入侵其他的主机)、</span><br><span class="line">sysguard(watchdog 用于监控并保证病毒的正常运行以及更新) 并保证他们以 root 权限运行。</span><br></pre></td></tr></table></figure>

<ol>
<li><p>查看病毒的 PID 号</p>
</li>
<li><p>获取绝对路径</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls -l /proc/&#123;pid 号&#125;/exe</span><br></pre></td></tr></table></figure></li>
<li><p>删除/tmp文件夹的所有文件</p>
</li>
<li><p>检查下定时任务</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">crontab -l 或者 cat /var/spool/cron/will</span><br></pre></td></tr></table></figure>

<p>上面的will为当前用户名</p>
<p>查看定时任务的日志</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">more /var/<span class="built_in">log</span>/cron <span class="built_in">log</span></span><br></pre></td></tr></table></figure></li>
<li><p>删除定时任务</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">rm /var/spool/cron/root 或者 crontab -r 删除定时任务</span><br></pre></td></tr></table></figure></li>
<li><p>kill 命令将相关进程干掉</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sysupdate</span><br><span class="line">networkservice</span><br><span class="line">sysguard</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>snippet</tag>
      </tags>
  </entry>
  <entry>
    <title>neo4j snippet</title>
    <url>/2018/01/21/course%20snippet/</url>
    <content><![CDATA[<p>高并发处理技术老司机带你玩RabbitMq实现性能倍增<br>链接：<a href="https://pan.baidu.com/s/1tdWyeXgXzbWsltY8NlhdaQ">https://pan.baidu.com/s/1tdWyeXgXzbWsltY8NlhdaQ</a></p>
<p>密码：ripd</p>
<p>缓存那些事,缓存一致性问题爬坑记<br>链接：<a href="https://pan.baidu.com/s/10aX13k6GjIr7XUcrb6j-Pw">https://pan.baidu.com/s/10aX13k6GjIr7XUcrb6j-Pw</a></p>
<p>密码：f5kl</p>
<p>分布式事务处理你不得不听的踩坑故事－让你的代码经得起考验<br>链接：<a href="https://pan.baidu.com/s/1PeiCr0DYMI7x4LwGJktrOg">https://pan.baidu.com/s/1PeiCr0DYMI7x4LwGJktrOg</a></p>
<p>密码：phsp</p>
<p>大咖带你玩转分布式锁 Zookeeper篇<br>链接：<a href="https://pan.baidu.com/s/1Nh8mTrLNwtmh4hwU2khksg">https://pan.baidu.com/s/1Nh8mTrLNwtmh4hwU2khksg</a></p>
<p>密码：fznh</p>
]]></content>
      <categories>
        <category>course</category>
      </categories>
      <tags>
        <tag>resource</tag>
      </tags>
  </entry>
  <entry>
    <title>css snippet</title>
    <url>/2016/01/16/css%20snippet/</url>
    <content><![CDATA[<h3 id="display"><a href="#display" class="headerlink" title="display"></a>display</h3><p>每个元素都有一个默认的 display 类型<br>不过你可以随时随地的重写它！如常见的例子是：把 li 元素修改成 inline，制作成水平菜单。</p>
<p>p标签是块级元素，span元素是行内元素。内元素可以写在块级元素里面  比如<code>&lt;p&gt;&lt;span&gt;内容&lt;/span&gt;&lt;/p&gt;</code></p>
<ul>
<li>block</li>
</ul>
<p>值为block的为块级元素， 如：p、form、header、footer、section</p>
<ul>
<li>inline</li>
</ul>
<p>值为inline的为行内元素</p>
<h3 id="position"><a href="#position" class="headerlink" title="position"></a>position</h3><ul>
<li>static</li>
</ul>
<p>static是默认值，一个static元素表示它不会被”positioned”,一个position属性被设置为其它值得元素表示它会被”positioned”</p>
<ul>
<li>relative</li>
</ul>
<p>relative,在一个相对定位（position属性的值为relative）的元素上设置 top 、 right 、 bottom 和 left 属性会使其偏离其正常位置。<br>其他的元素的位置则不会受该元素的影响发生位置改变来弥补它偏离后剩下的空隙。</p>
<ul>
<li>fixed</li>
</ul>
<p>fixed,一个固定定位（position属性的值为fixed）元素会相对于视窗来定位，这意味着即便页面滚动，它还是会停留在相同的位置。<br>和 relative 一样， top 、 right 、 bottom 和 left 属性都可用。</p>
<ul>
<li>absolute</li>
</ul>
<p>absolute, 它与 fixed 的表现类似，但是它不是相对于视窗而是相对于最近的“positioned”祖先元素。<br>如果绝对定位（position属性的值为absolute）的元素没有“positioned”祖先元素，那么它是相对于文档的 body 元素，并且它会随着页面滚动而移动。<br>记住一个“positioned”元素是指 position 值不是 static 的元素。</p>
<h3 id="mbp"><a href="#mbp" class="headerlink" title="mbp"></a>mbp</h3><p><img src="https://mdn.mozillademos.org/files/13647/box-model-standard-small.png"></p>
<ul>
<li><p>margin</p>
<blockquote>
<p>是设置两个标签的间隔，也就是距离</p>
</blockquote>
</li>
<li><p>padding</p>
<blockquote>
<p>比如一个p标签，它是100px*100px,我们使用的时候p标签的文字是贴着p标签的最左侧的，想要它的文字距离边界远一点，好看一点，就是需要做一个样式的调整，我们可以用到padding这个属性，假如说设置是10px，就是说这个p标签的大小依然是100px*100px，但是它的内容是变成了90px*90px；</p>
</blockquote>
</li>
<li><p>border</p>
<blockquote>
<p>boarder是设置边框的意思，他和padding的区别在于，padding是在标签边缘往里缩减，而border是在标签的边缘往外扩展，也就是说是一个100px*100px的标签，我设置他的border为20px，我们就可以看到整个标签的大小是变成了120px*120px，也就是说多出来了120px，其标签的内容也还是100px*100px的</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>snippet</tag>
      </tags>
  </entry>
  <entry>
    <title>design pattern-build</title>
    <url>/2018/05/01/design%20pattern-build/</url>
    <content><![CDATA[<h3 id="build"><a href="#build" class="headerlink" title="build"></a>build</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Computer</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Computer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//required parameters</span></span><br><span class="line"><span class="keyword">private</span> String HDD;</span><br><span class="line"><span class="keyword">private</span> String RAM;</span><br><span class="line"></span><br><span class="line"><span class="comment">//optional parameters</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> isGraphicsCardEnabled;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> isBluetoothEnabled;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getHDD</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> HDD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getRAM</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> RAM;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isGraphicsCardEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> isGraphicsCardEnabled;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isBluetoothEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> isBluetoothEnabled;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Computer</span><span class="params">(ComputerBuilder builder)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.HDD=builder.HDD;</span><br><span class="line">    <span class="keyword">this</span>.RAM=builder.RAM;</span><br><span class="line">    <span class="keyword">this</span>.isGraphicsCardEnabled=builder.isGraphicsCardEnabled;</span><br><span class="line">    <span class="keyword">this</span>.isBluetoothEnabled=builder.isBluetoothEnabled;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Builder Class</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ComputerBuilder</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// required parameters</span></span><br><span class="line">    <span class="keyword">private</span> String HDD;</span><br><span class="line">    <span class="keyword">private</span> String RAM;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// optional parameters</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isGraphicsCardEnabled;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isBluetoothEnabled;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ComputerBuilder</span><span class="params">(String hdd, String ram)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.HDD=hdd;</span><br><span class="line">        <span class="keyword">this</span>.RAM=ram;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ComputerBuilder <span class="title">setGraphicsCardEnabled</span><span class="params">(<span class="keyword">boolean</span> isGraphicsCardEnabled)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.isGraphicsCardEnabled = isGraphicsCardEnabled;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ComputerBuilder <span class="title">setBluetoothEnabled</span><span class="params">(<span class="keyword">boolean</span> isBluetoothEnabled)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.isBluetoothEnabled = isBluetoothEnabled;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Computer <span class="title">build</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Computer(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ComputerBuilder</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.journaldev.design.builder.Computer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBuilderPattern</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//Using builder to get the object in a single line of code and </span></span><br><span class="line">            <span class="comment">//without any inconsistent state or arguments management issues        </span></span><br><span class="line">    Computer comp = <span class="keyword">new</span> Computer.ComputerBuilder(</span><br><span class="line">            <span class="string">&quot;500 GB&quot;</span>, <span class="string">&quot;2 GB&quot;</span>).setBluetoothEnabled(<span class="keyword">true</span>)</span><br><span class="line">            .setGraphicsCardEnabled(<span class="keyword">true</span>).build();</span><br><span class="line">&#125;</span><br><span class="line">&#125; ```</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>design pattern</category>
      </categories>
      <tags>
        <tag>code</tag>
      </tags>
  </entry>
  <entry>
    <title>docker container</title>
    <url>/2021/12/13/docker%20container/</url>
    <content><![CDATA[<h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">查看正在运行</span><br><span class="line">docker ps</span><br><span class="line">查看所有</span><br><span class="line">docker ps -a</span><br><span class="line">启动</span><br><span class="line">docker start 容器名或容器 id</span><br><span class="line">终止</span><br><span class="line">docker stop [NAME]/[CONTAINER ID]:将容器退出。</span><br><span class="line">docker kill [NAME]/[CONTAINER ID]:强制停止一个容器。</span><br><span class="line"></span><br><span class="line">查看容器端口</span><br><span class="line">docker port 容器名或容器id</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">删除</span><br><span class="line">docker rm -f 容器id</span><br><span class="line">导出</span><br><span class="line">docker export 容器id &gt; xxx.tar</span><br><span class="line">导入</span><br><span class="line">docker import - test/xxx:v1</span><br><span class="line">重启</span><br><span class="line">docker restart $container_id</span><br><span class="line">日志</span><br><span class="line">docker logs $container_id</span><br></pre></td></tr></table></figure>

<h3 id="查看container现在工作网络模式"><a href="#查看container现在工作网络模式" class="headerlink" title="查看container现在工作网络模式"></a>查看container现在工作网络模式</h3><ul>
<li><p>列出docker的所有网络模式</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker network ls</span><br></pre></td></tr></table></figure></li>
<li><p>针对bridge和host分别查找有哪些container在其中</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker network inspect bridge</span><br><span class="line">docker network inspect host</span><br></pre></td></tr></table></figure></li>
<li><p>直接查看container的信息，找到network段查看。或者用grep筛选出network。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker inspect 容器名/容器ID</span><br><span class="line">docker inspect 容器名/容器ID | grep -i “network” # 其中grep的“-i”表示不区分大小写。</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="Exit-Codes"><a href="#Exit-Codes" class="headerlink" title="Exit Codes"></a>Exit Codes</h4><p>Common exit codes associated with docker containers are:</p>
<ul>
<li><p><strong>Exit Code 0</strong>: Absence of an attached foreground process</p>
</li>
<li><p><strong>Exit Code 1</strong>: Indicates failure due to application error</p>
</li>
<li><p><strong>Exit Code 137</strong>: Indicates failure as container received SIGKILL (Manual intervention or ‘oom-killer’ [OUT-OF-MEMORY])</p>
</li>
<li><p><strong>Exit Code 139</strong>: Indicates failure as container received SIGSEGV</p>
</li>
<li><p><strong>Exit Code 143</strong>: Indicates failure as container received SIGTERM</p>
</li>
<li><p><strong>Exit Code 126</strong>: Permission problem or command is not executable</p>
</li>
<li><p><strong>Exit Code 127</strong>: Possible typos in shell script with unrecognizable characters</p>
</li>
</ul>
<h3 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h3><ul>
<li><p>密码123456</p>
</li>
<li><p>创建容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --name mysql-server -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7</span><br><span class="line">注意：</span><br><span class="line">-d:让容器在后台运行</span><br><span class="line">-P(大写):是容器内部端口随机映射到主机的高端口</span><br><span class="line">-p(小写):是容器内部端口绑定到指定的主机端口</span><br></pre></td></tr></table></figure></li>
<li><p>进入容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it mysql-server /bin/bash</span><br><span class="line">或</span><br><span class="line">docker exec -it mysql-server /bin/sh</span><br></pre></td></tr></table></figure></li>
<li><p>访问</p>
<p><code>docker exec -it mysql-server mysql -uroot -p</code></p>
</li>
<li><p>修改root 可以通过任何客户端连接</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;123456&#x27;;</span><br></pre></td></tr></table></figure></li>
<li><p>从外部访问docker mysql-server</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -h127.0.0.1 -P3306 -uroot -p</span><br></pre></td></tr></table></figure></li>
<li><p>导入sql文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">先将文件导入到容器</span><br><span class="line">#docker cp **.sql 容器名:/root/</span><br><span class="line">进入容器</span><br><span class="line">#docker exec -ti 容器名或ID sh</span><br><span class="line">登录数据库</span><br><span class="line"># mysql -uroot -p </span><br><span class="line">将文件导入数据库</span><br><span class="line">source 数据库名 &lt; /root/***.sql</span><br></pre></td></tr></table></figure></li>
<li><p>导出数据库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it  mysql-server（容器名） mysqldump -uroot -p123456 数据库名称 &gt; /opt/sql_bak/test_db.sql（导出表格路径）</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="portainer"><a href="#portainer" class="headerlink" title="portainer"></a>portainer</h3><ul>
<li><p>密码重置</p>
<ul>
<li><p>下载帮助镜像portainer/helper-reset-password</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull portainer/helper-reset-password</span><br></pre></td></tr></table></figure></li>
<li><p>停止运行的portainer</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker stop &quot;id-portainer-container&quot;</span><br></pre></td></tr></table></figure></li>
<li><p>运行重置命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --rm -v portainer_data:/data portainer/helper-reset-password</span><br></pre></td></tr></table></figure></li>
<li><p>结果</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="number">2020</span>/<span class="number">06</span>/<span class="number">04</span> <span class="number">00</span>:<span class="number">13</span>:<span class="number">58</span> Password successfully updated <span class="keyword">for</span> user: admin</span><br><span class="line"><span class="number">2020</span>/<span class="number">06</span>/<span class="number">04</span> <span class="number">00</span>:<span class="number">13</span>:<span class="number">58</span> Use the following password to login: &amp;<span class="number">_4</span>#\<span class="number">3</span>^<span class="number">5</span>V8vLTd)E<span class="string">&quot;NWiJBs26G*9HPl1</span></span><br></pre></td></tr></table></figure></li>
<li><p>重新运行portainer,密码 为👆重置的 &amp;_4#\3^5V8vLTd)E”NWiJBs26G*9HPl1</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker start &quot;id-portainer-container&quot;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>现在密码为 admin/admin</p>
</li>
<li><p>重新安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo docker run -d -p 8000:8000 -p 9443:9443 --name portainer \</span><br><span class="line">    --restart=always \</span><br><span class="line">    -v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">    -v portainer_data:/data \</span><br><span class="line">    cr.portainer.io/portainer/portainer-ce:2.9.3</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="nacos"><a href="#nacos" class="headerlink" title="nacos"></a>nacos</h3><ul>
<li>run<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d --name nacos -p 8848:8848 -e PREFER_HOST_MODE=hostname -e MODE=standalone nacos/nacos-server</span><br></pre></td></tr></table></figure>

<ul>
<li>Linux memory is insufficient<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -e JVM_XMS=256m -e JVM_XMX=256m --env MODE=standalone --name nacos -d -p 8848:8848 nacos/nacos-server</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h3><blockquote>
<p>使用docker-compose up redis启动容器时，如果配置自定义配置文件 redis.conf，需要设置</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bind 0.0.0.0</span><br><span class="line">daemonize no</span><br></pre></td></tr></table></figure>

<blockquote>
<p>docker-compose.yml文件内容</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.7&quot;</span>                                                                            <span class="attr">services:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&quot;redis:alpine&quot;</span></span><br><span class="line">    <span class="attr">stdin_open:</span> <span class="literal">true</span> <span class="comment">#打开标准输入，可以接受外部输入。</span></span><br><span class="line">    <span class="attr">tty:</span> <span class="literal">true</span>  <span class="comment">#模拟一个伪终端。</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/docker/projects/test/redis.conf:/data/redis.conf</span> <span class="comment"># 主机路径:容器路径</span></span><br><span class="line">    <span class="comment">#   - /docker/projects/test/redis/data:/data</span></span><br><span class="line">    <span class="comment">#   - /docker/projects/test/redis/logs:/logs</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">redis-server</span> <span class="string">--include</span> <span class="string">/data/redis.conf</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用 docker-compose –verbose up redis启动，可查看启动详情</p>
</blockquote>
<h3 id="修改已有容器的端口映射"><a href="#修改已有容器的端口映射" class="headerlink" title="修改已有容器的端口映射"></a>修改已有容器的端口映射</h3><ol>
<li><p>停止容器 </p>
</li>
<li><p>停止docker服务(systemctl stop docker) </p>
</li>
<li><p>修改这个容器的hostconfig.json文件中的端口（原帖有人提到，如果config.v2.json里面也记录了端口，也要修改）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /var/lib/docker/3b6ef264a040* #这里是CONTAINER ID</span><br><span class="line">vi hostconfig.json</span><br><span class="line">如果之前没有端口映射, 应该有这样的一段:</span><br><span class="line">&quot;PortBindings&quot;:&#123;&#125;</span><br><span class="line">增加一个映射, 这样写:</span><br><span class="line">&quot;PortBindings&quot;:&#123;&quot;3306/tcp&quot;:[&#123;&quot;HostIp&quot;:&quot;&quot;,&quot;HostPort&quot;:&quot;3307&quot;&#125;]&#125;</span><br><span class="line">前一个数字是容器端口, 后一个是宿主机端口. </span><br><span class="line">而修改现有端口映射更简单, 把端口号改掉就行.</span><br></pre></td></tr></table></figure></li>
<li><p>启动docker服务(systemctl start docker) </p>
</li>
<li><p>启动容器</p>
</li>
</ol>
<h3 id="配置容器的镜像源（安装vim）"><a href="#配置容器的镜像源（安装vim）" class="headerlink" title="配置容器的镜像源（安装vim）"></a>配置容器的镜像源（安装vim）</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mv /etc/apt/sources.list /etc/apt/sources.list.bak</span><br><span class="line"></span><br><span class="line">echo &quot;deb http://mirrors.163.com/debian/ jessie main non-free contrib&quot; &gt;/etc/apt/sources.list</span><br><span class="line"></span><br><span class="line">echo &quot;deb http://mirrors.163.com/debian/ jessie-proposed-updates main non-free contrib&quot; &gt;&gt;/etc/apt/sources.list</span><br><span class="line"></span><br><span class="line">echo &quot;deb-src http://mirrors.163.com/debian/ jessie main non-free contrib&quot; &gt;&gt;/etc/apt/sources.list</span><br><span class="line"></span><br><span class="line">echo &quot;deb-src http://mirrors.163.com/debian/ jessie-proposed-updates main non-free contrib&quot; &gt;&gt;/etc/apt/sources.list </span><br><span class="line"><span class="meta">#</span><span class="bash">更新安装源</span> </span><br><span class="line">apt-get update </span><br><span class="line"><span class="meta">#</span><span class="bash">如果下载过程中卡在[waiting <span class="keyword">for</span> headers] 删除/var/cache/apt/archives/下的所有文件</span> </span><br><span class="line"><span class="meta">#</span><span class="bash">安装vim</span> </span><br><span class="line">apt-get install vim</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>snippet</tag>
      </tags>
  </entry>
  <entry>
    <title>docker compose</title>
    <url>/2021/12/17/docker%20compose/</url>
    <content><![CDATA[<h3 id="Docker-File-vs-Docker-Compose"><a href="#Docker-File-vs-Docker-Compose" class="headerlink" title="Docker File vs Docker Compose"></a>Docker File vs Docker Compose</h3><p>Dockerfile is what’s used to create a container image, and a Compose file is what’s used to deploy an instance of that image as a container.</p>
<blockquote>
<p>Compose 是用于定义和运行多容器 Docker 应用程序的工具。通过 Compose，您可以使用 YML 文件来配置应用程序需要的所有服务。然后，使用一个命令，就可以从 YML 文件配置中创建并启动所有服务。</p>
</blockquote>
<h4 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h4><p>Dockerfile the predecessor of a container image. You build an image from a Dockerfile. A typical Dockerfile contains special build instructions, commands like <code>RUN</code>, <code>ADD</code>, <code>COPY</code>, <code>ENTRYPOINT</code>, etc.</p>
<h4 id="Compose-file"><a href="#Compose-file" class="headerlink" title="Compose file"></a>Compose file</h4><p>Compose files are used in two types of deployments: in the non-cluster deployment with <code>docker-compose</code> and a cluster deployment with <code>docker swarm</code>.</p>
<p>Compose files are used in two types of deployments: in the non-cluster deployment with <code>docker-compose</code> and a cluster deployment with <code>docker swarm</code>.</p>
<p>To distinguish the two types, I’m going to address the compose file responsible for cluster deployment as stack files. I’ll talk about stack files in a moment.</p>
<p>Compose files are part of a tool called <code>docker-compose</code>. It’s a client application to the docker daemon server, kind of like the <code>docker</code> CLI client, but instead of typing the whole <code>run</code> commands every time, with <code>docker-compose</code> you can re-use the same YAML file over and over again, and deploy the same container with the same configuration as you did in the first time.</p>
<p>It’s more readable, more maintainable, more intuitive. A single compose file can contain multiple container deployment configurations.</p>
<ul>
<li><p>执行<code>docker-compose up</code>，报错</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">Couldn’t connect to Docker daemon at http+docker:<span class="comment">//localhost - is it running?</span></span><br></pre></td></tr></table></figure>

<p>其中<code>docker-compose.yml</code>信息如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.7&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;5000:5000&quot;</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&quot;redis:alpine&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>解决，使用sudo权限</p>
<ol>
<li><p>Add user to docker group (if not already added)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo usermod -aG docker $USER</span><br></pre></td></tr></table></figure></li>
<li><p>create a symbolic link to /usr/bin using the following command</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose</span><br></pre></td></tr></table></figure></li>
<li><p>Restart docker service</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo service docker restart</span><br></pre></td></tr></table></figure></li>
<li><p>execute</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo docker-compose up</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
</li>
</ul>
<p>运行docker compose up或docker compose up -d(后台运行)运行您的整个应用程序。 <code>注意：每次修改任一配置文件后，都要使用 docker-compose up --build 重新构建</code></p>
<blockquote>
<p>有了docker-compose，当我们想启动多个服务时，无需再一个一个进行docker run操作，而只需要编写docker-compose.yml配置文件，即可一次运行你的全部服务。</p>
</blockquote>
<hr>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>docker-compose build</td>
<td>(构建yml中某个服务的镜像)</td>
</tr>
<tr>
<td>docker-compose ps</td>
<td>(查看已经启动的服务状态）</td>
</tr>
<tr>
<td>docker-compose kill</td>
<td>(停止某个服务）</td>
</tr>
<tr>
<td>docker-compose logs</td>
<td>(可以查看某个服务的log）</td>
</tr>
<tr>
<td>docker-compose port</td>
<td>(打印绑定的public port）</td>
</tr>
<tr>
<td>docker-compose pull</td>
<td>(pull服务镜像)</td>
</tr>
<tr>
<td>docker-compose up</td>
<td>(启动yml定义的所有服务）</td>
</tr>
<tr>
<td>docker-compose stop</td>
<td>(停止yml中定义的所有服务）</td>
</tr>
<tr>
<td>docker-compose start</td>
<td>(启动被停止的yml中的所有服务）</td>
</tr>
<tr>
<td>docker-compose kill</td>
<td>(强行停止yml中定义的所有服务）</td>
</tr>
<tr>
<td>docker-compose rm</td>
<td>（删除yml中定义的所有服务）</td>
</tr>
<tr>
<td>docker-compose restart</td>
<td>(重启yml中定义的所有服务）</td>
</tr>
<tr>
<td>docker-compose scale</td>
<td>(扩展某个服务的个数，可以向上或向下）</td>
</tr>
<tr>
<td>docker-compose version</td>
<td>（查看compose的版本）</td>
</tr>
</tbody></table>
<p>日志输出  </p>
<p>终端输出：<code>docker-compose --verbose up $service_name</code></p>
<p>或者docker-compose.yml配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">stdin_open: true</span><br><span class="line">tty: true</span><br></pre></td></tr></table></figure>





<h3 id="镜像重新编译"><a href="#镜像重新编译" class="headerlink" title="镜像重新编译"></a>镜像重新编译</h3><p>如果修改了 Dockerfile内容里面相关的信息，需要重新编译镜像，如果使用docker compose，则需要使用命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker-compose up --build</span><br></pre></td></tr></table></figure>



<h3 id="后台运行"><a href="#后台运行" class="headerlink" title="后台运行"></a>后台运行</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>snippet</tag>
      </tags>
  </entry>
  <entry>
    <title>docker es</title>
    <url>/2021/12/17/docker%20image%20es/</url>
    <content><![CDATA[<blockquote>
<p>文中hostAddress需要替换具体的ip地址</p>
</blockquote>
<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><blockquote>
<p>查看现有环境相关参数ulimit -a</p>
</blockquote>
<ul>
<li><p>设置文件句柄数，在**/etc/security/limits.conf**中设置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># End of file</span><br><span class="line">* hard nofile 65536</span><br><span class="line">* soft nofile 65536</span><br></pre></td></tr></table></figure></li>
<li><p>修改max user processes进程数，在**/etc/security/limits.conf**中设置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* soft nproc 65536</span><br><span class="line">* hard nproc 65536</span><br></pre></td></tr></table></figure></li>
<li><p>调整vm.max_map_count的大小，该参数会限制一个进程可以拥有的VMA(虚拟内存区域)的数量</p>
<p>通过修改**/etc/sysctl.conf**参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vm.max_map_count=655360</span><br></pre></td></tr></table></figure>

<p>然后执行<code>sysctl -p</code></p>
</li>
<li><p>调整stack size的大小（可选），在**/etc/security/limits.conf**中设置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* soft stack 1024</span><br><span class="line">* hard stack 1024</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="manual-init-data"><a href="#manual-init-data" class="headerlink" title="manual init data"></a>manual init data</h3><ul>
<li><p>create index</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -H &#x27;Content-Type: application/json&#x27; -d &#x27;@/data/es_mapping.json&#x27; -X PUT &#x27;http://localhost:9200/indexName&#x27;</span><br></pre></td></tr></table></figure></li>
<li><p>import data</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -H &#x27;Content-Type: application/json&#x27; --data-binary &#x27;@/data/es_init_data.txt&#x27; &#x27;http://localhost:9200/_bulk&#x27;</span><br></pre></td></tr></table></figure></li>
</ul>
<ul>
<li><p>拉取远程仓库镜像文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull hostAddress/dlabel/service:elasticsearch</span><br></pre></td></tr></table></figure></li>
<li><p>启动容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo docker run -d --name es_origin -e ES_JAVA_POTS=&quot;-Xms6g -Xmx6g&quot; -p 9200:9200 -p 9300:9300 -e &quot;discovery.type=single-node&quot; docker.elastic.co/elasticsearch/elasticsearch:7.16.1</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="制作elasticsearch镜像"><a href="#制作elasticsearch镜像" class="headerlink" title="制作elasticsearch镜像"></a>制作elasticsearch镜像</h3><ol>
<li>导出ES的已有索引和数据</li>
</ol>
<ul>
<li><p>环境准备</p>
<ul>
<li>安装nodejs，安装文件地址<a href="https://nodejs.org/en/download/">nodejs</a></li>
<li>安装elasticdump，安装命令<code>npm install -g elasticdump</code></li>
</ul>
</li>
<li><p>导出es索引文件<strong>es_mapping.json</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">/$</span><span class="bash">nodejs_home/lib/node_modules/elasticdump/bin/elasticdump \               --input=http://127.0.0.1:9200/indexName \</span></span><br><span class="line"><span class="bash">  --output=/data/es_mapping.json \</span></span><br><span class="line"><span class="bash">  --<span class="built_in">type</span>=mapping</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：$nodejs_home代表nodejs的安装目录</p>
</blockquote>
</li>
<li><p>导出es数据<strong>es_init_data.txt</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">/$</span><span class="bash">nodejs_home/lib/node_modules/elasticdump/bin/elasticdump \ </span>          </span><br><span class="line">  --input=http://127.0.0.1:9200/indexName \</span><br><span class="line">  --output=/data/es_init_data.txt \</span><br><span class="line">  --searchBody &#x27;&#123;&quot;query&quot;:&#123;&quot;match_all&quot;:&#123; &#125;&#125;&#125;&#x27;</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="2">
<li><p>编写es数据初始化脚本 <strong>initEs.sh</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">create index</span></span><br><span class="line">curl -H &#x27;Content-Type: application/json&#x27; -d &#x27;@/data/es_mapping.json&#x27; -X PUT &#x27;http://127.0.0.1:9200/indexName&#x27;</span><br><span class="line"><span class="meta">#</span><span class="bash">import data</span></span><br><span class="line">curl -H &#x27;Content-Type: application/json&#x27; --data-binary &#x27;@/data/es_init_data.txt&#x27; &#x27;http://127.0.0.1:9200/_bulk&#x27;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>initEs.sh文件同1,2操作中的文件存放路径保持一致，均放在/data目录下</p>
</blockquote>
</li>
<li><p>在/data目录下创建Dockerfile文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">FROM elasticsearch:7.16.1</span><br><span class="line">COPY ./data/* /data/</span><br><span class="line">RUN chown -R elasticsearch:root /data </span><br><span class="line">USER elasticsearch</span><br><span class="line">RUN elasticsearch -E discovery.type=single-node -p /tmp/epid &amp; /bin/bash /data/wait-for-it.sh -t 0 localhost:9200 -- /data/initEs.sh; kill $(cat /tmp/epid) &amp;&amp; wait $(cat /tmp/epid); exit 0;</span><br></pre></td></tr></table></figure></li>
<li><p>创建镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker build -t dlabel:elasticsearch .</span><br></pre></td></tr></table></figure>

<blockquote>
<p>dlabel:es是 REPOSITORY:TAG格式，可自行更改</p>
</blockquote>
</li>
<li><p>登录远程仓库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker login hostAddress</span><br></pre></td></tr></table></figure>

<p>根据提示，输入用户名admin，密码Harbor12345</p>
</li>
<li><p>映射远程仓库REPOSITORY:TAG</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker image tag dlabel:elasticsearch hostAddress/dlabel/service:elasticsearch</span><br></pre></td></tr></table></figure>

<blockquote>
<p>其中dlabel:elasticsearch和操作3中保持一致</p>
</blockquote>
</li>
<li><p>推送当地镜像到远程仓库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker push hostAddress/dlabel/service:elasticsearch</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>snippet</tag>
      </tags>
  </entry>
  <entry>
    <title>docker image mysql</title>
    <url>/2021/12/17/docker%20image%20mysql/</url>
    <content><![CDATA[<h2 id="mysql镜像制作"><a href="#mysql镜像制作" class="headerlink" title="mysql镜像制作"></a>mysql镜像制作</h2><ol>
<li><p>需要备份当前需要同步的全量数据</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it dlabel_mysql mysqldump -uroot -p123456 dls &gt; /path/to/backup.sql</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意事项：</p>
<p>其中dlabel_mysql，是在第二步中设置的name的名称</p>
<p>/path/to/backup.sql是导出sql的地址路径，根据操作系统不同，需要自行更改</p>
<p>假定以下操作是在/path/to的目录下</p>
</blockquote>
</li>
</ol>
<ol start="2">
<li><p>在/path/to目录下创建Dockerfile文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Derived from official mysql image (our base image)</span></span><br><span class="line">FROM mysql:5.7.30</span><br><span class="line"><span class="meta">#</span><span class="bash"> Add the content of the sql-scripts/ directory to your image</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> All scripts <span class="keyword">in</span> docker-entrypoint-initdb.d/ are automatically</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> executed during container startup</span></span><br><span class="line">COPY ./backup.sql /docker-entrypoint-initdb.d/</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意COPY指令中，backup.sql需要和操作1中的导出文件名保持一致</p>
</blockquote>
</li>
<li><p>创建镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker build -t dlabel:mysql20211216 .</span><br></pre></td></tr></table></figure>

<blockquote>
<p>dlabel:mysql20211216是 REPOSITORY:TAG格式，可自行更改</p>
</blockquote>
</li>
<li><p>登录远程仓库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker login hostAddress</span><br></pre></td></tr></table></figure>

<p>根据提示，输入用户名admin，密码Harbor12345</p>
</li>
<li><p>映射远程仓库REPOSITORY:TAG</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker image tag dlabel:mysql20211216 hostAddress/dlabel/service:mysql20211216</span><br></pre></td></tr></table></figure>

<blockquote>
<p>其中dlabel:mysql20211216和操作3中保持一致</p>
<p>hostAddress/dlabel/service:mysql20211216，格式为hostAddress/library/REPOSITORY:TAG，其中可自行修改service:mysql20211216名称</p>
</blockquote>
</li>
<li><p>推送当地镜像到远程仓库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker push hostAddress/dlabel/service:mysql20211216</span><br></pre></td></tr></table></figure></li>
<li><p>登录<strong><a href="http://hostaddress/">http://hostAddress</a></strong>查看镜像上传情况</p>
</li>
<li><p>在镜像详情界面，点击“拉取命名”按钮进行命令复制，在终端执行命令即可拉取该镜像</p>
</li>
</ol>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>snippet</tag>
      </tags>
  </entry>
  <entry>
    <title>docker image</title>
    <url>/2019/08/16/docker%20image/</url>
    <content><![CDATA[<h4 id="Docker-包括三个基本概念"><a href="#Docker-包括三个基本概念" class="headerlink" title="Docker 包括三个基本概念:"></a>Docker 包括三个基本概念:</h4><ul>
<li><strong>镜像（Image）</strong>：Docker 镜像（Image），就相当于是一个 root 文件系统。比如官方镜像 ubuntu:16.04 就包含了完整的一套 Ubuntu16.04 最小系统的 root 文件系统。</li>
<li><strong>容器（Container）</strong>：镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</li>
<li><strong>仓库（Repository）</strong>：仓库可看着一个代码控制中心，用来保存镜像。</li>
</ul>
<h3 id="操作镜像"><a href="#操作镜像" class="headerlink" title="操作镜像"></a>操作镜像</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">查找</span><br><span class="line">docker search xxx</span><br><span class="line">拉取</span><br><span class="line">docker pull xxx</span><br><span class="line">运行(容器)</span><br><span class="line">docker run xxx</span><br><span class="line">删除</span><br><span class="line">docker rmi xxx</span><br><span class="line"></span><br><span class="line">docker images : 列出本地镜像。</span><br><span class="line"></span><br><span class="line">语法</span><br><span class="line">docker images [OPTIONS] [REPOSITORY[:TAG]]</span><br><span class="line">OPTIONS说明：</span><br><span class="line">-a :列出本地所有的镜像（含中间映像层，默认情况下，过滤掉中间映像层）；</span><br><span class="line">–digests :显示镜像的摘要信息；</span><br><span class="line">-f :显示满足条件的镜像；</span><br><span class="line">–format :指定返回值的模板文件；</span><br><span class="line">–no-trunc :显示完整的镜像信息；</span><br><span class="line">-q :只显示镜像ID。</span><br></pre></td></tr></table></figure>

<ul>
<li><p>导出镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker save $REPOSITORY:$TAG &gt; $PATH/$NAME.tar</span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意$后面的变量需要替换</span></span><br></pre></td></tr></table></figure></li>
<li><p>导入镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker load --input $PATH/$NAME.tar</span><br></pre></td></tr></table></figure></li>
<li><p>在镜像中运行容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -it -p 8899:8899 --name test $REPOSITORY:$TAG</span><br><span class="line"></span><br><span class="line">-it：表示交互式终端的容器，非启动后立刻结束的容器</span><br><span class="line">--name test：给容器取个名字，嫌麻烦可以省去</span><br><span class="line"><span class="meta">$</span><span class="bash">REPOSITORY:<span class="variable">$TAG</span>：容器是用哪个镜像启动的（一个容器，必须依赖一个镜像启动）</span></span><br><span class="line">-v 指定了宿主机上的目录用来作为docker仓库的存储位置，如果不指定的话，registry镜像重启之后会丢失已经存储在本地仓库的镜像文件</span><br><span class="line">-p hostPort:containerPort</span><br><span class="line">-v hostVolume:containerVolume 这两个地址如果不存在都会创建，一旦容器运行，两部分会完全同步</span><br></pre></td></tr></table></figure>

<h4 id="volume"><a href="#volume" class="headerlink" title="volume"></a>volume</h4></li>
</ul>
<blockquote>
<p>Docker Image可以理解成多个只读文件叠加而成，因此Docker Image是只读的。</p>
<p>当我们将其运行起来，就相当于在只读的Image外包裹了一层读写层变成了容器。</p>
<p>当你删除容器之后，使用这个镜像重新创建一个容器，此时的镜像的只读层还和原来的一样，但是你在读写层的修改全部都会丢失（没有使用原有volume的前提下）。</p>
<p> docker使用volume实现数据的持久化，不仅如此volume还能帮助容器和容器之间，容器和host之间共享数据。</p>
</blockquote>
<ul>
<li><p>进入运行的容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it $CONTAINER_ID /bin/bash</span><br></pre></td></tr></table></figure>

<ul>
<li><p>注意</p>
<p>命令中的/bin/bash是根据<code> docker inspect $image_id</code>，根据”Cmd”配置项决定的</p>
</li>
</ul>
</li>
</ul>
<h3 id="把jar包程序制作成镜像"><a href="#把jar包程序制作成镜像" class="headerlink" title="把jar包程序制作成镜像"></a>把jar包程序制作成镜像</h3><ul>
<li><p>step1: </p>
<p>编辑dockerfile</p>
</li>
</ul>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 基础镜像</span></span><br><span class="line"><span class="keyword">FROM</span>  openjdk:<span class="number">8</span>-jre</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定路径</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /data/justMicroservice/learning-cloudalibaba</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ARG</span> JAR_FILE=nacos-provider/target/nacos-provider-<span class="number">0.0</span>.<span class="number">1</span>-SNAPSHOT.jar</span><br><span class="line"><span class="comment"># 复制jar文件到路径</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> <span class="variable">$&#123;JAR_FILE&#125;</span> nacos-provider.jar</span></span><br><span class="line"><span class="comment"># 启动网关服务</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;nacos-provider.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>Step2: </p>
<p>在$path的一级目录执行（比如dockerfile位置/a/b/dockerfile，那命令在a目录下执行）</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker build -t $repository -f $path/dockerfile .</span><br></pre></td></tr></table></figure>



<hr>
<h2 id="add-git-commit-info-to-image-tag"><a href="#add-git-commit-info-to-image-tag" class="headerlink" title="add git commit info to image tag"></a>add git commit info to image tag</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"></span><br><span class="line">IMAGE_NAME=your-image-name</span><br><span class="line">echo &quot;image name: $IMAGE_NAME&quot;</span><br><span class="line"></span><br><span class="line">GIT_BRANCH=$(git symbolic-ref --short HEAD)</span><br><span class="line">LAST_COMMIT=$(git rev-parse HEAD)</span><br><span class="line">echo &quot;git commit info : $LAST_COMMIT&quot;</span><br><span class="line"></span><br><span class="line">docker build . -t $IMAGE_NAME:&quot;$GIT_BRANCH-$LAST_COMMIT&quot;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>snippet</tag>
      </tags>
  </entry>
  <entry>
    <title>docker migration</title>
    <url>/2021/12/14/docker%20migration/</url>
    <content><![CDATA[<p>reference </p>
<p><a href="https://bobcares.com/blog/move-docker-container-to-another-host/">5 ways to move Docker container to another host</a></p>
<p><a href="https://morioh.com/p/d8d9e7732952">Build a Docker Image with MySQL Database</a></p>
<h2 id="Plan-A"><a href="#Plan-A" class="headerlink" title="Plan A"></a>Plan A</h2><h3 id="Step1-create-an-Image-From-a-Container"><a href="#Step1-create-an-Image-From-a-Container" class="headerlink" title="Step1    create an Image From a Container"></a>Step1    create an Image From a Container</h3><blockquote>
<p>Create a new image from a container’s changes</p>
<p><a href="https://docs.docker.com/engine/reference/commandline/commit/">commit command</a></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]</span><br></pre></td></tr></table></figure>

<ul>
<li><p>options</p>
<table>
<thead>
<tr>
<th>Name, shorthand</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td><code>--author</code> , <code>-a</code></td>
<td></td>
<td>Author (e.g., “will brook”)</td>
</tr>
<tr>
<td><code>--change</code> , <code>-c</code></td>
<td></td>
<td>Apply Dockerfile instruction to the created image</td>
</tr>
<tr>
<td><code>--message</code> , <code>-m</code></td>
<td></td>
<td>Commit message</td>
</tr>
<tr>
<td><code>--pause</code> , <code>-p</code></td>
<td><code>true</code></td>
<td>Pause container during commit</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="Step-2-export-the-image-to-a-file"><a href="#Step-2-export-the-image-to-a-file" class="headerlink" title="Step 2    export the image to a file"></a>Step 2    export the image to a file</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo docker save -o /path/to/your_image.tar your_image_name</span><br></pre></td></tr></table></figure>



<h3 id="Step-3-load-the-Docker-image-file"><a href="#Step-3-load-the-Docker-image-file" class="headerlink" title="Step 3 load the Docker image file"></a>Step 3 load the Docker image file</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo docker load -i your_image.tar</span><br></pre></td></tr></table></figure>





<hr>
<h2 id="Plan-B"><a href="#Plan-B" class="headerlink" title="Plan B"></a>Plan B</h2><h3 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h3><p>First save the new image by finding the container ID (using <a href="https://docs.docker.com/engine/reference/commandline/ps/"><code>docker container ls</code></a>) and then committing it to a new image name. Note that only <code>a-z0-9-_.</code> are allowed when naming images:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> create image from container</span></span><br><span class="line">docker container commit c16378f943fe rhel-httpd:latest</span><br></pre></td></tr></table></figure>

<h3 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h3><p> tag the image with the host name or IP address, and the port of the registry:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> re-tag repository:tag info about image</span></span><br><span class="line">docker image tag rhel-httpd:latest registry-host:5000/myadmin/rhel-httpd:latest</span><br><span class="line">or</span><br><span class="line">docker tag 0e5574283393 registry-host:5000/myadmin/rhel-httpd:latest</span><br></pre></td></tr></table></figure>

<h3 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h3><p>log in from Docker client:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker login &lt;harbor_address&gt;</span><br></pre></td></tr></table></figure>

<h3 id="Step-4"><a href="#Step-4" class="headerlink" title="Step 4"></a>Step 4</h3><p>push the image to the registry using the image ID. </p>
<p>In this example the registry is on host named <code>registry-host</code> and listening on port <code>5000</code>. (harbor默认配置端口80，详见harbor.yml)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> push repository:tag,</span></span><br><span class="line">docker image push registry-host:5000/myadmin/rhel-httpd:latest</span><br><span class="line">or</span><br><span class="line">docker push registry-host:5000/myname/myimage</span><br></pre></td></tr></table></figure>





<h2 id="Pull-Image-from-Harbor"><a href="#Pull-Image-from-Harbor" class="headerlink" title="Pull Image from Harbor"></a>Pull Image from Harbor</h2><p><a href="https://goharbor.io/docs/2.0.0/install-config/run-installer-script/#connect-http">Connecting to Harbor via HTTP</a></p>
<h3 id="Step-1-1"><a href="#Step-1-1" class="headerlink" title="Step 1"></a>Step 1</h3><p>add the option <code>--insecure-registry</code> to your client’s Docker daemon. By default, the daemon file is located at <code>/etc/docker/daemon.json</code>.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;insecure-registries&quot; : [&quot;ip:port&quot;, &quot;0.0.0.0&quot;] #如果port为80，则可省略</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Restart Docker Engine.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>

<h3 id="Step-2-1"><a href="#Step-2-1" class="headerlink" title="Step 2"></a>Step 2</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull hostAddress/library/REPOSITORY:TAG</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>learn</tag>
      </tags>
  </entry>
  <entry>
    <title>dockerFile</title>
    <url>/2021/12/17/dockerFile/</url>
    <content><![CDATA[<ul>
<li><p><strong>RUN</strong> is executed while the image is being build</p>
<p>while <strong>ENTRYPOINT</strong> is executed after the image has been built.</p>
</li>
</ul>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>snippet</tag>
      </tags>
  </entry>
  <entry>
    <title>docker solution</title>
    <url>/2019/08/16/docker%20solution/</url>
    <content><![CDATA[<h2 id="Manage-Docker-as-a-non-root-user"><a href="#Manage-Docker-as-a-non-root-user" class="headerlink" title="Manage Docker as a non-root user"></a>Manage Docker as a non-root user</h2><ol>
<li><p>Create the <code>docker</code> group.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo groupadd docker</span><br></pre></td></tr></table></figure></li>
<li><p>Add your user to the <code>docker</code> group.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo usermod -aG docker $USER</span><br></pre></td></tr></table></figure></li>
<li><p>Log out and log back in so that your group membership is re-evaluated.</p>
<p>If testing on a virtual machine, it may be necessary to restart the virtual machine for changes to take effect.</p>
<p>On a desktop Linux environment such as X Windows, log out of your session completely and then log back in.</p>
<p>On Linux, you can also run the following command to activate the changes to groups:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ newgrp docker </span><br></pre></td></tr></table></figure></li>
<li><p>Verify that you can run <code>docker</code> commands without <code>sudo</code>.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker run hello-world</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="Failed-to-load-listeners-no-sockets-found-via-socket-activation-make-sure-the-service-was-started-by-systemd"><a href="#Failed-to-load-listeners-no-sockets-found-via-socket-activation-make-sure-the-service-was-started-by-systemd" class="headerlink" title="Failed to load listeners: no sockets found via socket activation: make sure the service was started by systemd"></a>Failed to load listeners: no sockets found via socket activation: make sure the service was started by systemd</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">edit the docker’s systemd unit file and change the ExecStart:</span><br><span class="line">sudo systemctl edit docker.service</span><br><span class="line"></span><br><span class="line">edite The value ExecStart, change fd:// to unix://:</span><br><span class="line">[Service]</span><br><span class="line">ExecStart=</span><br><span class="line">ExecStart=/usr/bin/dockerd -H unix://</span><br></pre></td></tr></table></figure>

<h4 id="Error-creating-default-“bridge”-network-cannot-create-network-docker0-conflicts-with-network-docker0-networks-have-same-bridge-name"><a href="#Error-creating-default-“bridge”-network-cannot-create-network-docker0-conflicts-with-network-docker0-networks-have-same-bridge-name" class="headerlink" title="Error creating default “bridge” network: cannot create network (docker0): conflicts with network (docker0): networks have same bridge name"></a>Error creating default “bridge” network: cannot create network (docker0): conflicts with network (docker0): networks have same bridge name</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo rm -rf /var/lib/docker/network</span><br><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>snippet</tag>
      </tags>
  </entry>
  <entry>
    <title>dva learn</title>
    <url>/2019/04/11/dva%20learn/</url>
    <content><![CDATA[<p>dva = React-Router + Redux + Redux-saga</p>
<ul>
<li>路由： <a href="https://github.com/ReactTraining/react-router/tree/v2.8.1">React-Router</a></li>
<li>架构： <a href="https://github.com/reactjs/redux">Redux</a></li>
<li>异步操作： <a href="https://github.com/yelouafi/redux-saga">Redux-saga</a></li>
</ul>
<p><img src="./img/PPrerEAKbIoDZYr.png"></p>
<h3 id="State"><a href="#State" class="headerlink" title="State"></a>State</h3><p>tate 表示 Model 的状态数据</p>
<h3 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h3><p>Action 是一个普通 javascript 对象，它是改变 State 的唯一途径。</p>
<ul>
<li>action 必须带有 <code>type</code> 属性指明具体的行为，其它字段可以自定义，如果要发起一个 action 需要使用 <code>dispatch</code> 函数；需要注意的是 <code>dispatch</code> 是在组件 connect Models以后，通过 props 传入的。</li>
</ul>
<h3 id="dispatch"><a href="#dispatch" class="headerlink" title="dispatch"></a>dispatch</h3><p>dispatching function 是一个用于触发 action 的函数</p>
<ul>
<li><p>action 是改变 State 的唯一途径，但是action只描述了一个行为，而 dipatch 可以看作是触发这个行为的方式，而 Reducer 则是描述如何改变数据的。</p>
</li>
<li><p>connect Model 的组件通过 props 可以访问到 dispatch，可以调用 Model 中的 Reducer 或者 Effects.</p>
</li>
</ul>
<h3 id="Reducer"><a href="#Reducer" class="headerlink" title="Reducer"></a>Reducer</h3><p>Reducer函数接受两个参数：之前已经累积运算的结果和当前要被累积的值，返回的是一个新的累积结果。该函数把一个集合归并成一个单值。</p>
<ul>
<li>在 dva 中，reducers 聚合积累的结果是当前 model 的 state 对象。通过 actions 中传入的值，与当前 reducers 中的值进行运算获得新的值（也就是新的 state）。</li>
</ul>
<h3 id="Effect"><a href="#Effect" class="headerlink" title="Effect"></a>Effect</h3><p>Effect 被称为副作用，在我们的应用中，最常见的就是异步操作。</p>
<ul>
<li><p>它来自于函数编程的概念，之所以叫副作用是因为它使得我们的函数变得不纯，同样的输入不一定获得同样的输出。</p>
</li>
<li><p>dva 为了控制副作用的操作，将异步转成同步写法，从而将effects转为纯函数</p>
</li>
</ul>
<h3 id="Subscription"><a href="#Subscription" class="headerlink" title="Subscription"></a>Subscription</h3><p>Subscriptions 是一种从 <strong>源</strong> 获取数据的方法，它来自于 elm。</p>
<ul>
<li>Subscription 语义是订阅，用于订阅一个数据源，然后根据条件 dispatch 需要的 action。</li>
</ul>
<h3 id="数据流图"><a href="#数据流图" class="headerlink" title="数据流图"></a>数据流图</h3><p><img src="./img/hUFIivoOFjVmwNXjjfPE.png"></p>
<ul>
<li><p>State 是储存数据的地方，收到 Action 以后，会更新数据。</p>
</li>
<li><p>View 就是 React 组件构成的 UI 层，从 State 取数据后，渲染成 HTML 代码。只要 State 有变化，View 就会自动更新。</p>
</li>
<li><p>Action 是用来描述 UI 层事件的一个对象。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">dispatch(&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;click-submit-button&#x27;</span>,</span><br><span class="line">  <span class="attr">payload</span>: <span class="built_in">this</span>.form.data</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li><p>connect 是一个函数，绑定 State 到 View。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">&#x27;dva&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapStateToProps</span>(<span class="params">state</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">todos</span>: state.todos &#125;;</span><br><span class="line">&#125;</span><br><span class="line">connect(mapStateToProps)(App);</span><br></pre></td></tr></table></figure>

<p>connect 方法返回的也是一个 React 组件，通常称为容器组件。因为它是原始 UI 组件的容器，即在外面包了一层 State。</p>
</li>
<li><p>dispatch 是一个函数方法，用来将 Action 发送给 State。</p>
<p><strong>被 connect 的 Component 会自动在 props 中拥有 dispatch 方法。</strong></p>
</li>
</ul>
<h3 id="数据流图二"><a href="#数据流图二" class="headerlink" title="数据流图二"></a>数据流图二</h3><p><img src="./img/pHTYrKJxQHPyJGAYOzMu.png"></p>
<h3 id="Model-对象的属性"><a href="#Model-对象的属性" class="headerlink" title="Model 对象的属性"></a>Model 对象的属性</h3><blockquote>
<p>每个model，实际上都是普通的JavaScript对象</p>
</blockquote>
<ul>
<li><p>namespace: 当前 Model 的名称。整个应用的 State，由多个小的 Model 的 State 以 namespace 为 key 合成</p>
</li>
<li><p>state: 该 Model 当前的状态。数据保存在这里，直接决定了视图层的输出</p>
</li>
<li><p>reducers: Action 处理器，处理同步动作，用来算出最新的 State</p>
</li>
<li><p>effects：Action 处理器，处理异步动。dva 提供多个 effect 函数内部的处理函数，比较常用的是 <code>call</code> 和 <code>put</code>。</p>
<ul>
<li>call：执行异步函数</li>
<li>put：发出一个 Action，类似于 dispatch</li>
</ul>
</li>
<li><p>subscriptions</p>
</li>
</ul>
]]></content>
      <categories>
        <category>dva</category>
      </categories>
      <tags>
        <tag>learn</tag>
      </tags>
  </entry>
  <entry>
    <title>Elastic Stack learn</title>
    <url>/2021/12/03/elasticstatic/</url>
    <content><![CDATA[<p><strong>ELK</strong></p>
<blockquote>
<p>Elasticsearch 是一个搜索和分析引擎。Logstash 是服务器端数据处理管道，能够同时从多个来源采集数据，转换数据，然后将数据发送到诸如 Elasticsearch 等“存储库”中。Kibana 则可以让用户在 Elasticsearch 中使用图形和图表对数据进行可视化。</p>
</blockquote>
<p>Elasticsearch is the living heart of what is today’s the most popular log analytics platform — the ELK Stack (Elasticsearch, Logstash and Kibana). Elasticsearch’s role is so central that it has become synonymous with the name of the stack itself.</p>
<p>Elasticsearch behaves like a REST API, so you can use either the <code>POST</code> or the <code>PUT</code> method to add data to it. You use <code>PUT</code> when you know the or want to specify the <code>id</code> of the data item, or <code>POST</code> if you want Elasticsearch to generate an <code>id</code> for the data item:</p>
<h3 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h3><h4 id="max-file-descriptors-4096-for-elasticsearch-process-is-too-low-increase-to-at-least-65535"><a href="#max-file-descriptors-4096-for-elasticsearch-process-is-too-low-increase-to-at-least-65535" class="headerlink" title="max file descriptors [4096] for elasticsearch process is too low, increase to at least [65535]"></a>max file descriptors [4096] for elasticsearch process is too low, increase to at least [65535]</h4><p>If you want to increase the limit shown by <code>ulimit -n</code>, you should:</p>
<ul>
<li><p>Modify <code>/etc/systemd/user.conf</code> and <code>/etc/systemd/system.conf</code> with the following line (this takes care of graphical login):</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DefaultLimitNOFILE=65535</span><br></pre></td></tr></table></figure></li>
<li><p>Modify <code>/etc/security/limits.conf</code> with the following lines (this takes care of non-GUI login):</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">* hard nofile 65535</span><br><span class="line">* soft nofile 65535</span><br></pre></td></tr></table></figure></li>
<li><p>Reboot your computer for changes to take effect.</p>
</li>
<li><p>check</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ulimit -Hn</span><br><span class="line">ulimit -Sn</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="max-virtual-memory-areas-vm-max-map-count-65530-is-too-low-increase-to-at-least-262144"><a href="#max-virtual-memory-areas-vm-max-map-count-65530-is-too-low-increase-to-at-least-262144" class="headerlink" title="max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]"></a>max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</h4><ul>
<li><p><code>vim /etc/sysctl.conf </code></p>
<p>新增<strong>vm.max_map_count=655360</strong></p>
</li>
<li><p><code>sysctl -p</code></p>
</li>
</ul>
<h4 id="the-default-discovery-settings-are-unsuitable-for-production-use-at-least-one-of-discovery-seed-hosts-discovery-seed-providers-cluster-initial-master-nodes-must-be-configured"><a href="#the-default-discovery-settings-are-unsuitable-for-production-use-at-least-one-of-discovery-seed-hosts-discovery-seed-providers-cluster-initial-master-nodes-must-be-configured" class="headerlink" title="the default discovery settings are unsuitable for production use; at least one of [discovery.seed_hosts, discovery.seed_providers, cluster.initial_master_nodes] must be configured"></a>the default discovery settings are unsuitable for production use; at least one of [discovery.seed_hosts, discovery.seed_providers, cluster.initial_master_nodes] must be configured</h4><p>in short, if you are running Elasticsearch locally(single node) or just with a single node on the cloud then just use below config in your <code>elasticsearch.yml</code> to avoid the production check, and to make it work, more info about this config in <a href="https://stackoverflow.com/a/60426167/4039431">this SO</a> answer:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">discovery.type:</span> <span class="string">single-node</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>learn</tag>
      </tags>
  </entry>
  <entry>
    <title>encrypt-decrpt</title>
    <url>/2021/12/03/encrypt-decrpt/</url>
    <content><![CDATA[<hr>
<p>reference</p>
<p><a href="https://opensource.com/article/21/7/linux-age">https://opensource.com/article/21/7/linux-age</a></p>
<p><a href="https://github.com/FiloSottile/age">https://github.com/FiloSottile/age</a></p>
]]></content>
      <categories>
        <category>encrypt-decrpt</category>
      </categories>
      <tags>
        <tag>point</tag>
      </tags>
  </entry>
  <entry>
    <title>fabric8 &amp; docker-maven-plugin</title>
    <url>/2022/01/07/fabric8(docker-maven-plugin)/</url>
    <content><![CDATA[<h2 id="todo"><a href="#todo" class="headerlink" title="todo"></a>todo</h2>]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>plugin</tag>
      </tags>
  </entry>
  <entry>
    <title>file system</title>
    <url>/2022/01/07/file%20system/</url>
    <content><![CDATA[<h1 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h1><p><img src="/images/fileSystemType.jpeg" alt="fileSystemType.jpeg"></p>
<ul>
<li><p>Mac 默认可以读 Windows 的 NTFS 格式，但不能写。</p>
</li>
<li><p>Windows 无法识别 Mac 的 HFS+ 或 APFS 格式。</p>
</li>
<li><p>Mac 和 Windows 都能正常读写 FAT32 和 ExFAT 格式</p>
</li>
<li><p>linux</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Linux：存在几十个文件系统类型：ext2，ext3，ext4，xfs，brtfs，zfs（man 5 fs可以取得全部文件系统的介绍）</span><br><span class="line"></span><br><span class="line">不同文件系统采用不同的方法来管理磁盘空间，各有优劣；文件系统是具体到分区的，所以格式化针对的是分区，分区格式化是指采用指定的文件系统类型对分区空间进行登记、索引并建立相应的管理表格的过程。</span><br><span class="line"></span><br><span class="line">ext2具有极快的速度和极小的CPU占用率，可用于硬盘和移动存储设备</span><br><span class="line">ext3增加日志功能，可回溯追踪</span><br><span class="line">ext4日志式文件系统，支持1EB（1024*1024TB），最大单文件16TB，支持连续写入可减少文件碎片。rhel6默认文件系统</span><br><span class="line">xfs可以管理500T的硬盘。rhel7默认文件系统</span><br><span class="line">brtfs文件系统针对固态盘做优化，</span><br></pre></td></tr></table></figure></li>
<li><p>windows</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FAT16：MS—DOS和win95采用的磁盘分区格式，采用16位的文件分配表，只支持2GB的磁盘分区，最大单文件2GB，且磁盘利用率低</span><br><span class="line">FAT32：（即Vfat）采用32位的文件分配表，支持最大分区128GB，最大文件4GB</span><br><span class="line">NTFS：支持最大分区2TB，最大文件2TB，安全性和稳定性非常好，不易出现文件碎片。</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<p>reference</p>
<p><a href="https://www.yinxiang.com/everhub/note/0312ed71-61f5-4c75-9c77-3db0ffdeb613">https://www.yinxiang.com/everhub/note/0312ed71-61f5-4c75-9c77-3db0ffdeb613</a></p>
]]></content>
      <categories>
        <category>file system</category>
      </categories>
      <tags>
        <tag>snippet</tag>
      </tags>
  </entry>
  <entry>
    <title>flink Memory Model</title>
    <url>/2019/10/01/flink%20Memory%20Model/</url>
    <content><![CDATA[<h2 id="内存模型"><a href="#内存模型" class="headerlink" title="内存模型"></a>内存模型</h2><h3 id="jobmanager"><a href="#jobmanager" class="headerlink" title="jobmanager"></a>jobmanager</h3><p><img src="/images/flink/jobmanager.jpg"></p>
<ul>
<li>JVM Heap大小设置对应配置文件<code>flink-conf.yaml</code>的<strong>jobmanager.heap.size</strong></li>
</ul>
<h3 id="taskmanager"><a href="#taskmanager" class="headerlink" title="taskmanager"></a>taskmanager</h3><p><img src="/images/flink/taskmanager.jpg"></p>
<ul>
<li>Total Flink Memory对应<code>flink-conf.yaml</code>的<strong>taskmanager.memory.flink.size</strong></li>
<li>JVM Metaspace对应<code>flink-conf.yaml</code>的<strong>taskmanager.memory.jvm-metaspace.size</strong></li>
<li>Total Process Memory对应<code>flink-conf.yaml</code>的<strong>taskmanager.memory.process.size</strong></li>
</ul>
<h4 id="Flink总内存（Total-Flink-Memory）"><a href="#Flink总内存（Total-Flink-Memory）" class="headerlink" title="Flink总内存（Total Flink Memory）"></a>Flink总内存（Total Flink Memory）</h4><ul>
<li><p><strong>含义</strong><br>TaskManager进程占用的所有与Flink相关的内存（不包括JVM元空间和其他额外开销）。具体包含4大块：Flink框架内存（堆内、堆外）、托管内存（仅堆外）、网络缓存（仅堆外）、任务内存（堆内、堆外）。</p>
</li>
<li><p><strong>参数</strong><br><code>taskmanager.memory.flink.size</code>：无默认值，需要用户指定。</p>
</li>
</ul>
<h4 id="Flink框架（Framework）内存"><a href="#Flink框架（Framework）内存" class="headerlink" title="Flink框架（Framework）内存"></a>Flink框架（Framework）内存</h4><ul>
<li><p>含义<br>Flink Runtime底层占用的内存，一般来讲相对固定，不需要更改。极特殊情况下才需要调大一些，比如非常高的算子并行度，或者与外部系统（如Hadoop）有密集交互等等。</p>
</li>
<li><p>参数</p>
<p><code>taskmanager.memory.framework.heap.size</code>：堆内部分（Framework Heap），默认值128MB；</p>
<p><code>taskmanager.memory.framework.off-heap.size</code>：堆外部分（Framework Off-Heap），以直接内存形式分配，默认值128MB。</p>
</li>
</ul>
<h4 id="托管（Managed）内存"><a href="#托管（Managed）内存" class="headerlink" title="托管（Managed）内存"></a>托管（Managed）内存</h4><ul>
<li><p>含义<br>纯堆外内存，由MemoryManager管理，用于中间结果缓存、排序、哈希表等，以及RocksDB状态后端。可见，RocksDB消耗的内存可以由用户显式控制了，不再像旧版本一样难以预测和调节。</p>
</li>
<li><p>参数</p>
<p><code>taskmanager.memory.managed.fraction</code>：托管内存占Flink总内存<code>taskmanager.memory.flink.size的比例</code>，默认值0.4；<code>taskmanager.memory.managed.size</code>：托管内存的大小，无默认值，一般也不指定，而是依照上述比例来推定，更加灵活。</p>
</li>
</ul>
<h4 id="网络（Network）缓存"><a href="#网络（Network）缓存" class="headerlink" title="网络（Network）缓存"></a>网络（Network）缓存</h4><ul>
<li><p>含义<br>纯堆外内存，用于TaskManager之间（shuffle、广播等）及与外部组件的数据传输，以直接内存形式分配。</p>
</li>
<li><p>参数</p>
<p><code>taskmanager.memory.network.min</code>：网络缓存的最小值，默认64MB；<code>taskmanager.memory.network.max</code>：网络缓存的最大值，默认1GB；<code>taskmanager.memory.network.fraction</code>：网络缓存占Flink总内存<code>taskmanager.memory.flink.size</code>的比例，默认值0.1。若根据此比例算出的内存量比最小值小或比最大值大，就会限制到最小值或者最大值。</p>
</li>
</ul>
<h4 id="任务（Task）内存"><a href="#任务（Task）内存" class="headerlink" title="任务（Task）内存"></a>任务（Task）内存</h4><ul>
<li><p>含义<br>顾名思义，是算子逻辑和用户代码、自定义数据结构真正占用的内存。</p>
</li>
<li><p>参数</p>
<p><code>taskmanager.memory.task.heap.size</code>：堆内部分（Task Heap），无默认值，一般不建议设置，会自动用Flink总内存减去框架、托管、网络三部分的内存推算得出。<code>taskmanager.memory.task.off-heap.size</code>：堆外部分（Task Off-Heap），以直接内存形式分配，默认值为0，即不使用。</p>
</li>
</ul>
<h5 id="TaskManager进程总内存（Total-Process-Memory）"><a href="#TaskManager进程总内存（Total-Process-Memory）" class="headerlink" title="TaskManager进程总内存（Total Process Memory）"></a>TaskManager进程总内存（Total Process Memory）</h5><ul>
<li><p><strong>含义</strong><br>在容器化部署（on YARN/K8s/Mesos）环境下使用，是Flink总内存、JVM元空间与JVM额外内存开销的和，也就是容器本身的内存大小。</p>
</li>
<li><p><strong>参数</strong><br><code>taskmanager.memory.process.size</code>：无默认值，需要用户指定。</p>
</li>
</ul>
<h5 id="JVM元空间（Metaspace）"><a href="#JVM元空间（Metaspace）" class="headerlink" title="JVM元空间（Metaspace）"></a>JVM元空间（Metaspace）</h5><ul>
<li><p><strong>含义</strong><br>存放已被虚拟机加载的<strong>类信息、常量、静态变量，即编译器编译后的代码</strong></p>
</li>
<li><p><strong>参数</strong><br><code>taskmanager.memory.jvm-metaspace.size</code>：默认值256MB。</p>
</li>
</ul>
<h4 id="JVM额外开销（Overhead）"><a href="#JVM额外开销（Overhead）" class="headerlink" title="JVM额外开销（Overhead）"></a>JVM额外开销（Overhead）</h4><ul>
<li><p>含义<br>为JVM预留的其他本地内存，用于线程栈、代码缓存等，作用有些类似于之前版本中为容器预留的截断（cutoff）内存。当然在1.10版本中，原先的containerized.heap-cutoff-ratio与containerized.heap-cutoff-min参数对TM就不再生效了。</p>
</li>
<li><p>参数</p>
<p><code>taskmanager.memory.jvm-overhead.min</code>：JVM额外开销的最小值，默认192MB；<code>taskmanager.memory.jvm-overhead.max</code>：JVM额外开销的最大值，默认1GB；<code>taskmanager.memory.jvm-overhead.fraction</code>：JVM额外开销占TM进程总内存<code>taskmanager.memory.process.size</code>（注意不是Flink总内存）的比例，默认值0.1。若根据此比例算出的内存量比最小值小或比最大值大，就会限制到最小值或者最大值。</p>
</li>
</ul>
<h3 id="Flink内存参数与JVM参数的关系"><a href="#Flink内存参数与JVM参数的关系" class="headerlink" title="Flink内存参数与JVM参数的关系"></a>Flink内存参数与JVM参数的关系</h3><p>上述内存参数会直接影响启动TaskManager时使用的JVM参数，使用相关工具可以观察到。</p>
<ul>
<li><p><code>-Xmx</code>/<code>-Xms</code>：对应堆内框架内存与任务内存之和；</p>
</li>
<li><p><code>-XX:MaxDirectMemorySize</code>：对应三块直接内存，即堆外框架内存、任务内存与网络缓存之和；</p>
</li>
<li><p><code>-XX:MaxMetaspaceSize</code>：对应JVM元空间设置。</p>
</li>
</ul>
<h2 id="配置优化"><a href="#配置优化" class="headerlink" title="配置优化"></a>配置优化</h2><ul>
<li><strong>节点平均分配</strong><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">cluster.evenly-spread-out-slots:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<p>reference</p>
<p><a href="https://blog.51cto.com/u_14222592/2892910">Flink 1.10之改进的TaskManager内存模型与配置【附源码】_wx5c7a97e3804fd_51CTO博客</a></p>
]]></content>
      <categories>
        <category>flink</category>
      </categories>
      <tags>
        <tag>learn</tag>
      </tags>
  </entry>
  <entry>
    <title>flink cdc</title>
    <url>/2022/01/15/flink%20cdc/</url>
    <content><![CDATA[<p>reference</p>
<p><a href="https://developer.aliyun.com/article/848448?spm=a2c6h.12873639.0.d102020001.6a5a2de1EwwX6V&utm_content=g_1000316418">Flink Forward Aisa 系列专刊｜Flink CDC 新一代数据集成框架 - 技术原理、入门与生产实践-阿里云开发者社区</a></p>
]]></content>
      <categories>
        <category>flink</category>
      </categories>
      <tags>
        <tag>cdc</tag>
      </tags>
  </entry>
  <entry>
    <title>filter in servlet</title>
    <url>/2016/03/16/filter%20in%20servlet/</url>
    <content><![CDATA[<blockquote>
<p>A filter is an object that is invoked at the preprocessing and postprocessing of a request.</p>
</blockquote>
<ul>
<li>It is mainly used to perform filtering tasks such as conversion, logging, compression, encryption and decryption, input validation etc.</li>
<li>The servlet filter is pluggable, i.e. its entry is defined in the web.xml file, if we remove the entry of filter from the web.xml file, filter will be removed automatically and we don’t need to change the servlet.</li>
</ul>
<p><img src="https://www.javatpoint.com/images/filter.JPG"></p>
<h3 id="Usage-of-Filter"><a href="#Usage-of-Filter" class="headerlink" title="Usage of Filter"></a>Usage of Filter</h3><ul>
<li>recording all incoming requests</li>
<li>logs the IP addresses of the computers from which the requests originate</li>
<li>conversion</li>
<li>data compression</li>
<li>encryption and decryption</li>
<li>input validation etc.</li>
</ul>
<h3 id="Advantage-of-Fliter"><a href="#Advantage-of-Fliter" class="headerlink" title="Advantage of Fliter"></a>Advantage of Fliter</h3><ul>
<li>Filter is pluggable.</li>
<li>One filter don’t have dependency onto another resource.</li>
<li>Less Maintenance</li>
</ul>
<h3 id="Filter-API"><a href="#Filter-API" class="headerlink" title="Filter API"></a>Filter API</h3><ul>
<li><p>Filter</p>
<blockquote>
<p>For creating any filter, you must implement the Filter interface. Filter interface provides the life cycle methods for a filter.</p>
</blockquote>
</li>
<li><p>FilterChain</p>
<blockquote>
<p>The object of FilterChain is responsible to invoke the next filter or resource in the chain.This object is passed in the doFilter method of Filter interface.</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span></span>&#123;  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig arg0)</span> <span class="keyword">throws</span> ServletException </span>&#123;&#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse resp,  </span></span></span><br><span class="line"><span class="params"><span class="function">      FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;  </span><br><span class="line"></span><br><span class="line">          PrintWriter out=resp.getWriter();  </span><br><span class="line">          out.print(<span class="string">&quot;filter is invoked before&quot;</span>);  </span><br><span class="line"></span><br><span class="line">          chain.doFilter(req, resp);<span class="comment">//sends request to next resource  </span></span><br><span class="line"></span><br><span class="line">          out.print(<span class="string">&quot;filter is invoked after&quot;</span>);  </span><br><span class="line">      &#125;  </span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;&#125;  </span><br><span class="line">&#125;      </span><br></pre></td></tr></table></figure></li>
</ul>
<p>```</p>
<ul>
<li>FilterConfig</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>learn</tag>
      </tags>
  </entry>
  <entry>
    <title>flink cep</title>
    <url>/2022/01/14/flink%20cep/</url>
    <content><![CDATA[<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>风险控制<br>对用户异常行为模式进行实时检测，当一个用户发生了不该发生的行为，判定这个用户是不是有违规操作的嫌疑。</p>
<p>策略营销<br>用预先定义好的规则对用户的行为轨迹进行实时跟踪，对行为轨迹匹配预定义规则的用户实时发送相应策略的推广。</p>
<p>运维监控<br>灵活配置多指标、多依赖来实现更复杂的监控模式。</p>
]]></content>
      <categories>
        <category>flink</category>
      </categories>
      <tags>
        <tag>cep</tag>
      </tags>
  </entry>
  <entry>
    <title>flink join</title>
    <url>/2022/01/05/flink%20join/</url>
    <content><![CDATA[<blockquote>
<p>使用 SQL 进行数据分析的过程中，join 是经常要使用的操作。</p>
<p>在离线场景中，join 的数据集是有边界的，可以缓存数据有边界的数据集进行查询，有Nested Loop/Hash Join/Sort Merge Join 等多表 join；</p>
<p>而在实时场景中，join 两侧的数据都是无边界的数据流，所以缓存数据集对长时间 job 来说，存储和查询压力很大，另外双流的到达时间可能不一致，造成 join 计算结果准确度不够；因此，Flink SQL 提供了多种 join 方法，来帮助用户应对各种 join 场景。</p>
</blockquote>
<h3 id="regular-join"><a href="#regular-join" class="headerlink" title="regular join"></a>regular join</h3><blockquote>
<p>regular join 是最通用的 join 类型，不支持时间窗口以及时间属性，任何一侧数据流有更改都是可见的，直接影响整个 join 结果。如果有一侧数据流增加一个新纪录，那么它将会把另一侧的所有的过去和将来的数据合并在一起，因为 regular join 没有剔除策略，这就影响最新输出的结果; 正因为历史数据不会被清理，所以 regular join 支持数据流的任何更新操作。</p>
<p>对于 regular join 来说，更适合用于离线场景和小数据量场景。</p>
</blockquote>
<ul>
<li>语法<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> columns</span><br><span class="line"><span class="keyword">FROM</span> t1  [<span class="keyword">AS</span> <span class="operator">&lt;</span>alias1<span class="operator">&gt;</span>]</span><br><span class="line">[<span class="keyword">LEFT</span><span class="operator">/</span><span class="keyword">INNER</span><span class="operator">/</span><span class="keyword">FULL</span> <span class="keyword">OUTER</span>] <span class="keyword">JOIN</span> t2</span><br><span class="line"><span class="keyword">ON</span> t1.column1 <span class="operator">=</span> t2.key<span class="operator">-</span>name1</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="interval-join"><a href="#interval-join" class="headerlink" title="interval join"></a>interval join</h3><blockquote>
<p>相对于 regular join，interval Join 则利用窗口的给两个输入表设定一个 Join 的时间界限，超出时间范围的数据则对 join 不可见并可以被清理掉，这样就能修正 regular join 因为没有剔除数据策略带来 join 结果的误差以及需要大量的资源。</p>
<p>但是使用interval join，需要定义好时间属性字段，可以是计算发生的 Processing Time，也可以是根据数据本身提取的 Event Time；如果是定义的是 Processing Time，则Flink 框架本身根据系统划分的时间窗口定时清理数据；如果定义的是 Event Time，Flink 框架分配 Event Time 窗口并根据设置的 watermark 来清理数据。</p>
</blockquote>
<ul>
<li><p>语法1</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> columns</span><br><span class="line"><span class="keyword">FROM</span> t1  [<span class="keyword">AS</span> <span class="operator">&lt;</span>alias1<span class="operator">&gt;</span>]</span><br><span class="line">[<span class="keyword">LEFT</span><span class="operator">/</span><span class="keyword">INNER</span><span class="operator">/</span><span class="keyword">FULL</span> <span class="keyword">OUTER</span>] <span class="keyword">JOIN</span> t2</span><br><span class="line"><span class="keyword">ON</span> t1.column1 <span class="operator">=</span> t2.key<span class="operator">-</span>name1 <span class="keyword">AND</span> t1.timestamp <span class="keyword">BETWEEN</span> t2.timestamp  <span class="keyword">AND</span>  <span class="keyword">BETWEEN</span> t2.timestamp <span class="operator">+</span> <span class="operator">+</span> <span class="type">INTERVAL</span> <span class="string">&#x27;10&#x27;</span> <span class="keyword">MINUTE</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>语法2</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> columns</span><br><span class="line"><span class="keyword">FROM</span> t1  [<span class="keyword">AS</span> <span class="operator">&lt;</span>alias1<span class="operator">&gt;</span>]</span><br><span class="line">[<span class="keyword">LEFT</span><span class="operator">/</span><span class="keyword">INNER</span><span class="operator">/</span><span class="keyword">FULL</span> <span class="keyword">OUTER</span>] <span class="keyword">JOIN</span> t2</span><br><span class="line"><span class="keyword">ON</span> t1.column1 <span class="operator">=</span> t2.key<span class="operator">-</span>name1 <span class="keyword">AND</span> t2.timestamp <span class="operator">&lt;=</span> t1.timestamp <span class="keyword">and</span> t1.timestamp <span class="operator">&lt;=</span>  t2.timestamp <span class="operator">+</span> <span class="operator">+</span> <span class="type">INTERVAL</span> ’<span class="number">10</span><span class="string">&#x27; MINUTE ;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="temproal-table-join"><a href="#temproal-table-join" class="headerlink" title="temproal table join"></a>temproal table join</h3><blockquote>
<p>interval Join 提供了剔除数据的策略，解决资源问题以及计算更加准确，这是有个前提：join 的两个流需要时间属性，需要明确时间的下界，来方便剔除数据；</p>
<p>显然，这种场景不适合维度表的 join，因为维度表没有时间界限，对于这种场景，Flink 提供了 temproal table join 来覆盖此类场景。</p>
<p>在 regular join和interval join中，join 两侧的表是平等的，任意的一个表的更新，都会去和另外的历史纪录进行匹配，temproal table 的更新对另一表在该时间节点以前的记录是不可见的。</p>
</blockquote>
<ul>
<li>语法<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> columns</span><br><span class="line"><span class="keyword">FROM</span> t1  [<span class="keyword">AS</span> <span class="operator">&lt;</span>alias1<span class="operator">&gt;</span>]</span><br><span class="line">[<span class="keyword">LEFT</span>] <span class="keyword">JOIN</span> t2 <span class="keyword">FOR</span> <span class="built_in">SYSTEM_TIME</span> <span class="keyword">AS</span> <span class="keyword">OF</span> t1.proctime [<span class="keyword">AS</span> <span class="operator">&lt;</span>alias2<span class="operator">&gt;</span>]</span><br><span class="line"><span class="keyword">ON</span> t1.column1 <span class="operator">=</span> t2.key<span class="operator">-</span>name1</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="lookup-join"><a href="#lookup-join" class="headerlink" title="lookup join"></a>lookup join</h3><ul>
<li>维表必须指定主键。维表JOIN时，ON的条件必须包含所有主键的等值条件</li>
</ul>
<hr>
<p>reference:</p>
<p><a href="https://developer.aliyun.com/article/780048?accounttraceid=dd5fdbf3eed04f6185ed6461d8a33012zihq">Flink SQL 实战：双流 join 场景应用-阿里云开发者社区</a></p>
<p><a href="https://www.liangzl.com/get-article-detail-114889.html">Flink SQL 功能解密系列 —— 维表 JOIN 与异步优化</a></p>
]]></content>
      <categories>
        <category>flink</category>
      </categories>
      <tags>
        <tag>learn</tag>
      </tags>
  </entry>
  <entry>
    <title>flink module</title>
    <url>/2022/02/16/flink%20module/</url>
    <content><![CDATA[<h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><ul>
<li>flink-annotations: Flink自定义的一些注解，用于配置、控制编译等功能。</li>
<li>flink-clients: Flink客户端，用于向Flink集群提交任务、查询状态等。其中org.apache.flink.client.cli.CliFrontend就是执行./flink run的入口。</li>
<li>flink-connectors: Flink连接器，相当于Flink读写外部系统的客户端。这些连接器指定了外部存储如何作为Flink的source或sink。例如对于kafka来说，flink-connector-kafka-xx定义了FlinkKafkaConsumer和FlinkKafkaProducer类分别作为Flink的source和sink，实现了对kafka消费和生产的功能。从图二可以看出，flink 1.9目前支持的外部存储有Cassandra、ES、Kafka、Hive等一些开源外部存储。</li>
<li>flink-container: Flink对docker和kubernetes的支持。</li>
<li>flink-contrib: 社区开发者提供的一些新特性。</li>
<li>flink-core: Flink核心的API、类型的定义，包括底层的算子、状态、时间的实现，是Flink最重要的部分。Flink内部的各种参数配置也都定义在这个模块的configuration中。（这部分代码还没怎么看过，就不细讲了）。</li>
<li>flink-dist: Flink编译好之后的jar包会放在这个文件夹下，也就是网上下载的可执行的版本。其中也包括集群启动、终止的脚本，集群的配置文件等。</li>
<li>flink-docs: 这个模块并不是Flink的文档，而是Flink文档生成的代码。其中org.apache.flink.docs.configuration.ConfigOptionsDocGenerator是配置文档的生成器，修改相关配置的key或者默认值，重新运行这个类就会更新doc文件夹下的html文件。同样org.apache.flink.docs.rest.RestAPIDocGenerator是Flink RestAPI文档的生成器。</li>
<li>flink-fliesystems: Flink对各种文件系统的支持，包括HDFS、Azure、AWS S3、阿里云OSS等分布式文件系统。</li>
<li>flink-formats: Flink对各种格式的数据输入输出的支持。包括Json、CSV、Avro等常用的格式。</li>
<li>flink-java: Flink java的API，就是写flink应用时用到的map、window、keyBy、State等类或函数的实现。</li>
<li>flink-jepsen: 对Flink分布式系统正确性的测试，主要验证Flink的容错机制。</li>
<li>flink-libraries: Flink的高级API，包括CEP（复杂事件处理）、Gelly图处理库等。</li>
<li>flink-mesos: Flink对mesos集群管理的支持。</li>
<li>flink-metrics: Flink监控上报。支持上报到influxdb、prometheus等监控系统。具体的使用配置可以在flink-core模块的org.apache.flink.configuration.MetricOptions中找到。</li>
<li>flink-python: Flink对python的支持，目前还比较弱。</li>
<li>flink-queryable-state: Flink对可查询状态的支持，其中flink-queryable-state-runtime子模块实现了StateClientProxy和StateServer。这两部分都运行在TaskManager上，StateClientProxy负责接收外部请求，StateServe负责管理内部的queryable state。flink-queryable-state-client-java子模块实现了QueryableStateClient，作为外部系统访问queryable state的客户端。</li>
<li>flink-runtime: flink运行时核心代码，在第二节细说。</li>
<li>flink-runtime-web: Flink Web Dashboard的实现。默认启动standalone集群后，访问<a href="http://localhost:8081/">http://localhost:8081</a> 出现的界面。</li>
<li>flink-scala: Flink scala的API。</li>
<li>flink-scala-shell: Flink提供的scala命令行交互接口。</li>
<li>flink-state-backends: flink状态存储的方式，目前这个模块中只有RocksDBStateBackend，未来可能会支持更多种的状态存储，以适应不同的业务场景。MemoryStateBackend和FsStateBackend的实现并不在这个目录下，而是在flink-runtime目录下。</li>
<li>flink-streaming-java: Flink Streaming的java API。</li>
<li>flink-streaming-scala: Flink Streaming的scala API。</li>
<li>flink-table: Flink Table API，在第三小节中细说。</li>
<li>flink-yarn: Flink对yarn集群管理的支持。</li>
</ul>
<hr>
<ul>
<li><p>flink-runtime模块是Flink最核心的模块之一，实现了Flink的运行时框架，如JobManager、TaskManager、ResourceManager、Scheduler、Checkpoint Coordinator</p>
</li>
<li><p>flink-table模块属于Flink的上层API，包括java和scala版本的table-api，以及SQL的解析和SQL的执行。</p>
<blockquote>
<p>随着Flink SQL越来越受重视，flink-table从flink-libraries中移了出来，成为了独立的一级目录。Flink 1.9中，阿里把blink-planner开源了出来，这样整个flink-table中就有了2个planner。从长期来看，流批的统一是一个趋势，因此blink-planner只使用了StreamTableEnvironment中相关的API，而没有使用BatchTableEnvironment，将批当做一个有限的流来处理，希望通过这种方式实现流和批的统一。由于blink-table-planner更好的支持流批统一，且性能更好，在未来的版本中，很有可能完全替代flink-table-planner的功能，而flink-table-planner可能将会被移除。</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>flink</category>
      </categories>
      <tags>
        <tag>point</tag>
      </tags>
  </entry>
  <entry>
    <title>flink on yarn</title>
    <url>/2022/01/04/flink%20on%20yarn/</url>
    <content><![CDATA[<h1 id="Flink-on-YARN模式"><a href="#Flink-on-YARN模式" class="headerlink" title="Flink on YARN模式"></a>Flink on YARN模式</h1><p>在这种模式下Flink的资源由YARN来进行管理，Flink服务被提交到YARN的ResourceManager后，YARN的NodeManager会为Flink生成对应的容器，Flink再将JobManager和TaskManager实例部署到容器中。在这种情况下Flink可以通过JobManager所需要的slots数量来动态的调整TaskManager的资源，达到了资源的可拓展性。Flink官方也推荐正式的生产环境使用这种部署模式。<br>在YARN上，又分为三种部署模式：</p>
<h2 id="Session-Mode"><a href="#Session-Mode" class="headerlink" title="Session Mode"></a>Session Mode</h2><p>共享JobManager和TaskManager，所有提交的任务都在一个集群中运行，集群的生命周期独立于任务，任务的开始、结束不影响集群的生命周期。类似于上面的Standalone-cluster模式，任务与任务之间不隔离，共享同一套资源。</p>
<h2 id="Per-Job-Mode"><a href="#Per-Job-Mode" class="headerlink" title="Per-Job Mode"></a>Per-Job Mode</h2><p>为每个任务创建单独的JobManager和TaskManager集群，每个任务之间互相隔离互不干扰，集群的生命周期随着任务的生命周期结束而结束。这种模式的优点就是任务独占一个集群，资源的隔离性好。</p>
<h2 id="Application-Mode"><a href="#Application-Mode" class="headerlink" title="Application Mode"></a>Application Mode</h2><p>一个Application可以存在多个任务，这时YARN为每个Application创建集群，Application中的任务共享该集群，资源的隔离是Application级别的，集群的生命周期随着Application的生命周期结束。这种模式更像是Session Mode和Pre-Job Mode的折中方案，既做到了资源的隔离，又提高了任务之间资源的利用率。</p>
<h2 id="interaction"><a href="#interaction" class="headerlink" title="interaction"></a>interaction</h2><p><img src="/images/flinkOnYarn/flink_on_yarn.png"> </p>
<h2 id="two-way-to-submit-job-on-yarn"><a href="#two-way-to-submit-job-on-yarn" class="headerlink" title="two way to submit job on yarn"></a>two way to submit job on yarn</h2><p><img src="/images/flinkOnYarn/submit_job.png"></p>
<h3 id="first-way：yarn-session"><a href="#first-way：yarn-session" class="headerlink" title="first way：yarn session"></a>first way：yarn session</h3><blockquote>
<p>(Start a long-running Flink cluster on YARN)这种方式需要先启动集群，然后在提交作业，接着会向yarn申请一块空间后，资源永远保持不变。如果资源满了，下一个作业就无法提交，只能等到yarn中的其中一个作业执行完成后，释放了资源，那下一个作业才会正常提交.</p>
<p>ps:所有作业共享Dispatcher和ResourceManager；共享资源；适合规模小执行时间短的作业.适用于本地测试或者开发</p>
</blockquote>
<h4 id="mode-one-客户端模式"><a href="#mode-one-客户端模式" class="headerlink" title="mode one: 客户端模式"></a>mode one: 客户端模式</h4><blockquote>
<p>可以启动多个yarn session，一个yarn session模式对应一个JobManager,并按照需求提交作业，同一个Session中可以提交多个Flink作业。如果想要停止Flink Yarn Application，需要通过yarn application -kill命令来停止.</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bin/yarn-session.sh -n 2 -jm 1024 -tm 4096 -s 6</span><br></pre></td></tr></table></figure>

<ul>
<li><p>YarnSessionClusterEntrypoint进程</p>
<p>代表本节点可以命令方式提交job，而且可以不用指定-m参数。</p>
<ul>
<li><p>本节点提交任务</p>
<p><code>bin/flink run ~/flink-demo-wordcount.jar</code></p>
</li>
<li><p>如果需要在其他主机节点提交任务</p>
<p><code>bin/flink run -m vmhome10.com:43258 examples/batch/WordCount.jar</code></p>
</li>
</ul>
</li>
<li><p>FlinkYarnSessionCli进程</p>
<p>代表yarn-session集群入口，实际就是jobmanager节点，也是yarn的ApplicationMaster节点。</p>
</li>
</ul>
<h4 id="mode-two-分离式模式"><a href="#mode-two-分离式模式" class="headerlink" title="mode two: 分离式模式"></a>mode two: 分离式模式</h4><blockquote>
<p>JobManager的个数只能是一个，同一个Session中可以提交多个Flink作业。如果想要停止Flink Yarn Application，需要通过yarn application -kill命令来停止。通过-d指定分离模式.</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./bin/yarn-session.sh -nm test3 -d</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在所有的节点只会出现一个 YarnSessionClusterEntrypoint进程</p>
</blockquote>
<h3 id="second-way-flink-run"><a href="#second-way-flink-run" class="headerlink" title="second way: flink run"></a>second way: flink run</h3><blockquote>
<p>直接在YARN上提交运行Flink作业(Run a Flink job on YARN)，这种方式的好处是一个任务会对应一个job,即没提交一个作业会根据自身的情况，向yarn申请资源，直到作业执行完成，并不会影响下一个作业的正常运行，除非是yarn上面没有任何资源的情况下。</p>
<p>ps:适用于生产环境，可启动多个yarn session （bin/yarn-session.sh -nm ipOrHostName）</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./bin/flink run -m addressOfJobmanager -yn 1 -yjm 1024 -ytm 1024 ./examples/batch/WordCount.jar</span><br></pre></td></tr></table></figure>

<p>注意使用参数-m yarn-cluster提交到yarn集群。</p>
<ul>
<li>运行到指定的yarn session可以指定 -yid,–yarnapplicationId <arg> Attach to running YARN session来附加到到特定的yarn session上运行</li>
</ul>
<hr>
<p>reference</p>
<p><a href="https://www.jianshu.com/p/1b05202c4fb6">Flink on yarn部署模式 - 简书</a></p>
<p><a href="https://www.cnblogs.com/asker009/p/11327533.html">flink on yarn模式下两种提交job方式 - 我是属车的 - 博客园</a></p>
<p><a href="https://blog.csdn.net/u013411339/article/details/95421500?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164455981216780357293300%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=164455981216780357293300&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_ecpm_v1~rank_v31_ecpm-21-95421500.nonecase&utm_term=%E2%80%9Cflink+cep%E2%80%9D&spm=1018.2226.3001.4450">Flink-On-Yarn的部署模式</a></p>
]]></content>
      <categories>
        <category>flink</category>
      </categories>
      <tags>
        <tag>point</tag>
      </tags>
  </entry>
  <entry>
    <title>flink overview</title>
    <url>/2021/12/28/flink%20overview/</url>
    <content><![CDATA[<h3 id="checkpoint"><a href="#checkpoint" class="headerlink" title="checkpoint"></a>checkpoint</h3><blockquote>
<p>基于 Chandy-Lamport 算法实现了一个分布式的一致性的快照，从而提供了一致性的语义。</p>
<p>Chandy-Lamport 算法实际上在 1985 年的时候已经被提出来，但并没有被很广泛的应用，而 Flink 则把这个算法发扬光大了。</p>
</blockquote>
<h3 id="state"><a href="#state" class="headerlink" title="state"></a>state</h3><blockquote>
<p>丰富的State API：ValueState、ListState、MapState、 BroadcastState</p>
</blockquote>
<h3 id="time"><a href="#time" class="headerlink" title="time"></a>time</h3><blockquote>
<p>实现了 Watermark 的机制，能够支持基于事件的时间的处理，或者说基于系统时间的处理，能够容忍数据的延时、容忍数据的迟到、容忍乱序的数据。</p>
</blockquote>
<p><img src="/images/flink/flink_time.png"></p>
<ul>
<li><p>Event Time：是事件创建的时间。它通常由事件中的时间戳描述，例如采集的日志数据中，每一条日志都会记录自己的生成时间，Flink 通过时间戳分配器访问事件时间戳。</p>
</li>
<li><p>Ingestion Time：是数据进入 Flink 的时间。</p>
</li>
<li><p>Processing Time：是每一个执行基于时间操作的算子的本地系统时间，与机器相关，默认的时间属性就是 Processing Time。</p>
<blockquote>
<p>例如，一条日志进入 Flink 的时间为 2019-08-12 10:00:00.123，到达 Window 的系统时间为 2019-08-12 10:00:01.234，日志的内容如下：</p>
<p>2019-08-02 18:37:15.624 INFO Fail over to rm2</p>
<p>对于业务来说，要统计 1min 内的故障日志个数，哪个时间是最有意义的？—— eventTime，因为我们要根据日志的生成时间进行统计。</p>
</blockquote>
</li>
</ul>
<h3 id="window"><a href="#window" class="headerlink" title="window"></a>window</h3><blockquote>
<p>Flink 提供了开箱即用的各种窗口，比如滑动窗口、滚动窗口、会话窗口以及非常灵活的自定义的窗口。</p>
</blockquote>
<p><img src="/images/flink/flink_window.png"></p>
<ul>
<li><p>滚动窗口（Tumbling Window）</p>
<p>将数据依据固定的窗口长度对数据进行切片, 滚动窗口分配器将每个元素分配到一个指定窗口大小的窗口中，滚动窗口有一个固定的大小，并且不会出现重叠</p>
<p>特点：<strong>时间对齐，窗口长度固定，没有重叠</strong></p>
<p>适用场景：适合做 BI 统计等（做每个时间段的聚合计算）</p>
<p>例如：如果你指定了一个 5 分钟大小的滚动窗口，窗口的创建如下图所示：</p>
<p><img src="/images/flink/flink_window_tumbling.png"></p>
</li>
<li><p>滑动窗口（Sliding Window）</p>
<p>滑动窗口是固定窗口的更广义的一种形式，滑动窗口由固定的窗口长度和滑动间隔组成。</p>
<p>特点：<strong>时间对齐，窗口长度固定，有重叠</strong></p>
<p>滑动窗口分配器将元素分配到固定长度的窗口中，与滚动窗口类似，窗口的大小由窗口大小参数来配置，另一个窗口滑动参数控制滑动窗口开始的频率。因此，滑动窗口如果滑动参数小于窗口大小的话，窗口是可以重叠的，在这种情况下元素会被分配到多个窗口中。</p>
<p>适用场景：对最近一个时间段内的统计（求某接口最近 5min 的失败率来决定是否要报警）。</p>
<p>例如，你有 10 分钟的窗口和 5 分钟的滑动，那么每个窗口中 5 分钟的窗口里包含着上个 10 分钟产生的数据，如下图所示：</p>
<p><img src="/images/flink/flink_window_sliding.png"></p>
</li>
<li><p>会话窗口（Session Window）</p>
<p>由一系列事件组合一个指定时间长度的 timeout 间隙组成，类似于 web 应用的 session，也就是一段时间没有接收到新数据就会生成新的窗口。</p>
<p>特点：<strong>时间无对齐</strong></p>
<p>session 窗口分配器通过 session 活动来对元素进行分组，session 窗口跟滚动窗口和滑动窗口相比，不会有重叠和固定的开始时间和结束时间的情况，相反，当它在一个固定的时间周期内不再收到元素，即非活动间隔产生，那个这个窗口就会关闭。一个 session 窗口通过一个 session 间隔来配置，这个 session 间隔定义了非活跃周期的长度，当这个非活跃周期产生，那么当前的 session 将关闭并且后续的元素将被分配到新的 session 窗口中去。</p>
</li>
</ul>
<p>​        <img src="/images/flink/flink_window_session.png"></p>
<hr>
<p>flink API</p>
<p><img src="/images/flink/flink_runtime.png"></p>
<blockquote>
<p>Flink 分别提供了面向流式处理的接口（DataStream API）和面向批处理的接口（DataSet API）。因此，Flink 既可以完成流处理，也可以完成批处理。Flink 支持的拓展库涉及机器学习（FlinkML）、复杂事件处理（CEP）、以及图计算（Gelly），还有分别针对流处理和批处理的 Table API。</p>
</blockquote>
]]></content>
      <categories>
        <category>flink</category>
      </categories>
      <tags>
        <tag>point</tag>
      </tags>
  </entry>
  <entry>
    <title>flink points</title>
    <url>/2021/12/28/flink%20points/</url>
    <content><![CDATA[<h3 id="checkpoint"><a href="#checkpoint" class="headerlink" title="checkpoint"></a>checkpoint</h3><blockquote>
<p>基于 Chandy-Lamport 算法实现了一个分布式的一致性的快照，从而提供了一致性的语义。</p>
<p>Chandy-Lamport 算法实际上在 1985 年的时候已经被提出来，但并没有被很广泛的应用，而 Flink 则把这个算法发扬光大了。</p>
</blockquote>
<h3 id="state"><a href="#state" class="headerlink" title="state"></a>state</h3><blockquote>
<p>丰富的State API：ValueState、ListState、MapState、 BroadcastState</p>
</blockquote>
<h3 id="time"><a href="#time" class="headerlink" title="time"></a>time</h3><blockquote>
<p>实现了 Watermark 的机制，能够支持基于事件的时间的处理，或者说基于系统时间的处理，能够容忍数据的延时、容忍数据的迟到、容忍乱序的数据。</p>
</blockquote>
<p><img src="/images/flink/flink_time.png"></p>
<ul>
<li><p>Event Time：是事件创建的时间。它通常由事件中的时间戳描述，例如采集的日志数据中，每一条日志都会记录自己的生成时间，Flink 通过时间戳分配器访问事件时间戳。</p>
</li>
<li><p>Ingestion Time：是数据进入 Flink 的时间。</p>
</li>
<li><p>Processing Time：是每一个执行基于时间操作的算子的本地系统时间，与机器相关，默认的时间属性就是 Processing Time。</p>
<blockquote>
<p>例如，一条日志进入 Flink 的时间为 2019-08-12 10:00:00.123，到达 Window 的系统时间为 2019-08-12 10:00:01.234，日志的内容如下：</p>
<p>2019-08-02 18:37:15.624 INFO Fail over to rm2</p>
<p>对于业务来说，要统计 1min 内的故障日志个数，哪个时间是最有意义的？—— eventTime，因为我们要根据日志的生成时间进行统计。</p>
</blockquote>
</li>
</ul>
<h3 id="window"><a href="#window" class="headerlink" title="window"></a>window</h3><blockquote>
<p>Flink 提供了开箱即用的各种窗口，比如滑动窗口、滚动窗口、会话窗口以及非常灵活的自定义的窗口。</p>
</blockquote>
<p><img src="/images/flink/flink_window.png"></p>
<ul>
<li><p>滚动窗口（Tumbling Window）</p>
<p>将数据依据固定的窗口长度对数据进行切片, 滚动窗口分配器将每个元素分配到一个指定窗口大小的窗口中，滚动窗口有一个固定的大小，并且不会出现重叠</p>
<p>特点：<strong>时间对齐，窗口长度固定，没有重叠</strong></p>
<p>适用场景：适合做 BI 统计等（做每个时间段的聚合计算）</p>
<p>例如：如果你指定了一个 5 分钟大小的滚动窗口，窗口的创建如下图所示：</p>
<p><img src="/images/flink/flink_window_tumbling.png"></p>
</li>
<li><p>滑动窗口（Sliding Window）</p>
<p>滑动窗口是固定窗口的更广义的一种形式，滑动窗口由固定的窗口长度和滑动间隔组成。</p>
<p>特点：<strong>时间对齐，窗口长度固定，有重叠</strong></p>
<p>滑动窗口分配器将元素分配到固定长度的窗口中，与滚动窗口类似，窗口的大小由窗口大小参数来配置，另一个窗口滑动参数控制滑动窗口开始的频率。因此，滑动窗口如果滑动参数小于窗口大小的话，窗口是可以重叠的，在这种情况下元素会被分配到多个窗口中。</p>
<p>适用场景：对最近一个时间段内的统计（求某接口最近 5min 的失败率来决定是否要报警）。</p>
<p>例如，你有 10 分钟的窗口和 5 分钟的滑动，那么每个窗口中 5 分钟的窗口里包含着上个 10 分钟产生的数据，如下图所示：</p>
<p><img src="/images/flink/flink_window_sliding.png"></p>
</li>
<li><p>会话窗口（Session Window）</p>
<p>由一系列事件组合一个指定时间长度的 timeout 间隙组成，类似于 web 应用的 session，也就是一段时间没有接收到新数据就会生成新的窗口。</p>
<p>特点：<strong>时间无对齐</strong></p>
<p>session 窗口分配器通过 session 活动来对元素进行分组，session 窗口跟滚动窗口和滑动窗口相比，不会有重叠和固定的开始时间和结束时间的情况，相反，当它在一个固定的时间周期内不再收到元素，即非活动间隔产生，那个这个窗口就会关闭。一个 session 窗口通过一个 session 间隔来配置，这个 session 间隔定义了非活跃周期的长度，当这个非活跃周期产生，那么当前的 session 将关闭并且后续的元素将被分配到新的 session 窗口中去。</p>
</li>
</ul>
<p>​        <img src="/images/flink/flink_window_session.png"></p>
<hr>
<p>flink API</p>
<p><img src="/images/flink/flink_runtime.png"></p>
<blockquote>
<p>Flink 分别提供了面向流式处理的接口（DataStream API）和面向批处理的接口（DataSet API）。因此，Flink 既可以完成流处理，也可以完成批处理。Flink 支持的拓展库涉及机器学习（FlinkML）、复杂事件处理（CEP）、以及图计算（Gelly），还有分别针对流处理和批处理的 Table API。</p>
</blockquote>
]]></content>
      <categories>
        <category>flink</category>
      </categories>
      <tags>
        <tag>point</tag>
      </tags>
  </entry>
  <entry>
    <title>flink state</title>
    <url>/2022/01/11/flink%20state/</url>
    <content><![CDATA[<h3 id="what"><a href="#what" class="headerlink" title="what ?"></a>what ?</h3><p>State是指流计算过程中计算节点的中间计算结果或元数据属性，比如 在aggregation过程中要在state中记录中间聚合结果，比如 Apache Kafka 作为数据源时候，我们也要记录已经读取记录的offset，这些State数据在计算过程中会进行持久化(插入或更新)。所以Apache Flink中的State就是与时间相关的，Apache Flink任务的内部数据（计算数据和元数据属性）的快照。</p>
<h3 id="why"><a href="#why" class="headerlink" title="why ?"></a>why ?</h3><p>与批计算相比，State是流计算特有的，批计算没有failover机制，要么成功，要么重新计算。流计算在 大多数场景 下是增量计算，数据逐条处理（大多数场景)，每次计算是在上一次计算结果之上进行处理的，这样的机制势必要将上一次的计算结果进行存储（生产模式要持久化），另外由于 机器，网络，脏数据等原因导致的程序错误，在重启job时候需要从成功的检查点(checkpoint，后面篇章会专门介绍)进行state的恢复。增量计算，Failover这些机制都需要state的支撑。</p>
<h3 id="how"><a href="#how" class="headerlink" title="how ?"></a>how ?</h3><h4 id="存储实现"><a href="#存储实现" class="headerlink" title="存储实现"></a>存储实现</h4><ul>
<li><p>基于内存的HeapStateBackend - 在debug模式使用，不 建议在生产模式下应用；</p>
</li>
<li><p>基于HDFS的FsStateBackend - 分布式文件持久化，每次读写都产生网络IO，整体性能不佳；</p>
</li>
<li><p>基于RocksDB的RocksDBStateBackend - 本地文件+异步HDFS持久化；</p>
<blockquote>
<p>Apache Flink版本选择用RocksDB+HDFS的方式进行State的存储，State存储分两个阶段，首先本地存储到RocksDB，然后异步的同步到远程的HDFS。 这样而设计既消除了HeapStateBackend的局限（内存大小，机器坏掉丢失等），也减少了纯分布式存储的网络IO开销。</p>
</blockquote>
</li>
<li><p>还有一个是基于Niagara(Alibaba内部实现)NiagaraStateBackend - 分布式持久化- 在Alibaba生产环境应用；</p>
</li>
</ul>
<h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><p>通过算子和数据层面划分</p>
<ul>
<li><p>算子类state</p>
<p>KeyedState - 这里面的key是我们在SQL语句中对应的GroupBy/PartitioneBy里面的字段，key的值就是groupby/PartitionBy字段组成的Row的字节数组，每一个key都有一个属于自己的State，key与key之间的State是不可见的</p>
</li>
<li><p>数据类state</p>
<p>OperatorState - Apache Flink内部的Source Connector的实现中就会用OperatorState来记录source数据读取的offset。</p>
</li>
</ul>
<h3 id="checkpoint"><a href="#checkpoint" class="headerlink" title="checkpoint"></a>checkpoint</h3><p>checkpoint是使Flink 能从故障恢复的一种内部机制。检查点是 Flink 应用状态的一个一致性副本，包括了输入的读取位点。在发生故障时，Flink 通过从检查点加载应用程序状态来恢复，并从恢复的读取位点继续处理，就好像什么事情都没发生一样。Flink的状态存储在Flink的内部,这样做的好处就是不再依赖外部系统,降低了对外部系统的依赖,在Flink的内部,通过自身的进程去访问状态变量.同时会定期的做checkpoint持久化,把checkpoint存储在一个分布式的持久化系统中,如果发生故障,就会从最近的一次checkpoint中将整个流的状态进行恢复.</p>
<h2 id="MemoryStateBackend"><a href="#MemoryStateBackend" class="headerlink" title="MemoryStateBackend"></a>MemoryStateBackend</h2><p>1 基于内存的状态管理器，聚合类算子的状态会存储在JobManager的内存中</p>
<p>2 单次状态大小默认最大被限制为5MB，可以通过构造函数来指定状态初始化内存大小。无论单次状态大小最大被限制为多少，都不可大于akka的frame大小（1.5MB，JobManager和TaskManager之间传输数据的最大消息容量）。状态的总大小不能超过 JobManager 的内存。</p>
<p>3 是Flink默认的后端状态管理器，默认是异步的</p>
<p>4 主机内存中的数据可能会丢失，任务可能无法恢复</p>
<p>5 将工作state保存在TaskManager的内存中，并将checkpoint数据存储在JobManager的内存中</p>
<p>适用：本地开发和调试、状态比较少的作业</p>
<h2 id="FsStateBackend"><a href="#FsStateBackend" class="headerlink" title="FsStateBackend"></a>FsStateBackend</h2><p>1 基于文件系统的状态管理器（这里的文件系统可以是本地<strong>共享</strong>文件系统，也可以是hdfs分布式文件系统。）</p>
<p>2 如果使用，默认是异步</p>
<p>3 比较稳定，3个副本，比较安全。不会出现任务无法恢复等问题</p>
<p>4 状态大小受磁盘容量限制</p>
<p>5 将工作state保存在TaskManager的内存中，并将checkpoint数据存储在文件系统中</p>
<p>适用：状态比较大，窗口比较长，大的KV状态</p>
<h2 id="RocksDBStateBackend"><a href="#RocksDBStateBackend" class="headerlink" title="RocksDBStateBackend"></a>RocksDBStateBackend</h2><ol>
<li><p>RocksDBStateBackend 采用异步的方式进行状态数据的 Snapshot， 任务中的状态数据首先被写人 RocksDB 中，然后再异步地将状态数据写人文件系统中，这样在rocksDB中仅会存储正在进行计算的热数据，对于长时间才更新的数据则写人磁盘中进行存储。而对于体量比较小的元数据状态，则直接存储在 JobManager 的内存中。</p>
</li>
<li><p>与 FsStateBackend 相比，RocksDBState Backend 在性能上要比 FsStateBackend 高一些，主要是因为借助于 RocksDB 存储了最新热数据，然后通过异步的方式再同步到文件系统中，但 RocksDBState Backend 和 Memory State Backend 相比性能就会较弱一些。</p>
</li>
<li><p>需要注意的是ROCksDB通过JNI的方式进行数据的交互，而JNI构建在byte[]数据结构之上，因此每次能够传输的最大数据量为2^31字节，也就是说每次在RocksDBState Backend 合并的状态数据量大小不能超过 2^31 字节限制，否则将会导致状态数据无法同步，这是RocksDB 采用JNI 方式的限制，用户在使用过程中应当注意。</p>
</li>
</ol>
<p>综上可以看出，RocksDBState Backend 和 FsState Backend 一样，适合于任务状态数据非常大的场景。在Flink 最新版本中，已经提供了基于 RocksDBState Backend 实现的增量 Checkpoints 功能，极大地提高了状态数据同步到介质中的效率和性能，在后续的社区发展中，RocksDBStateBackend 也会作为状态管理器重点使用的方式之一。</p>
]]></content>
      <categories>
        <category>flink</category>
      </categories>
      <tags>
        <tag>point</tag>
      </tags>
  </entry>
  <entry>
    <title>flink sql</title>
    <url>/2022/01/04/flink%20sql/</url>
    <content><![CDATA[<h1 id="table-vs-view"><a href="#table-vs-view" class="headerlink" title="table vs view"></a>table vs view</h1><blockquote>
<p>Temporary tables are always stored in memory and only exist for the duration of the Flink session they are created within. These tables are not visible to other sessions. They are not bound to any catalog or database but can be created in the namespace of one. Temporary tables are not dropped if their corresponding database is removed.</p>
</blockquote>
<blockquote>
<p>Tables can be either virtual (VIEWS) or regular (TABLES). VIEWS can be created from an existing Table object, usually the result of a Table API or SQL query. TABLES describe external data, such as a file, database table, or message queue.</p>
</blockquote>
<h1 id="grammer"><a href="#grammer" class="headerlink" title="grammer"></a>grammer</h1><ul>
<li>NOT ENFORCED</li>
</ul>
<blockquote>
<p>If you know that the data conforms to these constraints, you can use the NOT ENFORCED capability to help achieve two goals:</p>
<ul>
<li>Improve performance, primarily in insert, update, and delete operations on the table</li>
<li>Reduce space requirements that are associated with enforcing a primary key or unique constraint</li>
</ul>
</blockquote>
<h1 id="data-type"><a href="#data-type" class="headerlink" title="data type"></a>data type</h1><h3 id="字符串类型："><a href="#字符串类型：" class="headerlink" title="字符串类型："></a>字符串类型：</h3><ul>
<li>⭐ CHAR、CHAR(n)：定长字符串，就和 Java 中的 Char 一样，n 代表字符的定长，取值范围 [1, 2,147,483,647]。如果不指定 n，则默认为 1。</li>
<li>⭐ VARCHAR、VARCHAR(n)、STRING：可变长字符串，就和 Java 中的 String 一样，n 代表字符的最大长度，取值范围 [1, 2,147,483,647]。如果不指定 n，则默认为 1。STRING 等同于 VARCHAR(2147483647)。</li>
</ul>
<h3 id="二进制字符串类型："><a href="#二进制字符串类型：" class="headerlink" title="二进制字符串类型："></a>二进制字符串类型：</h3><ul>
<li>⭐ BINARY、BINARY(n)：定长二进制字符串，n 代表定长，取值范围 [1, 2,147,483,647]。如果不指定 n，则默认为 1。</li>
<li>⭐ VARBINARY、VARBINARY(n)、BYTES：可变长二进制字符串，n 代表字符的最大长度，取值范围 [1, 2,147,483,647]。如果不指定 n，则默认为 1。BYTES 等同于 VARBINARY(2147483647)。</li>
</ul>
<h3 id="精确数值类型："><a href="#精确数值类型：" class="headerlink" title="精确数值类型："></a>精确数值类型：</h3><ul>
<li>⭐ DECIMAL、DECIMAL(p)、DECIMAL(p, s)、DEC、DEC(p)、DEC(p, s)、NUMERIC、NUMERIC(p)、NUMERIC(p, s)：固定长度和精度的数值类型，就和 Java 中的 BigDecimal 一样，p 代表数值位数（长度），取值范围 [1, 38]；s 代表小数点后的位数（精度），取值范围 [0, p]。如果不指定，p 默认为 10，s 默认为 0。</li>
<li>⭐ TINYINT：-128 到 127 的 1 字节大小的有符号整数，就和 Java 中的 byte 一样。</li>
<li>⭐ SMALLINT：-32,768 to 32,767 的 2 字节大小的有符号整数，就和 Java 中的 short 一样。</li>
<li>⭐ INT、INTEGER：-2,147,483,648 to 2,147,483,647 的 4 字节大小的有符号整数，就和 Java 中的 int 一样。</li>
<li>⭐ BIGINT：-9,223,372,036,854,775,808 to 9,223,372,036,854,775,807 的 8 字节大小的有符号整数，就和 Java 中的 long 一样。</li>
</ul>
<h3 id="有损精度数值类型："><a href="#有损精度数值类型：" class="headerlink" title="有损精度数值类型："></a>有损精度数值类型：</h3><ul>
<li>⭐ FLOAT：4 字节大小的单精度浮点数值，就和 Java 中的 float 一样。</li>
<li>⭐ DOUBLE、DOUBLE PRECISION：8 字节大小的双精度浮点数值，就和 Java 中的 double 一样。</li>
<li>⭐ 关于 FLOAT 和 DOUBLE 的区别可见 <a href="https://www.runoob.com/w3cnote/float-and-double-different.html">https://www.runoob.com/w3cnote/float-and-double-different.html</a></li>
</ul>
<h3 id="日期、时间类型："><a href="#日期、时间类型：" class="headerlink" title="日期、时间类型："></a>日期、时间类型：</h3><ul>
<li><p>⭐ DATE：由 <code>年-月-日</code> 组成的 <code>不带时区含义</code> 的日期类型，取值范围 [0000-01-01, 9999-12-31]</p>
</li>
<li><p>⭐ TIME、TIME(p)：由 <code>小时：分钟：秒[.小数秒]</code> 组成的 <code>不带时区含义</code> 的的时间的数据类型，精度高达纳秒，取值范围 [00:00:00.000000000到23:59:59.9999999]。其中 p 代表小数秒的位数，取值范围 [0, 9]，如果不指定 p，默认为 0。</p>
</li>
<li><p>⭐ TIMESTAMP、TIMESTAMP(p)、TIMESTAMP WITHOUT TIME ZONE、TIMESTAMP(p) WITHOUT TIME ZONE：由 <code>年-月-日 小时：分钟：秒[.小数秒]</code> 组成的 <code>不带时区含义</code> 的时间类型，取值范围 [0000-01-01 00:00:00.000000000, 9999-12-31 23:59:59.999999999]。其中 p 代表小数秒的位数，取值范围 [0, 9]，如果不指定 p，默认为 6。</p>
<p>Timestamp precision can range from 0 (seconds) to 9 (nanoseconds). The default precision is 6.</p>
</li>
<li><p>⭐ TIMESTAMP WITH TIME ZONE、TIMESTAMP(p) WITH TIME ZONE：由 <code>年-月-日 小时：分钟：秒[.小数秒] 时区</code> 组成的 <code>带时区含义</code> 的时间类型，取值范围 [0000-01-01 00:00:00.000000000 +14:59, 9999-12-31 23:59:59.999999999 -14:59]。其中 p 代表小数秒的位数，取值范围 [0, 9]，如果不指定 p，默认为 6。</p>
</li>
<li><p>⭐ TIMESTAMP_LTZ、TIMESTAMP_LTZ(p)：由 <code>年-月-日 小时：分钟：秒[.小数秒] 时区</code> 组成的 <code>带时区含义</code> 的时间类型，取值范围 [0000-01-01 00:00:00.000000000 +14:59, 9999-12-31 23:59:59.999999999 -14:59]。其中 p 代表小数秒的位数，取值范围 [0, 9]，如果不指定 p，默认为 6。</p>
</li>
<li><p>⭐ TIMESTAMP_LTZ 与 TIMESTAMP WITH TIME ZONE 的区别在于：TIMESTAMP WITH TIME ZONE 的时区信息是携带在数据中的，举例：其输入数据应该是 2022-01-01 00:00:00.000000000 +08:00；TIMESTAMP_LTZ 的时区信息不是携带在数据中的，而是由 Flink SQL 任务的全局配置决定的，我们可以由 <code>table.local-time-zone</code> 参数来设置时区。</p>
</li>
<li><p>⭐ INTERVAL YEAR TO MONTH、 INTERVAL DAY TO SECOND：interval 的涉及到的种类比较多。INTERVAL 主要是用于给 TIMESTAMP、TIMESTAMP_LTZ 添加偏移量的。举例，比如给 TIMESTAMP 加、减几天、几个月、几年。INTERVAL 子句总共涉及到的语法种类如下 Flink SQL 案例所示。</p>
</li>
</ul>
<p>​    <strong>注意：但是在 Flink SQL 中，无法直接去掉时间字段的小数秒部分而保留时间类型。</strong></p>
<h3 id="其它类型"><a href="#其它类型" class="headerlink" title="其它类型"></a>其它类型</h3><ol>
<li>布尔类型：BOOLEAN</li>
<li>⭐ NULL 类型：NULL</li>
<li>⭐ Raw 类型：RAW(‘class’, ‘snapshot’) 。只会在数据发生网络传输时进行序列化，反序列化操作，可以保留其原始数据。以 Java 举例，<code>class</code> 参数代表具体对应的 Java 类型，<code>snapshot</code> 代表类型在发生网络传输时的序列化器</li>
</ol>
]]></content>
      <categories>
        <category>flink</category>
      </categories>
      <tags>
        <tag>point</tag>
      </tags>
  </entry>
  <entry>
    <title>flink table</title>
    <url>/2021/12/24/flink%20table/</url>
    <content><![CDATA[<h2 id="时间属性"><a href="#时间属性" class="headerlink" title="时间属性"></a>时间属性</h2><blockquote>
<p> 像窗口（在 <a href="https://nightlies.apache.org/flink/flink-docs-master/zh/docs/dev/table/tableapi/#group-windows">Table API</a> 和 <a href="https://nightlies.apache.org/flink/flink-docs-master/zh/docs/dev/table/sql/queries/window-agg/">SQL</a> ）这种基于时间的操作，需要有时间信息。因此，Table API 中的表就需要提供<em>逻辑时间属性</em>来表示时间，以及支持时间相关的操作。</p>
</blockquote>
<p>每种类型的表都可以有时间属性，时间属性可以通过</p>
<ol>
<li>用CREATE TABLE DDL创建表的时候指定</li>
<li>可以在 <code>DataStream</code> 中指定</li>
<li>可以在定义 <code>TableSource</code> 时指定。</li>
</ol>
<p>一旦时间属性定义好，它就可以像普通列一样使用，也可以在时间相关的操作中使用，只要时间属性没有被修改，而是简单地从一个表传递到另一个表，它就仍然是一个有效的时间属性。</p>
<p>时间属性可以像普通的时间戳的列一样被使用和计算。一旦时间属性被用在了计算中，它就会被物化，进而变成一个普通的时间戳。普通的时间戳是无法跟 Flink 的时间以及watermark等一起使用的，所以普通的时间戳就无法用在时间相关的操作中（这句话是只限于被修改的普通时间戳，还是包含未被修改的时间戳）。</p>
<h3 id="处理时间"><a href="#处理时间" class="headerlink" title="处理时间"></a>处理时间</h3><blockquote>
<p>处理时间是基于机器的本地时间来处理数据，它是最简单的一种时间概念，但是它不能提供确定性。它既不需要从数据里获取时间，也不需要生成 watermark。</p>
</blockquote>
<p>定义处理时间的三种方法:</p>
<ol>
<li><p>在创建表的 DDL 中定义</p>
<blockquote>
<p>用 <code>PROCTIME()</code> 就可以定义处理时间，函数 <code>PROCTIME()</code> 的返回类型是 TIMESTAMP_LTZ </p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">CREATE TABLE <span class="title">user_actions</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  user_name STRING,</span></span></span><br><span class="line"><span class="params"><span class="function">  data STRING,</span></span></span><br><span class="line"><span class="params"><span class="function">  user_action_time AS PROCTIME()</span> -- 声明一个额外的列作为处理时间属性</span></span><br><span class="line"><span class="function">) <span class="title">WITH</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  ...</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure></li>
<li><p>在 DataStream 到 Table 转换时定义</p>
<blockquote>
<p>处理时间属性可以在 schema 定义的时候用 <code>.proctime</code> 后缀来定义。时间属性一定不能定义在一个已有字段上，所以它只能定义在 schema 定义的最后。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DataStream&lt;Tuple2&lt;String, String&gt;&gt; stream = ...;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明一个额外的字段作为时间属性字段</span></span><br><span class="line">Table table = tEnv.fromDataStream(stream, $(<span class="string">&quot;user_name&quot;</span>), $(<span class="string">&quot;data&quot;</span>), $(<span class="string">&quot;user_action_time&quot;</span>).proctime());</span><br><span class="line"></span><br><span class="line">WindowedTable windowedTable = table.window(</span><br><span class="line">        Tumble.over(lit(<span class="number">10</span>).minutes())</span><br><span class="line">            .on($(<span class="string">&quot;user_action_time&quot;</span>))</span><br><span class="line">            .as(<span class="string">&quot;userActionWindow&quot;</span>));</span><br></pre></td></tr></table></figure></li>
<li><p>使用 TableSource 定义</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义一个由处理时间属性的 table source</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserActionSource</span> <span class="keyword">implements</span> <span class="title">StreamTableSource</span>&lt;<span class="title">Row</span>&gt;, <span class="title">DefinedProctimeAttribute</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TypeInformation&lt;Row&gt; <span class="title">getReturnType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String[] names = <span class="keyword">new</span> String[] &#123;<span class="string">&quot;user_name&quot;</span> , <span class="string">&quot;data&quot;</span>&#125;;</span><br><span class="line">        TypeInformation[] types = <span class="keyword">new</span> TypeInformation[] &#123;Types.STRING(), Types.STRING()&#125;;</span><br><span class="line">        <span class="keyword">return</span> Types.ROW(names, types);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataStream&lt;Row&gt; <span class="title">getDataStream</span><span class="params">(StreamExecutionEnvironment execEnv)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// create stream</span></span><br><span class="line">        DataStream&lt;Row&gt; stream = ...;</span><br><span class="line">        <span class="keyword">return</span> stream;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getProctimeAttribute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 这个名字的列会被追加到最后，作为第三列</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;user_action_time&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// register table source</span></span><br><span class="line">tEnv.registerTableSource(<span class="string">&quot;user_actions&quot;</span>, <span class="keyword">new</span> UserActionSource());</span><br><span class="line"></span><br><span class="line">WindowedTable windowedTable = tEnv</span><br><span class="line">    .from(<span class="string">&quot;user_actions&quot;</span>)</span><br><span class="line">    .window(Tumble</span><br><span class="line">        .over(lit(<span class="number">10</span>).minutes())</span><br><span class="line">        .on($(<span class="string">&quot;user_action_time&quot;</span>))</span><br><span class="line">        .as(<span class="string">&quot;userActionWindow&quot;</span>));</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="事件时间"><a href="#事件时间" class="headerlink" title="事件时间"></a>事件时间</h3><blockquote>
<p>事件时间允许程序按照数据中包含的时间来处理，这样可以在有乱序或者晚到的数据的情况下产生一致的处理结果。为了能够处理乱序的事件，并且区分正常到达和晚到的事件，Flink 需要从事件中获取事件时间并且产生 <a href="https://nightlies.apache.org/flink/flink-docs-master/zh/docs/concepts/time/">watermarks</a>。</p>
</blockquote>
<p>定义事件时间的三种方法:</p>
<ol>
<li><p>在 DDL 中定义</p>
<blockquote>
<p>WATERMARK 语句在一个已有字段上定义一个 watermark 生成表达式，同时标记这个已有字段为时间属性字段。</p>
</blockquote>
<p>Flink 支持和在 TIMESTAMP 列和 TIMESTAMP_LTZ 列上定义事件时间。</p>
<ul>
<li><p>如果源数据中的时间戳数据表示为年-月-日-时-分-秒，则通常为不带时区信息的字符串值，例如 <code>2020-04-15 20:13:40.564</code>，建议将事件时间属性定义在 <code>TIMESTAMP</code> 列上,</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">CREATE TABLE <span class="title">user_actions</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  user_name STRING,</span></span></span><br><span class="line"><span class="params"><span class="function">  data STRING,</span></span></span><br><span class="line"><span class="params"><span class="function">  user_action_time TIMESTAMP(<span class="number">3</span>)</span>,</span></span><br><span class="line"><span class="function">  -- 声明 user_action_time 是事件时间属性，并且用 延迟 5 秒的策略来生成 watermark</span></span><br><span class="line"><span class="function">  WATERMARK FOR user_action_time AS user_action_time - INTERVAL &#x27;5&#x27; SECOND</span></span><br><span class="line"><span class="function">) <span class="title">WITH</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  ...</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">SELECT <span class="title">TUMBLE_START</span><span class="params">(user_action_time, INTERVAL <span class="string">&#x27;10&#x27;</span> MINUTE)</span>, <span class="title">COUNT</span><span class="params">(DISTINCT user_name)</span></span></span><br><span class="line"><span class="function">FROM user_actions</span></span><br><span class="line"><span class="function">GROUP BY <span class="title">TUMBLE</span><span class="params">(user_action_time, INTERVAL <span class="string">&#x27;10&#x27;</span> MINUTE)</span></span>;</span><br></pre></td></tr></table></figure></li>
<li><p>如果源数据中的时间戳数据为带时区信息的字符串值，例如源数据中的时间戳数据表示为一个纪元 (epoch) 时间，通常是一个 long 值，例如 <code>1618989564564</code>，建议将事件时间属性定义在 <code>TIMESTAMP_LTZ</code> 列上：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">CREATE TABLE <span class="title">user_actions</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function"> user_name STRING,</span></span></span><br><span class="line"><span class="params"><span class="function"> data STRING,</span></span></span><br><span class="line"><span class="params"><span class="function"> ts BIGINT,</span></span></span><br><span class="line"><span class="params"><span class="function"> time_ltz AS TO_TIMESTAMP_LTZ(ts, <span class="number">3</span>)</span>,</span></span><br><span class="line"><span class="function"> -- declare time_ltz as event time attribute and use 5 seconds delayed watermark strategy</span></span><br><span class="line"><span class="function"> WATERMARK FOR time_ltz AS time_ltz - INTERVAL &#x27;5&#x27; SECOND</span></span><br><span class="line"><span class="function">) <span class="title">WITH</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function"> ...</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">SELECT <span class="title">TUMBLE_START</span><span class="params">(time_ltz, INTERVAL <span class="string">&#x27;10&#x27;</span> MINUTE)</span>, <span class="title">COUNT</span><span class="params">(DISTINCT user_name)</span></span></span><br><span class="line"><span class="function">FROM user_actions</span></span><br><span class="line"><span class="function">GROUP BY <span class="title">TUMBLE</span><span class="params">(time_ltz, INTERVAL <span class="string">&#x27;10&#x27;</span> MINUTE)</span></span>;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>在 DataStream 到 Table 转换时定义</p>
<blockquote>
<p>事件时间属性可以用 <code>.rowtime</code> 后缀在定义 <code>DataStream</code> schema 的时候来定义。</p>
<p><a href="https://nightlies.apache.org/flink/flink-docs-master/zh/docs/concepts/time/">时间戳和 watermark</a> 在这之前一定是在 <code>DataStream</code> 上已经定义好了。 在从 DataStream 转换到 Table 时，由于 <code>DataStream</code> 没有时区概念，因此 Flink 总是将 <code>rowtime</code> 属性解析成 <code>TIMESTAMP WITHOUT TIME ZONE</code> 类型，并且将所有事件时间的值都视为 UTC 时区的值。</p>
</blockquote>
<ul>
<li>Option 1</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基于 stream 中的事件产生时间戳和 watermark</span></span><br><span class="line">DataStream&lt;Tuple2&lt;String, String&gt;&gt; stream = inputStream.assignTimestampsAndWatermarks(...);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明一个额外的逻辑字段作为事件时间属性</span></span><br><span class="line">Table table = tEnv.fromDataStream(stream, $(<span class="string">&quot;user_name&quot;</span>), $(<span class="string">&quot;data&quot;</span>), $(<span class="string">&quot;user_action_time&quot;</span>).rowtime());</span><br></pre></td></tr></table></figure>

<ul>
<li>Option 2</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="comment">// 从第一个字段获取事件时间，并且产生 watermark</span></span><br><span class="line">DataStream&lt;Tuple3&lt;Long, String, String&gt;&gt; stream = inputStream.assignTimestampsAndWatermarks(...);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一个字段已经用作事件时间抽取了，不用再用一个新字段来表示事件时间了</span></span><br><span class="line">Table table = tEnv.fromDataStream(stream, $(<span class="string">&quot;user_action_time&quot;</span>).rowtime(), $(<span class="string">&quot;user_name&quot;</span>), $(<span class="string">&quot;data&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Usage:</span></span><br><span class="line"></span><br><span class="line">WindowedTable windowedTable = table.window(Tumble</span><br><span class="line">      .over(lit(<span class="number">10</span>).minutes())</span><br><span class="line">      .on($(<span class="string">&quot;user_action_time&quot;</span>))</span><br><span class="line">      .as(<span class="string">&quot;userActionWindow&quot;</span>));</span><br></pre></td></tr></table></figure></li>
<li><p>使用 TableSource 定义</p>
<blockquote>
<p>事件时间属性可以在实现了 <code>DefinedRowTimeAttributes</code> 的 <code>TableSource</code> 中定义。<code>getRowtimeAttributeDescriptors()</code> 方法返回 <code>RowtimeAttributeDescriptor</code> 的列表，包含了描述事件时间属性的字段名字、如何计算事件时间、以及 watermark 生成策略等信息。</p>
<p>同时需要确保 <code>getDataStream</code> 返回的 <code>DataStream</code> 已经定义好了时间属性。</p>
<p> 只有在定义了 <code>StreamRecordTimestamp</code> 时间戳分配器的时候，才认为 <code>DataStream</code> 是有时间戳信息的。 只有定义了 <code>PreserveWatermarks</code> watermark 生成策略的 <code>DataStream</code> 的 watermark 才会被保留。反之，则只有时间字段的值是生效的。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义一个有事件时间属性的 table source</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserActionSource</span> <span class="keyword">implements</span> <span class="title">StreamTableSource</span>&lt;<span class="title">Row</span>&gt;, <span class="title">DefinedRowtimeAttributes</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TypeInformation&lt;Row&gt; <span class="title">getReturnType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String[] names = <span class="keyword">new</span> String[] &#123;<span class="string">&quot;user_name&quot;</span>, <span class="string">&quot;data&quot;</span>, <span class="string">&quot;user_action_time&quot;</span>&#125;;</span><br><span class="line">        TypeInformation[] types =</span><br><span class="line">            <span class="keyword">new</span> TypeInformation[] &#123;Types.STRING(), Types.STRING(), Types.LONG()&#125;;</span><br><span class="line">        <span class="keyword">return</span> Types.ROW(names, types);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataStream&lt;Row&gt; <span class="title">getDataStream</span><span class="params">(StreamExecutionEnvironment execEnv)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 构造 DataStream</span></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="comment">// 基于 &quot;user_action_time&quot; 定义 watermark</span></span><br><span class="line">        DataStream&lt;Row&gt; stream = inputStream.assignTimestampsAndWatermarks(...);</span><br><span class="line">        <span class="keyword">return</span> stream;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;RowtimeAttributeDescriptor&gt; <span class="title">getRowtimeAttributeDescriptors</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 标记 &quot;user_action_time&quot; 字段是事件时间字段</span></span><br><span class="line">        <span class="comment">// 给 &quot;user_action_time&quot; 构造一个时间属性描述符</span></span><br><span class="line">        RowtimeAttributeDescriptor rowtimeAttrDescr = <span class="keyword">new</span> RowtimeAttributeDescriptor(</span><br><span class="line">            <span class="string">&quot;user_action_time&quot;</span>,</span><br><span class="line">            <span class="keyword">new</span> ExistingField(<span class="string">&quot;user_action_time&quot;</span>),</span><br><span class="line">            <span class="keyword">new</span> AscendingTimestamps());</span><br><span class="line">        List&lt;RowtimeAttributeDescriptor&gt; listRowtimeAttrDescr = Collections.singletonList(rowtimeAttrDescr);</span><br><span class="line">        <span class="keyword">return</span> listRowtimeAttrDescr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// register the table source</span></span><br><span class="line">tEnv.registerTableSource(<span class="string">&quot;user_actions&quot;</span>, <span class="keyword">new</span> UserActionSource());</span><br><span class="line"></span><br><span class="line">WindowedTable windowedTable = tEnv</span><br><span class="line">    .from(<span class="string">&quot;user_actions&quot;</span>)</span><br><span class="line">    .window(Tumble.over(lit(<span class="number">10</span>).minutes()).on($(<span class="string">&quot;user_action_time&quot;</span>)).as(<span class="string">&quot;userActionWindow&quot;</span>));</span><br></pre></td></tr></table></figure></li>
</ol>
<hr>
<h3 id="format"><a href="#format" class="headerlink" title="format"></a>format</h3><ul>
<li>timestamp可以将时间戳类型数据最高精确微秒(百万分之一秒)，数据类型定义为timestamp(N),N取值范围为0-6，默认为0，如需要精确到毫秒则设置为Timestamp(3)，如需要精确到微秒则设置为timestamp(6)，数据精度提高的代价是其内部存储空间的变大，但仍未改变时间戳类型的最小和最大取值范围。</li>
</ul>
<h3 id="connector-kafka"><a href="#connector-kafka" class="headerlink" title="connector kafka"></a>connector kafka</h3>]]></content>
      <categories>
        <category>flink</category>
      </categories>
      <tags>
        <tag>learn</tag>
      </tags>
  </entry>
  <entry>
    <title>flink watermark</title>
    <url>/2022/01/11/flink%20watermark/</url>
    <content><![CDATA[<p>Watermark是Apache Flink为了处理EventTime 窗口计算提出的一种机制,本质上也是一种时间戳。</p>
<p>由Apache Flink Source或者自定义的Watermark生成器按照需求Punctuated或者Periodic两种方式生成的一种系统Event，与普通数据流Event一样流转到对应的下游算子，接收到Watermark Event的算子以此不断调整自己管理的EventTime clock。</p>
<p>Apache Flink 框架保证Watermark单调递增，算子接收到一个Watermark时候，框架知道不会再有任何小于该Watermark的时间戳的数据元素到来了，所以Watermark可以看做是告诉Apache Flink框架数据流已经处理到什么位置(时间维度)的方式。</p>
<p>Watermark的产生和Apache Flink内部处理逻辑如下图所示:</p>
<p><img src="/images/flink/flink_watermark.png"></p>
<h3 id="产生方式"><a href="#产生方式" class="headerlink" title="产生方式"></a>产生方式</h3><ul>
<li><p>Punctuated - 数据流中每一个递增的EventTime都会产生一个Watermark。 在实际的生产中Punctuated方式在TPS很高的场景下会产生大量的Watermark在一定程度上对下游算子造成压力，所以只有在实时性要求非常高的场景才会选择Punctuated的方式进行Watermark的生成。</p>
</li>
<li><p>Periodic - 周期性的（一定时间间隔或者达到一定的记录条数）产生一个Watermark。在实际的生产中Periodic的方式必须结合时间和积累条数两个维度继续周期性产生Watermark，否则在极端情况下会有很大的延时。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>flink</category>
      </categories>
      <tags>
        <tag>point</tag>
      </tags>
  </entry>
  <entry>
    <title>flink streaming warehouse</title>
    <url>/2022/01/11/flink%20streaming%20warehouse/</url>
    <content><![CDATA[<p>流式数仓（Streaming Warehouse）更准确地说，其实是“make data warehouse streaming”，就是让整个数仓的数据全实时地流动起来，且是以纯流的方式而不是微批（mini-batch）的方式流动。</p>
<p>目标是实现一个具备端到端实时性的纯流服务（Streaming Service），用一套 API 分析所有流动中的数据，当源头数据发生变化，比如捕捉到在线服务的 Log 或数据库的 Binlog 以后，就按照提前定义好的 Query 逻辑或数据处理逻辑，对数据进行分析，分析后的数据落到数仓的某一个分层，再从第一个分层向下一个分层流动，然后数仓所有分层会全部流动起来，最终流到一个在线系统里，用户可以看到整个数仓的全实时流动效果。</p>
<p>在这个过程中，数据是主动的，而查询是被动的，分析由数据的变化来驱动。同时在垂直方向上，对每一个数据明细层，用户都可以执行 Query 进行主动查询，并且能实时获得查询结果。此外，它还能兼容离线分析场景，API 依然是同一套，实现真正的一体化。</p>
]]></content>
      <categories>
        <category>flink</category>
      </categories>
      <tags>
        <tag>warehouse</tag>
      </tags>
  </entry>
  <entry>
    <title>flink 运行机制</title>
    <url>/2020/10/01/flink%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h1 id="运行时框架"><a href="#运行时框架" class="headerlink" title="运行时框架"></a>运行时框架</h1><p><img src="/images/flink/flink_runtime_architecture.png"></p>
<h1 id="作业调度框架"><a href="#作业调度框架" class="headerlink" title="作业调度框架"></a>作业调度框架</h1><p><img src="/images/flink/flink_schedule_architecture.png"></p>
<h1 id="table模块架构"><a href="#table模块架构" class="headerlink" title="table模块架构"></a>table模块架构</h1><p><img src="/images/flink/flink_table_architecture.png"></p>
<h1 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h1><h2 id="TaskExecutor"><a href="#TaskExecutor" class="headerlink" title="TaskExecutor"></a>TaskExecutor</h2><ol>
<li><code>taskmanager.numberOfTaskSlots</code>：指定每个TaskExecutor的任务槽数量。默认情况下，该属性设置为1，表示每个TaskExecutor只能执行一个任务。如果需要在同一节点上并行执行多个任务，则需要将该属性设置为大于1的值。</li>
<li><code>taskmanager.memory.process.size</code>：指定TaskExecutor进程的内存大小。默认情况下，该属性设置为1GB。可以根据节点的资源情况和作业的内存需求进行适当调整。</li>
<li><code>taskmanager.cpu.cores</code>：指定TaskExecutor可以使用的CPU核心数量。默认情况下，该属性设置为所有可用的CPU核心数。可以根据节点的CPU资源情况和作业的CPU需求进行适当调整。</li>
<li><code>taskmanager.tmp.dirs</code>：指定TaskExecutor使用的临时文件目录。默认情况下，该属性设置为系统的临时目录。可以根据节点的磁盘空间情况和作业的磁盘需求进行适当调整。</li>
</ol>
]]></content>
      <categories>
        <category>flink</category>
      </categories>
      <tags>
        <tag>learn</tag>
      </tags>
  </entry>
  <entry>
    <title>git skill</title>
    <url>/2016/08/05/git%20snippet/</url>
    <content><![CDATA[<h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><ul>
<li><p>提交单个文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git commit &lt;file&gt; -m &quot;your comment&quot; </span><br><span class="line">git pull</span><br><span class="line">git push</span><br></pre></td></tr></table></figure></li>
<li><p>提交多个文件，但是需要排除指定的文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git add -u</span><br><span class="line">git reset -- main/dontcheckmein.txt</span><br><span class="line">然后进行commit、pull等操作</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="Git-fork后的分支，更新最新的源代码"><a href="#Git-fork后的分支，更新最新的源代码" class="headerlink" title="Git fork后的分支，更新最新的源代码"></a>Git fork后的分支，更新最新的源代码</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sourcer为源项目代码</span><br><span class="line">forker为fork之后的项目代码</span><br><span class="line"></span><br><span class="line">1、找一个空的目录下签出 fork 后的代码</span><br><span class="line">git clone https://github.com/sourcer/demo.git</span><br><span class="line">查看 remote 信息</span><br><span class="line">git remote -v</span><br><span class="line"></span><br><span class="line">2、然后添加源项目地址（距离定义为 source）</span><br><span class="line">git remote add source https://github.com/forker/demo.git</span><br><span class="line">查看 remote 信息，可以看到新增两条信息</span><br><span class="line">git remote -v</span><br><span class="line"></span><br><span class="line">3、fetch 源项目</span><br><span class="line">git fetch source</span><br><span class="line"></span><br><span class="line">4、合并代码</span><br><span class="line">git merge source/master</span><br><span class="line"></span><br><span class="line">5、把合并最新的代码推送到你的fork项目上</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure>

<h4 id="比较文件，在不同版本的区别"><a href="#比较文件，在不同版本的区别" class="headerlink" title="比较文件，在不同版本的区别"></a>比较文件，在不同版本的区别</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> uncommited file to HEAD</span></span><br><span class="line">git diff &lt;path&gt;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> uncommited file to before last commit</span></span><br><span class="line">git diff HEAD^ -- &lt;path&gt;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">last commit to before last commit</span></span><br><span class="line">git diff HEAD^ HEAD -- &lt;path&gt;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">difference between HEAD and n-th grandparent</span></span><br><span class="line">git diff HEAD~n HEAD -- &lt;path&gt;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">Another cool feature is whatchanged <span class="built_in">command</span></span></span><br><span class="line">git whatchanged -- &lt;path&gt;</span><br></pre></td></tr></table></figure>

<h4 id="查看本地分支与远程分支的关联"><a href="#查看本地分支与远程分支的关联" class="headerlink" title="查看本地分支与远程分支的关联"></a>查看本地分支与远程分支的关联</h4><p><code>git branch -vv</code></p>
<h4 id="查看每一行是哪次提交最后修改的"><a href="#查看每一行是哪次提交最后修改的" class="headerlink" title="查看每一行是哪次提交最后修改的"></a>查看每一行是哪次提交最后修改的</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git blame filename </span><br></pre></td></tr></table></figure>

<h4 id="列出文件的所有修改记录"><a href="#列出文件的所有修改记录" class="headerlink" title="列出文件的所有修改记录"></a>列出文件的所有修改记录</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git log -p filename</span><br></pre></td></tr></table></figure>

<h4 id="删除远程仓库文件，但保留本地文件系统的文件"><a href="#删除远程仓库文件，但保留本地文件系统的文件" class="headerlink" title="删除远程仓库文件，但保留本地文件系统的文件"></a>删除远程仓库文件，但保留本地文件系统的文件</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 文件</span></span><br><span class="line">git rm --cached path/to/file</span><br><span class="line"><span class="meta">#</span><span class="bash"> 目录</span></span><br><span class="line">git rm -r --cached path/to/directory</span><br></pre></td></tr></table></figure>



<h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><h4 id="查看分支对应的远程分支"><a href="#查看分支对应的远程分支" class="headerlink" title="查看分支对应的远程分支"></a>查看分支对应的远程分支</h4><p><code>git branch -vv</code></p>
<h4 id="回滚远程分支"><a href="#回滚远程分支" class="headerlink" title="回滚远程分支"></a>回滚远程分支</h4><p>1、本地代码回滚到上一版本</p>
<blockquote>
<p>git reset –hard HEAD~1</p>
</blockquote>
<p>（或者回滚到指定版本commitId）</p>
<blockquote>
<p>git reset –hard commitId</p>
</blockquote>
<p>2、加入-f参数，强制提交，远程端将强制跟新到reset版本</p>
<blockquote>
<p> git push -f</p>
</blockquote>
<h4 id="拉取远程分支"><a href="#拉取远程分支" class="headerlink" title="拉取远程分支"></a>拉取远程分支</h4><p>First, fetch the remote branches:</p>
<p><strong>git fetch origin</strong></p>
<p>Next, checkout the branch you want. In this case, the branch we want is called “branchxyz”.</p>
<p><strong>git checkout -b branchxyz origin/branchxyz</strong></p>
<h4 id="新建分支"><a href="#新建分支" class="headerlink" title="新建分支"></a>新建分支</h4><ul>
<li><p>To create a new branch from a branch you do NOT have checked out:</p>
<p><code>git branch new_branch from_branch</code></p>
</li>
<li><p>To create a new branch from the branch you DO have checked out:</p>
<p><code>git branch new_branch</code></p>
</li>
<li><p>To create <em>and check out</em> a new branch from the branch you DO have checked out:</p>
<p><code>git checkout -b new_branch</code></p>
</li>
<li><p>To create <em>and check out</em> a new branch from a branch you do NOT have checked out:</p>
<p><code>git checkout -b new_branch from_branch</code></p>
</li>
<li><p>To rename a branch</p>
<p><code>git branch -m old_name new_name</code></p>
</li>
</ul>
<h4 id="推送新分支到远程"><a href="#推送新分支到远程" class="headerlink" title="推送新分支到远程"></a>推送新分支到远程</h4><p>在新建分支完成的前提下</p>
<ol>
<li><p>将develop分支推送到远程</p>
<p><code>git push origin new_branch:new_branch</code></p>
</li>
<li><p>建立本地至上游（远程）分支的链接</p>
<p><code>git branch --set-upstream-to=origin/new_branch new_branch</code></p>
</li>
</ol>
<h4 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// delete branch locally (如果要删除这个分支的话，需要跳转至其他分支后进行删除操作)</span><br><span class="line">git branch -d localBranchName</span><br><span class="line"></span><br><span class="line">// delete branch remotely</span><br><span class="line">git push origin --delete remoteBranchName</span><br><span class="line"></span><br><span class="line">//If someone else has already deleted the branch, you just do below</span><br><span class="line">git fetch -p</span><br></pre></td></tr></table></figure>

<h4 id="重命名分支"><a href="#重命名分支" class="headerlink" title="重命名分支"></a>重命名分支</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git branch -m new-branch-name</span><br></pre></td></tr></table></figure>

<h2 id="stash"><a href="#stash" class="headerlink" title="stash"></a>stash</h2><p>在Git中，<code>stash</code>命令用于暂存当前未提交的代码修改，以便在后续时刻再次应用它们。它可以暂存已修改但还未添加到暂存区的文件，也可以暂存已经添加到暂存区但还未提交的文件。</p>
<p>以下是<code>stash</code>命令的使用方式：</p>
<ol>
<li><p>暂存当前修改：(这个命令将当前的修改暂存起来，让你的工作目录变成干净的状态。)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git stash</span><br></pre></td></tr></table></figure></li>
<li><p>恢复暂存的修改：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git stash apply</span><br></pre></td></tr></table></figure>

<p>这个命令将之前暂存的修改应用到当前分支上。如果你有多个stash，可以使用<code>git stash apply stash@&#123;n&#125;</code>来指定恢复某个特定的stash。</p>
</li>
<li><p>删除stash：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git stash drop</span><br></pre></td></tr></table></figure>

<p>这个命令会删除最近的一个stash。</p>
</li>
<li><p>列出所有stash：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git stash list</span><br></pre></td></tr></table></figure></li>
<li><p>应用并删除stash：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git stash pop</span><br></pre></td></tr></table></figure>

<p>这个命令相当于<code>git stash apply</code>和<code>git stash drop</code>的组合，它会将最近的一个stash应用到当前分支，并将其删除。</p>
</li>
<li><p>暂存特定的文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git stash push path/to/file</span><br></pre></td></tr></table></figure>

<p>这个命令可以将指定的文件暂存起来，而不是暂存整个工作目录。</p>
</li>
<li><p>给stash添加描述：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git stash save <span class="string">&quot;stash message&quot;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="rebase"><a href="#rebase" class="headerlink" title="rebase"></a>rebase</h2><p><a href="https://waynerv.com/posts/git-rebase-intro/">git rebase 用法详解与工作原理</a></p>
<p><a href="https://johneverettcase.com/git-how-to-rebase-a-fork">How to Rebase a Fork</a></p>
<ol>
<li><p><strong>更新本地主分支（通常是 master 或 main）:</strong> 获取原始仓库的最新更改并合并到你的本地主分支：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git checkout master  # 切换到你的本地主分支</span><br><span class="line">git pull upstream master  # 从原始仓库拉取最新更改到本地主分支</span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git fetch upstream</span><br></pre></td></tr></table></figure></li>
<li><p><strong>切换到你的分支并进行 rebase:</strong> 切换到你的分支并将其 rebase 到主分支上：</p>
<ul>
<li>如果是新分支</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git checkout &lt;新分支&gt;</span><br><span class="line">git rebase master  # 将新分支 rebase 到你的本地主分支</span><br></pre></td></tr></table></figure>

<ul>
<li>如果是已有分支</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git checkout &lt;已有分支&gt;</span><br><span class="line">git rebase upstream/master</span><br></pre></td></tr></table></figure></li>
<li><p><strong>解决冲突（如果有）:</strong> 如果在 rebase 过程中出现冲突，你需要手动解决冲突，然后使用 <code>git add</code> 标记为已解决。</p>
<ul>
<li>展示冲突代码（可省略）</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git diff --name-only --diff-filter=U</span><br></pre></td></tr></table></figure>

<ul>
<li>解决代码冲突<ul>
<li>IDE手动解决</li>
<li>vimdiff解决</li>
<li>meld解决</li>
</ul>
</li>
<li>解决之后</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;xxx&quot;</span><br><span class="line">git rebase --continue</span><br></pre></td></tr></table></figure></li>
<li><p><strong>推送更改到远程仓库:</strong> 推送你的更改到远程仓库：</p>
<ul>
<li>如果是新分支</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git push origin &lt;分支&gt; --force  # 强制推送到你的 fork 仓库的新分支上</span><br><span class="line">或</span><br><span class="line">git push -f origin &lt;分支&gt;</span><br></pre></td></tr></table></figure>

<p>请注意：使用 <code>--force</code> 参数进行强制推送时，请确保你了解它的影响。它可能会覆盖远程分支的历史记录，因此务必小心操作。</p>
<ul>
<li>如果是已有分支</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure></li>
<li><p><strong>创建 Pull Request:</strong> 在你的 fork 仓库中，从新分支创建一个 Pull Request（PR），将你的更改合并到原始仓库的目标分支</p>
</li>
</ol>
<h2 id="commit-rule"><a href="#commit-rule" class="headerlink" title="commit rule"></a>commit rule</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;footer&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>Type</p>
<blockquote>
<p>You can use your own commit types, but here are the most common use cases:</p>
</blockquote>
<ul>
<li><p>feat: a new feature, or change to an existing feature.</p>
</li>
<li><p>fix: Fixing a bug or known issue in code.</p>
</li>
<li><p>test: Adding additional tests for existing features.</p>
</li>
<li><p>chore: Updating build tools, like webpack, gulp, ascripts, etc.</p>
</li>
<li><p>docs: Update to documentation like README, wiki, etc.</p>
</li>
</ul>
</li>
<li><p>Scope</p>
<blockquote>
<p>The scope of the commit can be kept as granular as required and is bound to change based on the complexity of the project. If you are starting off a project, it might not seem necessary at the beginning, although, it is highly recommended as it makes you think twice and harder about the changes that you are about to push.</p>
</blockquote>
</li>
<li><p>reference <a href="https://hackernoon.com/7-rules-for-writing-a-good-commit-message">7 Rules for Writing a Good Commit Message</a></p>
</li>
</ul>
<h2 id="squash-reword-commit"><a href="#squash-reword-commit" class="headerlink" title="squash/reword commit"></a>squash/reword commit</h2><ol>
<li><p>merge the last 3 commits into a single commit.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git rebase -i HEAD~3</span><br></pre></td></tr></table></figure></li>
<li><p>replace all those <code>pick</code> with <code>squash</code> (or simply <code>s</code>) apart from the first one.</p>
<p><img src="https://www.freecodecamp.org/news/content/images/2023/03/Screenshot-2023-03-22-at-11.28.12.png"></p>
<p><strong>Note:</strong> <code>pick</code> or <code>p</code> will only use those commits, but <code>squash</code> or <code>s</code> will use them and combine them all together.</p>
<p>The first commit is the one you will combine them into without losing your changes.</p>
</li>
<li><p>After doing that, save the file and close it. Git will open up another editor where you can see the new commit message it generates for you.</p>
<p><img src="https://www.freecodecamp.org/news/content/images/2023/03/Screenshot-2023-03-22-at-11.36.02.png"></p>
<p>You can get rid of all of them and add your custom message:</p>
<p><img src="https://www.freecodecamp.org/news/content/images/2023/03/Screenshot-2023-03-22-at-11.37.45.png"></p>
<p> Or you can leave it as is. If you add a new commit message, save the file and close it.</p>
</li>
<li><p>Pushing changes, You should run git push to add a new commit to the remote origin. If you have already pushed your commits, then you should force push them using the git push command with — force flag (suppose, the name of remote is origin, which is by default)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git push --force origin HEAD</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="remote"><a href="#remote" class="headerlink" title="remote"></a>remote</h2><h3 id="fork-remote"><a href="#fork-remote" class="headerlink" title="fork remote"></a>fork remote</h3><p><a href="https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/working-with-forks/syncing-a-fork">docs.github.com</a></p>
<h4 id="初始化仓库"><a href="#初始化仓库" class="headerlink" title="初始化仓库"></a>初始化仓库</h4><ol>
<li><p>List the current configured remote repository for your fork.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git remote -v</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> origin  https://github.com/YOUR_USERNAME/YOUR_FORK.git (fetch)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> origin  https://github.com/YOUR_USERNAME/YOUR_FORK.git (push)</span></span><br></pre></td></tr></table></figure></li>
<li><p>Specify a new remote <em>upstream</em> repository that will be synced with the fork.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote add upstream https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git</span><br></pre></td></tr></table></figure></li>
<li><p>Verify the new upstream repository you’ve specified for your fork.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git remote -v</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> origin    https://github.com/YOUR_USERNAME/YOUR_FORK.git (fetch)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> origin    https://github.com/YOUR_USERNAME/YOUR_FORK.git (push)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> upstream  https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git (fetch)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> upstream  https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git (push)</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="同步代码"><a href="#同步代码" class="headerlink" title="同步代码"></a>同步代码</h4><ol>
<li><p>Change the current working directory to your local project.</p>
</li>
<li><p>Fetch the branches and their respective commits from the upstream repository. Commits to <code>BRANCHNAME</code> will be stored in the local branch <code>upstream/BRANCHNAME</code>.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git fetch upstream</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> remote: Counting objects: 75, <span class="keyword">done</span>.</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> remote: Compressing objects: 100% (53/53), <span class="keyword">done</span>.</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> remote: Total 62 (delta 27), reused 44 (delta 9)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Unpacking objects: 100% (62/62), <span class="keyword">done</span>.</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> From https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">  * [new branch]      main     -&gt; upstream/main</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定fetch某个分支</span></span><br><span class="line">git fetch &lt;remote&gt; &lt;branch&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>Check out your fork’s local default branch - in this case, we use <code>main</code>.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git checkout main</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Switched to branch <span class="string">&#x27;main&#x27;</span></span></span><br></pre></td></tr></table></figure></li>
<li><p>Merge the changes from the upstream default branch - in this case, <code>upstream/main</code> - into your local default branch. This brings your fork’s default branch into sync with the upstream repository, without losing your local changes.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git merge upstream/main</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Updating a422352..5fdff0f</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Fast-forward</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">  README                    |    9 -------</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">  README.md                 |    7 ++++++</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">  2 files changed, 7 insertions(+), 9 deletions(-)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">  delete mode 100644 README</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">  create mode 100644 README.md</span></span><br></pre></td></tr></table></figure>

<p>If your local branch didn’t have any unique commits, Git will perform a fast-forward. For more information, see <a href="https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging">Basic Branching and Merging</a> in the Git documentation.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git merge upstream/main</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Updating 34e91da..16c56ad</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Fast-forward</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">  README.md                 |    5 +++--</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">  1 file changed, 3 insertions(+), 2 deletions(-)</span></span><br></pre></td></tr></table></figure>

<p>If your local branch had unique commits, you may need to resolve conflicts. For more information, see “<a href="https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/addressing-merge-conflicts">Addressing merge conflicts</a>.”</p>
</li>
</ol>
<h3 id="submodule"><a href="#submodule" class="headerlink" title="submodule"></a>submodule</h3><blockquote>
<p>对于项目中包含子项目的git项目</p>
<p>reference</p>
<p><a href="https://www.git-scm.com/book/en/v2/Git-Tools-Submodules">https://www.git-scm.com/book/en/v2/Git-Tools-Submodules</a></p>
<p> <a href="https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97">https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97</a></p>
</blockquote>
<ul>
<li><p>如何是首次克隆，初始化代码需要</p>
<p><code>git clone --recurse-submodules https://github.com/chaconinc/MainProject</code></p>
</li>
</ul>
<p>​        或如果首次没有使用<code>--recurse-submodules</code>，那后面可以通过</p>
<p>​        <code>git submodule init</code>和<code>git submodule update</code>，进行子模块的拉取更新</p>
<ul>
<li><p>如何要对子模块的代码也用克隆地址</p>
<ol>
<li><p><code>git config -f .gitmodules -e    # opens editor, update URLs for your forks</code></p>
</li>
<li><p><code>git submodule sync</code></p>
</li>
</ol>
</li>
</ul>
<h3 id="在已有项目添加子模块"><a href="#在已有项目添加子模块" class="headerlink" title="在已有项目添加子模块"></a>在已有项目添加子模块</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git submodule add https://xxx.git configserver</span><br></pre></td></tr></table></figure>





<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><h3 id="合并策略"><a href="#合并策略" class="headerlink" title="合并策略"></a>合并策略</h3><p>warning: 不建议在没有为偏离分支指定合并策略时执行pull操作。<br>您可以在执行下一次pull操作之前执行下面一条命令来抑制本消息：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config pull.rebase false # 合并（缺省策略）  </span><br><span class="line">git config pull.rebase true # 变基  </span><br><span class="line">git config pull.ff only # 仅快进</span><br></pre></td></tr></table></figure>

<p>您可以将 “git config” 替换为 “git config –global” 以便为所有仓库设置<br>缺省的配置项。您也可以在每次执行 pull 命令时添加 –rebase、–no-rebase，<br>或者 –ff-only 参数覆盖缺省设置。</p>
<h3 id="推送本地离线项目到远程github"><a href="#推送本地离线项目到远程github" class="headerlink" title="推送本地离线项目到远程github"></a>推送本地离线项目到远程github</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir my_project</span><br><span class="line">cd my_project</span><br><span class="line">touch .gitignore</span><br><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;Initial commit&quot;</span><br><span class="line">git remote add origin youruser@yourserver.com:/path/to/my_project.git</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure>

<h3 id="更改https协议进行推送"><a href="#更改https协议进行推送" class="headerlink" title="更改https协议进行推送"></a>更改https协议进行推送</h3><blockquote>
<p>如果之前是使用ssh协议进行推送，现改为http协议</p>
</blockquote>
<ol>
<li><p>查看当前Git项目的远程地址</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure>

<p>该命令会列出所有已配置的远程仓库地址，并显示它们的读取和写入访问URL。示例输出如下所示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">origin  https://github.com/username/repository.git (fetch)</span><br><span class="line">origin  https://github.com/username/repository.git (push)</span><br></pre></td></tr></table></figure>

<p>其中，<code>origin</code>是远程仓库的名称，<code>https://github.com/username/repository.git</code>是远程仓库的地址，<code>(fetch)</code>和<code>(push)</code>分别表示读取和写入访问URL。</p>
</li>
<li><p>将Git仓库的URL替换为HTTP协议的URL</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote set-url origin http://gitlab.xxx.com/username/repository.git</span><br></pre></td></tr></table></figure></li>
<li><p>然后使用以下命令进行Git push操作</p>
</li>
</ol>
<p>后记：需要注意的是，使用HTTP协议进行Git push操作的速度可能会比使用SSH协议慢一些，因为HTTP协议需要建立TCP连接、发送HTTP请求、接收HTTP响应等过程。同时，HTTP协议的安全性也比SSH协议稍低，因此在安全性要求较高的情况下，建议使用SSH协议进行Git push操作。</p>
<h3 id="Git修改-gitignore不生效"><a href="#Git修改-gitignore不生效" class="headerlink" title="Git修改.gitignore不生效"></a>Git修改.gitignore不生效</h3><ul>
<li><p>在git中，如果想忽略某个文件，不让这个文件提交到版本库中，可以修改根目录中的.gitignore文件</p>
<p>但有时候把某些目录或者文件加入忽略规则，发现并未生效</p>
</li>
<li><p>未生效原因：.gitignore只能忽略那些原来没有被追踪(track)的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的</p>
</li>
<li><p>解决方案：先把本地缓存删除（改变成未track状态），然后提交。</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git rm -r --cached &lt;要忽略的具体文件或者目录&gt; 或者 git rm -r --cached . </span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;update .gitignore&quot;</span><br></pre></td></tr></table></figure>

<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>skill</tag>
      </tags>
  </entry>
  <entry>
    <title>github skill</title>
    <url>/2021/09/26/github%20skill/</url>
    <content><![CDATA[<h4 id="Issues-搜索"><a href="#Issues-搜索" class="headerlink" title="Issues 搜索"></a>Issues 搜索</h4><p><code>searchKeyWord is:issue is:closed repo:Alamofire/Alamofire</code> </p>
<p>这条搜索，searchKeyWord是搜索关键字, <code>is:issue</code> 表示我们要搜索 issue， <code>is:closed</code> 表示已经关闭的 issue， <code>repo:Alamofire/Alamofire</code> 表示我们只搜索这个仓库范围的 issue</p>
]]></content>
      <categories>
        <category>github</category>
      </categories>
      <tags>
        <tag>skill</tag>
      </tags>
  </entry>
  <entry>
    <title>gradle snippet</title>
    <url>/2021/11/23/gradle/</url>
    <content><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ol>
<li><strong>Process ‘command ‘/opt/jdk8/bin/java’’ finished with non-zero exit value 1</strong></li>
</ol>
]]></content>
      <categories>
        <category>tool</category>
      </categories>
      <tags>
        <tag>snippet</tag>
      </tags>
  </entry>
  <entry>
    <title>javarevisited</title>
    <url>/2019/05/24/hadoop%20learn/</url>
    <content><![CDATA[<p><img src="./img/Hadoop-Multi-node-Cluster.png"></p>
<p><img src="./img/hdfsarchitecture.gif"></p>
<h3 id="NameNode"><a href="#NameNode" class="headerlink" title="NameNode"></a>NameNode</h3><ul>
<li>The <strong>NameNode</strong> executes file system namespace operations like opening, closing, and renaming files and directories.It also determines the mapping of blocks to DataNodes.</li>
</ul>
<h3 id="DataNodes"><a href="#DataNodes" class="headerlink" title="DataNodes"></a>DataNodes</h3><ul>
<li>The <strong>DataNodes</strong> are responsible for serving read and write requests from the file system’s clients. The DataNodes also perform block creation, deletion, and replication upon instruction from the NameNode.</li>
<li>The DataNode stores HDFS data in files in its local file system.The DataNode has no knowledge about HDFS files. It stores each block of HDFS data in a separate file in its local file system.</li>
</ul>
<h3 id="File"><a href="#File" class="headerlink" title="File"></a>File</h3><ul>
<li><p>a file is split into one or more blocks and these blocks are stored in a set of DataNodes. </p>
</li>
<li><p>all blocks in a file except the last block are the same size.</p>
</li>
<li><p>Files in HDFS are write-once and have strictly one writer at any time.</p>
</li>
</ul>
<h3 id="The-Persistence-of-File-System-Metadata"><a href="#The-Persistence-of-File-System-Metadata" class="headerlink" title="The Persistence of File System Metadata"></a>The Persistence of File System Metadata</h3><ul>
<li>The NameNode uses a transaction log called the <strong>EditLog</strong> to persistently record every change that occurs to file system metadata.</li>
<li>The entire file system namespace, including the mapping of blocks to files and file system properties, is stored in a file called the <strong>FsImage</strong>. The FsImage is stored as a file in the NameNode’s local file system too.</li>
</ul>
<hr>
<p><strong>Blockreport</strong>: DataNode scans through its local file system, generates a list of all HDFS data blocks that correspond to each of these local files and sends this report to the NameNode</p>
<h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p>2.7.3源码</p>
<ul>
<li>编译问题</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">问题：Failed to parse plugin descriptor for org.apache.hadoop:hadoop-maven-plugins</span><br><span class="line"></span><br><span class="line">解决：cd到hadoop-maven-plugins，执行mvn clean 然后 install 一下，再执行编译通过</span><br></pre></td></tr></table></figure>

<h1 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h1><h1 id="HDFS"><a href="#HDFS" class="headerlink" title="HDFS"></a>HDFS</h1><h2 id="DataNode"><a href="#DataNode" class="headerlink" title="DataNode"></a>DataNode</h2><pre><code> 50010  dfs.datanode.address   datanode服务端口，用于数据传输
50075  dfs.datanode.http.address  http服务的端口
50475  dfs.datanode.https.address  https服务的端口
50020  dfs.datanode.ipc.address   ipc服务的端口
</code></pre>
<h2 id="NameNode-1"><a href="#NameNode-1" class="headerlink" title="NameNode"></a>NameNode</h2><p>​     50070  dfs.namenode.http-address  http服务的端口 （<strong>访问hadoop的管理页面</strong>）<br>​    50470  dfs.namenode.https-address  https服务的端口<br>​    8020   fs.defaultFS   接收Client连接的RPC端口，用于获取文件系统metadata信息。</p>
<h2 id="journalnode"><a href="#journalnode" class="headerlink" title="journalnode"></a>journalnode</h2><pre><code> 8485   dfs.journalnode.rpc-address   RPC服务
 8480   dfs.journalnode.http-address   HTTP服务
</code></pre>
<h2 id="ZKFC"><a href="#ZKFC" class="headerlink" title="ZKFC"></a>ZKFC</h2><pre><code> 8019   dfs.ha.zkfc.port   ZooKeeper FailoverController，用于NN HA
</code></pre>
<h2 id="YARN"><a href="#YARN" class="headerlink" title="YARN"></a>YARN</h2><h2 id="ResourceManager"><a href="#ResourceManager" class="headerlink" title="ResourceManager"></a>ResourceManager</h2><pre><code>8032  yarn.resourcemanager.address   RM的applications manager(ASM)端口
8030  yarn.resourcemanager.scheduler.address  scheduler组件的IPC端口
8031  yarn.resourcemanager.resource-tracker.address  IPC
8033  yarn.resourcemanager.admin.address  IPC
8088  yarn.resourcemanager.webapp.address   http服务端口（**访问yarn的管理页面**）
</code></pre>
<h2 id="NodeManager"><a href="#NodeManager" class="headerlink" title="NodeManager"></a>NodeManager</h2> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">8040  yarn.nodemanager.localizer.address  localizer IPC</span><br><span class="line">8042  yarn.nodemanager.webapp.address   http服务端口（**从节点node管理界面，可查看节点的任务处理信息**）</span><br><span class="line">8041  yarn.nodemanager.address   NM中container manager的端口</span><br></pre></td></tr></table></figure>

<h2 id="JobHistory-Server"><a href="#JobHistory-Server" class="headerlink" title="JobHistory Server"></a>JobHistory Server</h2><pre><code>10020   mapreduce.jobhistory.address   IPC
19888   mapreduce.jobhistory.webapp.address   http服务端口
</code></pre>
<h1 id="HBase"><a href="#HBase" class="headerlink" title="HBase"></a>HBase</h1>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Master</span><br><span class="line">    60000   hbase.master.port  IPC</span><br><span class="line">    60010   hbase.master.info.port  http服务端口</span><br><span class="line">RegionServer</span><br><span class="line">    60020   hbase.regionserver.port   IPC</span><br><span class="line">    60030   hbase.regionserver.info.port   http服务端口</span><br><span class="line">HQuorumPeer</span><br><span class="line">    2181  hbase.zookeeper.property.clientPort   HBase-managed ZK mode，使用独立的ZooKeeper集群则不会启用该端口。</span><br><span class="line">    2888  hbase.zookeeper.peerport   HBase-managed ZK mode，使用独立的ZooKeeper集群则不会启用该端口。</span><br><span class="line">    3888  hbase.zookeeper.leaderport  HBase-managed ZK mode，使用独立的ZooKeeper集群则不会启用该端口。</span><br></pre></td></tr></table></figure>



<h1 id="Hive"><a href="#Hive" class="headerlink" title="Hive"></a>Hive</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Metastore</span><br><span class="line">     9083  /etc/default/hive-metastore中export PORT=&lt;port&gt;来更新默认端口   </span><br><span class="line">HiveServer</span><br><span class="line">     10000   /etc/hive/conf/hive-env.sh中export HIVE_SERVER2_THRIFT_PORT=&lt;port&gt;来更新默认端口   </span><br></pre></td></tr></table></figure>



<h1 id="ZooKeeper"><a href="#ZooKeeper" class="headerlink" title="ZooKeeper"></a>ZooKeeper</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Server</span><br><span class="line">     2181  /etc/zookeeper/conf/zoo.cfg中clientPort=&lt;port&gt;  对客户端提供服务的端口</span><br><span class="line">     2888  /etc/zookeeper/conf/zoo.cfg中server.x=[hostname]:nnnnn[:nnnnn]，标蓝部分  follower用来连接到leader，只在leader上监听该端口。</span><br><span class="line">     3888  /etc/zookeeper/conf/zoo.cfg中server.x=[hostname]:nnnnn[:nnnnn]，标蓝部分  用于leader选举的。只在electionAlg是1,2或3(默认)时需要。</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>hadoop snippet</title>
    <url>/2019/05/24/hadoop%20snippt/</url>
    <content><![CDATA[<h1 id="Command"><a href="#Command" class="headerlink" title="Command"></a>Command</h1><h2 id="1-Create-a-directory-in-HDFS-at-given-path-s"><a href="#1-Create-a-directory-in-HDFS-at-given-path-s" class="headerlink" title="1. Create a directory in HDFS at given path(s)."></a>1. Create a directory in HDFS at given path(s).</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Usage:</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hdfs dfs -mkdir &lt;paths&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Example:</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hadoop dfs -mkdir /user/saurzcode/dir1 /user/saurzcode/dir2</span><br></pre></td></tr></table></figure>

<h2 id="2-List-the-contents-of-a-directory"><a href="#2-List-the-contents-of-a-directory" class="headerlink" title="2.  List the contents of a directory."></a>2.  List the contents of a directory.</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Usage :</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hdfs dfs -ls &lt;args&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Example:</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hdfs dfs -ls /user/saurzcode</span><br></pre></td></tr></table></figure>

<h2 id="3-Upload-and-download-a-file-in-HDFS"><a href="#3-Upload-and-download-a-file-in-HDFS" class="headerlink" title="3. Upload and download a file in HDFS."></a>3. Upload and download a file in HDFS.</h2><p><strong>Upload:</strong></p>
<p><strong>hdfs fs -put:</strong></p>
<p>Copy single src file, or multiple src files from local file system to the hdfs data file system</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Usage:</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hdfs dfs -put &lt;localsrc&gt; ... &lt;HDFS_dest_Path&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Example:</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hdfs dfs -put /home/saurzcode/Samplefile.txt  /user/saurzcode/dir3/</span><br></pre></td></tr></table></figure>

<p><strong>*Download:</strong>*</p>
<p><strong>hdfs fs -get:</strong></p>
<p>Copies/Downloads files to the local file system</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Usage:</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hdfs dfs -get &lt;hdfs_src&gt; &lt;localdst&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Example:</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hdfs dfs -get /user/saurzcode/dir3/Samplefile.txt /home/</span><br></pre></td></tr></table></figure>

<h2 id="4-See-contents-of-a-file"><a href="#4-See-contents-of-a-file" class="headerlink" title="4. See contents of a file"></a>4. See contents of a file</h2><p>Same as unix cat command:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Usage:</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hdfs dfs -cat &lt;path[filename]&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Example:</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hdfs dfs -cat /user/saurzcode/dir1/abc.txt</span><br></pre></td></tr></table></figure>

<h2 id="5-Copy-a-file-from-source-to-destination"><a href="#5-Copy-a-file-from-source-to-destination" class="headerlink" title="5. Copy a file from source to destination"></a>5. Copy a file from source to destination</h2><p>This command allows multiple sources as well in which case the destination must be a directory.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Usage:</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hdfs dfs -cp &lt;source&gt; &lt;dest&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Example:</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hdfs dfs -cp /user/saurzcode/dir1/abc.txt /user/saurzcode/dir2</span><br></pre></td></tr></table></figure>

<h2 id="6-Copy-a-file-from-To-Local-file-system-to-HDFS"><a href="#6-Copy-a-file-from-To-Local-file-system-to-HDFS" class="headerlink" title="6. Copy a file from/To Local file system to HDFS"></a>6. Copy a file from/To Local file system to HDFS</h2><p><strong>copyFromLocal</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Usage:</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hdfs dfs -copyFromLocal &lt;localsrc&gt; URI</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Example:</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hdfs dfs -copyFromLocal /home/saurzcode/abc.txt  /user/saurzcode/abc.txt</span><br></pre></td></tr></table></figure>

<p>Similar to put command, except that the source is restricted to a local file reference.</p>
<p><strong>copyToLocal</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Usage:</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hdfs dfs -copyToLocal [-ignorecrc] [-crc] URI &lt;localdst&gt;</span><br></pre></td></tr></table></figure>

<p>Similar to get command, except that the destination is restricted to a local file reference.</p>
<h2 id="7-Move-file-from-source-to-destination"><a href="#7-Move-file-from-source-to-destination" class="headerlink" title="7. Move file from source to destination."></a>7. Move file from source to destination.</h2><p>Note:- Moving files across filesystem is not permitted.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Usage :</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hdfs dfs -mv &lt;src&gt; &lt;dest&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Example:</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hdfs dfs -mv /user/saurzcode/dir1/abc.txt /user/saurzcode/dir2</span><br></pre></td></tr></table></figure>

<h2 id="8-Remove-a-file-or-directory-in-HDFS"><a href="#8-Remove-a-file-or-directory-in-HDFS" class="headerlink" title="8. Remove a file or directory in HDFS."></a>8. Remove a file or directory in HDFS.</h2><p>Remove files specified as argument. Deletes directory only when it is empty</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Usage :</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hdfs dfs -rm &lt;arg&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Example:</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hdfs dfs -rm /user/saurzcode/dir1/abc.txt</span><br></pre></td></tr></table></figure>

<p><strong>*Recursive version of delete.</strong>*</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Usage :</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hdfs dfs -rmr &lt;arg&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Example:</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hdfs dfs -rmr /user/saurzcode/</span><br></pre></td></tr></table></figure>

<h2 id="9-Display-last-few-lines-of-a-file"><a href="#9-Display-last-few-lines-of-a-file" class="headerlink" title="9. Display last few lines of a file."></a>9. Display last few lines of a file.</h2><p>Similar to tail command in Unix.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Usage :</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hdfs dfs -tail &lt;path[filename]&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Example:</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hdfs dfs -tail /user/saurzcode/dir1/abc.txt</span><br></pre></td></tr></table></figure>

<h2 id="10-Display-the-aggregate-length-of-a-file"><a href="#10-Display-the-aggregate-length-of-a-file" class="headerlink" title="10. Display the aggregate length of a file."></a>10. Display the aggregate length of a file.</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Usage :</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hdfs dfs -du &lt;path&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Example:</span><br><span class="line">hdfs dfs -du /user/saurzcode/dir1/abc.txt</span><br></pre></td></tr></table></figure>

<p>Please comment which of these commands you found most useful while dealing with Hadoop /HDFS.</p>
<h2 id="11-查看指定目录下的所有文件"><a href="#11-查看指定目录下的所有文件" class="headerlink" title="11. 查看指定目录下的所有文件"></a>11. 查看指定目录下的所有文件</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hadoop fs -lsr /your/hdfs/directory</span><br></pre></td></tr></table></figure>





<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><h2 id="Hadoop-Operation-category-READ-is-not-supported-in-state-standby"><a href="#Hadoop-Operation-category-READ-is-not-supported-in-state-standby" class="headerlink" title="Hadoop Operation category READ is not supported in state standby"></a>Hadoop Operation category READ is not supported in state standby</h2><ul>
<li><p>报错原因<br>hadoop集群中的两个NameNode均为standby状态。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs haadmin -getServiceState nn1</span><br><span class="line">hdfs haadmin -getServiceState nn2</span><br></pre></td></tr></table></figure></li>
</ul>
<p>​        如果两个NameNode均为standby状态，那么很有可能是DFSZKFailoverController出现了问题。</p>
<ul>
<li><p>报错解决</p>
<ul>
<li><p>手动改变其中一个NameNode的状态</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs haadmin -transitionToActive -forcemanual nn1</span><br></pre></td></tr></table></figure></li>
<li><p>如果手动改变状态不能解决问题，那就重启dfs</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">stop-dfs.sh</span><br><span class="line">start-dfs.sh</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>再检查NameNode状态</p>
<p>此时正常状态是nn1为active，nn2为standby</p>
</li>
</ul>
]]></content>
      <categories>
        <category>hadoop</category>
      </categories>
      <tags>
        <tag>snippet</tag>
      </tags>
  </entry>
  <entry>
    <title>hello world</title>
    <url>/2015/01/01/hello-world/</url>
    <content><![CDATA[<h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<h3 id="Clean"><a href="#Clean" class="headerlink" title="Clean"></a>Clean</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>hibernate snippet</title>
    <url>/2018/05/01/hibernate%20snippet/</url>
    <content><![CDATA[<blockquote>
<p>ORM is an acronym for Object/Relational mapping. It is a programming strategy to map object with the data stored in the database. It simplifies data creation, data manipulation, and data access.</p>
</blockquote>
<h3 id="The-advantages-of-using-ORM-over-JDBC"><a href="#The-advantages-of-using-ORM-over-JDBC" class="headerlink" title="The advantages of using ORM over JDBC"></a>The advantages of using ORM over JDBC</h3><ul>
<li>Application development is fast.</li>
<li>Management of transaction.</li>
<li>Generates key automatically.</li>
<li>Details of SQL queries are hidden.</li>
</ul>
<h3 id="Hibernate-Architecture"><a href="#Hibernate-Architecture" class="headerlink" title="Hibernate Architecture"></a>Hibernate Architecture</h3><ul>
<li>Java application layer</li>
<li>Hibernate framework layer</li>
<li>Backhand api layer</li>
<li>Database layer</li>
</ul>
<p><img src="https://www.javatpoint.com/images/hibernate/arc2.jpg"></p>
<p>Hibernate Application Architecture：</p>
<p><img src="https://www.tutorialspoint.com/hibernate/images/hibernate_architecture.jpg"></p>
<blockquote>
<p>JDBC (Java Database Connectivity)</p>
<p>JTA (Java Transaction API) </p>
<p>JNDI (Java Naming Directory Interface)</p>
</blockquote>
<h3 id="Elements-of-Hibernate-Architecture"><a href="#Elements-of-Hibernate-Architecture" class="headerlink" title="Elements of Hibernate Architecture"></a>Elements of Hibernate Architecture</h3><ul>
<li><p>Configuration</p>
<ul>
<li><strong>Database Connection</strong> − This is handled through one or more configuration files supported by Hibernate. These files are <strong>hibernate.properties</strong> and <strong>hibernate.cfg.xml</strong>.</li>
<li><strong>Class Mapping Setup</strong> − This component creates the connection between the Java classes and database tables.</li>
</ul>
</li>
<li><p>SessionFactory</p>
<blockquote>
<p>SessionFactory is a thread-safe object, many threads cannot access it simultaneously.</p>
</blockquote>
</li>
<li><p>Session</p>
<blockquote>
<ul>
<li>It maintains a connection between the hibernate application and database.It provides methods to store, update, delete or fetch data from the database such as persist(), update(), delete(), load(), get() etc.</li>
<li>Session is not a thread-safe object, many threads can access it simultaneously. In other words, you can share it between threads.</li>
</ul>
</blockquote>
</li>
<li><p>Transaction</p>
</li>
<li><p>ConnectionProvider</p>
</li>
<li><p>Query</p>
<blockquote>
<p>Query objects use SQL or Hibernate Query Language (HQL) string to retrieve data from the database and create objects. A Query instance is used to bind query parameters, limit the number of results returned by the query, and finally to execute the query.</p>
</blockquote>
</li>
<li><p>Criteria</p>
<blockquote>
<p>Criteria objects are used to create and execute object oriented criteria queries to retrieve objects.</p>
</blockquote>
</li>
</ul>
<h3 id="About-SQL"><a href="#About-SQL" class="headerlink" title="About SQL"></a>About SQL</h3><ul>
<li><p>SQL query created in Hibernate（Native sql）</p>
<blockquote>
<p>Session.createSQLQuery</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Session.createSQLQuery()</span><br><span class="line"><span class="comment">//The method createSQLQuery() creates Query object using the native SQL syntax. </span></span><br><span class="line">Query query = session.createSQLQuery(<span class="string">&quot;Select * from Student&quot;</span>);</span><br></pre></td></tr></table></figure></li>
<li><p>HQL query</p>
<blockquote>
<p>Session.createQuery</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Session.createQuery()</span><br><span class="line"><span class="comment">//The method createQuery() creates Query object using the HQL syntax. </span></span><br><span class="line">Query query = session.createQuery(<span class="string">&quot;from Student s where s.name like &#x27;k%&#x27;&quot;</span>);</span><br></pre></td></tr></table></figure></li>
<li><p>criteria query</p>
<blockquote>
<p>Session.createCriteria</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Session.createCriteria()</span><br><span class="line"><span class="comment">//The method createCriteria() creates Criteria object for setting the query parameters. This is more useful feature for those who don&#x27;t want to write the query in hand. You can specify any type of complicated syntax using the Criteria API.</span></span><br><span class="line">Criteria criteria = session.createCriteria(Student.class);</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="HQL-vs-Criteria"><a href="#HQL-vs-Criteria" class="headerlink" title="HQL vs Criteria"></a>HQL vs Criteria</h3><ul>
<li>HQL is to perform both select and non-select operations on the data,  but Criteria is only for selecting the data, we cannot perform non-select operations using criteria</li>
<li>HQL is suitable for executing Static Queries, where as Criteria is suitable for executing Dynamic Queries</li>
<li>HQL doesn’t support pagination concept, but we can achieve pagination with Criteria</li>
<li>Criteria used to take more time to execute then HQL</li>
<li>With Criteria we are safe with SQL Injection because of its dynamic query generation but in HQL as your queries are either fixed or parametrized, there is no safe from SQL Injection.</li>
</ul>
<h3 id="Caching"><a href="#Caching" class="headerlink" title="Caching"></a>Caching</h3><blockquote>
<p>Cache memory stores recently used data items in order to reduce the number of database hits as much as possible.</p>
</blockquote>
<p><img src="https://www.tutorialspoint.com/hibernate/images/hibernate_cache.jpg"></p>
<ul>
<li><p>First level Cache</p>
<blockquote>
<p>Hibernate first level cache is associated with the Session object. Hibernate first level cache is enabled by default and there is no way to disable it. However hibernate provides methods through which we can delete selected objects from the cache or clear the cache completely.Any object cached in a session will not be visible to other sessions and when the session is closed, all the cached objects will also be lost.</p>
</blockquote>
</li>
<li><p>Second level Cache</p>
<blockquote>
<p>Hibernate Second Level cache is disabled by default but we can enable it through configuration. Currently EHCache and Infinispan provides implementation for Hibernate Second level cache and we can use them. </p>
</blockquote>
</li>
<li><p>Query Cache</p>
<blockquote>
<p>Hibernate can also cache result set of a query. Hibernate Query Cache doesn’t cache the state of the actual entities in the cache; it caches only identifier values and results of value type. So it should always be used in conjunction with the second-level cache.</p>
</blockquote>
</li>
</ul>
<hr>
<h3 id="types-of-association-mapping"><a href="#types-of-association-mapping" class="headerlink" title="types of association mapping"></a>types of association mapping</h3><ol>
<li><p>One to One</p>
</li>
<li><p>One to Many</p>
<blockquote>
<p>（一对多）单向：会产生中间表，此时可以用@onetoMany @Joincolumn（name=” “）避免产生中间表**，并且指定了外键的名字（别看 @joincolumn在一中写着，但它存在在多的那个表中）</p>
</blockquote>
</li>
<li><p>Many to One</p>
<blockquote>
<p>（多对一）单向：不产生中间表，但可以用@Joincolumn（name=”  “）来指定生成外键的名字，外键在多的一方表中产生！</p>
</blockquote>
</li>
<li><p>Many to Many</p>
</li>
</ol>
<hr>
<p>可参考<a href="https://www.jianshu.com/p/54108abb070f">JPA实体关系映射</a></p>
<h4 id="为什么要有实体关系映射"><a href="#为什么要有实体关系映射" class="headerlink" title="为什么要有实体关系映射"></a>为什么要有实体关系映射</h4><blockquote>
<p>简化编程操作。把冗余的操作交给底层框架来处理。<br> 例如，如果我要给一位新入学的学生添加一位新的老师。而这个老师又是新来的，在学生数据库与教师数据库中均不存在对应的数据。那么我需要先在教师数据库中保存新来的老师的数据，同时在学生数据库中保存新学生的数据，然后再给两者建立关联。<br> 而如果我们使用了实体关系映射，我们只需要将该新教师实体交给该学生实体，然后保存该学生实体即可完成。</p>
</blockquote>
]]></content>
      <categories>
        <category>hibernate</category>
      </categories>
      <tags>
        <tag>snippet</tag>
      </tags>
  </entry>
  <entry>
    <title>hbase point</title>
    <url>/2022/04/01/hbase%20point/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th>节点</th>
<th>端口号</th>
<th>协议</th>
<th>使用</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>zookeeper</td>
<td>2181</td>
<td></td>
<td>zkCli.sh -server zookeeper1:2181</td>
<td>客户端接入</td>
</tr>
<tr>
<td>2888,3888</td>
<td></td>
<td>N/A</td>
<td>集群内部通讯</td>
<td></td>
</tr>
<tr>
<td>HDFS Namenode</td>
<td>9000</td>
<td>HDFS</td>
<td>hdfs dfs -ls hdfs://namenode1:9000/</td>
<td>客户端接入</td>
</tr>
<tr>
<td>50070</td>
<td>HTTP</td>
<td><a href="http://namenode1:50070/">http://namenode1:50070/</a></td>
<td>集群监控</td>
<td></td>
</tr>
<tr>
<td>HDFS SecondaryNamenode</td>
<td>50090</td>
<td>HTTP</td>
<td><a href="http://namenode1:50090/">http://namenode1:50090/</a></td>
<td>secondary监控</td>
</tr>
<tr>
<td>HDFS Datanode</td>
<td>50010</td>
<td></td>
<td>N/A</td>
<td>客户端接入/其他节点接入</td>
</tr>
<tr>
<td>50020</td>
<td></td>
<td>N/A</td>
<td></td>
<td></td>
</tr>
<tr>
<td>50075</td>
<td>HTTP</td>
<td><a href="http://datanode1:50075/">http://datanode1:50075/</a></td>
<td>节点监控</td>
<td></td>
</tr>
<tr>
<td>HBase Master</td>
<td>16000</td>
<td></td>
<td>hbase-client-1.x.x.jar</td>
<td>RegionServer接入</td>
</tr>
<tr>
<td>16010</td>
<td>HTTP</td>
<td><a href="http://namenode1:16010/">http://namenode1:16010/</a></td>
<td>集群监控</td>
<td></td>
</tr>
<tr>
<td>HBase RegionServer</td>
<td>16020</td>
<td></td>
<td>N/A</td>
<td>客户端接入</td>
</tr>
<tr>
<td>16030</td>
<td>HTTP</td>
<td><a href="http://datanode1:16030/">http://datanode1:16030/</a></td>
<td>节点监控</td>
<td></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>hbase</category>
      </categories>
      <tags>
        <tag>point</tag>
      </tags>
  </entry>
  <entry>
    <title>hive snippet</title>
    <url>/2022/01/04/hive%20snippet/</url>
    <content><![CDATA[<blockquote>
<p>Hive-site里面的配置！！！</p>
</blockquote>
<h2 id="level-1"><a href="#level-1" class="headerlink" title="level-1"></a>level-1</h2><h3 id="get-started"><a href="#get-started" class="headerlink" title="get started"></a>get started</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nohup hive --service metastore &amp;</span><br><span class="line">nohup hive --service hiveserver2 &amp;</span><br></pre></td></tr></table></figure>

<h3 id="beeline"><a href="#beeline" class="headerlink" title="beeline"></a>beeline</h3><p>1）metadata ：hive元数据，即hive定义的表名，字段名，类型，分区，用户这些数据。一般存储关系型书库mysql中，在测试阶段也可以用hive内置Derby数据库。</p>
<p>（2）metastore ：hivestore服务端。主要提供将DDL，DML等语句转换为MapReduce，提交到hdfs中。</p>
<p>（3）hiveserver2：hive服务端。提供hive服务。客户端可以通过beeline，jdbc（即用java代码链接）等多种方式链接到hive。</p>
<p>（4）beeline：hive客户端链接到hive的一个工具。可以理解成mysql的客户端。如：navite cat 等。</p>
<p><img src="https://img-blog.csdnimg.cn/20191122115956341.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1NDQwMDQw,size_16,color_FFFFFF,t_70"></p>
<p>2 连接hive：<br>（1）./bin/hive<br>通过 ./bin/hive 启动的hive服务，第一步会先启动metastore服务，然后在启动一个客户端连接到metastore。此时metastore服务端和客户端都在一台机器上，别的机器无法连接到metastore，所以也无法连接到hive。这种方式不常用，一直只用于调试环节。</p>
<p>（2） ./bin/hive  –service metastore<br><strong>通过hive –service metastore 会启动一个 hive metastore服务默认的端口号为：9083。metastore服务里面配置metadata相关的配置。此时可以有多个hive客户端在hive-site.xml配置hive.metastore.uris=thrift://ipxxx:9083  的方式链接到hive。motestore 虽然能使hive服务端和客户端分别部署到不同的节点，客户端不需要关注metadata的相关配置。但是metastore只能通过只能通过配置hive.metastore.uris的方式连接，无法通过jdbc的方式访问。</strong></p>
<p>（3）./bin/hiveserver2<br>hiveserver2 会启动一个hive服务端默认端口为：10000，可以通过beeline，jdbc，odbc的方式链接到hive。<strong>hiveserver2启动的时候会先检查有没有配置hive.metastore.uris，如果没有会先启动一个metastore服务，然后在启动hiveserver2。如果有配置hive.metastore.uris。会连接到远程的metastore服务。这种方式是最常用的。</strong>部署在图如下：</p>
<ul>
<li>登录bin/beeline，可以启动客户端链接到hiveserver2。执行beeline后在控制输入 !connect jdbc:hive2://localhost:10000/default root 123 就可以链接到 hiveserver2了；default表示链接到default database， root 和123 分别为密码。注意这里的密码不是mysql的密码，是hive中的用户</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">连接库</span><br><span class="line">!connect jdbc:hive2://localhost:10000/default root 123</span><br></pre></td></tr></table></figure>

<h3 id="hive中几种分割符"><a href="#hive中几种分割符" class="headerlink" title="hive中几种分割符"></a>hive中几种分割符</h3><p><strong>分隔符</strong></p>
<p>\n    每行一条记录<br>^A    分隔列（八进制 \001）<br>^B    分隔ARRAY或者STRUCT中的元素，或者MAP中多个键值对之间分隔（八进制 \002）<br>^C    分隔MAP中键值对的“键”和“值”（八进制 \003）</p>
<p><strong>用到了系统默认分隔符。通常下面2中情况我们需要需要用到分隔符</strong></p>
<p>1，制作table的输入文件，有时候我们需要输入一些特殊的分隔符</p>
<p>2，把hive表格导出到本地时，系统默认的分隔符是^A，这个是特殊字符，直接cat或者vim是看不到的</p>
<p><strong>分隔符在HIVE中的用途</strong></p>
<table>
<thead>
<tr>
<th>分隔符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>\n</td>
<td>对于文本文件来说，每行都是一条记录，因此换行符可以分隔记录</td>
</tr>
<tr>
<td>^A(Ctrl+A)</td>
<td>用于分隔字段(列)。在CREATE TABLE语句中可以使用八进制编码\001表示</td>
</tr>
<tr>
<td>^B(Ctrl+B)</td>
<td>用于分隔ARRAY或者STRUCT中的元素，或用于MAP中键-值对之间的分隔。在CREATE TABLE语句中可以使用八进制编码\002表示</td>
</tr>
<tr>
<td>^C(Ctrl+C)</td>
<td>用于MAP中键和值之间的分隔。在CREATE TABLE语句中可以使用八进制编码\003表示</td>
</tr>
</tbody></table>
<blockquote>
<p>Hive 中没有定义专门的数据格式，数据格式可以由用户指定，用户定义数据格式需要指定三个属性：列分隔符（通常为空格、”\t”、”\x001″）、行分隔符（”\n”）以及读取文件数据的方法。由于在加载数据的过程中，不需要从用户数据格式到 Hive 定义的数据格式的转换，因此，Hive 在加载的过程中不会对数据本身进行任何修改，而只是将数据内容复制或者移动到相应的 HDFS 目录中。</p>
</blockquote>
<p>我们可以在create表格的时候，选择如下，表格加载input的文件的时候就会按照下面格式匹配</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">row format delimited </span><br><span class="line">fields terminated by &#x27;\001&#x27; </span><br><span class="line">collection items terminated by &#x27;\002&#x27; </span><br><span class="line">map keys terminated by &#x27;\003&#x27;</span><br><span class="line">lines terminated by &#x27;\n&#x27; </span><br><span class="line">stored as textfile;</span><br></pre></td></tr></table></figure>

<h3 id="如何查看和修改分割符，特殊符号"><a href="#如何查看和修改分割符，特殊符号" class="headerlink" title="如何查看和修改分割符，特殊符号"></a>如何查看和修改分割符，特殊符号</h3><ol>
<li>查看隐藏字符的方法</li>
</ol>
<p>1.1，cat -A filename</p>
<p><img src="http://image.okcode.net/26FFE1BCC5620E19E94B26122C71BA2E.png" alt="img"></p>
<p>1.2，vim filename后 命令模式下输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set list显示特殊符号</span><br><span class="line">set nolist 取消显示特殊符号</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>修改隐藏字符的方法</li>
</ol>
<p>首先按照1.2打开显示特殊符号。进入INSERT模式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ctrl + V 可以输入 ^符号</span><br><span class="line">ctrl + a 可以输入A---&#x27;\001&#x27;</span><br><span class="line">ctrl + b 可以输入A---&#x27;\002&#x27;</span><br><span class="line">ctrl + c 可以输入A---&#x27;\003&#x27;</span><br></pre></td></tr></table></figure>

<p> 注意：虽然键盘上你能找到^和A但直接输入时不行的，必须按照上面的方法输入。</p>
<p>第一行是特殊符号颜色蓝色，第二行直接输入不是特殊符号。</p>
<p><img src="http://image.okcode.net/DD9ED976ABB6F4313B8F0F7C2DD5C33E.png" alt="img"></p>
<p>特殊号直接cat是不可以看见的，但是第二行是可见的，所以不是特殊符号。</p>
<p><img src="http://image.okcode.net/75D96F800A1815F7A84A8CF543BD7063.png" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ROW FORMAT DELIMITED </span><br><span class="line">FIELDS TERMINATED BY &#x27;\u0001&#x27; </span><br><span class="line">COLLECTION ITEMS TERMINATED BY &#x27;\u0002&#x27; </span><br><span class="line">MAP KEYS TERMINATED BY &#x27;\u0003&#x27;</span><br><span class="line">\u0001是ASCII编码值，对应java代码中的&quot;\001&quot;</span><br></pre></td></tr></table></figure>

<p>意义如下：</p>
<p>（1）FIELDS，字段之间的分隔符是’\u0001’</p>
<p>（2）COLLECTION ITEMS，多个集合之间的分隔符是’\u0002’，例如（kv1，kv2，kv3）这种多个键值对之间的分隔符就是’\u0002’</p>
<p>（3）MAP KEYS，单个map的k和v之间的分隔符是\u0003\，例如kv1里，k \u0003 v</p>
<h3 id="查看orc文件"><a href="#查看orc文件" class="headerlink" title="查看orc文件"></a>查看orc文件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hive --orcfiledump &lt;hdfs-location-of-orc-file&gt;</span><br></pre></td></tr></table></figure>

<h3 id="修改字段类型"><a href="#修改字段类型" class="headerlink" title="修改字段类型"></a>修改字段类型</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span><span class="keyword">table</span><span class="operator">-</span>name<span class="operator">&gt;</span> CHANGE <span class="operator">&lt;</span><span class="keyword">old</span><span class="operator">-</span>col<span class="operator">-</span>name<span class="operator">&gt;</span> <span class="operator">&lt;</span><span class="keyword">new</span><span class="operator">-</span>col<span class="operator">-</span>name<span class="operator">&gt;</span> <span class="operator">&lt;</span>data<span class="operator">-</span>type<span class="operator">&gt;</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> employee CHANGE e_id e_id <span class="type">INT</span>;</span><br></pre></td></tr></table></figure>

<h3 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h3><ul>
<li><p>Create ORC table</p>
</li>
<li><p>Login to the web console</p>
</li>
<li><p>Launch Hive by typing <code>hive</code> in the web console. Run the below commands in Hive.</p>
</li>
<li><p>Use your database by using the below command. <code>$&#123;env:USER&#125;</code> gets replaced by your username automatically:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use $&#123;env:USER&#125;;</span><br></pre></td></tr></table></figure></li>
<li><p>To create an ORC file format:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE orc_table (</span><br><span class="line">    first_name STRING, </span><br><span class="line">    last_name STRING</span><br><span class="line"> ) </span><br><span class="line"> STORED AS ORC;</span><br></pre></td></tr></table></figure></li>
<li><p>To insert values in the table:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO orc_table VALUES (&#x27;John&#x27;,&#x27;Gill&#x27;);</span><br></pre></td></tr></table></figure></li>
<li><p>To retrieve all the values in the table:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM orc_table;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p>查看hive进程</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jps -ml  | grep Hive</span><br></pre></td></tr></table></figure>



<h2 id="level-2"><a href="#level-2" class="headerlink" title="level-2"></a>level-2</h2><h3 id="内部表vs外部表"><a href="#内部表vs外部表" class="headerlink" title="内部表vs外部表"></a>内部表vs外部表</h3><p><strong>内部表</strong></p>
<ol>
<li>按照表数据的生命周期，可以将表分为内部表和外部表两类；</li>
<li>内部表也叫管理表或临时表，该类型表的生命周期时由hive控制的，默认情况下数据都存放在/user/hive/warehouse/下面；</li>
<li>删除表时数据会被删除；</li>
<li>以下命令创建的就是内部表，可见前面两篇文章中创建的表都是内部表</li>
</ol>
<p><strong>外部表</strong></p>
<ul>
<li>创建表的SQL语句中加上external，创建的就是外部表了；</li>
<li>外部表的数据生命周期不受Hive控制；</li>
<li>删除外部表的时候不会删除数据；</li>
<li>外部表的数据，可以同时作为多个外部表的数据源共享使用；</li>
<li>接下来开始实践，下面是建表语句：</li>
<li>在实际生产业务系统开发中，外部表是我们主要应用的表类型</li>
</ul>
]]></content>
      <categories>
        <category>hive</category>
      </categories>
      <tags>
        <tag>snippet</tag>
      </tags>
  </entry>
  <entry>
    <title>html snippet</title>
    <url>/2017/02/10/html%20snippet/</url>
    <content><![CDATA[<h3 id="label"><a href="#label" class="headerlink" title="label"></a>label</h3><ul>
<li><p>chrome页面跳转，需要使用 i 标签，不能使用 button 标签，因为在button的点击事件中，window.location.href不起作用。（但firefox起作用）</p>
</li>
<li><p>textarea标签里面的属性要紧靠书写，且不要换行，不然，会显示textarea默认赋值为多个空格</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span><span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span><span class="attr">id</span>=<span class="string">&quot;obj_address&quot;</span><span class="attr">placeholder</span>=<span class="string">&quot;地址（必填）&quot;</span><span class="attr">name</span>=<span class="string">&quot;address&quot;</span><span class="attr">isvalid</span>=<span class="string">&quot;yes&quot;</span><span class="attr">checkexpession</span>=<span class="string">&quot;NotNull&quot;</span><span class="attr">errormsg</span>=<span class="string">&quot;地址&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>html</category>
      </categories>
      <tags>
        <tag>snippet</tag>
      </tags>
  </entry>
  <entry>
    <title>http learn</title>
    <url>/2019/05/14/http%20learn/</url>
    <content><![CDATA[<h2 id="http-1-0-http-1-1"><a href="#http-1-0-http-1-1" class="headerlink" title="http 1.0 http 1.1"></a>http 1.0 http 1.1</h2><ul>
<li><p>HTTP1.0最早在网页中使用是1996年，那个时候只是使用一些较为简单的网页和网络的请求，每次请求都需要建立一个单独的连接，上一次和下一次请求完全分离。这种做法，即使每次的请求量都很小，但是客户端和服务端每次建立TCP连接和关闭TCP连接都是相对比较费时的过程，严重影响客户端和服务端的性能。</p>
</li>
<li><p>基于以上的问题，HTTP1.1在1999年广泛应用于现在的各大浏览器网络请求中，同时HTTP1.1也是当前使用最为广泛的HTTP协议（2015年诞生了HTTP2，但是还未大规模应用），这里不详细对比HTTP1.1针对HTTP1.0改进了什么，只是在连接这块，HTTP1.1支持在一个TCP连接上传送多个HTTP请求和响应，减少了建立和关闭连接的消耗延迟，一定程度上弥补了HTTP1.0每次请求都要创建连接的缺点，这就是长连接，HTTP1.1默认使用长连接。</p>
</li>
<li><p>那么，长连接是如何工作的呢？首先，我们要明确一下，长短连接是通信层（TCP）的概念，HTTP是应用层协议，它只能说告诉通信层我打算一段时间内复用TCP通道而没有自己去建立、释放TCP通道的能力。</p>
</li>
</ul>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwdKAeT5rjMFfDXeITCDnbwnNXWrFDaIIhBibAk4N83H5dKXAkMNleqewC53Y8WQ6cOhRjA7k4SuMw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1"></p>
<ul>
<li>http的keep-alive和tcp的keep-alive的区别<ul>
<li>http的keep-alive是为了复用已有连接</li>
<li>tcp的keep-alive是为了保活，即保证对端还存活，不然对端已经不在了我这边还占着和对端的这个连接，浪费服务器资源，做法是隔一段时间发送一个心跳包到对端服务器，一旦长时间没有接收到应答，就主动关闭连接</li>
</ul>
</li>
</ul>
<h2 id="WebSockets"><a href="#WebSockets" class="headerlink" title="WebSockets"></a>WebSockets</h2><p>WebSockets provide a persistent connection between a client and server that both parties can use to start sending data at any time.**</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Create a new WebSocket.</span><br><span class="line">var socket = new WebSocket(&#x27;ws://echo.websocket.org&#x27;);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>Once the connection has been established the <code>open</code> event will be fired on your WebSocket instance.</p>
</li>
<li><p>请求</p>
<p><code>ws://localhost:9095/webSocket/d72b3660-29a8-4276-9eb1-3373e82fdd92</code></p>
</li>
<li><p>后台请求的结果传入websocket是通过session建立关联的</p>
</li>
</ul>
<h2 id="SSE（Server-Sent-Events）"><a href="#SSE（Server-Sent-Events）" class="headerlink" title="SSE（Server-Sent Events）"></a>SSE（Server-Sent Events）</h2><p><img src="/images/http/overview-sse.webp"></p>
<h3 id="client"><a href="#client" class="headerlink" title="client"></a>client</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">GET/POST /api/v1/live-scores </span><br><span class="line">Accept: text/event-stream</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Connection: keep-alive</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>Accept: text/event-stream</code> indicates the client waiting for event stream from the server, <code>Cache-Control: no-cache</code> indicates that disabling the caching and <code>Connection: keep-alive</code> indicates the persistent connection. This request will give us an open connection which we are going to use to fetch updates. After the connection, the server can send messages when the events are ready to send by the server. The important thing is that events are text messages in <code>UTF-8</code> encoding.</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -H &quot;Accept: text/event-stream&quot; -H &quot;Cache-Control: no-cache&quot; -N &lt;SSE_ENDPOINT_URL&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash"> e.g.</span></span><br><span class="line">curl -X POST -H &quot;Accept: text/event-stream&quot; -H &quot;Cache-Control: no-cache&quot; -H &quot;User-Key: dongwei&quot; -H &quot;Authorization: Bearer xxxxx&quot; -H &quot;Content-Type: application/json&quot; -d &#x27;&#123;&quot;content&quot;: &quot;你好&quot;&#125;&#x27; -N http://xxx/api</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 对照非流式</span></span><br><span class="line">curl -X POST -H &quot;Accept: application/json&quot; -H &quot;User-Key: dongwei&quot; -H &quot;Authorization: Bearer xxxxx&quot; -H &quot;Content-Type: application/json&quot; -d &#x27;&#123;&quot;content&quot;: &quot;你有哪些能力&quot;&#125;&#x27; http://xxx/api/</span><br></pre></td></tr></table></figure>



<h3 id="server"><a href="#server" class="headerlink" title="server"></a>server</h3><h3 id="Disadvantages"><a href="#Disadvantages" class="headerlink" title="Disadvantages"></a>Disadvantages</h3><ul>
<li>One potential downside of using Server-Sent Events is the limitations in data format. Since SSE is restricted to transporting UTF-8 messages, binary data is not supported.</li>
<li>When not used over HTTP/2, another limitation is the restricted number of concurrent connections per browser. With only six concurrent open SSE connections allowed at any given time, opening multiple tabs with SSE connections can become a bottleneck. (Credit: Dan Messenger)</li>
</ul>
<h3 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h3><ul>
<li><a href="https://medium.com/deliveryherotechhub/what-is-server-sent-events-sse-and-how-to-implement-it-904938bffd73">https://medium.com/deliveryherotechhub/what-is-server-sent-events-sse-and-how-to-implement-it-904938bffd73</a></li>
</ul>
]]></content>
      <categories>
        <category>http</category>
      </categories>
      <tags>
        <tag>learn</tag>
      </tags>
  </entry>
  <entry>
    <title>idea keymap</title>
    <url>/2019/09/16/idea%20keymap/</url>
    <content><![CDATA[<h3 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h3><ul>
<li>ctrl + P<br>列出参数列表（使用比较多 ）</li>
<li>ctrl + shift + enter<br>当在括号里输入完最后一个参数时候他会直接光标跳到最后并且添加分号，不需要自己按向左键移动光标。（使用比较多 ）<br>ctrl + enter 向下插入一行，光标位置不变</li>
<li>shift + enter<br>向下插入一行。光标位置进入下一行（可以在一行的任何位置换行，而不必将光标移动到行尾，使用比较多）</li>
<li>ctrl+left/right<br>在单词间跳动光标，基本在所有的编辑器中都是适用 （使用比较多 ）</li>
<li>ctr+shitf+left/right<br>快速选中，基本在所有的编辑器中都是适用（shift选中，ctrl+left/right在单词中快速跳动，使用比较多 ）</li>
<li>Alt+left/right，切换代码视图（使用比较多 ）</li>
<li>Alt+Up/Down，在方法间快速移动定位（使用比较多 ）</li>
<li>F2 或 Shift+F2，高亮错误或警告快速定位（使用比较多）</li>
<li>Ctrl+Alt+T<br>可以把代码包在一个块内，例如：try/catch（使用比较多 ）</li>
<li>Ctrl+F，处于查找状态下按down向下查找，up向上查找（使用比较多）</li>
<li>Ctrl+F12，可以显示当前文件的结构（快速查找当前类中某个方法，使用比较多）</li>
<li>Ctrl+Shift+W，取消选择光标所在词（使用比较多）</li>
<li>Ctrl+[ OR ]，可以跑到大括号的开头与结尾</li>
<li>Ctrl+Shift +[ OR ]，选择大括号中的内容</li>
<li>alt + 1 同上（在工程目录和编辑页面间切换，使用比较多）</li>
<li>Ctrl+Alt+O，优化导入的类和包(去掉没有使用的import，使用比较多 )</li>
<li>Shift+F6，重构 - 重命名（使用比较多 ）</li>
<li>Ctrl+G，定位行</li>
<li>Ctrl+H，显示类结构图（类的继承层次）</li>
<li>Ctrl+U，转到父类</li>
<li>Ctrl+”+/-“，当前方法展开、折叠</li>
<li>Ctrl+Shift+”+/-“，全部展开、折叠</li>
<li>Ctrl+Shift+J，整合两行</li>
<li>ctrl + shift + space<br>当new 一个变量的时候，已经写了变量类型，打了等号之后按这个可以快速完成。</li>
</ul>
<hr>
<h2 id="Compile-and-Run"><a href="#Compile-and-Run" class="headerlink" title="Compile and Run"></a>Compile and Run</h2><p><a href="https://imgchr.com/i/nRX0JI"><img src="https://s2.ax1x.com/2019/09/16/nRX0JI.jpg" alt="nRX0JI.jpg"></a></p>
<h2 id="Debugging"><a href="#Debugging" class="headerlink" title="Debugging"></a>Debugging</h2><p><a href="https://imgchr.com/i/nRXhYn"><img src="https://s2.ax1x.com/2019/09/16/nRXhYn.jpg" alt="nRXhYn.jpg"></a></p>
<h2 id="Editing"><a href="#Editing" class="headerlink" title="Editing"></a>Editing</h2><p><a href="https://imgchr.com/i/nRXwFA"><img src="https://s2.ax1x.com/2019/09/16/nRXwFA.jpg" alt="nRXwFA.jpg"></a></p>
<h2 id="General"><a href="#General" class="headerlink" title="General"></a>General</h2><p><a href="https://imgchr.com/i/nRX2wQ"><img src="https://s2.ax1x.com/2019/09/16/nRX2wQ.jpg" alt="nRX2wQ.jpg"></a></p>
<h2 id="Live-Templates"><a href="#Live-Templates" class="headerlink" title="Live Templates"></a>Live Templates</h2><p><a href="https://imgchr.com/i/nRXRoj"><img src="https://s2.ax1x.com/2019/09/16/nRXRoj.jpg" alt="nRXRoj.jpg"></a></p>
<h2 id="Navigation"><a href="#Navigation" class="headerlink" title="Navigation"></a>Navigation</h2><p><a href="https://imgchr.com/i/nRXBWt"><img src="https://s2.ax1x.com/2019/09/16/nRXBWt.jpg" alt="nRXBWt.jpg"></a></p>
<h2 id="Refactoring"><a href="#Refactoring" class="headerlink" title="Refactoring"></a>Refactoring</h2><p><a href="https://imgchr.com/i/nRXsQf"><img src="https://s2.ax1x.com/2019/09/16/nRXsQf.jpg" alt="nRXsQf.jpg"></a></p>
<h2 id="Search-Replace"><a href="#Search-Replace" class="headerlink" title="Search/Replace"></a>Search/Replace</h2><p><a href="https://imgchr.com/i/nRXrSP"><img src="https://s2.ax1x.com/2019/09/16/nRXrSP.jpg" alt="nRXrSP.jpg"></a></p>
<h2 id="Usage-Search"><a href="#Usage-Search" class="headerlink" title="Usage Search"></a>Usage Search</h2><p><a href="https://imgchr.com/i/nRXyy8"><img src="https://s2.ax1x.com/2019/09/16/nRXyy8.jpg" alt="nRXyy8.jpg"></a></p>
<h2 id="VCS-Local-History"><a href="#VCS-Local-History" class="headerlink" title="VCS/Local History"></a>VCS/Local History</h2><p><a href="https://imgchr.com/i/nRX6OS"><img src="https://s2.ax1x.com/2019/09/16/nRX6OS.jpg" alt="nRX6OS.jpg"></a></p>
]]></content>
      <categories>
        <category>tool</category>
      </categories>
      <tags>
        <tag>keymap</tag>
      </tags>
  </entry>
  <entry>
    <title>idea skill</title>
    <url>/2016/12/16/idea%20skill/</url>
    <content><![CDATA[<h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><ul>
<li><p>参照<a href="https://blog.csdn.net/q547550831/article/details/79129311">一大坨插件</a></p>
</li>
<li><p>现在已安装的插件：</p>
<ul>
<li>Translation(翻译工具)</li>
<li>CheckStyle-IDEA（代码规范）</li>
<li>FindBugs-IDEA(静态分析工具)</li>
<li>BashSupport（Linux Bash支持，对bash语法的高亮支持）</li>
<li>CodeGlance（类似SublimeText的Mini Map插件 ）</li>
<li>Key promoter（提示功能快捷键）</li>
<li>GsonFormat（暂未安装，其功能为把json格式的内容转成Object）</li>
<li>jRebel（暂未安装，热部署插件）</li>
</ul>
</li>
<li><p><strong>scratches草稿功能</strong></p>
<ul>
<li><p>参照<a href="https://blog.csdn.net/theape/article/details/70194185">强大的草稿功能</a></p>
</li>
<li><p>scratch中文乱码解决办法</p>
<p>需要在<code>C:\Users\Administrator\.IntelliJIdea2019.1\config</code>中修改文件<code>idea64.exe.vmoptions</code>,在后面加上设置<code>-Dfile.encoding=UTF-8</code></p>
</li>
</ul>
</li>
<li><p>**Lombok **插件</p>
<p>提高编码效率</p>
</li>
</ul>
<h2 id="中文编码配置"><a href="#中文编码配置" class="headerlink" title="中文编码配置"></a>中文编码配置</h2><ul>
<li>有关Properties文件中的中文unicode转码问题在IDEA中创建了properties文件，发现默认中文不会自动进行unicode转码，需要配置<img src="https://i.imgur.com/W2a0nMR.jpg"></li>
</ul>
<h2 id="grep-console"><a href="#grep-console" class="headerlink" title="grep console"></a>grep console</h2><ul>
<li>去掉指定日志级别显示<img src=""></li>
</ul>
]]></content>
      <categories>
        <category>idea</category>
      </categories>
      <tags>
        <tag>skill</tag>
      </tags>
  </entry>
  <entry>
    <title>ignite issue</title>
    <url>/2021/12/09/ignite%20issue/</url>
    <content><![CDATA[<h3 id="BinaryObjectException-Conflicting-enum-values"><a href="#BinaryObjectException-Conflicting-enum-values" class="headerlink" title="BinaryObjectException: Conflicting enum values"></a>BinaryObjectException: Conflicting enum values</h3><ul>
<li><p>原因</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">存入ignite的数据格式</span><br><span class="line">key: String , value: Map&lt;Enum, BigDecimal&gt;</span><br><span class="line">Enum类型包含</span><br><span class="line">&#123;A,B,C&#125;</span><br><span class="line"></span><br><span class="line">在之后由于业务变更，需要新增新的enum项目，并添加D在A与B之间</span><br><span class="line">&#123;A,D,B,C&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>分析</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">由于在数据存入ignite之后，ignite会保存数据相关的schema信息,此时在enum项目之间修改item，会打乱之前的index</span><br></pre></td></tr></table></figure></li>
<li><p>解决 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">方法一：</span><br><span class="line">更改enum类的名称，不再使用原有的schema信息</span><br><span class="line">方法二：</span><br><span class="line">enum类新增项目时，需要在最后面添加，避免打乱已有的schema索引</span><br><span class="line">方法三（未验证）：</span><br><span class="line">删除 $IGNITE_HOME/work/binary_meta/Nodex里面的文件</span><br></pre></td></tr></table></figure></li>
<li><p>官方说明</p>
<blockquote>
<ul>
<li>You cannot change the types of existing fields.</li>
<li>You cannot change the order of enum values or add new constants at the beginning or in the middle of the list of enum’s values. You can add new constants to the end of the list though.</li>
</ul>
</blockquote>
</li>
<li><p><strong>处理conflict enum values, 需要清除数据</strong></p>
</li>
</ul>
<blockquote>
<p>需要清理 $IGNITE_HOME/work/db目录下的 binary_meta、marshaller</p>
<p>需要验证是否清理 storagePath、walPath、walArchivePath</p>
</blockquote>
<h3 id="gc"><a href="#gc" class="headerlink" title="gc"></a>gc</h3><p><img src="/images/ignite/gc_collect.png"></p>
<blockquote>
<p>3s进行gc  (110060-52672)/1024=56.04G</p>
</blockquote>
<p><img src="/images/ignite/gc_2.png"></p>
<blockquote>
<p>17s进行gc (109952-52658)/1024=55.95G</p>
</blockquote>
<h3 id="IgniteCacheException"><a href="#IgniteCacheException" class="headerlink" title="IgniteCacheException"></a>IgniteCacheException</h3><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">ERROR org<span class="variable">.apache</span><span class="variable">.ignite</span><span class="variable">.spi</span><span class="variable">.communication</span><span class="variable">.tcp</span><span class="variable">.TcpCommunicationSpi</span>  [] - Failed to send message to remote node [node=ZookeeperClusterNode [id=<span class="number">1</span>c8a032d-<span class="number">042</span>e-<span class="number">4386</span>-<span class="number">9</span>ce8-<span class="number">2605</span>c0699304, addrs=[<span class="number">17</span><span class="variable">.9</span><span class="variable">.11</span><span class="variable">.11</span>], order=<span class="number">1</span>, loc=false, client=false], msg=GridIoMessage [plc=<span class="number">2</span>, topic=TOPIC_CACHE, topicOrd=<span class="number">8</span>, ordered=false, timeout=<span class="number">0</span>, skipOnTimeout=false, msg=GridNearLockRequest [topVer=AffinityTopologyVersion [topVer=<span class="number">358</span>, minorTopVer=<span class="number">0</span>], miniId=<span class="number">1</span>, dhtVers=GridCacheVersion[] [<span class="literal">null</span>], subjId=a5dbdc1d-e76e-<span class="number">49</span>c2-<span class="number">85</span>d7-ed7f1c7db7bd, taskNameHash=<span class="number">0</span>, createTtl=-<span class="number">1</span>, accessTtl=-<span class="number">1</span>, flags=<span class="number">3</span>, txLbl=<span class="literal">null</span>, filter=<span class="literal">null</span>, <span class="keyword">super</span>=GridDistributedLockRequest [nodeId=a5dbdc1d-e76e-<span class="number">49</span>c2-<span class="number">85</span>d7-ed7f1c7db7bd, nearXidVer=GridCacheVersion [topVer=<span class="number">245500806</span>, order=<span class="number">1638786801426</span>, nodeOrder=<span class="number">336</span>], threadId=<span class="number">11960694</span>, futId=<span class="number">96</span>c1bf42d71-<span class="number">90702925</span>-<span class="number">3</span>ef9-<span class="number">4</span>c70-b7a7-<span class="number">4</span>be2fb6d75ba, timeout=<span class="number">0</span>, isInTx=true, isInvalidate=false, isRead=true, isolation=REPEATABLE_READ, retVals=[true], txSize=<span class="number">0</span>, flags=<span class="number">0</span>, keysCnt=<span class="number">1</span>, <span class="keyword">super</span>=GridDistributedBaseMessage [ver=GridCacheVersion [topVer=<span class="number">245500806</span>, order=<span class="number">1638786801426</span>, nodeOrder=<span class="number">336</span>], committedVers=<span class="literal">null</span>, rolledbackVers=<span class="literal">null</span>, cnt=<span class="number">1</span>, <span class="keyword">super</span>=GridCacheIdMessage [cacheId=-<span class="number">182240380</span>, <span class="keyword">super</span>=GridCacheMessage [msgId=<span class="number">1360862</span>, depInfo=<span class="literal">null</span>, lastAffChangedTopVer=AffinityTopologyVersion [topVer=<span class="number">336</span>, minorTopVer=<span class="number">0</span>], err=<span class="literal">null</span>, skipPrepare=false]]]]]]]</span><br><span class="line"></span><br><span class="line">org<span class="variable">.apache</span><span class="variable">.ignite</span><span class="variable">.IgniteCheckedException</span>: Failed to connect to node due to unrecoverable exception (is node still alive?). Make sure that each ComputeTask <span class="keyword">and</span> cache Transaction has a timeout set in order to prevent parties from waiting <span class="keyword">forever</span> in <span class="keyword">case</span> of network issues [nodeId=d0a258e5-ec1b-<span class="number">4</span>f79-<span class="number">89</span>ad-<span class="number">80</span>c27708f895, addrs=[x/x<span class="variable">.x</span><span class="variable">.x</span><span class="variable">.x</span>:<span class="number">47100</span>], err= <span class="keyword">class</span> org<span class="variable">.apache</span><span class="variable">.ignite</span><span class="variable">.IgniteCheckedException</span>: Remote node does <span class="keyword">not</span> observe current node in topology : d0a258e5-ec1b-<span class="number">4</span>f79-<span class="number">89</span>ad-<span class="number">80</span>c27708f895]</span><br><span class="line"></span><br><span class="line">Caused by: org<span class="variable">.apache</span><span class="variable">.ignite</span><span class="variable">.IgniteCheckedException</span>: Remote node does <span class="keyword">not</span> observe current node in topology : d0a258e5-ec1b-<span class="number">4</span>f79-<span class="number">89</span>ad-<span class="number">80</span>c27708f895</span><br></pre></td></tr></table></figure>

<ul>
<li>gc的策略</li>
<li>ignite client的异常捕获</li>
<li></li>
</ul>
]]></content>
      <categories>
        <category>ignite</category>
      </categories>
      <tags>
        <tag>issue</tag>
      </tags>
  </entry>
  <entry>
    <title>ignite snippet</title>
    <url>/2019/11/01/ignite_snippet/</url>
    <content><![CDATA[<h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><ul>
<li><p>清空数据</p>
<p><code>cache -clear -c=xxxxx</code></p>
</li>
<li><p>lostPart</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cache -rebalance -c=xxxx</span><br><span class="line">cache -rebalance 命令不需要依赖于 cache -stop 的操作。启动或重新启动分区重平衡可以在缓存运行期间进行，不需要停止缓存。</span><br></pre></td></tr></table></figure></li>
<li><p>停止多个缓存表</p>
</li>
</ul>
<p>​    <code>cache -stop --caches=myCache_*</code></p>
<ul>
<li>重新平衡多个缓存表</li>
</ul>
<p>​    <code>cache -rebalance --caches=myCache1,myCache2,myCache3</code></p>
<ul>
<li><p>停止所有缓存表，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cache -stop --all </span><br><span class="line">cache -start --all</span><br></pre></td></tr></table></figure></li>
<li><p>重新加载所有缓存表并重新平衡</p>
<p>``cache -l -r –all`</p>
<p><code>cache -clear</code> 命令只是清空缓存中的数据，但是缓存仍然处于活动状态，可以继续使用；而<code>cache -stop</code> 命令则停止了缓存，并且清空了所有数据，需要使用 <code>cache -start</code> 命令重新启动缓存，并重新加载数据。</p>
</li>
</ul>
<p>​    ``cache -start<code>命令用于启动一个已经停止的缓存。如果缓存之前已经存在并被停止，使用</code>cache -start` 命令可以重新启动该缓存，并开始加载数据。如果该缓存之前不存在，则会创建一个新的缓存并开始加载数据。</p>
<ul>
<li>查看表的状态</li>
</ul>
<p>使用 <code>cache -state</code> 命令查看指定缓存表的状态，包括缓存大小、分区数量、复制和备份数等信息。</p>
<hr>
<p>设置复制和备份数量：<br>cache -rebalance -r <replicas> -b <backups><br>其中<replicas>是要设置的复制数量，<backups>是要设置的备份数量。</p>
<p>设置备份数量为1，即每个分区都在一个不同的节点上保留1个备份数量<br>设置复制数量为2，即每个缓存表的分区都会在集群中的两个节点上复制</p>
<p>复制和备份都是为了提高数据可用性和可靠性，但复制是将同一份数据存储在多个节点上，而备份是将数据副本存储在集群中的不同节点上。在配置Ignite缓存表时，可以同时设置复制和备份的数量来确保数据的高可用性和可靠性。</p>
<hr>
<p>如果有三个Ignite节点，可以按照以下建议设置缓存表的复制和备份数量：</p>
<p>复制因子建议设置为2，这样每个分区的数据都会在两个节点上进行备份，当一个节点故障时，可以保证数据的可靠性。<br>例如，使用ignitevisorcmd.sh命令可以这样设置：cache -set-replicas myCache 2<br>备份数量建议设置为1，这样每个分区的数据都会在一个节点上进行备份，当一个节点故障时，可以保证数据的可靠性，并且减少额外的网络开销。<br>例如，使用ignitevisorcmd.sh命令可以这样设置：cache -set-backups myCache 1</p>
<p>需要注意的是，设置复制和备份数量会增加网络和存储开销，因此需要根据具体场景进行权衡和调整。<br>此外，还需要根据数据大小、访问模式、节点配置等因素进行性能测试和优化。</p>
<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><h3 id="ignite-2-7-0"><a href="#ignite-2-7-0" class="headerlink" title="ignite-2.7.0"></a>ignite-2.7.0</h3><ul>
<li>编译ignite-core模块的时候需要使用jdk8，因为会报jdk.internal.misc.SharedSecrets找不到的错误原因：估计是在GridUnsafe.java中的miscPackage方法以及javaNioAccessObject的<code>Class&lt;?&gt; cls = Class.forName(pkgName + &quot;.misc.SharedSecrets&quot;);</code>出现的问题，jdk11中SharedSecrets出现的位置是<code>jdk.internal.access.SharedSecrets</code></li>
</ul>
<h3 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h3><ul>
<li>Ignite的原生持久化会在磁盘上存储一个数据的超集，以及根据容量在内存中存储一个子集。比如，如果有100个条目，然后内存只能存储20条，那么磁盘上会存储所有的100条，然后为了提高性能在内存中缓存20条。</li>
<li>和纯内存的使用场景一样，当打开持久化时，每个独立的节点只会持久化数据的一个子集，不管是主还是备节点，都是只包括节点所属的分区的数据，总的来说，整个集群包括了完整的数据集。</li>
<li>在开发应用时可能需要修改自定义对象字段的类型。例如假设对象A的字段类型<code>A.range</code>为<code>int</code>类型，然后决定将<code>A.range</code>的类型修改为<code>long</code>类型。之后会发现集群或应用将无法重启，因为Ignite不支持字段/列类型的更改。</li>
<li>无法变更枚举值的顺序，也无法在枚举值列表的开始或者中部添加新的常量，但是可以在列表的末尾添加新的常量。</li>
</ul>
<h3 id="ZooKeeper-Discovery"><a href="#ZooKeeper-Discovery" class="headerlink" title="ZooKeeper Discovery"></a>ZooKeeper Discovery</h3><p>ZooKeeper Discovery是为需要保持易扩展性和线性性能的大规模部署而设计的。然而，同时使用Ignite和ZooKeeper需要配置和管理两个分布式系统，这可能是一个挑战。因此，我们建议你只有在计划扩展到100个或1000个节点时才使用ZooKeeper Discovery。否则，最好使用TCP/IP发现。</p>
<hr>
<h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><ul>
<li><p>marshaller</p>
<blockquote>
<p> $IGNITE_HOME/work/db/marshaller    类classpath信息</p>
</blockquote>
</li>
<li><p>binary_meta</p>
<blockquote>
<p>$IGNITE_HOME/work/db/binary_meta    类的元素信息</p>
</blockquote>
</li>
</ul>
<p><strong>下面三个配置项是在配置文件中进行配置</strong></p>
<ul>
<li><p>storagePath</p>
<blockquote>
<p>$RDX_HOME/data/ignite/persistent    持久化文件</p>
</blockquote>
</li>
<li><p>walPath</p>
<blockquote>
<p>$RDX_HOME/data/ignite/wal_store    持久化数据的元数据信息（类名、元素名、位置）</p>
</blockquote>
<ul>
<li>walPath和storagePath存储的数据的关联</li>
</ul>
</li>
<li><p>walArchivePath</p>
<blockquote>
<p>$RDX_HOME/data/ignite/wal_archive</p>
</blockquote>
<ul>
<li>和walPath存储的数据结构一样，二者的关系</li>
</ul>
</li>
</ul>
<h3 id="Ignite-and-ZooKeeper-Configuration-Considerations"><a href="#Ignite-and-ZooKeeper-Configuration-Considerations" class="headerlink" title="Ignite and ZooKeeper Configuration Considerations"></a>Ignite and ZooKeeper Configuration Considerations</h3><ul>
<li>zookeeper中 tickTime和syncLimit参数的定义</li>
</ul>
<p>When using ZooKeeper Discovery, you need to make sure that the configuration parameters of the ZooKeeper cluster and Ignite cluster match each other.</p>
<p>Consider a sample ZooKeeper configuration, as follows:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"># The number of milliseconds of each tick</span><br><span class="line">tickTime=2000</span><br><span class="line"></span><br><span class="line"># The number of ticks that can pass between sending a request and getting an acknowledgement</span><br><span class="line">syncLimit=5</span><br></pre></td></tr></table></figure>

<ul>
<li>在zookeeper中 tickTime和syncLimit参数的作用</li>
</ul>
<p>Configured this way, ZooKeeper server detects its own segmentation from the rest of the ZooKeeper cluster only after <code>tickTime * syncLimit</code> elapses. Until this event is detected at ZooKeeper level, all Ignite nodes connected to the segmented ZooKeeper server do not try to reconnect to the other ZooKeeper servers.</p>
<ul>
<li>在ignite中 sessionTimeout参数与zookeeper的tickTime和syncLimit参数的关联</li>
</ul>
<p>On the other hand, there is a <code>sessionTimeout</code> parameter on the Ignite side that defines how soon ZooKeeper closes an Ignite node’s session if the node gets disconnected from the ZooKeeper cluster. If <code>sessionTimeout</code> is smaller than <code>tickTime * syncLimit</code> , then the Ignite node is notified by the segmented ZooKeeper server too late — its session expires before it tries to reconnect to other ZooKeeper servers.</p>
<p>To avoid this situation, <code>sessionTimeout</code> should be bigger than <code>tickTime * syncLimit</code>.</p>
]]></content>
      <categories>
        <category>ignite</category>
      </categories>
      <tags>
        <tag>snippet</tag>
      </tags>
  </entry>
  <entry>
    <title>java 8</title>
    <url>/2015/09/01/java%208%20feature/</url>
    <content><![CDATA[<h3 id="forEach-method-in-Iterable-interface"><a href="#forEach-method-in-Iterable-interface" class="headerlink" title="forEach() method in Iterable interface"></a>forEach() method in Iterable interface</h3><h3 id="default-and-static-methods-in-Interfaces"><a href="#default-and-static-methods-in-Interfaces" class="headerlink" title="default and static methods in Interfaces"></a>default and static methods in Interfaces</h3><ul>
<li>Java 8 introduces the “Default Method” or (Defender methods) feature, which allows the developer to add new methods to the interfaces without breaking their existing implementation. It provides the flexibility to allow interface to define implementation which will use as the default in a situation where a concrete class fails to provide an implementation for that method.</li>
</ul>
<h3 id="Functional-Interfaces-and-Lambda-Expressions"><a href="#Functional-Interfaces-and-Lambda-Expressions" class="headerlink" title="Functional Interfaces and Lambda Expressions"></a>Functional Interfaces and Lambda Expressions</h3><h4 id="Functional-Interfaces"><a href="#Functional-Interfaces" class="headerlink" title="Functional Interfaces"></a>Functional Interfaces</h4><blockquote>
<p>Being object oriented is not bad, but it brings a lot of verbosity to the program. Java 8 Functional Interfaces and Lambda Expressions help us in writing smaller and cleaner code by removing a lot of boiler-plate code.</p>
</blockquote>
<ul>
<li>An interface with exactly one abstract method is called Functional Interface. @FunctionalInterface annotation is added so that we can mark an interface as functional interface.</li>
<li>Some of the useful java 8 functional interfaces are Consumer, Supplier, Function and Predicate.</li>
</ul>
<h4 id="Lambda-Expression"><a href="#Lambda-Expression" class="headerlink" title="Lambda Expression"></a>Lambda Expression</h4><ul>
<li>Objects are the base of java programming language and we can never have a function without an Object, that’s why Java language provide support for using lambda expressions only with functional interfaces.</li>
<li>Lambda Expressions syntax is (argument) -&gt; (body). </li>
</ul>
<h3 id="Java-Stream-API-for-Bulk-Data-Operations-on-Collections"><a href="#Java-Stream-API-for-Bulk-Data-Operations-on-Collections" class="headerlink" title="Java Stream API for Bulk Data Operations on Collections"></a>Java Stream API for Bulk Data Operations on Collections</h3><h3 id="Java-Time-API"><a href="#Java-Time-API" class="headerlink" title="Java Time API"></a>Java Time API</h3><h3 id="Collection-API-improvements"><a href="#Collection-API-improvements" class="headerlink" title="Collection API improvements"></a>Collection API improvements</h3><h3 id="Concurrency-API-improvements"><a href="#Concurrency-API-improvements" class="headerlink" title="Concurrency API improvements"></a>Concurrency API improvements</h3><h3 id="Java-IO-improvements"><a href="#Java-IO-improvements" class="headerlink" title="Java IO improvements"></a>Java IO improvements</h3><h3 id="Miscellaneous-Core-API-improvements"><a href="#Miscellaneous-Core-API-improvements" class="headerlink" title="Miscellaneous Core API improvements"></a>Miscellaneous Core API improvements</h3>]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>learn</tag>
      </tags>
  </entry>
  <entry>
    <title>java code snippet</title>
    <url>/2016/02/16/java%20code%20snippet/</url>
    <content><![CDATA[<h2 id="base64ToByte"><a href="#base64ToByte" class="headerlink" title="base64ToByte"></a>base64ToByte</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String string = <span class="string">&quot;SmF2YWNvZGVnZWVrcw==&quot;</span>;</span><br><span class="line"><span class="comment">// Get bytes from string</span></span><br><span class="line"><span class="keyword">byte</span>[] byteArray = Base64.decodeBase64(string.getBytes());</span><br><span class="line"></span><br><span class="line"><span class="comment">// Print the decoded array</span></span><br><span class="line">System.out.println(Arrays.toString(byteArray));	</span><br><span class="line"><span class="comment">// Print the decoded string </span></span><br><span class="line">String decodedString = <span class="keyword">new</span> String(byteArray);</span><br><span class="line">System.out.println(string + <span class="string">&quot; = &quot;</span> + decodedString);</span><br></pre></td></tr></table></figure>

<h2 id="TimeConvert"><a href="#TimeConvert" class="headerlink" title="TimeConvert"></a>TimeConvert</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//date format</span></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.time.DateFormatUtils;</span><br><span class="line">String timeStr = DateFormatUtils.format(dateDate,<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">Date dateTime = DateUtils.parseDate(dateTimeStr,<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"></span><br><span class="line">SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">Date dateWithoutTime = sdf.parse(sdf.format(<span class="keyword">new</span> Date()));</span><br><span class="line"></span><br><span class="line"><span class="comment">//capitalize the first letter of word</span></span><br><span class="line">String output = input.substring(<span class="number">0</span>, <span class="number">1</span>).toUpperCase() + input.substring(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//measure the time cost</span></span><br><span class="line"><span class="keyword">long</span> start = System.nanoTime();</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="keyword">long</span> end = System.nanoTime();</span><br><span class="line"><span class="keyword">long</span> used = end-start;</span><br><span class="line">System.out.println(<span class="string">&quot;used:&quot;</span>+TimeUnit.NANOSECONDS.toMillis(used)+<span class="string">&quot; ms&quot;</span>);</span><br></pre></td></tr></table></figure>



<h2 id="Lambda"><a href="#Lambda" class="headerlink" title="Lambda"></a>Lambda</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//stream read database   </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testStreamRead</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        oracleSqlSessionTemplate.select(<span class="string">&quot;xxxx.OracleMapper.getPersonInfos&quot;</span>, <span class="keyword">new</span> ResultHandler() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleResult</span><span class="params">(ResultContext resultContext)</span> </span>&#123;</span><br><span class="line">                PersonInfo personInfo = (PersonInfo) resultContext.getResultObject();</span><br><span class="line">                LOG.debug(<span class="string">&quot;result count:[&#123;&#125;],result info:[&#123;&#125;]&quot;</span>, resultContext.getResultCount(), personInfo.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testStreamRead2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        oracleSqlSessionTemplate.select(<span class="string">&quot;xxxx.OracleMapper.getPersonInfos&quot;</span>,</span><br><span class="line">                resultContext -&gt; &#123;</span><br><span class="line">                    PersonInfo personInfo = (PersonInfo) resultContext.getResultObject();</span><br><span class="line">                    LOG.debug(<span class="string">&quot;result count:[&#123;&#125;],result info:[&#123;&#125;]&quot;</span>, resultContext.getResultCount(), personInfo.getName());</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//iterate list</span></span><br><span class="line">myFinalList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">myListToParse.stream()</span><br><span class="line">        .filter(elt -&gt; elt != <span class="keyword">null</span>)</span><br><span class="line">        .forEach(elt -&gt; myFinalList.add(doSomething(elt)));</span><br><span class="line"><span class="comment">//prefer</span></span><br><span class="line">myFinalList = myListToParse.stream()</span><br><span class="line">        .filter(elt -&gt; elt != <span class="keyword">null</span>)</span><br><span class="line">        .map(elt -&gt; doSomething(elt))</span><br><span class="line">        .collect(Collectors.toList()); </span><br></pre></td></tr></table></figure>

<h2 id="thread"><a href="#thread" class="headerlink" title="thread"></a>thread</h2><h3 id="notify-thread"><a href="#notify-thread" class="headerlink" title="notify thread"></a>notify thread</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shared</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">waitMethod</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Thread t = Thread.currentThread();</span><br><span class="line">         </span><br><span class="line">        System.out.println(t.getName()+<span class="string">&quot; is releasing the lock and going to wait&quot;</span>);</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            wait();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (InterruptedException e) </span><br><span class="line">        &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        System.out.println(t.getName()+<span class="string">&quot; has been notified and acquired the lock back&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">notifyOneThread</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Thread t = Thread.currentThread();</span><br><span class="line">         </span><br><span class="line">        notify();</span><br><span class="line">         </span><br><span class="line">        System.out.println(t.getName()+<span class="string">&quot; has notified one thread waiting for this object lock&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainClass</span> </span></span><br><span class="line"><span class="class"></span>&#123;   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Shared s = <span class="keyword">new</span> Shared();</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//Thread t1 will be waiting for lock of object &#x27;s&#x27;</span></span><br><span class="line">         </span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread() </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                s.waitMethod();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">         </span><br><span class="line">        t1.start();</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//Thread t2 will be waiting for lock of object &#x27;s&#x27;</span></span><br><span class="line">         </span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread() </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                s.waitMethod();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"> </span><br><span class="line">        t2.start();</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//Thread t3 will be waiting for lock of object &#x27;s&#x27;</span></span><br><span class="line">         </span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread() </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                s.waitMethod();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">         </span><br><span class="line">        t3.start();</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">catch</span> (InterruptedException e) </span><br><span class="line">        &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//Thread t4 will notify only one thread which is waiting for lock of object &#x27;s&#x27;</span></span><br><span class="line">         </span><br><span class="line">        Thread t4 = <span class="keyword">new</span> Thread() </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                s.notifyOneThread();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">         </span><br><span class="line">        t4.start(); </span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="stop-thread"><a href="#stop-thread" class="headerlink" title="stop thread"></a>stop thread</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">//Initially setting the flag as true</span></span><br><span class="line">     </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//This method will set flag as false</span></span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stopRunning</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        flag = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//Keep the task in while loop</span></span><br><span class="line">         </span><br><span class="line">        <span class="comment">//This will make thread continue to run until flag becomes false</span></span><br><span class="line">         </span><br><span class="line">        <span class="keyword">while</span> (flag)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;I am running....&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        System.out.println(<span class="string">&quot;Stopped Running....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainClass</span> </span></span><br><span class="line"><span class="class"></span>&#123;   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        MyThread thread = <span class="keyword">new</span> MyThread();</span><br><span class="line">         </span><br><span class="line">        thread.start();</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">catch</span> (InterruptedException e) </span><br><span class="line">        &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//call stopRunning() method whenever you want to stop a thread</span></span><br><span class="line">         </span><br><span class="line">        thread.stopRunning();</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span></span><br><span class="line"><span class="class"></span>&#123;   </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (!Thread.interrupted())</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;I am running....&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        System.out.println(<span class="string">&quot;Stopped Running.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainClass</span> </span></span><br><span class="line"><span class="class"></span>&#123;   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        MyThread thread = <span class="keyword">new</span> MyThread();</span><br><span class="line">         </span><br><span class="line">        thread.start();</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">catch</span> (InterruptedException e) </span><br><span class="line">        &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//interrupting the thread</span></span><br><span class="line">         </span><br><span class="line">        thread.interrupt();</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="try-catch-finally"><a href="#try-catch-finally" class="headerlink" title="try-catch-finally"></a>try-catch-finally</h3><ol>
<li>不管有木有出现异常，finally块中代码都会执行** </li>
<li><strong>当try和catch中有return时，finally仍然会执行</strong> </li>
<li><strong>finally是在return后面的表达式运算后执行的（此时并没有返回运算后的值，而是先把要返回的值保存起来，管finally中的代码怎么样，返回的值都不会改变，仍然是之前保存的值），所以函数返回值是在finally执行前确定的；</strong> </li>
<li><strong>finally中最好不要包含return，否则程序会提前退出，返回值不是try或catch中保存的返回值。</strong> </li>
<li>任何执行try 或者catch中的return语句之前，都会先执行finally语句，如果finally中有return语句，那么程序就return了，所以finally中的return是一定会被return的。</li>
</ol>
<h3 id="ReentrantLock"><a href="#ReentrantLock" class="headerlink" title="ReentrantLock"></a>ReentrantLock</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.Level;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.Logger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Java program to show, how to use ReentrantLock in Java.</span></span><br><span class="line"><span class="comment"> * Reentrant lock is an alternative way of locking</span></span><br><span class="line"><span class="comment"> * apart from implicit locking provided by synchronized keyword in Java.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>  Javin Paul</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReentrantLockHowto</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//Locking using Lock and ReentrantLock</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; gets Count: &quot;</span> + count);</span><br><span class="line">            <span class="keyword">return</span> count++;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//Implicit locking using synchronized keyword</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">getCountTwo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> count++;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ThreadTest counter = <span class="keyword">new</span> ThreadTest();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">while</span> (counter.getCount() &amp;lt; <span class="number">6</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException ex) &#123;</span><br><span class="line">                        ex.printStackTrace();                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">      </span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">while</span> (counter.getCount() &amp;lt; <span class="number">6</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException ex) &#123;</span><br><span class="line">                        ex.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">      </span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Output:</span><br><span class="line">Thread-0 gets Count: 0</span><br><span class="line">Thread-1 gets Count: 1</span><br><span class="line">Thread-1 gets Count: 2</span><br><span class="line">Thread-0 gets Count: 3</span><br><span class="line">Thread-1 gets Count: 4</span><br><span class="line">Thread-0 gets Count: 5</span><br><span class="line">Thread-0 gets Count: 6</span><br><span class="line">Thread-1 gets Count: 7</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>snippet</tag>
      </tags>
  </entry>
  <entry>
    <title>java design pattern</title>
    <url>/2017/12/20/java%20design%20pattern/</url>
    <content><![CDATA[<h2 id="Creational-Design-Patterns"><a href="#Creational-Design-Patterns" class="headerlink" title="Creational Design Patterns"></a>Creational Design Patterns</h2><blockquote>
<p>These design patterns provide a way to create objects while hiding the creation logic, rather than instantiating objects directly using new operator. This gives program more flexibility in deciding which objects need to be created for a given use case.</p>
</blockquote>
<h3 id="Singleton"><a href="#Singleton" class="headerlink" title="Singleton"></a>Singleton</h3><blockquote>
<p>In Factory pattern, we create object without exposing the creation logic to the client and refer to newly created object using a common interface.</p>
</blockquote>
<ul>
<li><p>different approaches to implement:</p>
<ul>
<li>Private constructor to restrict instantiation of the class from other classes.</li>
<li>Private static variable of the same class that is the only instance of the class.</li>
<li>Public static method that returns the instance of the class, this is the global access point for outer world to get the instance of the singleton class.</li>
</ul>
</li>
<li><p>design concerns with the implementation</p>
<ul>
<li>Eager initialization</li>
<li>Static block initialization</li>
<li>Lazy Initialization</li>
<li>Thread Safe Singleton</li>
<li>Bill Pugh Singleton Implementation</li>
<li>Using Reflection to destroy Singleton Pattern</li>
<li>Enum Singleton</li>
<li>Serialization and Singleton</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//SingleObject.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleObject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//create an object of SingleObject</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> SingleObject instance = <span class="keyword">new</span> SingleObject();</span><br><span class="line"></span><br><span class="line">   <span class="comment">//make the constructor private so that this class cannot be</span></span><br><span class="line">   <span class="comment">//instantiated</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="title">SingleObject</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//Get the only object available</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingleObject <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> instance;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showMessage</span><span class="params">()</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//SingletonPatternDemo.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonPatternDemo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//illegal construct</span></span><br><span class="line">      <span class="comment">//Compile Time Error: The constructor SingleObject() is not visible</span></span><br><span class="line">      <span class="comment">//SingleObject object = new SingleObject();</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//Get the only object available</span></span><br><span class="line">      SingleObject object = SingleObject.getInstance();</span><br><span class="line"></span><br><span class="line">      <span class="comment">//show the message</span></span><br><span class="line">      object.showMessage();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Factory"><a href="#Factory" class="headerlink" title="Factory"></a>Factory</h3><ul>
<li>Factory design pattern provides approach to code for interface rather than implementation.</li>
<li>Factory pattern removes the instantiation of actual implementation classes from client code. Factory pattern makes our code more robust, less coupled and easy to extend. For example, we can easily change PC class implementation because client program is unaware of this.</li>
<li>Factory pattern provides abstraction between implementation and client classes through inheritance.</li>
</ul>
<h3 id="Abstract-Factory"><a href="#Abstract-Factory" class="headerlink" title="Abstract Factory"></a>Abstract Factory</h3><ul>
<li>Abstract Factory design pattern provides approach to code for interface rather than implementation.</li>
<li>Abstract Factory pattern is “factory of factories” and can be easily extended to accommodate more products, for example we can add another sub-class Laptop and a factory LaptopFactory.</li>
<li>Abstract Factory pattern is robust and avoid conditional logic of Factory pattern.</li>
</ul>
<h3 id="Builder"><a href="#Builder" class="headerlink" title="Builder"></a>Builder</h3><ul>
<li>Builder pattern solves the issue with large number of optional parameters and inconsistent state by providing a way to build the object step-by-step and provide a method that will actually return the final Object.</li>
</ul>
<h3 id="Prototype"><a href="#Prototype" class="headerlink" title="Prototype"></a>Prototype</h3><ul>
<li>Prototype design pattern is used when the Object creation is a costly affair and requires a lot of time and resources and you have a similar object already existing.Prototype pattern provides a mechanism to copy the original object to a new object and then modify it according to our needs. Prototype design pattern uses java cloning to copy the object.</li>
</ul>
<h2 id="Structural-Design-Patterns"><a href="#Structural-Design-Patterns" class="headerlink" title="Structural Design Patterns"></a>Structural Design Patterns</h2><blockquote>
<p>These design patterns concern class and object composition. Concept of inheritance is used to compose interfaces and define ways to compose objects to obtain new functionalities.</p>
</blockquote>
<h3 id="Adapter"><a href="#Adapter" class="headerlink" title="Adapter"></a>Adapter</h3><ul>
<li>Adapter design pattern is one of the structural design pattern and its used so that two unrelated interfaces can work together. The object that joins these unrelated interface is called an Adapter.</li>
</ul>
<h3 id="Composite"><a href="#Composite" class="headerlink" title="Composite"></a>Composite</h3><ul>
<li>Composite design pattern is used when we have to represent a part-whole hierarchy.</li>
</ul>
<h3 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h3><ul>
<li>Proxy design pattern common uses are to control access or to provide a wrapper implementation for better performance.</li>
</ul>
<h3 id="Flyweight"><a href="#Flyweight" class="headerlink" title="Flyweight"></a>Flyweight</h3><ul>
<li>Use sharing to support large numbers of fine-grained objects efficiently</li>
</ul>
<h3 id="Facade"><a href="#Facade" class="headerlink" title="Facade"></a>Facade</h3><ul>
<li>Provide a unified interface to a set of interfaces in a subsystem. Facade Pattern defines a higher-level interface that makes the subsystem easier to use.</li>
</ul>
<h3 id="Bridge"><a href="#Bridge" class="headerlink" title="Bridge"></a>Bridge</h3><ul>
<li>Decouple an abstraction from its implementation so that the two can vary independently.</li>
</ul>
<h3 id="Decorator"><a href="#Decorator" class="headerlink" title="Decorator"></a>Decorator</h3><ul>
<li>Decorator design pattern is helpful in providing runtime modification abilities and hence more flexible. Its easy to maintain and extend when the number of choices are more.</li>
<li>The disadvantage of decorator design pattern is that it uses a lot of similar kind of objects (decorators).</li>
</ul>
<h2 id="Behavioral-Design-Patterns"><a href="#Behavioral-Design-Patterns" class="headerlink" title="Behavioral Design Patterns"></a>Behavioral Design Patterns</h2><blockquote>
<p>These design patterns are specifically concerned with communication between objects.</p>
</blockquote>
<h3 id="Template-Method"><a href="#Template-Method" class="headerlink" title="Template Method"></a>Template Method</h3><ul>
<li>Template method should consists of certain steps whose order is fixed and for some of the methods, implementation differs from base class to subclass. Template method should be final.</li>
<li>Most of the times, subclasses calls methods from super class but in template pattern, superclass template method calls methods from subclasses, this is known as Hollywood Principle – “don’t call us, we’ll call you.”.</li>
<li>Methods in base class with default implementation are referred as Hooks and they are intended to be overridden by subclasses, if you want some of the methods to be not overridden, you can make them final, for example in our case we can make buildFoundation() method final because if we don’t want subclasses to override it.</li>
</ul>
<h3 id="Media"><a href="#Media" class="headerlink" title="Media"></a>Media</h3><ul>
<li>Allows loose coupling by encapsulating the way disparate sets of objects interact and communicate with each other. Allows for the actions of each object set to vary independently of one another.</li>
</ul>
]]></content>
      <categories>
        <category>design pattern</category>
      </categories>
      <tags>
        <tag>learn</tag>
      </tags>
  </entry>
  <entry>
    <title>java dynamic compile</title>
    <url>/2022/04/07/java%20dynamic%20compile/</url>
    <content><![CDATA[<p>静态编译：编译时就把所有用到的Java代码全都编译成字节码，是一次性编译。</p>
<p>动态编译：在Java程序运行时才把需要的Java代码的编译成字节码，是按需编译。</p>
<p>从JDK1.6开始，引入了Java代码重写过的编译器接口，使得我们可以在运行时编译Java源代码，然后再通过类加载器将编译好的类加载进JVM,这种在运行时编译代码的操作就叫做动态编译。</p>
<hr>
<p><a href="https://blog.nowcoder.net/n/d2a7554ea2ec4e4b978cf4a74c3c41b2">【Java动态编译】动态编译的应用_牛客博客</a></p>
<p><a href="https://segmentfault.com/a/1190000016842546">Java动态性(1) - 动态编译(DynamicCompile)</a></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>point</tag>
      </tags>
  </entry>
  <entry>
    <title>java io</title>
    <url>/2019/07/10/java%20io/</url>
    <content><![CDATA[<h2 id="流"><a href="#流" class="headerlink" title="流"></a>流</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">流包括字符流和字节流，流从概念上来说是一个连续的数据流。当程序需要读数据的时候就需要使用输入流读取数据，当需要往外写数据的时候就需要输出流</span><br></pre></td></tr></table></figure>

<ul>
<li><p>字节流：字节流主要用来处理字节或二进制对象<code>InputStream、OutputStream，</code></p>
<blockquote>
<p>在使用字节流的时候，InputStream和OutputStream都是抽象类，我们实例化的都是他们的子类，每一个子类都有自己的作用范围</p>
</blockquote>
<p><img src="https://i.imgur.com/s39Xj3r.png"></p>
</li>
<li><p>字符流：字符流用来处理字符文本或字符串<code>Reader、Writer</code></p>
<blockquote>
<p>在使用字符流的时候也是，Reader和Writer都是抽象类，我们实例化的都是他们的子类，每一个子类都有自己的作用范围</p>
</blockquote>
<p><img src="https://i.imgur.com/RMD0koG.png"></p>
</li>
<li><p>字节流转换为字符流</p>
<blockquote>
<p>使用<code>InputStreamReader、OutputStreamWriter</code>可以将输入字节流转化为输入字符流</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Reader reader  =  <span class="keyword">new</span> InputStreamReader(inputStream);</span><br><span class="line">Writer writer = <span class="keyword">new</span> OutputStreamWriter(outputStream)</span><br></pre></td></tr></table></figure></blockquote>
</li>
</ul>
<p>输入字节流：<strong>InputStream</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    File file = <span class="keyword">new</span> File(<span class="string">&quot;D:/a.txt&quot;</span>);</span><br><span class="line">    InputStream inputStream = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">    <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[(<span class="keyword">int</span>) file.length()];</span><br><span class="line">    inputStream.read(bytes);</span><br><span class="line">    System.out.println(<span class="keyword">new</span> String(bytes));</span><br><span class="line">    inputStream.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输入字符流：<strong>Reader</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    File file = <span class="keyword">new</span> File(<span class="string">&quot;D:/a.txt&quot;</span>);</span><br><span class="line">    Reader reader = <span class="keyword">new</span> FileReader(file);</span><br><span class="line">    <span class="keyword">char</span>[] bytes = <span class="keyword">new</span> <span class="keyword">char</span>[(<span class="keyword">int</span>) file.length()];</span><br><span class="line">    reader.read(bytes);</span><br><span class="line">    System.out.println(<span class="keyword">new</span> String(bytes));</span><br><span class="line">    reader.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出字节流：<strong>OutputStream</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    String <span class="keyword">var</span> = <span class="string">&quot;hai this is a test&quot;</span>;</span><br><span class="line">    File file = <span class="keyword">new</span> File(<span class="string">&quot;D:/b.txt&quot;</span>);</span><br><span class="line">    OutputStream outputStream = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">    outputStream.write(<span class="keyword">var</span>.getBytes());</span><br><span class="line">    outputStream.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出字符流：<strong>Writer</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    String <span class="keyword">var</span> = <span class="string">&quot;hai this is a test&quot;</span>;</span><br><span class="line">    File file = <span class="keyword">new</span> File(<span class="string">&quot;D:/b.txt&quot;</span>);</span><br><span class="line">    Writer writer = <span class="keyword">new</span> FileWriter(file);</span><br><span class="line">    writer.write(<span class="keyword">var</span>);</span><br><span class="line">    writer.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>BufferedInputStream</strong></p>
<blockquote>
<p>在使用InputStream的时候，都是一个字节一个字节的读或写，而BufferedInputStream为输入字节流提供了缓冲区，读数据的时候会一次读取一块数据放到缓冲区里，当缓冲区里的数据被读完之后，输入流会再次填充数据缓冲区，直到输入流被读完，有了缓冲区就能够提高很多io速度</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * inputStream 输入流</span></span><br><span class="line"><span class="comment"> * 1024 内部缓冲区大小为1024byte</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">BufferedInputStream bufferedInputStream = <span class="keyword">new</span> BufferedInputStream(inputStream,<span class="number">1024</span>);</span><br></pre></td></tr></table></figure>

<p><strong>BufferedOutputStream</strong></p>
<blockquote>
<p>BufferedOutputStream可以为输出字节流提供缓冲区，作用与BufferedInputStream类似，使用方式将输出流包装到BufferedOutputStream中</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * outputStream 输出流</span></span><br><span class="line"><span class="comment"> * 1024 内部缓冲区大小为1024byte</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">BufferedOutputStream bufferedOutputStream = <span class="keyword">new</span> BufferedOutputStream(outputStream,<span class="number">1024</span>);</span><br></pre></td></tr></table></figure>

<p><strong>BufferedReader</strong></p>
<blockquote>
<p>为输入字符流提供缓冲区</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BufferedReader bufferedReader = <span class="keyword">new</span> BufferedReader(reader,<span class="number">1024</span>);</span><br></pre></td></tr></table></figure>

<p><strong>BufferedWriter</strong></p>
<blockquote>
<p>为输出字符流提供缓冲区</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BufferedWriter bufferedWriter = <span class="keyword">new</span> BufferedWriter(writer,<span class="number">1024</span>);</span><br></pre></td></tr></table></figure>



<h2 id="io模型"><a href="#io模型" class="headerlink" title="io模型"></a>io模型</h2><h3 id="bio"><a href="#bio" class="headerlink" title="bio"></a>bio</h3><blockquote>
<p>同步阻塞IO模型</p>
<p>JDK 1.4版本以前</p>
</blockquote>
<p><img src="https://chenmingyu.top/nio/bio%E7%BA%BF%E7%A8%8B.png"></p>
<p>在这种模式中通常用一个线程去接受请求，然后用一个线程池去处理请求，用这种方式并发管理多个Socket客户端连接</p>
<p><img src="https://chenmingyu.top/nio/BIO%E7%BA%BF%E7%A8%8B+%E7%BA%BF%E7%A8%8B%E6%B1%A0.png"></p>
<h3 id="nio"><a href="#nio" class="headerlink" title="nio"></a>nio</h3><blockquote>
<p>同步非阻塞IO模型</p>
<p>JDK 1.4版本以后</p>
</blockquote>
<p>成熟的框架，比如Netty</p>
<h3 id="aio"><a href="#aio" class="headerlink" title="aio"></a>aio</h3><blockquote>
<p>异步非阻塞IO模型</p>
<p>JDK1.7升级了Nio类库，成为Nio2.0，最主要的是提供了异步文件的IO操作，以及事件驱动IO，AIO的异步套接字通道是真正的异步非阻塞IO</p>
</blockquote>
<p><img src="https://chenmingyu.top/nio/%E5%90%84IO%E6%A8%A1%E5%9E%8B%E5%AF%B9%E6%AF%94.png"></p>
<hr>
<p>参考：</p>
<p><a href="https://chenmingyu.top/nio/">一文看懂java io系统</a></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>learn</tag>
      </tags>
  </entry>
  <entry>
    <title>java servlet</title>
    <url>/2015/02/16/java%20servlet/</url>
    <content><![CDATA[<h2 id="Web-Application"><a href="#Web-Application" class="headerlink" title="Web Application"></a>Web Application</h2><h3 id="HTML-and-HTTP"><a href="#HTML-and-HTTP" class="headerlink" title="HTML and HTTP"></a>HTML and HTTP</h3><ul>
<li>HTML:HyperText Markup Language.</li>
<li>HTTP:HyperText Transfer Protocol<ul>
<li>HTTP is the communication protocol between server and client. HTTP runs on top of TCP/IP communication protocol.</li>
<li>Port numbers 0 to 1023 are reserved ports for well known services, for example 80 for HTTP, 443 for HTTPS, 21 for FTP etc.</li>
</ul>
</li>
<li>Java Servlet and JSPs are server side technologies to extend the capability of web servers by providing support for dynamic response and data persistence.</li>
</ul>
<h3 id="Web-Container"><a href="#Web-Container" class="headerlink" title="Web Container"></a>Web Container</h3><ul>
<li>When web container gets the request and if it’s for servlet then container creates two Objects HTTPServletRequest and HTTPServletResponse. Then it finds the correct servlet based on the URL and creates a thread for the request. Then it invokes the servlet service() method and based on the HTTP method service() method invokes doGet() or doPost() methods. Servlet methods generate the dynamic page and write it to response. Once servlet thread is complete, container converts the response to HTTP response and send it back to client.</li>
<li>Some of the important work done by web container are:<ul>
<li>Communication Support – Container provides easy way of communication between web server and the servlets and JSPs. Because of container, we don’t need to build a server socket to listen for any request from web server, parse the request and generate response. All these important and complex tasks are done by container and all we need to focus is on our business logic for our applications.<ul>
<li>Lifecycle and Resource Management – Container takes care of managing the life cycle of servlet. Container takes care of loading the servlets into memory, initializing servlets, invoking servlet methods and destroying them. Container also provides utility like JNDI for resource pooling and management.</li>
<li>Multithreading Support – Container creates new thread for every request to the servlet and when it’s processed the thread dies. So servlets are not initialized for each request and saves time and memory.</li>
<li>JSP Support – JSPs doesn’t look like normal java classes and web container provides support for JSP. Every JSP in the application is compiled by container and converted to Servlet and then container manages them like other servlets.</li>
<li>Miscellaneous Task – Web container manages the resource pool, does memory optimizations, run garbage collector, provides security configurations, support for multiple applications, hot deployment and several other tasks behind the scene that makes our life easier.</li>
</ul>
</li>
</ul>
</li>
<li>Java Web Applications are packaged as Web Archive (WAR) and it has a defined structure.<br><img src="https://cdn.journaldev.com/wp-content/uploads/2013/08/WAR-directory-structure.png"></li>
</ul>
<h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><ul>
<li>Servlet API Hierarchy<br><img src="https://cdn.journaldev.com/wp-content/uploads/2013/08/Servlet-Hierarchy.png"></li>
</ul>
<h2 id="Session-Management"><a href="#Session-Management" class="headerlink" title="Session Management"></a>Session Management</h2><h3 id="What-is-a-Session"><a href="#What-is-a-Session" class="headerlink" title="What is a Session?"></a>What is a Session?</h3><ul>
<li>HTTP protocol and Web Servers are stateless, what it means is that for web server every request is a new request to process and they can’t identify if it’s coming from client that has been sending request previously.</li>
<li>Session is a conversional state between client and server and it can consists of multiple request and response between client and server. Since HTTP and Web Server both are stateless, the only way to maintain a session is when some unique information about the session (session id) is passed between server and client in every request and response.</li>
</ul>
<h3 id="JSESSIONID-Cookie"><a href="#JSESSIONID-Cookie" class="headerlink" title="JSESSIONID Cookie"></a>JSESSIONID Cookie</h3><ul>
<li>When we use HttpServletRequest getSession() method and it creates a new request, it creates the new HttpSession object and also add a Cookie to the response object with name JSESSIONID and value as session id. This cookie is used to identify the HttpSession object in further requests from client. If the cookies are disabled at client side and we are using URL rewriting then this method uses the jsessionid value from the request URL to find the corresponding session. JSESSIONID cookie is used for session tracking, so we should not use it for our application purposes to avoid any session related issues.</li>
<li>When a JSP resource is used, container automatically creates a session for it, so we can’t check if session is null to make sure if user has come through login page, so we are using session attribute to validate request.</li>
<li>As we saw in last section that we can manage a session with HttpSession but if we disable the cookies in browser, it won’t work because server will not receive the JSESSIONID cookie from client. </li>
</ul>
<h4 id="Cookie-Basics"><a href="#Cookie-Basics" class="headerlink" title="Cookie Basics"></a>Cookie Basics</h4><ul>
<li>a cookie is a small piece of data stored on the client-side which servers use when communicating with clients.They’re used to identify a client when sending a subsequent request. They can also be used for passing some data from one servlet to another.</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>learn</tag>
      </tags>
  </entry>
  <entry>
    <title>java skill</title>
    <url>/2016/05/20/java%20skill/</url>
    <content><![CDATA[<h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><ul>
<li><p>int变量自增 效率问题 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">i++;和i += 1;形成的指令数较少，且不需要操作数栈。相对而言，i = i+1;需要至少2个操作数栈深度，并且形成的指令数较多。故，i++;和i+= 1;的效率一样，并且二者的效率都优于i = i+1;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><p><strong>T，E，K，V，？是这样约定的：</strong></p>
<ul>
<li>？表示不确定的 java 类型</li>
<li>T (type) 表示具体的一个java类型</li>
<li>K V (key value) 分别代表java键值中的Key Value</li>
<li>E (element) 代表Element</li>
</ul>
<p><strong>？和 T 的区别</strong>：</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz/knmrNHnmCLFRVA73vYfkqVGfia90X5nyEsksfM8Vz6btFZCRd3PCSJC1XkZhaJ0ufxcoohxAdr8X1tykU9CZPUQ/640?wx_fmt=other&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="img"></p>
<p>？和 T 都表示不确定的类型，区别在于我们可以对 T 进行操作，但是对 ？不行，比如如下这种 ：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 可以</span><br><span class="line">T t = operate();</span><br><span class="line"></span><br><span class="line">// 不可以</span><br><span class="line">？car = operate();</span><br></pre></td></tr></table></figure>

<p>简单总结下：</p>
<p>T 是一个 确定的 类型，通常用于泛型类和泛型方法的定义，？是一个 不确定 的类型，通常用于泛型方法的调用代码和形参，不能用于定义类和泛型方法。</p>
<p><strong>PECS（Producer Extends Consumer Super）</strong>原则：作为生产者提供数据（往外读取）时，适合用上界通配符（extends）；作为消费者消费数据（往里写入）时，适合用下界通配符（super）。</p>
<h2 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h2><p>在 JDK8 以后，建议使用 DateTimeFormatter 代替 SimpleDateFormat ，因为 SimpleDateFormat 是线程不安全的，而 DateTimeFormatter 是线程安全的。当然，也可以采用第三方提供的线程安全日期格式化函数，比如 apache 的 DateFormatUtils 工具类。</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>snippet</tag>
      </tags>
  </entry>
  <entry>
    <title>java stream</title>
    <url>/2017/10/16/java%20stream/</url>
    <content><![CDATA[<h3 id="Creating-Java-Streams"><a href="#Creating-Java-Streams" class="headerlink" title="Creating Java Streams"></a>Creating Java Streams</h3><ol>
<li>We can use Stream.of() to create a stream from similar type of data. For example, we can create Java Stream of integers from a group of int or Integer objects.<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Integer&gt; stream = Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br></pre></td></tr></table></figure></li>
<li>We can use Stream.of() with an array of Objects to return the stream. Note that it doesn’t support autoboxing, so we can’t pass primitive type array.<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Integer&gt; stream = Stream.of(<span class="keyword">new</span> Integer[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;); </span><br><span class="line"><span class="comment">//works fine</span></span><br><span class="line"></span><br><span class="line">Stream&lt;Integer&gt; stream1 = Stream.of(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;); </span><br><span class="line"><span class="comment">//Compile time error, Type mismatch: cannot convert from Stream&lt;int[]&gt; to Stream&lt;Integer&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>We can use Collection stream() to create sequential stream and parallelStream() to create parallel stream.<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; myList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++) myList.add(i);</span><br><span class="line">		</span><br><span class="line"><span class="comment">//sequential stream</span></span><br><span class="line">Stream&lt;Integer&gt; sequentialStream = myList.stream();</span><br><span class="line">		</span><br><span class="line"><span class="comment">//parallel stream</span></span><br><span class="line">Stream&lt;Integer&gt; parallelStream = myList.parallelStream();</span><br></pre></td></tr></table></figure></li>
<li>We can use Stream.generate() and Stream.iterate() methods to create Stream.<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;String&gt; stream1 = Stream.generate(() -&gt; &#123;<span class="keyword">return</span> <span class="string">&quot;abc&quot;</span>;&#125;);</span><br><span class="line">Stream&lt;String&gt; stream2 = Stream.iterate(<span class="string">&quot;abc&quot;</span>, (i) -&gt; i);</span><br></pre></td></tr></table></figure></li>
<li>Using Arrays.stream() and String.chars() methods.<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LongStream is = Arrays.stream(<span class="keyword">new</span> <span class="keyword">long</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;);</span><br><span class="line">IntStream is2 = <span class="string">&quot;abc&quot;</span>.chars();</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="Converting-Java-Stream-to-Collection-or-Array"><a href="#Converting-Java-Stream-to-Collection-or-Array" class="headerlink" title="Converting Java Stream to Collection or Array"></a>Converting Java Stream to Collection or Array</h3><ol>
<li>We can use java Stream collect() method to get List, Map or Set from stream.<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Integer&gt; intStream = Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line">List&lt;Integer&gt; intList = intStream.collect(Collectors.toList());</span><br><span class="line">System.out.println(intList); <span class="comment">//prints [1, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line">intStream = Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>); <span class="comment">//stream is closed, so we need to create it again</span></span><br><span class="line">Map&lt;Integer,Integer&gt; intMap = intStream.collect(Collectors.toMap(i -&gt; i, i -&gt; i+<span class="number">10</span>));</span><br><span class="line">System.out.println(intMap); <span class="comment">//prints &#123;1=11, 2=12, 3=13, 4=14&#125;</span></span><br></pre></td></tr></table></figure></li>
<li>We can use stream toArray() method to create an array from the stream.<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Integer&gt; intStream = Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line">Integer[] intArray = intStream.toArray(Integer[]::<span class="keyword">new</span>);</span><br><span class="line">System.out.println(Arrays.toString(intArray)); <span class="comment">//prints [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="Java-Stream-Intermediate-Operations"><a href="#Java-Stream-Intermediate-Operations" class="headerlink" title="Java Stream Intermediate Operations"></a>Java Stream Intermediate Operations</h3><ol>
<li>Stream filter() : We can use filter() method to test stream elements for a condition and generate filtered list.<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; myList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++) myList.add(i);</span><br><span class="line">Stream&lt;Integer&gt; sequentialStream = myList.stream();</span><br><span class="line"></span><br><span class="line">Stream&lt;Integer&gt; highNums = sequentialStream.filter(p -&gt; p &gt; <span class="number">90</span>); <span class="comment">//filter numbers greater than 90</span></span><br><span class="line">System.out.print(<span class="string">&quot;High Nums greater than 90=&quot;</span>);</span><br><span class="line">highNums.forEach(p -&gt; System.out.print(p+<span class="string">&quot; &quot;</span>));</span><br><span class="line"><span class="comment">//prints &quot;High Nums greater than 90=91 92 93 94 95 96 97 98 99 &quot;</span></span><br></pre></td></tr></table></figure></li>
<li>Stream map() : We can use map() to apply functions to an stream. Let’s see how we can use it to apply upper case function to a list of Strings.<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;String&gt; names = Stream.of(<span class="string">&quot;aBc&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;ef&quot;</span>);</span><br><span class="line">System.out.println(names.map(s -&gt; &#123;</span><br><span class="line">		<span class="keyword">return</span> s.toUpperCase();</span><br><span class="line">	&#125;).collect(Collectors.toList()));</span><br><span class="line"><span class="comment">//prints [ABC, D, EF]</span></span><br></pre></td></tr></table></figure></li>
<li>Stream sorted() : We can use sorted() to sort the stream elements by passing Comparator argument.<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;String&gt; names2 = Stream.of(<span class="string">&quot;aBc&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;ef&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">List&lt;String&gt; reverseSorted = names2.sorted(Comparator.reverseOrder()).collect(Collectors.toList());</span><br><span class="line">System.out.println(reverseSorted); <span class="comment">// [ef, d, aBc, 123456]</span></span><br><span class="line"></span><br><span class="line">Stream&lt;String&gt; names3 = Stream.of(<span class="string">&quot;aBc&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;ef&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">List&lt;String&gt; naturalSorted = names3.sorted().collect(Collectors.toList());</span><br><span class="line">System.out.println(naturalSorted); <span class="comment">//[123456, aBc, d, ef]</span></span><br></pre></td></tr></table></figure></li>
<li>Stream flatMap() : We can use flatMap() to create a stream from the stream of list. Let’s see a simple example to clear this doubt.<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;List&lt;String&gt;&gt; namesOriginalList = Stream.of(</span><br><span class="line">	Arrays.asList(<span class="string">&quot;Pankaj&quot;</span>), </span><br><span class="line">	Arrays.asList(<span class="string">&quot;David&quot;</span>, <span class="string">&quot;Lisa&quot;</span>),</span><br><span class="line">	Arrays.asList(<span class="string">&quot;Amit&quot;</span>));</span><br><span class="line"><span class="comment">//flat the stream from List&lt;String&gt; to String stream</span></span><br><span class="line">Stream&lt;String&gt; flatStream = namesOriginalList</span><br><span class="line">	.flatMap(strList -&gt; strList.stream());</span><br><span class="line"></span><br><span class="line">flatStream.forEach(System.out::println);</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="Java-Stream-Terminal-Operations"><a href="#Java-Stream-Terminal-Operations" class="headerlink" title="Java Stream Terminal Operations"></a>Java Stream Terminal Operations</h3><ol>
<li>Stream reduce() example: We can use reduce() to perform a reduction on the elements of the stream, using an associative accumulation function, and return an Optional. Let’s see how we can use it multiply the integers in a stream.<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Integer&gt; numbers = Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line">		</span><br><span class="line">Optional&lt;Integer&gt; intOptional = numbers.reduce((i,j) -&gt; &#123;<span class="keyword">return</span> i*j;&#125;);</span><br><span class="line"><span class="keyword">if</span>(intOptional.isPresent()) System.out.println(<span class="string">&quot;Multiplication = &quot;</span>+intOptional.get()); <span class="comment">//120</span></span><br></pre></td></tr></table></figure></li>
<li>Stream count() example: We can use this terminal operation to count the number of items in the stream.<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Integer&gt; numbers1 = Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;Number of elements in stream=&quot;</span>+numbers1.count()); <span class="comment">//5</span></span><br></pre></td></tr></table></figure></li>
<li>Stream forEach() example: This can be used for iterating over the stream. We can use this in place of iterator. Let’s see how to use it for printing all the elements of the stream.<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Integer&gt; numbers2 = Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line">numbers2.forEach(i -&gt; System.out.print(i+<span class="string">&quot;,&quot;</span>)); <span class="comment">//1,2,3,4,5,</span></span><br></pre></td></tr></table></figure></li>
<li>Stream match() examples: Let’s see some of the examples for matching methods in Stream API.<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Integer&gt; numbers3 = Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;Stream contains 4? &quot;</span>+numbers3.anyMatch(i -&gt; i==<span class="number">4</span>));</span><br><span class="line"><span class="comment">//Stream contains 4? true</span></span><br><span class="line"></span><br><span class="line">Stream&lt;Integer&gt; numbers4 = Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;Stream contains all elements less than 10? &quot;</span>+numbers4.allMatch(i -&gt; i&lt;<span class="number">10</span>));</span><br><span class="line"><span class="comment">//Stream contains all elements less than 10? true</span></span><br><span class="line"></span><br><span class="line">Stream&lt;Integer&gt; numbers5 = Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;Stream doesn&#x27;t contain 10? &quot;</span>+numbers5.noneMatch(i -&gt; i==<span class="number">10</span>));</span><br><span class="line"><span class="comment">//Stream doesn&#x27;t contain 10? true</span></span><br></pre></td></tr></table></figure></li>
<li>Stream findFirst() :This is a short circuiting terminal operation, let’s see how we can use it to find the first string from a stream starting with D.<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;String&gt; names4 = Stream.of(<span class="string">&quot;Pankaj&quot;</span>,<span class="string">&quot;Amit&quot;</span>,<span class="string">&quot;David&quot;</span>, <span class="string">&quot;Lisa&quot;</span>);</span><br><span class="line">Optional&lt;String&gt; firstNameWithD = names4.filter(i -&gt; i.startsWith(<span class="string">&quot;D&quot;</span>)).findFirst();</span><br><span class="line"><span class="keyword">if</span>(firstNameWithD.isPresent())&#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;First Name starting with D=&quot;</span>+firstNameWithD.get()); <span class="comment">//David</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="some-example"><a href="#some-example" class="headerlink" title="some example"></a>some example</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//merge collection</span></span><br><span class="line">List&lt;String&gt; resultPersonnos = Stream.of(list1, list2)</span><br><span class="line">                .flatMap(Collection::stream)</span><br><span class="line">                .distinct()</span><br><span class="line">                .sorted()</span><br><span class="line">                .collect(Collectors.toList());</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>learn</tag>
      </tags>
  </entry>
  <entry>
    <title>java thread code</title>
    <url>/2018/06/01/java%20thread%20code/</url>
    <content><![CDATA[<h3 id="Future-and-FutureTask"><a href="#Future-and-FutureTask" class="headerlink" title="Future and FutureTask"></a>Future and FutureTask</h3><blockquote>
<ul>
<li>A <strong>Future</strong> interface provides methods <strong>to check if the computation is complete, to wait for its completion and to retrieve the results of the computation</strong>. The result is retrieved using Future’s get() method when the computation has completed, and it blocks until it is completed.</li>
<li><strong>FutureTask</strong><pre><code> 1. FutureTask implementation Future interface and RunnableFuture Interface, means one can use FutureTask as Runnable and can be submitted to ExecutorService for execution.
 2. When one call Future.submit() Callable or Runnable objects then most of time ExecutorService creates FutureTask, and one can create it manually also.
 3. FutureTask acts like a latch.
 4. Computation represent by FutureTask is implemented with Callable interface.
 5. It implements Future or Callable interface.
 6. Behaviour of get() method depends on the state of the task. If tasks are not completed get() method waits or blocks till the task is completed. Once task completed, it returns the result or throws an ExecutionException.
</code></pre>
</li>
</ul>
</blockquote>
<p><img src="https://cdncontribute.geeksforgeeks.org/wp-content/uploads/pool2.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Java program do two FutureTask </span></span><br><span class="line"><span class="comment">// using Runnable Interface </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*; </span><br><span class="line"><span class="keyword">import</span> java.util.logging.Level; </span><br><span class="line"><span class="keyword">import</span> java.util.logging.Logger; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123; </span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> waitTime; </span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">MyRunnable</span><span class="params">(<span class="keyword">int</span> timeInMillis)</span> </span></span><br><span class="line"><span class="function">	</span>&#123; </span><br><span class="line">		<span class="keyword">this</span>.waitTime = timeInMillis; </span><br><span class="line">	&#125; </span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">	</span>&#123; </span><br><span class="line">		<span class="keyword">try</span> &#123; </span><br><span class="line">			<span class="comment">// sleep for user given millisecond </span></span><br><span class="line">			<span class="comment">// before checking again </span></span><br><span class="line">			Thread.sleep(waitTime); </span><br><span class="line"></span><br><span class="line">			<span class="comment">// return current thread name </span></span><br><span class="line">			System.out.println(Thread </span><br><span class="line">								.currentThread() </span><br><span class="line">								.getName()); </span><br><span class="line">		&#125; </span><br><span class="line"></span><br><span class="line">		<span class="keyword">catch</span> (InterruptedException ex) &#123; </span><br><span class="line">			Logger </span><br><span class="line">				.getLogger(MyRunnable.class.getName()) </span><br><span class="line">				.log(Level.SEVERE, <span class="keyword">null</span>, ex); </span><br><span class="line">		&#125; </span><br><span class="line">	&#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// Class FutureTaskExample excute two future task </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FutureTaskExample</span> </span>&#123; </span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span></span><br><span class="line"><span class="function">	</span>&#123; </span><br><span class="line">		<span class="comment">// create two object of MyRunnable class </span></span><br><span class="line">		<span class="comment">// for FutureTask and sleep 1000, 2000 </span></span><br><span class="line">		<span class="comment">// millisecond before checking again </span></span><br><span class="line">		MyRunnable myrunnableobject1 = <span class="keyword">new</span> MyRunnable(<span class="number">1000</span>); </span><br><span class="line">		MyRunnable myrunnableobject2 = <span class="keyword">new</span> MyRunnable(<span class="number">2000</span>); </span><br><span class="line"></span><br><span class="line">		FutureTask&lt;String&gt; </span><br><span class="line">			futureTask1 = <span class="keyword">new</span> FutureTask&lt;&gt;(myrunnableobject1, </span><br><span class="line">										<span class="string">&quot;FutureTask1 is complete&quot;</span>); </span><br><span class="line">		FutureTask&lt;String&gt; </span><br><span class="line">			futureTask2 = <span class="keyword">new</span> FutureTask&lt;&gt;(myrunnableobject2, </span><br><span class="line">										<span class="string">&quot;FutureTask2 is complete&quot;</span>); </span><br><span class="line"></span><br><span class="line">		<span class="comment">// create thread pool of 2 size for ExecutorService </span></span><br><span class="line">		ExecutorService executor = Executors.newFixedThreadPool(<span class="number">2</span>); </span><br><span class="line"></span><br><span class="line">		<span class="comment">// submit futureTask1 to ExecutorService </span></span><br><span class="line">		executor.submit(futureTask1); </span><br><span class="line"></span><br><span class="line">		<span class="comment">// submit futureTask2 to ExecutorService </span></span><br><span class="line">		executor.submit(futureTask2); </span><br><span class="line"></span><br><span class="line">		<span class="keyword">while</span> (<span class="keyword">true</span>) &#123; </span><br><span class="line">			<span class="keyword">try</span> &#123; </span><br><span class="line"></span><br><span class="line">				<span class="comment">// if both future task complete </span></span><br><span class="line">				<span class="keyword">if</span> (futureTask1.isDone() &amp;&amp; futureTask2.isDone()) &#123; </span><br><span class="line"></span><br><span class="line">					System.out.println(<span class="string">&quot;Both FutureTask Complete&quot;</span>); </span><br><span class="line"></span><br><span class="line">					<span class="comment">// shut down executor service </span></span><br><span class="line">					executor.shutdown(); </span><br><span class="line">					<span class="keyword">return</span>; </span><br><span class="line">				&#125; </span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span> (!futureTask1.isDone()) &#123; </span><br><span class="line"></span><br><span class="line">					<span class="comment">// wait indefinitely for future </span></span><br><span class="line">					<span class="comment">// task to complete </span></span><br><span class="line">					System.out.println(<span class="string">&quot;FutureTask1 output = &quot;</span></span><br><span class="line">									+ futureTask1.get()); </span><br><span class="line">				&#125; </span><br><span class="line"></span><br><span class="line">				System.out.println(<span class="string">&quot;Waiting for FutureTask2 to complete&quot;</span>); </span><br><span class="line"></span><br><span class="line">				<span class="comment">// Wait if necessary for the computation to complete, </span></span><br><span class="line">				<span class="comment">// and then retrieves its result </span></span><br><span class="line">				String s = futureTask2.get(<span class="number">250</span>, TimeUnit.MILLISECONDS); </span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span> (s != <span class="keyword">null</span>) &#123; </span><br><span class="line">					System.out.println(<span class="string">&quot;FutureTask2 output=&quot;</span> + s); </span><br><span class="line">				&#125; </span><br><span class="line">			&#125; </span><br><span class="line"></span><br><span class="line">			<span class="keyword">catch</span> (Exception e) &#123; </span><br><span class="line">				Sysmtem.out.println(<span class="string">&quot;Exception: &quot;</span> + e); </span><br><span class="line">			&#125; </span><br><span class="line">		&#125; </span><br><span class="line">	&#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Output:</span><br><span class="line"></span><br><span class="line">FutureTask1 output=FutureTask1 is complete</span><br><span class="line">Waiting for FutureTask2 to complete</span><br><span class="line">Waiting for FutureTask2 to complete</span><br><span class="line">Waiting for FutureTask2 to complete</span><br><span class="line">Waiting for FutureTask2 to complete</span><br><span class="line">FutureTask2 output=FutureTask2 is complete</span><br><span class="line">Both FutureTask Complete</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>thread</category>
      </categories>
      <tags>
        <tag>code</tag>
      </tags>
  </entry>
  <entry>
    <title>java thread</title>
    <url>/2018/06/01/java%20thread/</url>
    <content><![CDATA[<p>线程安全是编程中的术语，指某个函数、函数库在并发环境中被调用时，能够正确地处理多个线程之间的共享变量，使程序功能正确完成。即在多线程场景下，不发生有序性、原子性以及可见性问题。</p>
<h3 id="how-to-avoid-deadlock"><a href="#how-to-avoid-deadlock" class="headerlink" title="how to avoid deadlock"></a>how to avoid deadlock</h3><p><img src="https://2.bp.blogspot.com/-63RZ-BTlAFs/VfGeHMnGdFI/AAAAAAAADuw/gwqtrVliMsM/s400/Deadlock%2Bof%2BThreads.jpg"></p>
<h3 id="ConcurrentHashMap-faster-than-Hashtable"><a href="#ConcurrentHashMap-faster-than-Hashtable" class="headerlink" title="ConcurrentHashMap faster than Hashtable"></a>ConcurrentHashMap faster than Hashtable</h3><blockquote>
<p> ConcurrentHashMap is introduced as an alternative of Hashtable in Java 5, it is faster because of its design. ConcurrentHashMap divides the whole map into different segments and only lock a particular segment during the update operation, instead of <a href="http://javarevisited.blogspot.com/2012/01/java-hashtable-example-tutorial-code.html">Hashtable</a>, which locks whole Map.</p>
</blockquote>
<p><img src="https://1.bp.blogspot.com/-s28yqJthVWo/V10_G31sSCI/AAAAAAAAGNY/8oJE5cDD5BUa5VBiCI8Bx-UdpD8_MoeSwCLcB/s400/Internal%2Bimplementation%2Bof%2BConcurrentHashMap%2Bin%2BJava.png"></p>
<h3 id="submit-and-execute-method-of-Executor-and-ExecutorService"><a href="#submit-and-execute-method-of-Executor-and-ExecutorService" class="headerlink" title="submit() and execute() method of Executor and ExecutorService"></a>submit() and execute() method of Executor and ExecutorService</h3><blockquote>
<p> The main difference between submit and execute method from ExecutorService interface is that former return a result in the form of a Future object, while later doesn’t return a result. By the way, both are used to submit a task to thread pool in Java but one is defined in Executor interface,while other is added into ExecutorService interface.</p>
</blockquote>
<p><img src="https://2.bp.blogspot.com/-ybewy1bWbFs/VxZFewRdKbI/AAAAAAAAFt4/fuAHJBE1r_8nlfUz34YTKI1j70UdqaMiQCLcB/s640/Difference%2Bbetween%2Bsubmit%2Bvs%2Bexecute%2Bmethod%2Bin%2BJava.png"></p>
<h4 id="when-to-use"><a href="#when-to-use" class="headerlink" title="when to use"></a>when to use</h4><blockquote>
<ul>
<li>In general, if you are doing computational task e.g. calculating some risk stats, <a href="http://java67.blogspot.com/2015/09/how-to-use-biginteger-class-in-java.html">calculating factorial of large numbers</a> or doing some time-consuming computation e which results in some value then use the submit() method. It immediately returns a Future object, which can be later queried to get the value of computation by calling get() method.</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>Remember, get() is a <a href="http://javarevisited.blogspot.com/2012/02/what-is-blocking-methods-in-java-and.html">blocking call</a> so always call the version which accepts a timeout. While you can use the execute() method if you just want your code to be run in parallel by worker threads of the thread pool.</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Future future = executorService.submit(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Asynchronous task&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">future.get();  <span class="comment">//returns null if the task has finished correctly.</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Future future = executorService.submit(<span class="keyword">new</span> Callable()&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Asynchronous Callable&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Callable Result&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;future.get() = &quot;</span> + future.get());</span><br></pre></td></tr></table></figure>

<h3 id="ReentrantLock-vs-synchronized"><a href="#ReentrantLock-vs-synchronized" class="headerlink" title="ReentrantLock vs synchronized"></a>ReentrantLock vs synchronized</h3><h4 id="the-advantages-of-ReentrantLock"><a href="#the-advantages-of-ReentrantLock" class="headerlink" title="the advantages of ReentrantLock"></a>the advantages of ReentrantLock</h4><ol>
<li><p>Ability to lock interruptibly.</p>
</li>
<li><p>Ability to timeout while waiting for lock.</p>
</li>
<li><p>Power to create fair lock.</p>
</li>
<li><p>API to get list of waiting thread for lock.</p>
</li>
<li><p>Flexibility to try for lock without blocking.</p>
</li>
</ol>
<h4 id="the-disadvantages-of-ReentrantLock"><a href="#the-disadvantages-of-ReentrantLock" class="headerlink" title="the disadvantages of ReentrantLock"></a>the disadvantages of ReentrantLock</h4><ol>
<li><p>  Major drawback of using ReentrantLock in Java is wrapping method body inside <a href="http://javarevisited.blogspot.com/2012/11/difference-between-final-finally-and-finalize-java.html">try-finally block</a>, which makes code unreadable and hides business logic. </p>
</li>
<li><p>programmer is responsible for acquiring and releasing lock, which is a power but also opens gate for new subtle bugs, when programmer forget to release the lock in finally block.</p>
</li>
</ol>
<h3 id="ReadWriteLock"><a href="#ReadWriteLock" class="headerlink" title="ReadWriteLock"></a>ReadWriteLock</h3><p><img src="https://4.bp.blogspot.com/-yYqp8m0BGdk/V11A-s0qwVI/AAAAAAAAGNw/LL_qGX5_qD4dHTFMe3kklI4jYWyDHzIyQCLcB/s400/ReadWriteLock%2Bin%2BJava.jpg"></p>
<h3 id="stop-thread"><a href="#stop-thread" class="headerlink" title="stop thread"></a>stop thread</h3><blockquote>
<ul>
<li>There was some control methods in JDK 1.0 e.g. stop(), suspend() and resume() which was deprecated in later releases due to potential deadlock threats, from then Java API designers has not made any effort to provide a consistent, thread-safe and elegant way to stop threads.</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>Programmers mainly rely on the fact that thread stops automatically as soon as they finish execution of run() or call() method. To manually stop, programmers either take advantage of volatile boolean variable and check in every iteration if run method has loops or interrupt threads to abruptly cancel tasks.</li>
</ul>
</blockquote>
<h3 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h3><blockquote>
<ul>
<li>The <code>ThreadLocal</code> class in Java enables you to create variables that can only be read and written by the same thread. Thus, even if two threads are executing the same code, and the code has a reference to a<code>ThreadLocal</code> variable, then the two threads cannot see each other’s <code>ThreadLocal</code> variables.</li>
<li>Each thread holds an exclusive copy of ThreadLocal variable which becomes eligible to Garbage collection after thread finished or died, normally or due to any Exception, Given those ThreadLocal variable doesn’t have any other live references.</li>
<li>ThreadLocal variables in Java are generally private static fields in Classes and maintain its state inside Thread.</li>
</ul>
</blockquote>
<h3 id="synchronized-vs-concurrent-collection"><a href="#synchronized-vs-concurrent-collection" class="headerlink" title="synchronized vs concurrent collection"></a>synchronized vs concurrent collection</h3><blockquote>
<p>later is more scalable than former</p>
<p> synchronized collections locks the whole collection e.g. whole Map or List while concurrent collection never locks the whole Map or List. They achieve thread safety by using advanced and sophisticated techniques like lock stripping. For example, the ConcurrentHashMap divides the whole map into several segments and locks only the relevant segments, which allows multiple threads to access other segments of same ConcurrentHashMap without locking.</p>
</blockquote>
<h4 id="CopyOnWriteArrayList"><a href="#CopyOnWriteArrayList" class="headerlink" title="CopyOnWriteArrayList"></a>CopyOnWriteArrayList</h4><blockquote>
<p> CopyOnWriteArrayList allows multiple reader threads to read without synchronization and when a write happens it copies the whole ArrayList and swap with a newer one.</p>
</blockquote>
<h3 id="Stack-and-Heap"><a href="#Stack-and-Heap" class="headerlink" title="Stack and Heap"></a>Stack and Heap</h3><blockquote>
<ul>
<li>Each thread has their own stack, which is used to store local variables, method parameters and call stack. Variable stored in one Thread’s stack is not visible to other.</li>
<li>heap is a common memory area which is shared by all threads.Objects whether local or at any level is created inside heap.</li>
</ul>
</blockquote>
<ul>
<li>To improve performance thread tends to cache values from heap into their stack, which can create problems if that variable is modified by more than one thread, this is where volatile variables comes in picture. volatile suggest threads to read value of variable always from main memory. </li>
<li>If there is no memory left in the stack for storing function call or local variable, JVM will throw java.lang.StackOverFlowError, while if there is no more heap space for creating an object, JVM will throw java.lang.OutOfMemoryError: Java Heap Space</li>
<li>Variables stored in stacks are only visible to the owner Thread while objects created in the heap are visible to all thread. In other words, stack memory is kind of private memory of Java Threads while heap memory is shared among all threads.</li>
</ul>
<h3 id="thread-pool"><a href="#thread-pool" class="headerlink" title="thread pool"></a>thread pool</h3><blockquote>
<p>Java API provides Executor framework, which allows you to create different types of thread pools e.g. single thread pool, which process one task at a time, fixed thread pool (a pool of fixed number of thread) or cached thread pool (an expandable thread pool suitable for applications with many short lived tasks).</p>
</blockquote>
<h4 id="the-benefits"><a href="#the-benefits" class="headerlink" title="the benefits"></a>the benefits</h4><ul>
<li><p>Use of Thread Pool reduces response time by avoiding thread creation during request or task processing.</p>
</li>
<li><p>Use of Thread Pool allows you to change your execution policy as you need. you can go from single thread to multiple threads by just replacing ExecutorService implementation.</p>
</li>
<li><p>Thread Pool in Java application increases the stability of the system by creating a configured number of threads decided based on system load and available resource.</p>
</li>
<li><p>Thread Pool frees application developer from thread management stuff and allows to focus on business logic.</p>
</li>
</ul>
<h3 id="volatile-vs-atomic-variable"><a href="#volatile-vs-atomic-variable" class="headerlink" title="volatile vs atomic variable"></a>volatile vs atomic variable</h3><blockquote>
<p>Volatile variable provides you happens-before guarantee that a write will happen before any subsequent write, it doesn’t guarantee atomicity. For example count++ operation will not become atomic just by declaring count variable as volatile. On the other hand AtomicInteger class provides atomic method to perform such compound operation atomically.</p>
</blockquote>
<h3 id="3-multi-threading-best-practice"><a href="#3-multi-threading-best-practice" class="headerlink" title="3 multi-threading best practice"></a>3 multi-threading best practice</h3><ul>
<li><p>Always give meaningful name to your thread</p>
</li>
<li><p>Avoid locking or Reduce scope of Synchronization</p>
</li>
<li><p>Prefer Synchronizers over wait and notify</p>
</li>
<li><p>Prefer Concurrent Collection over Synchronized Collection</p>
</li>
</ul>
<h3 id="Wait、Sleep、Yield"><a href="#Wait、Sleep、Yield" class="headerlink" title="Wait、Sleep、Yield"></a>Wait、Sleep、Yield</h3><ul>
<li><p>sleep() and yield() methods are defined in thread class while wait() is defined in the Object class</p>
</li>
<li><p>The key difference between wait() and sleep() is that former is used for inter-thread communication while later is used to introduced to pause the current thread for a short duration. </p>
</li>
<li><p>This difference is more obvious from the fact that, when a thread calls the wait() method, it releases the monitor or lock it was holding on that object, but when a thread calls the sleep() method, it never releases the monitor even if it is holding. </p>
</li>
<li><p>yield() just releases the CPU hold by Thread to give another thread an opportunity to run though it’s not guaranteed who will get the CPU. It totally depends upon thread scheduler and <strong>it’s even possible that the thread which calls the yield() method gets the CPU again</strong>(有可能自己会再次获取到cpu执行时间). Hence, it’s not reliable to depend upon yield() method, it’s just on best effort basis.</p>
<ul>
<li>If there is no waiting thread or all the waiting threads have a lower priority then the same thread will continue its execution.</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>snippet</tag>
      </tags>
  </entry>
  <entry>
    <title>java性能调优学习笔记</title>
    <url>/2019/11/11/java%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="核心"><a href="#核心" class="headerlink" title="核心"></a>核心</h2><p>“纸上得来终觉浅，绝知此事要躬行”。</p>
<p>学会透过现象看本质</p>
<p><strong>1. 扎实的计算机基础</strong></p>
<blockquote>
<p>我们需要储备计算机组成原理、操作系统、网络协议以及数据库等基础知识。具体的性能问题往往还与传输、计算、存储数据等相关，那我们还需要储备数据结构、算法以及数学等基础知识。</p>
</blockquote>
<p><strong>2. 习惯透过源码了解技术本质</strong></p>
<blockquote>
<p>我们需要深入源码，通过分析来学习、总结一项技术的实现原理和优缺点，这样我们就能更客观地去学习一项技术，还能透过源码来学习牛人的思维方式，收获更好的编码实现方式。</p>
</blockquote>
<p><strong>3. 善于追问和总结</strong></p>
<blockquote>
<p>“知其然且知所以然”才是我们积累经验的关键。知道了一项技术背后的实现原理，我们才能在遇到性能问题时，做到触类旁通。</p>
</blockquote>
<h2 id="调优政策"><a href="#调优政策" class="headerlink" title="调优政策"></a>调优政策</h2><ul>
<li>分析查找问题是一个复杂而又细致的过程，某个性能问题可能是一个原因导致的，也可能是几个原因共同导致的结果。我们分析查找问题可以采用自下而上的方式，而我们解决系统性能问题，则可以采用自上而下的方式逐级优化。</li>
</ul>
<p><strong>1. 优化代码</strong></p>
<p><strong>2. 优化设计</strong></p>
<p><strong>3. 优化算法</strong></p>
<p><strong>4. 时间换空间</strong></p>
<p><strong>5. 空间换时间</strong></p>
<p><strong>6. 参数调优</strong></p>
<p><strong>7. 兜底策略，确保系统稳定性</strong></p>
<h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p><strong>数组</strong>：采用一段连续的存储单元来存储数据。对于指定下标的查找，时间复杂度为 O(1)，但在数组中间以及头部插入数据时，需要复制移动后面的元素。</p>
<p><strong>链表</strong>：一种在物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的。由于链表不用必须按顺序存储，所以链表在插入的时候可以达到 O(1) 的复杂度，但查找一个结点或者访问特定编号的结点需要 O(n) 的时间。</p>
<p><strong>哈希表</strong>：根据关键码值（Key value）直接进行访问的数据结构。通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做哈希函数，存放记录的数组就叫做哈希表。</p>
<p><strong>树</strong>：由 n（n≥1）个有限结点组成的一个具有层次关系的集合，就像是一棵倒挂的树。</p>
<h3 id="字符串性能优化"><a href="#字符串性能优化" class="headerlink" title="字符串性能优化"></a>字符串性能优化</h3><p><a href="https://imgchr.com/i/MGD7wV"><img src="https://s2.ax1x.com/2019/11/13/MGD7wV.md.jpg" alt="MGD7wV.md.jpg"></a></p>
<ul>
<li><p>一个 char 字符占 16 位，2 个字节。这个情况下，存储单字节编码内的字符（占一个字节的字符）就显得非常浪费。JDK1.9 的 String 类为了节约内存空间，于是使用了占 8 位，1 个字节的 byte 数组来存放字符串</p>
</li>
<li><p>String 对象的不可变性</p>
</li>
<li><p>对象和对象引用</p>
</li>
<li><p>使用 String.intern 来节省内存空间，从而优化 String 对象的存储</p>
<blockquote>
<p>具体做法就是，在每次赋值的时候使用 String 的 intern 方法，如果常量池中有相同值，就会重复使用该对象，返回对象引用，这样一开始的对象就可以被回收掉。这种方式可以使重复性非常高的地址信息存储大小从 20G 降到几百兆。</p>
<p>如果调用 intern 方法，会去查看字符串常量池中是否有等于该对象的字符串，如果没有，就在常量池中新增该对象，并返回该对象引用；如果有，就返回常量池中的字符串引用。堆内存中原有的对象由于没有引用指向它，将会通过垃圾回收器回收。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String a =<span class="keyword">new</span> String(<span class="string">&quot;abc&quot;</span>).intern();</span><br><span class="line">String b = <span class="keyword">new</span> String(<span class="string">&quot;abc&quot;</span>).intern();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(a==b) &#123;<span class="comment">// a 和 b 引用的是同一个对象。</span></span><br><span class="line">    System.out.print(<span class="string">&quot;a==b&quot;</span>);<span class="comment">//正常输出</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>用 String.indexOf() 方法代替 Split() 方法完成字符串的分割 </p>
</li>
</ul>
<h3 id="慎重使用正则表达式"><a href="#慎重使用正则表达式" class="headerlink" title="慎重使用正则表达式"></a>慎重使用正则表达式</h3><p><a href="https://imgchr.com/i/MGDWWQ"><img src="https://s2.ax1x.com/2019/11/13/MGDWWQ.md.jpg" alt="MGDWWQ.md.jpg"></a></p>
<blockquote>
<p>正则表达式是一个用正则符号写出的公式，程序对这个公式进行语法分析，建立一个语法分析树，再根据这个分析树结合正则表达式的引擎生成执行程序（这个执行程序我们把它称作状态机，也叫状态自动机），用于字符匹配。</p>
<p>如果使用正则表达式能使你的代码简洁方便，那么在做好性能排查的前提下，可以去使用；如果不能，那么正则表达式能不用就不用，以此避免造成更多的性能问题。</p>
</blockquote>
<h3 id="ArrayList-VS-LinkedList"><a href="#ArrayList-VS-LinkedList" class="headerlink" title="ArrayList VS LinkedList"></a>ArrayList VS LinkedList</h3><ul>
<li>由于 ArrayList 是数组实现的，而数组是一块连续的内存空间，在添加元素到数组头部的时候，需要对头部以后的数据进行复制重排，所以效率很低；而 LinkedList 是基于链表实现，在添加元素的时候，首先会通过循环查找到添加元素的位置，如果要添加的位置处于 List 的前半段，就从前往后找；若其位置处于后半段，就从后往前找。因此 LinkedList 添加元素到头部是非常高效的。</li>
<li>LinkedList 的 for 循环性能是最差的，而 ArrayList 的 for 循环性能是最好的。</li>
</ul>
<h3 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h3><p><a href="https://imgchr.com/i/MY0E6A"><img src="https://s2.ax1x.com/2019/11/14/MY0E6A.md.jpg" alt="MY0E6A.md.jpg"></a></p>
]]></content>
      <categories>
        <category>course</category>
      </categories>
      <tags>
        <tag>snippet</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript learn</title>
    <url>/2019/03/29/javascript%20learn/</url>
    <content><![CDATA[<h3 id="types"><a href="#types" class="headerlink" title="types"></a>types</h3><ul>
<li><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number"><code>Number</code></a></p>
</li>
<li><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String"><code>String</code></a></p>
</li>
<li><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean"><code>Boolean</code></a></p>
<blockquote>
<p>false, 0, empty strings (“”), NaN, null, and undefined all become false.</p>
</blockquote>
</li>
<li><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol"><code>Symbol</code></a> (new in ES2015)</p>
</li>
<li><p><code>Object</code></p>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function"><code>Function</code></a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array"><code>Array</code></a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date"><code>Date</code></a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp"><code>RegExp</code></a></li>
</ul>
</li>
<li><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null"><code>null</code></a></p>
</li>
<li><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined"><code>undefined</code></a></p>
<blockquote>
<p>declare a variable without assigning a value to it. If you do this, the variable’s type is <code>undefined</code>. <code>undefined</code> is actually a constant.</p>
</blockquote>
</li>
</ul>
<h3 id="Variables"><a href="#Variables" class="headerlink" title="Variables"></a>Variables</h3><ul>
<li><p>let</p>
<blockquote>
<p><strong>let</strong> allows you to declare block-level variables. The declared variable is available from the <em>block</em> it is enclosed in.</p>
</blockquote>
</li>
<li><p>const</p>
<blockquote>
<p><strong>const</strong> allows you to declare variables whose values are never intended to change. The variable is available from the <em>block</em> it is declared in.</p>
</blockquote>
</li>
<li><p>var</p>
<blockquote>
<p>A variable declared with the <strong>var</strong> keyword is available from the written out <em>function</em> (as opposed to an anonymous function) it is declared in.</p>
</blockquote>
</li>
</ul>
<h3 id="Operators"><a href="#Operators" class="headerlink" title="Operators"></a>Operators</h3><blockquote>
<p><code>+</code>, <code>-</code>, <code>*</code>, <code>/</code> , <code>%</code> ,<code>=</code>,<code>+=</code> and <code>-=</code></p>
</blockquote>
<h3 id="Control-structures"><a href="#Control-structures" class="headerlink" title="Control structures"></a>Control structures</h3><ul>
<li><p>Conditional statements are supported by <code>if</code> and <code>else</code></p>
</li>
<li><p> <code>while</code> loops and <code>do-while</code> loops.</p>
</li>
<li><p> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for"><code>for</code> loop</a> is the same as that in C and Java</p>
</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="comment">// Will execute 5 times</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> array) &#123;</span><br><span class="line">  <span class="comment">// do something with value</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> property <span class="keyword">in</span> object) &#123;</span><br><span class="line">  <span class="comment">// do something with object property</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>&amp;&amp;</code> and <code>||</code> operators</p>
</li>
<li><p> a ternary operator for conditional expressions:</p>
</li>
</ul>
<p>  <code>var allowed = (age &gt; 18) ? &#39;yes&#39; : &#39;no&#39;;</code></p>
<ul>
<li> <code>switch</code> statement </li>
</ul>
<h3 id="Objects"><a href="#Objects" class="headerlink" title="Objects"></a>Objects</h3><blockquote>
<p>objects can be thought of as simple collections of name-value pairs, like HashMaps in Java.</p>
<p>The “name” part is a JavaScript string, while the value can be any JavaScript value — including more objects.</p>
</blockquote>
<ul>
<li><p>two basic ways to create an empty object:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">a[<span class="number">0</span>] = <span class="string">&#x27;dog&#x27;</span>;</span><br><span class="line">a[<span class="number">1</span>] = <span class="string">&#x27;cat&#x27;</span>;</span><br><span class="line">a[<span class="number">2</span>] = <span class="string">&#x27;hen&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = [<span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;hen&#x27;</span>];</span><br><span class="line"></span><br><span class="line">a.length; <span class="comment">// 3</span></span><br><span class="line">b.length;<span class="comment">//3</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>terating over an array</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;hen&#x27;</span>].forEach(<span class="function"><span class="keyword">function</span>(<span class="params">currentValue, index, array</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Do something with currentValue or array[index]</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h3><blockquote>
<p>A JavaScript function can take 0 or more named parameters. The function body can contain as many statements as you like and can declare its own variables which are local to that function. The <code>return</code> statement can be used to return a value at any time, terminating the function. If no return statement is used (or an empty return with no value), JavaScript returns <code>undefined</code>.</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">avg</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> args) &#123;</span><br><span class="line">    sum += value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum / args.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//above defined is equivalent to below</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> avg = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, j = <span class="built_in">arguments</span>.length; i &lt; j; i++) &#123;</span><br><span class="line">    sum += <span class="built_in">arguments</span>[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum / <span class="built_in">arguments</span>.length;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">avg(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>); <span class="comment">// 3.5</span></span><br></pre></td></tr></table></figure>

<h3 id="Custom-objects"><a href="#Custom-objects" class="headerlink" title="Custom objects"></a>Custom objects</h3><blockquote>
<p>JavaScript uses functions as classes. </p>
</blockquote>
<ul>
<li><p>the way to attach a function to an object.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makePerson</span>(<span class="params">first, last</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">first</span>: first,</span><br><span class="line">    <span class="attr">last</span>: last,</span><br><span class="line">    <span class="attr">fullName</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.first + <span class="string">&#x27; &#x27;</span> + <span class="built_in">this</span>.last;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">fullNameReversed</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.last + <span class="string">&#x27;, &#x27;</span> + <span class="built_in">this</span>.first;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s = makePerson(<span class="string">&#x27;Simon&#x27;</span>, <span class="string">&#x27;Willison&#x27;</span>);</span><br><span class="line">s.fullName(); <span class="comment">// &quot;Simon Willison&quot;</span></span><br><span class="line">s.fullNameReversed(); <span class="comment">// &quot;Willison, Simon&quot;</span></span><br></pre></td></tr></table></figure>

<p>good:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">first, last</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.first = first;</span><br><span class="line">  <span class="built_in">this</span>.last = last;</span><br><span class="line">  <span class="built_in">this</span>.fullName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.first + <span class="string">&#x27; &#x27;</span> + <span class="built_in">this</span>.last;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="built_in">this</span>.fullNameReversed = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.last + <span class="string">&#x27;, &#x27;</span> + <span class="built_in">this</span>.first;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> Person(<span class="string">&#x27;Simon&#x27;</span>, <span class="string">&#x27;Willison&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>better:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">personFullName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.first + <span class="string">&#x27; &#x27;</span> + <span class="built_in">this</span>.last;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">personFullNameReversed</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.last + <span class="string">&#x27;, &#x27;</span> + <span class="built_in">this</span>.first;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">first, last</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.first = first;</span><br><span class="line">  <span class="built_in">this</span>.last = last;</span><br><span class="line">  <span class="built_in">this</span>.fullName = personFullName;</span><br><span class="line">  <span class="built_in">this</span>.fullNameReversed = personFullNameReversed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>best:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">first, last</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.first = first;</span><br><span class="line">  <span class="built_in">this</span>.last = last;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.fullName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.first + <span class="string">&#x27; &#x27;</span> + <span class="built_in">this</span>.last;</span><br><span class="line">&#125;;</span><br><span class="line">Person.prototype.fullNameReversed = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.last + <span class="string">&#x27;, &#x27;</span> + <span class="built_in">this</span>.first;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
<li><p><code>this</code> refers to the current object. </p>
<blockquote>
<p>What that actually means is specified by the way in which you called that function.</p>
<p> If you called it using dot notation or bracket notation on an object, that object becomes <code>this</code>.</p>
<p> If dot notation wasn’t used for the call, <code>this</code> refers to the global object.</p>
</blockquote>
</li>
<li><p><code>new</code> is strongly related to <code>this</code>.</p>
<blockquote>
<p>Functions that are designed to be called by <code>new</code> are called constructor functions. Common practice is to capitalize these functions as a reminder to call them with <code>new</code>.</p>
</blockquote>
</li>
<li><p><code>Person.prototype</code> is an object shared by all instances of <code>Person</code>.</p>
<blockquote>
<p><strong>prototype chain</strong>:any time you attempt to access a property of <code>Person</code> that isn’t set, JavaScript will check <code>Person.prototype</code> to see if that property exists there instead. As a result, anything assigned to <code>Person.prototype</code> becomes available to all instances of that constructor via the <code>this</code> object.</p>
</blockquote>
<ul>
<li><p>JavaScript lets you modify something’s prototype at any time in your program, which means you can add extra methods to existing objects at runtime:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> Person(<span class="string">&#x27;Simon&#x27;</span>, <span class="string">&#x27;Willison&#x27;</span>);</span><br><span class="line">s.firstNameCaps(); <span class="comment">// TypeError on line 1: s.firstNameCaps is not a function</span></span><br><span class="line"></span><br><span class="line">Person.prototype.firstNameCaps = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.first.toUpperCase();</span><br><span class="line">&#125;;</span><br><span class="line">s.firstNameCaps(); <span class="comment">// &quot;SIMON&quot;</span></span><br></pre></td></tr></table></figure></li>
<li><p>the prototype forms part of a chain. The root of that chain is <code>Object.prototype</code>, whose methods include <code>toString()</code> — it is this method that is called when you try to represent an object as a string. </p>
</li>
</ul>
</li>
<li><p>The <strong>call()</strong> method calls a function with a given <code>this</code> value and arguments provided individually.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Product</span>(<span class="params">name, price</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">  <span class="built_in">this</span>.price = price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Food</span>(<span class="params">name, price</span>) </span>&#123;</span><br><span class="line">  Product.call(<span class="built_in">this</span>, name, price);</span><br><span class="line">  <span class="built_in">this</span>.category = <span class="string">&#x27;food&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> Food(<span class="string">&#x27;cheese&#x27;</span>, <span class="number">5</span>).name);</span><br><span class="line"><span class="comment">// expected output: &quot;cheese&quot;</span></span><br></pre></td></tr></table></figure></li>
<li><p>The <strong>apply()</strong> method calls a function with a given <code>this</code> value, and <code>arguments</code> provided as an array (or an <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#Working_with_array-like_objects">array-like object</a>).</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">5</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">7</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> max = <span class="built_in">Math</span>.max.apply(<span class="literal">null</span>, numbers);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(max);</span><br><span class="line"><span class="comment">// expected output: 7</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> min = <span class="built_in">Math</span>.min.apply(<span class="literal">null</span>, numbers);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(min);</span><br><span class="line"><span class="comment">// expected output: 2</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="Inner-functions"><a href="#Inner-functions" class="headerlink" title="Inner functions"></a>Inner functions</h4><p>方法是存储在对象属性中的函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parentFunc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">nestedFunc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">4</span>; <span class="comment">// parentFunc can&#x27;t use this</span></span><br><span class="line">    <span class="keyword">return</span> a + b; </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> nestedFunc(); <span class="comment">// 5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Closures"><a href="#Closures" class="headerlink" title="Closures"></a>Closures</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeAdder</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> x = makeAdder(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">var</span> y = makeAdder(<span class="number">20</span>);</span><br><span class="line">x(<span class="number">6</span>); <span class="comment">// returns 11</span></span><br><span class="line">y(<span class="number">7</span>); <span class="comment">// returns 27</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Scope objects form a chain called the scope chain, similar to the prototype chain used by JavaScript’s object system.</p>
</blockquote>
<h2 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h2><p><strong>curly braces</strong></p>
<p>括号（）</p>
<p><strong>Spread syntax</strong></p>
<p>省略号</p>
<ul>
<li>The spread syntax is simply three dots: <code>...</code></li>
<li>It allows an iterable to expand in places where 0+ arguments are expected.</li>
</ul>
<h4 id="asterisk"><a href="#asterisk" class="headerlink" title="asterisk"></a>asterisk</h4><p>星号 *</p>
<h3 id="regular-expression"><a href="#regular-expression" class="headerlink" title="regular expression"></a>regular expression</h3><ul>
<li><p>校验含有空格</p>
<p><code>reg = /^((?! ).)*$/;</code></p>
</li>
<li><p>校验只有数字、字母和下划线</p>
<p><code>reg = /^[_0-9a-z]*$/;</code></p>
</li>
</ul>
<h3 id="setInterval"><a href="#setInterval" class="headerlink" title="setInterval"></a>setInterval</h3><p>定时调度</p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>learn</tag>
      </tags>
  </entry>
  <entry>
    <title>jconsole snippet</title>
    <url>/2021/12/11/jconsole%20snippet/</url>
    <content><![CDATA[<h3 id="jconsole配置远程监控"><a href="#jconsole配置远程监控" class="headerlink" title="jconsole配置远程监控"></a>jconsole配置远程监控</h3><ul>
<li>远程jvm进程需配置<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">env.java.opts: </span><br><span class="line">-Dcom.sun.management.jmxremote </span><br><span class="line">-Dcom.sun.management.jmxremote.port=9999</span><br><span class="line">-Dcom.sun.management.jmxremote.authenticate=false </span><br><span class="line">-Dcom.sun.management.jmxremote.ssl=false</span><br></pre></td></tr></table></figure>

<blockquote>
<p>其中9999为指定监控端口</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>snippet</tag>
      </tags>
  </entry>
  <entry>
    <title>jpa snippet</title>
    <url>/2017/10/16/jpa%20snippet/</url>
    <content><![CDATA[<h3 id="What-is"><a href="#What-is" class="headerlink" title="What is"></a>What is</h3><blockquote>
<p>Java Persistence API is a collection of classes and methods to persistently store the vast amounts of data into a database which is provided by the Oracle Corporation.</p>
</blockquote>
<h3 id="Where-to-use"><a href="#Where-to-use" class="headerlink" title="Where to use"></a>Where to use</h3><blockquote>
<p>To reduce the burden of writing codes for relational object management, a programmer follows the ‘JPA Provider’ framework, which allows easy interaction with database instance. Here the required framework is taken over by JPA.</p>
</blockquote>
<p><img src="https://www.tutorialspoint.com/jpa/images/jpa_provider.png"></p>
<ul>
<li>JPA Pro<blockquote>
<p>JPA is an open source API, therefore various enterprise vendors such as Oracle, Redhat, Eclipse, etc. provide new products by adding the JPA persistence flavor in them. Some of these products include:<strong>Hibernate, Eclipselink, Toplink, Spring Data JPA, etc.</strong></p>
</blockquote>
</li>
</ul>
<h3 id="Architecture"><a href="#Architecture" class="headerlink" title="Architecture"></a>Architecture</h3><p><img src="https://www.tutorialspoint.com/jpa/images/jpa_class_level_architecture.png"></p>
<ul>
<li><p>jpa class relationships</p>
<p><img src="https://www.tutorialspoint.com/jpa/images/jpa_class_relationships.png"></p>
</li>
<li><p>ORM Architecture</p>
<p><img src="https://www.tutorialspoint.com/jpa/images/object_relational_mapping.png"></p>
</li>
<li><p>Entity Relationships</p>
<ul>
<li>@ManyToOne Relation</li>
<li>@OneToMany Relation</li>
<li>@OneToOne Relation</li>
<li>@ManyToMany Relation</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>jpa</category>
      </categories>
      <tags>
        <tag>snippet</tag>
      </tags>
  </entry>
  <entry>
    <title>jquery snippet</title>
    <url>/2017/08/05/jquery%20snippet/</url>
    <content><![CDATA[<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><ul>
<li><p>设置标签属性</p>
<p><code>$(&quot;div&quot;).attr(&quot;属性名&quot;,&quot;属性值&quot;);</code></p>
</li>
<li><p>设置标签样式</p>
<p><code>$(&quot;div&quot;).css(&quot;color&quot;,&quot;yellow&quot;); </code>或<code>$(&quot;div&quot;).css(&quot;padding-left&quot;))</code></p>
</li>
<li><p>移除属性</p>
<p><code> $(&quot;div&quot;).removeAttr(&quot;id&quot;);</code></p>
</li>
<li><p>遍历数组</p>
<ul>
<li><p>原生js有两种方法都可以使用[for(var i;i&lt;arr.length;i++){},for(var i in arr){}] </p>
</li>
<li><p>jquery有两个函数共计四种方法都可以使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.each(arr,<span class="function"><span class="keyword">function</span>(<span class="params">i,item</span>)</span>&#123;&#125;),</span><br><span class="line">$(arr).each(<span class="function"><span class="keyword">function</span>(<span class="params">i,item</span>)</span>&#123;&#125;), </span><br><span class="line">$.map(arr,<span class="function"><span class="keyword">function</span>(<span class="params">i,item</span>)</span>&#123;&#125;), </span><br><span class="line">$(arr).map(<span class="function"><span class="keyword">function</span>(<span class="params">i,item</span>)</span>&#123;&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>遍历对象 </p>
<ul>
<li><p>原生js有一种方法可以使用[for(var i in obj){}] </p>
</li>
<li><p>jquery有两个函数共计两种方法可以使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.each(obj,<span class="function"><span class="keyword">function</span>(<span class="params">i,item</span>)</span>&#123;&#125;)</span><br><span class="line">$.map(obj,<span class="function"><span class="keyword">function</span>(<span class="params">i,item</span>)</span>&#123;&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Jquery中的ajax在默认不写async情况下，请求为异步请求；即：async:true</p>
</li>
<li><p><code>$(function()&#123; &#125;)</code>是定义一个匿名函数，它是<code>$(document).ready(function()&#123;&#125;)</code>的简写</p>
</li>
</ul>
]]></content>
      <categories>
        <category>jquery</category>
      </categories>
      <tags>
        <tag>snippet</tag>
      </tags>
  </entry>
  <entry>
    <title>linux command</title>
    <url>/2015/10/16/linux%20command/</url>
    <content><![CDATA[<p><a href="https://linuxconfig.org/bash-scripting-tutorial-for-beginners">Bash Scripting Tutorial for Beginners</a></p>
<h3 id="Bash-Shell-Scripting-Definition"><a href="#Bash-Shell-Scripting-Definition" class="headerlink" title="Bash Shell Scripting Definition"></a>Bash Shell Scripting Definition</h3><ul>
<li>Bash:Bourne-Again SHell<br>Bash is a command language interpreter. <h2 id="conclusion"><a href="#conclusion" class="headerlink" title="conclusion"></a>conclusion</h2>Do not be afraid to break things as that is perfectly normal. Troubleshooting and fixing code is perhaps the best booster for you to enhance your understanding of bash scripting and to improve your ability.</li>
</ul>
<p><a href="https://linuxconfig.org/bash-scripting-tutorial#h24-stdout-to-screen">Bash scripting Tutorial</a></p>
<h3 id="session"><a href="#session" class="headerlink" title="session"></a>session</h3><ul>
<li>kill seesion <code>screen -X -S [session # you want to kill] quit</code></li>
<li>新建screen会话           screen -S xxx</li>
<li>恢复指定会话               screen -r xxx</li>
<li>查看所有会话                screen -ls</li>
<li>删除指定会话                screen -S xxx -X quit</li>
<li>回到终端                        Ctrl-a d</li>
</ul>
<h3 id="firewall"><a href="#firewall" class="headerlink" title="firewall"></a>firewall</h3><ul>
<li><p>check status : <code>sudo ufw status</code></p>
</li>
<li><p>enable firewall: </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo ufw <span class="built_in">enable</span></span><br><span class="line">Command may disrupt existing ssh connections. Proceed with operation (y|n)? y</span><br><span class="line">Firewall is active and enabled on system startup</span><br></pre></td></tr></table></figure></li>
<li><p>disable firewall</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo ufw <span class="built_in">disable</span></span><br><span class="line">Firewall stopped and disabled on system startup</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="磁盘相关"><a href="#磁盘相关" class="headerlink" title="磁盘相关"></a>磁盘相关</h3><ul>
<li><p>查看系统磁盘占用情况    <code> df -h</code></p>
</li>
<li><p>查看目录下文件大小        <code>du -sh</code></p>
</li>
<li><p>查看当前目录下一级子文件和子目录占用的磁盘容量: <code>du -h --max-depth=1 </code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">查看当前目录下user目录的大小，并不想看其他目录以及其子目录：</span><br><span class="line">du -sh user</span><br><span class="line">-s表示总结的意思，即只列出一个总结的值</span><br><span class="line">du -h --max-depth=0 user</span><br><span class="line">--max-depth=n表示只深入到第n层目录，此处设置为0，即表示不深入到子目录。</span><br></pre></td></tr></table></figure></li>
<li><p>总结du常用命令</p>
<p><strong>du -h –max-depth=1 |grep ‘G’ |sort   #查看上G目录并排序</strong></p>
<p>du -h –max-depth=1 |grep [TG] |sort   #查找上G和T的目录并排序<br>du -sh –max-depth=1  #查看当前目录下所有一级子目录文件夹大小</p>
</li>
<li><p>清理指定目录下的文件</p>
<p>例如需要根据时间删除这个目录下的文件，/tmp，清理掉20天之前的无效数据。可以使用下面一条命令去完成：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find /tmp -mtime +21 -name &quot;*&quot; -exec rm -Rf &#123;&#125; \;</span><br><span class="line">- /tmp ：准备要进行清理的任意目录</span><br><span class="line">- -mtime：标准语句写法</span><br><span class="line">- ＋10：查找10天前的文件，这里用数字代表天数，＋30表示查找30天前的文件</span><br><span class="line">- &quot;*&quot;：希望查找的数据类型，&quot;.jpg&quot;表示查找扩展名为jpg的所有文件，&quot;&quot;表示查找所有文件</span><br><span class="line">- -exec：固定写法</span><br><span class="line">- rm -Rf：强制删除文件，包括目录(注意R大写，f小写)</span><br><span class="line">-  &#123;&#125; \; 固定写法，一对大括号+空格+\+; </span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="history"><a href="#history" class="headerlink" title="history"></a>history</h3><p>查看历史命令，支持 grep过滤操作</p>
<h3 id="卸载安装的软件"><a href="#卸载安装的软件" class="headerlink" title="卸载安装的软件"></a>卸载安装的软件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">浏览已安装的程序    dpkg --list</span><br><span class="line">卸载程序和所有配置文件    sudo apt-get --purge remove &lt;programname&gt;</span><br><span class="line">只卸载程序    sudo apt-get remove &lt;programname&gt;</span><br></pre></td></tr></table></figure>

<h3 id="安装deb文件出错时"><a href="#安装deb文件出错时" class="headerlink" title="安装deb文件出错时"></a>安装deb文件出错时</h3><p>使用<code>apt-get -f -y install</code>修复之后，再进行安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.执行命令sudo dpkg　-i　XXX.deb　返回依赖关系错误提示</span><br><span class="line">2.执行sudo apt-get -f install　这条命令将自动安装需要的依赖包．</span><br><span class="line">3.再次执行命令sudo dpkg　-i　XXX.deb　安装成功</span><br></pre></td></tr></table></figure>

<h3 id="光标"><a href="#光标" class="headerlink" title="光标"></a>光标</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Ctrl+a：光标回到命令行首。 （a：ahead）</span><br><span class="line">Ctrl+e：光标回到命令行尾。 （e：end）</span><br><span class="line">Ctrl+b：光标向行首移动一个字符。 （b：backwards）</span><br><span class="line">Ctrl+ f：光标向行尾移动一个字符。 （f：forwards）</span><br><span class="line">Ctrl+w: 删除光标处到行首的字符。</span><br><span class="line">Ctrl+k：删除光标处到行尾的字符。</span><br><span class="line">Ctrl+u：删除整个命令行文本字符。</span><br><span class="line">Ctrl+h：向行首删除一个字符。</span><br><span class="line">Ctrl+d：向行尾删除一个字符。</span><br><span class="line"></span><br><span class="line">Ctrl + xx ：在命令行尾和光标之间移动</span><br></pre></td></tr></table></figure>

<h3 id="时区"><a href="#时区" class="headerlink" title="时区"></a>时区</h3><p><a href="https://www.cnblogs.com/zhangeamon/p/5500744.html">CentOS 7 时区设置</a></p>
<h3 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h3><p>限定查询结果之后的前几行 <code>grep -m 10 &lt;pattern&gt; &lt;file&gt; </code></p>
<p>限定查询结果倒数的几行 <code>grep &lt;pattern&gt; &lt;file&gt; | tail -10</code></p>
<h3 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h3><ul>
<li><p>判断　day of year     </p>
<p><code>doy=$(date +%j)</code></p>
</li>
<li><p>制定日期减一天</p>
<p><code>date -d&quot;20140101 -1 days&quot; +&quot;%Y%m%d&quot;</code></p>
</li>
<li><p>当前时间戳（秒）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">date +%s</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="剪切板"><a href="#剪切板" class="headerlink" title="剪切板"></a>剪切板</h3><p>将剪切板中的内容输出到文件     echo $(xsel –clipboard) &gt;&gt; a.txt </p>
<p>将文件的内容复制到剪切板         cat a.txt | xsel –clipboard</p>
<h3 id="securtCRT"><a href="#securtCRT" class="headerlink" title="securtCRT"></a>securtCRT</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">下载服务器文件    sz filename</span><br><span class="line">上传本地文件 rz filename</span><br></pre></td></tr></table></figure>

<h3 id="tr命令"><a href="#tr命令" class="headerlink" title="tr命令"></a>tr命令</h3><p>tr – translate or delete characters </p>
<ul>
<li>大小写转换<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat file | tr A-Z a-z </span><br><span class="line">cat file | tr a-z A-Z</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="top"><a href="#top" class="headerlink" title="top"></a>top</h3><ul>
<li><p>“1”</p>
<p>查看所有CPU核的使用情况</p>
</li>
<li><p>“c”</p>
<p>查看具体进程的路径</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">l- 开启或关闭第一部分第一行top信息显示</span><br><span class="line"></span><br><span class="line">　　t - 开启或关闭第一部分第二行Tasks和第三行 Cpu(s) 信息显示</span><br><span class="line"></span><br><span class="line">　　m - 开启或关闭第一部分第四行 Mem 和 第五行 Swap 信息显示</span><br><span class="line"></span><br><span class="line">　　N - 以 PID 的大小的顺序排列表示进程列表</span><br><span class="line"></span><br><span class="line">　　P - 以 CPU 占用率大小的顺序排列进程列表</span><br><span class="line"></span><br><span class="line">　　M - 以内存占用率大小的顺序排列进程列表</span><br><span class="line"></span><br><span class="line">　　h - 显示帮助</span><br><span class="line"></span><br><span class="line">　　n - 设置在进程列表所显示进程的数量（按完n，再输入个数）</span><br><span class="line"></span><br><span class="line">　　q - 退出 top</span><br><span class="line"></span><br><span class="line">　　s - 设置显示信息的刷新频率（由于是命令行模式，显示的过程其实是刷屏的过程）</span><br></pre></td></tr></table></figure>

<h3 id="查看指定服务的运行情况"><a href="#查看指定服务的运行情况" class="headerlink" title="查看指定服务的运行情况"></a>查看指定服务的运行情况</h3><ul>
<li><code>journalctl -u xxx.service</code></li>
</ul>
<h3 id="资源占用"><a href="#资源占用" class="headerlink" title="资源占用"></a>资源占用</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps -aux | grep 服务名称或pid</span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示</span></span><br><span class="line">root  19496  0.0  2.4 4826152 1603360 ?     Sl    2020 503:15 java -jar -Xms1024m -Xmx1024m jenkins.war --httpPort=55555</span><br><span class="line"></span><br><span class="line">19496 为PID</span><br><span class="line">0.0 为CPU占用百分比（注意：如果有两个CPU，32核64线程，那么总占比是6400%，占用一线程，cpu占比是100%）</span><br><span class="line">2.4 为内存占用百分比</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="清理缓存"><a href="#清理缓存" class="headerlink" title="清理缓存"></a>清理缓存</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sync; echo 1 &gt; /proc/sys/vm/drop_caches</span><br></pre></td></tr></table></figure>



<h2 id="centos安装离线依赖"><a href="#centos安装离线依赖" class="headerlink" title="centos安装离线依赖"></a>centos安装离线依赖</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -ivh name.rpm</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>command</tag>
      </tags>
  </entry>
  <entry>
    <title>js中的this</title>
    <url>/2019/08/14/js%E4%B8%AD%E7%9A%84this/</url>
    <content><![CDATA[<p>文字转载自<a href="https://juejin.im/post/5d51feaef265da039005219e#heading-5">JS 中 this 在各个场景下的指向</a></p>
<h2 id="1-this-的奥秘"><a href="#1-this-的奥秘" class="headerlink" title="1. this 的奥秘"></a>1. this 的奥秘</h2><p>很多时候, JS 中的 <code>this</code> 对于咱们的初学者很容易产生困惑不解。 <code>this</code> 的功能很强大，但需要一定付出才能慢慢理解它。</p>
<p>对Java、PHP或其他标准语言来看，<code>this</code> 表示类方法中当前对象的实例。大多数情况下，<code>this</code>不能在方法之外使用，这样就比较不会造成混淆。</p>
<p>在J要中情况就有所不同: <code>this</code>表示函数的当前执行上下文，JS 中函数调用主要有以下几种方式：</p>
<ul>
<li>函数调用: <code>alert(&#39;Hello World!&#39;)</code></li>
<li>方法调用: <code>console.log(&#39;Hello World!&#39;)</code></li>
<li>构造函数: <code>new RegExp(&#39;\\d&#39;)</code></li>
<li>隐式调用: <code>alert.call(undefined, &#39;Hello World!&#39;)</code></li>
</ul>
<p>每种调用类型以自己的方式定义上下文，所以就很容易产生混淆。</p>
<p>此外，严格模式也会影响执行上下文。</p>
<p>理解<code>this</code>关键是要清楚的知道函数调用及其如何影响上下文。</p>
<p>本文主要说明函数的调用方式及如何影响 <code>this</code>，并且说明执行上下文的常见陷阱。</p>
<p>在开始之前，先知道几个术语：</p>
<p>调用函数正在执行创建函数体的代码，或者只是调用函数。 例如，parseInt函数调用是parseInt（’15’）。</p>
<ul>
<li><strong>函数调用</strong>：执行构成函数主体的代码：例如，<code>parseInt</code>函数调用是<code>parseInt(&#39;15&#39;)</code>。</li>
<li><strong>调用的上下文</strong>：指 <code>this</code> 在函数体内的值。 例如，<code>map.set(&#39;key&#39;, &#39;value&#39;)</code>的调用上下文是 <code>map</code>。</li>
<li><strong>函数的作用域</strong>：是在函数体中可访问的变量、对象和函数的集合。</li>
</ul>
<h2 id="2-函数调用"><a href="#2-函数调用" class="headerlink" title="2.函数调用"></a>2.函数调用</h2><p>当一个表达式为函数接着一个<code>(</code>，一些用逗号分隔的参数以及一个<code>）</code>时，函数调用被执行，例如<code>parseInt(&#39;18&#39;)</code>。</p>
<p>函数调用表达式不能是属性方式的调用，如 <code>obj.myFunc()</code>，这种是创建一个方法调用。再如 <code>[1,5].join(&#39;,&#39;)</code>不是函数调用，而是方法调用，<strong>这种区别需要记住哈，很重要滴</strong>。</p>
<p>函数调用的一个简单示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function hello(name) &#123;</span><br><span class="line">  return &#x27;Hello &#x27; + name + &#x27;!&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">// 函数调用</span><br><span class="line">const message = hello(&#x27;World&#x27;);</span><br><span class="line">console.log(message); // =&gt; &#x27;Hello World!&#x27;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p><code>hello(&#39;World&#39;)</code>是函数调用: <code>hello</code>表达式等价于一个函数，跟在它后面的是一对括号以及<code>&#39;World&#39;</code>参数。</p>
<p>一个更高级的例子是<strong>IIFE</strong>(立即调用的函数表达式)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const message = (function(name) &#123;</span><br><span class="line">   return &#x27;Hello &#x27; + name + &#x27;!&#x27;;</span><br><span class="line">&#125;)(&#x27;World&#x27;);</span><br><span class="line">console.log(message) // =&gt; &#x27;Hello World!&#x27;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p><strong>IIFE</strong>也是一个函数调用:第一对圆括号<code>(function(name) &#123;...&#125;)</code>是一个表达式，它的计算结果是一个函数对象，后面跟着一对圆括号，圆括号的参数是<code>“World”</code>。</p>
<h4 id="2-1-在函数调用中的this"><a href="#2-1-在函数调用中的this" class="headerlink" title="2.1. 在函数调用中的this"></a>2.1. 在函数调用中的this</h4><blockquote>
<p>this 在函数调用中是一个全局对象</p>
</blockquote>
<p>局对象由执行环境决定。在浏览器中，<code>this</code>是 <code>window</code> 对象。</p>
<p><img src="https://user-gold-cdn.xitu.io/2019/8/13/16c884b811a409ab?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p>
<p>在函数调用中，执行上下文是全局对象。</p>
<p>再来看看下面函数中的上下文又是什么鬼：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function sum(a, b) &#123;</span><br><span class="line">   console.log(this === window); // =&gt; true</span><br><span class="line">   this.myNumber = 20; // 将&#x27;myNumber&#x27;属性添加到全局对象</span><br><span class="line">   return a + b;</span><br><span class="line">&#125;</span><br><span class="line">// sum() is invoked as a function</span><br><span class="line">// sum() 中的 `this` 是一个全局对象（window）</span><br><span class="line">sum(15, 16);     // =&gt; 31</span><br><span class="line">window.myNumber; // =&gt; 20</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p>在调用<code>sum(15,16)</code>时，JS 自动将<code>this</code>设置为全局对象，在浏览器中该对象是<code>window</code>。</p>
<p>当<code>this</code>在任何函数作用域(最顶层作用域:全局执行上下文)之外使用，<code>this</code> 表示 <code>window</code> 对象</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.log(this === window); // =&gt; true</span><br><span class="line">this.myString = &#x27;Hello World!&#x27;;</span><br><span class="line">console.log(window.myString); // =&gt; &#x27;Hello World!&#x27;</span><br><span class="line"></span><br><span class="line">&lt;!-- In an html file --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">   console.log(this === window); // =&gt; true</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<h4 id="2-2-严格模式下的函数调用-this-又是什么样的"><a href="#2-2-严格模式下的函数调用-this-又是什么样的" class="headerlink" title="2.2 严格模式下的函数调用 this 又是什么样的"></a>2.2 严格模式下的函数调用 this 又是什么样的</h4><blockquote>
<p><code>this</code> 在严格模式下的函数调用中为 <strong>undefined</strong></p>
</blockquote>
<p>严格模式是在 ECMAScript 5.1中引入的，它提供了更好的安全性和更强的错误检查。</p>
<p>要启用严格模式，函数头部写入<code>use strict</code> 即可。</p>
<p>启用后，严格模式会影响执行上下文，<code>this</code> 在常规函数调用中值为<code>undefined</code>。 与上述情况<code>2.1</code>相反，执行上下文不再是全局对象。</p>
<p><img src="https://user-gold-cdn.xitu.io/2019/8/13/16c884ceb97a4874?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p>
<p>严格模式函数调用示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function multiply(a, b) &#123;</span><br><span class="line">  &#x27;use strict&#x27;; // 启用严格模式</span><br><span class="line">  console.log(this === undefined); // =&gt; true</span><br><span class="line">  return a * b;</span><br><span class="line">&#125;</span><br><span class="line">multiply(2, 5); // =&gt; 10</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p>当<code>multiply(2,5)</code>作为函数调用时，<code>this</code>是<code>undefined</code>。</p>
<p>严格模式不仅在当前作用域中有效，在内部作用域中也是有效的(对于在内部声明的所有函数):</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function execute() &#123;</span><br><span class="line">   &#x27;use strict&#x27;; // 开启严格模式  </span><br><span class="line">   function concat(str1, str2) &#123;</span><br><span class="line">     // 严格模式仍然有效  </span><br><span class="line">     console.log(this === undefined); // =&gt; true</span><br><span class="line">     return str1 + str2;</span><br><span class="line">   &#125;</span><br><span class="line">   // concat() 在严格模式下作为函数调用</span><br><span class="line">   // this in concat() is undefined</span><br><span class="line">   concat(&#x27;Hello&#x27;, &#x27; World!&#x27;); // =&gt; &quot;Hello World!&quot;</span><br><span class="line">&#125;</span><br><span class="line">execute();</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p><code>&#39;use strict&#39;</code>被插入到执行体的顶部，在其作用域内启用严格模式。 因为函数<code>concat</code>是在执行的作用域中声明的，所以它继承了严格模式。</p>
<p>单个JS文件可能包含严格和非严格模式。 因此，对于相同的调用类型，可以在单个脚本中具有不同的上下文行为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function nonStrictSum(a, b) &#123;</span><br><span class="line">  // 非严格模式</span><br><span class="line">  console.log(this === window); // =&gt; true</span><br><span class="line">  return a + b;</span><br><span class="line">&#125;</span><br><span class="line">function strictSum(a, b) &#123;</span><br><span class="line">  &#x27;use strict&#x27;;</span><br><span class="line">  // 启用严格模式</span><br><span class="line">  console.log(this === undefined); // =&gt; true</span><br><span class="line">  return a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">nonStrictSum(5, 6); // =&gt; 11</span><br><span class="line">strictSum(8, 12); // =&gt; 20</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<h4 id="2-3-陷阱-this-在内部函数中的时候"><a href="#2-3-陷阱-this-在内部函数中的时候" class="headerlink" title="2.3 陷阱:this 在内部函数中的时候"></a>2.3 陷阱:<code>this</code> 在内部函数中的时候</h4><p>函数调用的一个常见陷阱是，认为<code>this</code>在内部函数中的情况与外部函数中的情况相同。</p>
<p>正确地说，内部函数的上下文只依赖于它的调用类型，而不依赖于外部函数的上下文。</p>
<p>要将 <code>this</code> 设置为所需的值，可以通过 <code>.call()</code>或<code>.apply()</code>修改内部函数的上下文或使用<code>.bind()</code>创建绑定函数。</p>
<p>下面的例子是计算两个数的和：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const numbers = &#123;</span><br><span class="line">   numberA: 5,</span><br><span class="line">   numberB: 10,</span><br><span class="line">   sum: function() &#123;</span><br><span class="line">     console.log(this === numbers); // =&gt; true</span><br><span class="line">     function calculate() &#123;</span><br><span class="line">       console.log(this === numbers); // =&gt; false</span><br><span class="line">       return this.numberA + this.numberB;</span><br><span class="line">     &#125;</span><br><span class="line">     return calculate();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;;</span><br><span class="line">numbers.sum(); // =&gt; NaN</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p><code>sum()</code>是对象上的方法调用，所以<code>sum</code>中的上下文是<code>numbers</code>对象。<code>calculate</code>函数是在<code>sum</code>中定义的，你可能希望在<code>calculate()</code>中<code>this</code>也表示<code>number</code>对象。</p>
<p><code>calculate()</code>是一个函数调用(不是方法调用)，它将<code>this</code>作为全局对象<code>window</code>(非严格模下)。即使外部函数<code>sum</code>将上下文作为<code>number</code>对象，它在<code>calculate</code>里面没有影响。</p>
<p><code>sum()</code>的调用结果是<code>NaN</code>，不是预期的结果<code>5 + 10 = 15</code>，这都是因为没有正确调用<code>calculate</code>。</p>
<p>为了解决这个问题，<code>calculate</code>函数中上下文应该与 <code>sum</code> 中的一样，以便可以访问<code>numberA</code>和<code>numberB</code>属性。</p>
<p>一种解决方案是通过调用<code>calculator.call(this)</code>手动将<code>calculate</code>上下文更改为所需的上下文。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const numbers = &#123;</span><br><span class="line">   numberA: 5,</span><br><span class="line">   numberB: 10,</span><br><span class="line">   sum: function() &#123;</span><br><span class="line">     console.log(this === numbers); // =&gt; true</span><br><span class="line">     function calculate() &#123;</span><br><span class="line">       console.log(this === numbers); // =&gt; true</span><br><span class="line">       return this.numberA + this.numberB;</span><br><span class="line">     &#125;</span><br><span class="line">     // 使用 .call() 方法修改上下文</span><br><span class="line">     return calculate.call(this);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;;</span><br><span class="line">numbers.sum(); // =&gt; 15</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p><code>call(this)</code>像往常一样执行<code>calculate</code>函数，但 <code>call</code> 会把上下文修改为指定为第一个参数的值。</p>
<p>现在<code>this.numberA</code> + <code>this.numberB</code>相当于<code>numbers.numberA + numbers.numberB</code>。 该函数返回预期结果<code>5 + 10 = 15</code>。</p>
<p>另一种就是使用箭头函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const numbers = &#123;</span><br><span class="line">   numberA: 5,</span><br><span class="line">   numberB: 10,</span><br><span class="line">   sum: function() &#123;</span><br><span class="line">     console.log(this === numbers); // =&gt; true</span><br><span class="line">     const calculate = () =&gt; &#123;</span><br><span class="line">       console.log(this === numbers); // =&gt; true</span><br><span class="line">       return this.numberA + this.numberB;</span><br><span class="line">     &#125;</span><br><span class="line">     return calculate();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;;</span><br><span class="line">numbers.sum(); // =&gt; 15</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<h2 id="3-方法调用"><a href="#3-方法调用" class="headerlink" title="3.方法调用"></a>3.方法调用</h2><p>方法是存储在对象属性中的函数。例如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const myObject = &#123;</span><br><span class="line">  // helloFunction 是一个方法</span><br><span class="line">  helloFunction: function() &#123;</span><br><span class="line">    return &#x27;Hello World!&#x27;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">const message = myObject.helloFunction();</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p><code>helloFunction</code>是<code>myObject</code>的一个方法，要调用该方法，可以这样子调用 :<code>myObject.helloFunction</code>。</p>
<p>当一个表达式以属性访问的形式执行时，执行的是方法调用，它相当于以个函数接着(，一组用逗号分隔的参数以及)。</p>
<p>利用前面的例子，<code>myObject.helloFunction()</code>是对象<code>myObject</code>上的一个<code>helloFunction</code>的方法调用。<code>[1, 2].join(&#39;,&#39;)</code> 或<code>/\s/.test(&#39;beautiful world&#39;)</code>也被认为是方法调用。</p>
<p>区分函数调用和方法调用非常重要，因为它们是不同的类型。主要区别在于方法调用需要一个属性访问器形式来调用函数(<code>obj.myFunc()</code>或<code>obj[&#39;myFunc&#39;]()</code>)，而函数调用不需要(<code>myFunc()</code>)。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[&#x27;Hello&#x27;, &#x27;World&#x27;].join(&#x27;, &#x27;); // 方法调用</span><br><span class="line">(&#123; ten: function() &#123; return 10; &#125; &#125;).ten(); // 方法调用</span><br><span class="line">const obj = &#123;&#125;;</span><br><span class="line">obj.myFunction = function() &#123;</span><br><span class="line">  return new Date().toString();</span><br><span class="line">&#125;;</span><br><span class="line">obj.myFunction(); // 方法调用</span><br><span class="line"></span><br><span class="line">const otherFunction = obj.myFunction;</span><br><span class="line">otherFunction();     // 函数调用</span><br><span class="line">parseFloat(&#x27;16.60&#x27;); // 函数调用</span><br><span class="line">isNaN(0);            // 函数调用</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p>理解函数调用和方法调用之间的区别有助于正确识别上下文。</p>
<h4 id="3-1-方法调用中-this-是肿么样"><a href="#3-1-方法调用中-this-是肿么样" class="headerlink" title="3.1 方法调用中 this 是肿么样"></a>3.1 方法调用中 this 是肿么样</h4><blockquote>
<p>在方法调用中，<code>this</code>是拥有这个方法的对象</p>
</blockquote>
<p>当调用对象上的方法时，<code>this</code>就变成了对象本身。</p>
<p><img src="https://user-gold-cdn.xitu.io/2019/8/13/16c884d308092da0?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p>
<p>创建一个对象，该对象有一个递增数字的方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const calc = &#123;</span><br><span class="line">  num: 0,</span><br><span class="line">  increment: function() &#123;</span><br><span class="line">    console.log(this === calc); // =&gt; true</span><br><span class="line">    this.num += 1;</span><br><span class="line">    return this.num;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">// method invocation. this is calc</span><br><span class="line">calc.increment(); // =&gt; 1</span><br><span class="line">calc.increment(); // =&gt; 2</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p>调用<code>calc.increment()</code>使<code>increment</code>函数的上下文成为<code>calc</code>对象。所以使用<code>this.num</code>来增加<code>num</code>属性是有效的。</p>
<p>再来看看另一个例子。JS对象从原型继承一个方法，当在对象上调用继承的方法时，调用的上下文仍然是对象本身</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const myDog = Object.create(&#123;</span><br><span class="line">  sayName: function() &#123;</span><br><span class="line">     console.log(this === myDog); // =&gt; true</span><br><span class="line">     return this.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">myDog.name = &#x27;Milo&#x27;;</span><br><span class="line">// 方法调用 this 指向 myDog</span><br><span class="line">myDog.sayName(); // =&gt; &#x27;Milo&#x27;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p><code>Object.create()</code>创建一个新对象<code>myDog</code>，并根据第一个参数设置其原型。<code>myDog</code>对象继承<code>sayName</code>方法。</p>
<p>执行<code>myDog. sayname()</code>时，<code>myDog</code>是调用的上下文。</p>
<p>在EC6 <code>class</code> 语法中，方法调用上下文也是实例本身</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Planet &#123;</span><br><span class="line">  constructor(name) &#123;</span><br><span class="line">    this.name = name;    </span><br><span class="line">  &#125;</span><br><span class="line">  getName() &#123;</span><br><span class="line">    console.log(this === earth); // =&gt; true</span><br><span class="line">    return this.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">var earth = new Planet(&#x27;Earth&#x27;);</span><br><span class="line">// method invocation. the context is earth</span><br><span class="line">earth.getName(); // =&gt; &#x27;Earth&#x27;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<h4 id="3-2-陷阱-将方法与其对象分离"><a href="#3-2-陷阱-将方法与其对象分离" class="headerlink" title="3.2 陷阱:将方法与其对象分离"></a>3.2 陷阱:将方法与其对象分离</h4><p>方法可以从对象中提取到一个单独的变量<code>const alone = myObj.myMethod</code>。当方法单独调用时，与原始对象<code>alone()</code>分离，你可能认为当前的<code>this</code>就是定义方法的对象<code>myObject</code>。</p>
<p>如果方法在没有对象的情况下调用，那么函数调用就会发生，此时的<code>this</code>指向全局对象<code>window</code>严格模式下是<code>undefined</code>。</p>
<p>下面的示例定义了<code>Animal</code>构造函数并创建了它的一个实例:<code>myCat</code>。然后<code>setTimout()</code>在1秒后打印<code>myCat</code>对象信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function Animal(type, legs) &#123;</span><br><span class="line">  this.type = type;</span><br><span class="line">  this.legs = legs;  </span><br><span class="line">  this.logInfo = function() &#123;</span><br><span class="line">    console.log(this === myCat); // =&gt; false</span><br><span class="line">    console.log(&#x27;The &#x27; + this.type + &#x27; has &#x27; + this.legs + &#x27; legs&#x27;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">const myCat = new Animal(&#x27;Cat&#x27;, 4);</span><br><span class="line">// The undefined has undefined legs</span><br><span class="line">setTimeout(myCat.logInfo, 1000);</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p>你可能认为<code>setTimout</code>调用<code>myCat.loginfo()</code>时，它应该打印关于<code>myCat</code>对象的信息。</p>
<p>不幸的是，方法在作为参数传递时与对象是分离，<code>setTimout(myCat.logInfo)</code>以下情况是等效的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">setTimout(myCat.logInfo);</span><br><span class="line">// 等价于</span><br><span class="line">const extractedLogInfo = myCat.logInfo;</span><br><span class="line">setTimout(extractedLogInfo);</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p>将分离的<code>logInfo</code>作为函数调用时，<code>this</code>是全局 <code>window</code>,所以对象信息没有正确地打印。</p>
<p>函数可以使用<code>.bind()</code>方法与对象绑定,就可以解决 <code>this</code> 指向的问题。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function Animal(type, legs) &#123;</span><br><span class="line">  this.type = type;</span><br><span class="line">  this.legs = legs;  </span><br><span class="line">  this.logInfo = function() &#123;</span><br><span class="line">    console.log(this === myCat); // =&gt; true</span><br><span class="line">    console.log(&#x27;The &#x27; + this.type + &#x27; has &#x27; + this.legs + &#x27; legs&#x27;);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line">const myCat = new Animal(&#x27;Cat&#x27;, 4);</span><br><span class="line">// logs &quot;The Cat has 4 legs&quot;</span><br><span class="line">setTimeout(myCat.logInfo.bind(myCat), 1000);</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p><code>myCat.logInfo.bind(myCat)</code>返回一个新函数，它的执行方式与<code>logInfo</code>完全相同，但是此时的 <code>this</code> 指向 <code>myCat</code>，即使在函数调用中也是如此。</p>
<p>另一种解决方案是将<code>logInfo()</code>方法定义为一个箭头函数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function Animal(type, legs) &#123;</span><br><span class="line">  this.type = type;</span><br><span class="line">  this.legs = legs;  </span><br><span class="line">  this.logInfo = () =&gt; &#123;</span><br><span class="line">    console.log(this === myCat); // =&gt; true</span><br><span class="line">    console.log(&#x27;The &#x27; + this.type + &#x27; has &#x27; + this.legs + &#x27; legs&#x27;);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line">const myCat = new Animal(&#x27;Cat&#x27;, 4);</span><br><span class="line">// logs &quot;The Cat has 4 legs&quot;</span><br><span class="line">setTimeout(myCat.logInfo, 1000);</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<h2 id="4-构造函数调用"><a href="#4-构造函数调用" class="headerlink" title="4. 构造函数调用"></a>4. 构造函数调用</h2><p>当<code>new</code>关键词紧接着函数对象,(,一组逗号分隔的参数以及)时被调用，执行的是构造函数调用如<code>new RegExp(&#39;\\d&#39;)</code>。</p>
<p>声明了一个<code>Country</code>函数，并且将它作为一个构造函数调用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function Country(name, traveled) &#123;</span><br><span class="line">   this.name = name ? name : &#x27;United Kingdom&#x27;;</span><br><span class="line">   this.traveled = Boolean(traveled);</span><br><span class="line">&#125;</span><br><span class="line">Country.prototype.travel = function() &#123;</span><br><span class="line">  this.traveled = true;</span><br><span class="line">&#125;;</span><br><span class="line">// 构造函数调用</span><br><span class="line">const france = new Country(&#x27;France&#x27;, false);</span><br><span class="line">// 构造函数调用</span><br><span class="line">const unitedKingdom = new Country;</span><br><span class="line"></span><br><span class="line">france.travel(); // Travel to France</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p><code>new Country(&#39;France&#39;, false)</code>是<code>Country</code>函数的构造函数调用。它的执行结果是一个<code>name</code>属性为<code>&#39;France&#39;</code>的新的对象。 如果这个构造函数调用时不需要参数，那么括号可以省略：<code>new Country</code>。</p>
<p>从ES6开始，JS 允许用<code>class</code>关键词来定义构造函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class City &#123;</span><br><span class="line">  constructor(name, traveled) &#123;</span><br><span class="line">    this.name = name;</span><br><span class="line">    this.traveled = false;</span><br><span class="line">  &#125;</span><br><span class="line">  travel() &#123;</span><br><span class="line">    this.traveled = true;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">// Constructor invocation</span><br><span class="line">const paris = new City(&#x27;Paris&#x27;, false);</span><br><span class="line">paris.travel();</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p><code>new City(&#39;Paris&#39;)</code>是构造函数调用。这个对象的初始化由这个类中一个特殊的方法<code>constructor</code>来处理。其中，<code>this</code>指向新创建的对象。</p>
<p>构造函数创建了一个新的空的对象，它从构造函数的原型继承了属性。构造函数的作用就是去初始化这个对象。 可能你已经知道了，在这种类型的调用中，上下文指向新创建的实例。</p>
<p>当属性访问<code>myObject.myFunction</code>前面有一个<code>new</code>关键词时，JS会执行构造函数调用而不是原来的方法调用。</p>
<p>例如<code>new myObject.myFunction()</code>：它相当于先用属性访问把方法提取出来<code>extractedFunction = myObject.myFunction</code>，然后利用把它作为构造函数创建一个新的对象： <code>new extractedFunction()</code>。</p>
<h2 id="4-1-构造函数中的-this"><a href="#4-1-构造函数中的-this" class="headerlink" title="4.1. 构造函数中的 this"></a>4.1. 构造函数中的 this</h2><blockquote>
<p>在构造函数调用中 this 指向新创建的对象</p>
</blockquote>
<p>构造函数调用的上下文是新创建的对象。它利用构造函数的参数初始化新的对象，设定属性的初始值，添加事件处理函数等等。</p>
<p><img src="https://user-gold-cdn.xitu.io/2019/8/13/16c884d774863ecb?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p>
<p>来看看下面示例中的上下文</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function Foo () &#123;</span><br><span class="line">  console.log(this instanceof Foo); // =&gt; true</span><br><span class="line">  this.property = &#x27;Default Value&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">// Constructor invocation</span><br><span class="line">const fooInstance = new Foo();</span><br><span class="line">fooInstance.property; // =&gt; &#x27;Default Value&#x27;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p><code>new Foo()</code> 正在进行构造函数调用，其中上下文是<code>fooInstance</code>。 在<code>Foo</code>内部初始化对象：<code>this.property</code>被赋值为默认值。</p>
<p>同样的情况在用<code>class</code>语法（从ES6起）时也会发生，唯一的区别是初始化在<code>constructor</code>方法中进行:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Bar &#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    console.log(this instanceof Bar); // =&gt; true</span><br><span class="line">    this.property = &#x27;Default Value&#x27;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">// Constructor invocation</span><br><span class="line">const barInstance = new Bar();</span><br><span class="line">barInstance.property; // =&gt; &#x27;Default Value&#x27;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<h4 id="4-2-陷阱-忘了使用-new"><a href="#4-2-陷阱-忘了使用-new" class="headerlink" title="4.2. 陷阱: 忘了使用 new"></a>4.2. 陷阱: 忘了使用 new</h4><p>有些JS函数不是只在作为构造函数调用的时候才创建新的对象，作为函数调用时也会，例如<code>RegExp</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var reg1 = new RegExp(&#x27;\\w+&#x27;);</span><br><span class="line">var reg2 = RegExp(&#x27;\\w+&#x27;);</span><br><span class="line"></span><br><span class="line">reg1 instanceof RegExp;      // =&gt; true</span><br><span class="line">reg2 instanceof RegExp;      // =&gt; true</span><br><span class="line">reg1.source === reg2.source; // =&gt; true</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p>当执行的 <code>new RegExp(&#39;\\w+&#39;)</code>和<code>RegExp(&#39;\\w+&#39;)</code>时，JS 会创建等价的正则表达式对象。</p>
<p>使用函数调用来创建对象存在一个潜在的问题(不包括工厂模式)，因为一些构造函数可能会忽略在缺少<code>new</code>关键字时初始化对象的逻辑。</p>
<p>下面的例子说明了这个问题：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function Vehicle(type, wheelsCount) &#123;</span><br><span class="line">  this.type = type;</span><br><span class="line">  this.wheelsCount = wheelsCount;</span><br><span class="line">  return this;</span><br><span class="line">&#125;</span><br><span class="line">// 忘记使用 new</span><br><span class="line">const car = Vehicle(&#x27;Car&#x27;, 4);</span><br><span class="line">car.type;       // =&gt; &#x27;Car&#x27;</span><br><span class="line">car.wheelsCount // =&gt; 4</span><br><span class="line">car === window  // =&gt; true</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p><code>Vehicle</code>是一个在上下文对象上设置<code>type</code>和<code>wheelsCount</code>属性的函数。</p>
<p>当执行<code>Vehicle(&#39;Car&#39;， 4)</code>时，返回一个对象<code>Car</code>，它具有正确的属性:<code>Car.type</code> 为 <code>Car</code>和<code>Car.wheelsCount</code> 为<code>4</code>，你可能认为它很适合创建和初始化新对象。</p>
<p>然而，在函数调用中，<code>this</code>是<code>window</code>对象 ，因此 <code>Vehicle（&#39;Car&#39;，4）</code>在 <code>window</code> 对象上设置属性。 显然这是错误，它并没有创建新对象。</p>
<p>当你希望调用构造函数时，确保你使用了<code>new</code>操作符：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function Vehicle(type, wheelsCount) &#123;</span><br><span class="line">  if (!(this instanceof Vehicle)) &#123;</span><br><span class="line">    throw Error(&#x27;Error: Incorrect invocation&#x27;);</span><br><span class="line">  &#125;</span><br><span class="line">  this.type = type;</span><br><span class="line">  this.wheelsCount = wheelsCount;</span><br><span class="line">  return this;</span><br><span class="line">&#125;</span><br><span class="line">// Constructor invocation</span><br><span class="line">const car = new Vehicle(&#x27;Car&#x27;, 4);</span><br><span class="line">car.type               // =&gt; &#x27;Car&#x27;</span><br><span class="line">car.wheelsCount        // =&gt; 4</span><br><span class="line">car instanceof Vehicle // =&gt; true</span><br><span class="line"></span><br><span class="line">// Function invocation. Throws an error.</span><br><span class="line">const brokenCar = Vehicle(&#x27;Broken Car&#x27;, 3);</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p><code>new Vehicle(&#39;Car&#39;，4)</code> 运行正常：创建并初始化一个新对象，因为构造函数调用中时使用了<code>new</code>关键字。</p>
<p>在构造函数里添加了一个验证<code>this instanceof Vehicle</code>来确保执行的上下文是正确的对象类型。如果<code>this</code>不是<code>Vehicle</code>，那么就会报错。这样，如果执行<code>Vehicle(&#39;Broken Car&#39;, 3)</code>(没有<code>new</code>)，我们会得到一个异常：<code>Error: Incorrect invocation</code>。</p>
<h2 id="5-隐式调用"><a href="#5-隐式调用" class="headerlink" title="5. 隐式调用"></a>5. 隐式调用</h2><p>使用<code>myFun.call()</code>或<code>myFun.apply()</code>方法调用函数时，执行的是隐式调用。</p>
<p>JS中的函数是第一类对象，这意味着函数就是对象，对象的类型为<code>Function</code>。从函数对象的方法列表中，<code>.call()</code>和<code>.apply()</code>用于调用具有可配置上下文的函数。</p>
<ul>
<li>方法 <code>.call(thisArg[, arg1[, arg2[, ...]]])</code>将接受的第一个参数<code>thisArg</code>作为调用时的上下文，<code>arg1, arg2, ...</code>这些则作为参数传入被调用的函数。</li>
<li>方法<code>.apply(thisArg, [args])</code>将接受的第一个参数<code>thisArg</code>作为调用时的上下文，并且接受另一个类似数组的对象<code>[arg1, arg2, ...]</code>作为被调用函数的参数传入。</li>
</ul>
<p>下面是隐式调用的例子</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function increment(number) &#123;</span><br><span class="line">  return ++number;  </span><br><span class="line">&#125;</span><br><span class="line">increment.call(undefined, 10);    // =&gt; 11</span><br><span class="line">increment.apply(undefined, [10]); // =&gt; 11</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p><code>increment.call()</code>和<code>increment.apply()</code>都用参数<code>10</code>调用了这个自增函数。</p>
<p>两者的区别是<code>.call()</code>接受一组参数，例如<code>myFunction.call(thisValue, &#39;value1&#39;, &#39;value2&#39;)</code>。而<code>.apply()</code>接受的一组参数必须是一个类似数组的对象，例如<code>myFunction.apply(thisValue, [&#39;value1&#39;, &#39;value2&#39;]</code>)。</p>
<h4 id="5-1-隐式调用中的this"><a href="#5-1-隐式调用中的this" class="headerlink" title="5.1. 隐式调用中的this"></a>5.1. 隐式调用中的this</h4><blockquote>
<p>在隐式调用.call()或.apply()中，this是第一个参数</p>
</blockquote>
<p>很明显，在隐式调用中，<code>this</code>作为第一个参数传递给<code>.call()</code>或<code>.apply()</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var rabbit = &#123; name: &#x27;White Rabbit&#x27; &#125;;</span><br><span class="line">function concatName(string) &#123;</span><br><span class="line">  console.log(this === rabbit); // =&gt; true</span><br><span class="line">  return string + this.name;</span><br><span class="line">&#125;</span><br><span class="line">concatName.call(rabbit, &#x27;Hello &#x27;);  // =&gt; &#x27;Hello White Rabbit&#x27;</span><br><span class="line">concatName.apply(rabbit, [&#x27;Bye &#x27;]); // =&gt; &#x27;Bye White Rabbit&#x27;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p>当应该使用特定上下文执行函数时，隐式调用非常有用。例如为了解决方法调用时，<code>this</code>总是<code>window</code>或严格模式下的<code>undefined</code>的上下文问题。隐式调用可以用于模拟在一个对象上调用某个方法。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function Runner(name) &#123;</span><br><span class="line">  console.log(this instanceof Rabbit); // =&gt; true</span><br><span class="line">  this.name = name;  </span><br><span class="line">&#125;</span><br><span class="line">function Rabbit(name, countLegs) &#123;</span><br><span class="line">  console.log(this instanceof Rabbit); // =&gt; true</span><br><span class="line">  Runner.call(this, name);</span><br><span class="line">  this.countLegs = countLegs;</span><br><span class="line">&#125;</span><br><span class="line">const myRabbit = new Rabbit(&#x27;White Rabbit&#x27;, 4);</span><br><span class="line">myRabbit; // &#123; name: &#x27;White Rabbit&#x27;, countLegs: 4 &#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p><code>Rabbit</code>中的<code>Runner.call(this, name)</code>隐式调用了父类的函数来初始化这个对象。</p>
<h2 id="6-绑定函数"><a href="#6-绑定函数" class="headerlink" title="6. 绑定函数"></a>6. 绑定函数</h2><p>绑定函数是与对象连接的函数。通常使用<code>.bind()</code>方法从原始函数创建。原始函数和绑定函数共享相同的代码和作用域，但执行时上下文不同。</p>
<p>方法 <code>myFunc.bind(thisArg[, arg1[, arg2[, ...]]])</code>接受第一个参数<code>thisArg</code>作为绑定函数执行时的上下文，并且它接受一组可选的参数 <code>arg1, arg2, ...</code>作为被调用函数的参数。它返回一个绑定了<code>thisArg</code>的新函数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function multiply(number) &#123;</span><br><span class="line">  &#x27;use strict&#x27;;</span><br><span class="line">  return this * number;</span><br><span class="line">&#125;</span><br><span class="line">const double = multiply.bind(2);</span><br><span class="line"></span><br><span class="line">double(3);  // =&gt; 6</span><br><span class="line">double(10); // =&gt; 20</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p><code>bind(2)</code>返回一个新的函数对象<code>double</code>，<code>double</code> 绑定了数字<code>2</code>。<code>multiply</code>和<code>double</code>具有相同的代码和作用域。</p>
<p>与<code>.apply()</code>和<code>.call()</code> 方法相反，它不会立即调用该函数，<code>.bind()</code>方法只返回一个新函数，在之后被调用，只是this<code>已经</code>被提前设置好了。</p>
<h4 id="6-1-绑定函数中的this"><a href="#6-1-绑定函数中的this" class="headerlink" title="6.1. 绑定函数中的this"></a>6.1. 绑定函数中的this</h4><blockquote>
<p>在调用绑定函数时，<code>this</code>是<code>.bind()</code>的第一个参数。</p>
</blockquote>
<p><code>.bind()</code>的作用是创建一个新函数，调用该函数时，将上下文作为传递给<code>.bind()</code>的第一个参数。它是一种强大的技术，使咱们可以创建一个定义了<code>this</code>值的函数。</p>
<p><img src="https://user-gold-cdn.xitu.io/2019/8/13/16c884dceeb04418?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p>
<p>来看看，如何在如何在绑定函数设置 <code>this</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const numbers = &#123;</span><br><span class="line">  array: [3, 5, 10],</span><br><span class="line">  getNumbers: function() &#123;</span><br><span class="line">    return this.array;    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">const boundGetNumbers = numbers.getNumbers.bind(numbers);</span><br><span class="line">boundGetNumbers(); // =&gt; [3, 5, 10]</span><br><span class="line">// Extract method from object</span><br><span class="line">const simpleGetNumbers = numbers.getNumbers;</span><br><span class="line">simpleGetNumbers(); // =&gt; undefined (严格模式下报错)</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p><code>numbers.getNumbers.bind(numbers)</code>返回绑定<code>numbers</code>对象<code>boundGetNumbers</code>函数。<code>boundGetNumbers()</code>调用时的<code>this</code>是<code>number</code>对象，并能够返回正确的数组对象。</p>
<p>可以将函数<code>numbers.getNumbers</code>提取到变量<code>simpleGetNumbers</code>中而不进行绑定。在之后的函数调用中<code>simpleGetNumbers()</code>的<code>this</code>是<code>window</code>(严格模式下为<code>undefined</code>)，不是<code>number</code>对象。在这个情况下，<code>simpleGetNumbers()</code>不会正确返回数组。</p>
<h4 id="6-2-紧密的上下文绑定"><a href="#6-2-紧密的上下文绑定" class="headerlink" title="6.2 紧密的上下文绑定"></a>6.2 紧密的上下文绑定</h4><p><code>.bind()</code>创建一个永久的上下文链接，并始终保持它。 一个绑定函数不能通过<code>.call()</code>或者<code>.apply()</code>来改变它的上下文，甚至是再次绑定也不会有什么作用。</p>
<p>只有绑定函数的构造函数调用才能更改已经绑定的上下文，但是很不推荐的做法(构造函数调用必须使用常规的非绑定函数)。</p>
<p>下面示例创建一个绑定函数，然后尝试更改其已预先定义好的上下文</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function getThis() &#123;</span><br><span class="line">  &#x27;use strict&#x27;;</span><br><span class="line">  return this;</span><br><span class="line">&#125;</span><br><span class="line">const one = getThis.bind(1);</span><br><span class="line">// 绑定函数调用</span><br><span class="line">one(); // =&gt; 1</span><br><span class="line">// 使用带有.apply()和.call()的绑定函数</span><br><span class="line">one.call(2);  // =&gt; 1</span><br><span class="line">one.apply(2); // =&gt; 1</span><br><span class="line">// 再次绑定</span><br><span class="line">one.bind(2)(); // =&gt; 1</span><br><span class="line">// 以构造函数的形式调用绑定函数</span><br><span class="line">new one(); // =&gt; Object</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p>只有<code>new one()</code>改变了绑定函数的上下文，其他方式的调用中<code>this</code>总是等于1。</p>
<h2 id="7-箭头函数"><a href="#7-箭头函数" class="headerlink" title="7. 箭头函数"></a>7. 箭头函数</h2><p>箭头函数用于以更短的形式声明函数，并在词法上绑定上下文。它可以这样使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const hello = (name) =&gt; &#123;</span><br><span class="line">  return &#x27;Hello &#x27; + name;</span><br><span class="line">&#125;;</span><br><span class="line">hello(&#x27;World&#x27;); // =&gt; &#x27;Hello World&#x27;</span><br><span class="line">// Keep only even numbers</span><br><span class="line">[1, 2, 5, 6].filter(item =&gt; item % 2 === 0); // =&gt; [2, 6]</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p>箭头函数语法简单，没有冗长的<code>function</code> 关键字。当箭头函数只有一条语句时，甚至可以省略<code>return</code>关键字。</p>
<p>箭头函数是匿名的，这意味着<code>name</code>属性是一个空字符串<code>&#39;&#39;</code>。这样它就没有词法上函数名(函数名对于递归、分离事件处理程序非常有用)</p>
<p>同时，跟常规函数相反，它也不提供<code>arguments</code>对象。但是，这在ES6中通过<code>rest parameters</code>修复了:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const sumArguments = (...args) =&gt; &#123;</span><br><span class="line">   console.log(typeof arguments); // =&gt; &#x27;undefined&#x27;</span><br><span class="line">   return args.reduce((result, item) =&gt; result + item);</span><br><span class="line">&#125;;</span><br><span class="line">sumArguments.name      // =&gt; &#x27;&#x27;</span><br><span class="line">sumArguments(5, 5, 6); // =&gt; 16</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<h4 id="7-1-箭头函数中的this"><a href="#7-1-箭头函数中的this" class="headerlink" title="7.1. 箭头函数中的this"></a>7.1. 箭头函数中的this</h4><blockquote>
<p>this 定义箭头函数的封闭上下文</p>
</blockquote>
<p>箭头函数不会创建自己的执行上下文，而是从定义它的外部函数中获取 <code>this</code>。 换句话说，箭头函数在词汇上绑定 <code>this</code>。</p>
<p><img src="https://user-gold-cdn.xitu.io/2019/8/13/16c884dfd5bf33de?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p>
<p>下面的例子说明了这个上下文透明的特性：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Point &#123;</span><br><span class="line">  constructor(x, y) &#123;</span><br><span class="line">    this.x = x;</span><br><span class="line">    this.y = y;</span><br><span class="line">  &#125;</span><br><span class="line">  log() &#123;</span><br><span class="line">    console.log(this === myPoint); // =&gt; true</span><br><span class="line">    setTimeout(()=&gt; &#123;</span><br><span class="line">      console.log(this === myPoint);      // =&gt; true</span><br><span class="line">      console.log(this.x + &#x27;:&#x27; + this.y); // =&gt; &#x27;95:165&#x27;</span><br><span class="line">    &#125;, 1000);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">const myPoint = new Point(95, 165);</span><br><span class="line">myPoint.log();</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p><code>setTimeout</code>使用与<code>log()</code>方法相同的上下文(<code>myPoint</code>对象)调用箭头函数。正如所见，箭头函数从定义它的函数继承上下文。</p>
<p>如果在这个例子里尝试用常规函数,它创建自己的上下文(<code>window</code>或严格模式下的<code>undefined</code>)。因此，要使相同的代码正确地使用函数表达式，需要手动绑定上下文:<code>setTimeout(function()&#123;…&#125;.bind(this))</code>。这很冗长，使用箭头函数是一种更简洁、更短的解决方案。</p>
<p>如果箭头函数在最顶层的作用域中定义（在任何函数之外），则上下文始终是全局对象（浏览器中的 window）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">onst getContext = () =&gt; &#123;</span><br><span class="line">   console.log(this === window); // =&gt; true</span><br><span class="line">   return this;</span><br><span class="line">&#125;;</span><br><span class="line">console.log(getContext() === window); // =&gt; true</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p>箭头函数一劳永逸地与词汇上下文绑定。 即使修改上下文，<code>this</code>也不能被改变：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const numbers = [1, 2];</span><br><span class="line">(function() &#123;  </span><br><span class="line">  const get = () =&gt; &#123;</span><br><span class="line">    console.log(this === numbers); // =&gt; true</span><br><span class="line">    return this;</span><br><span class="line">  &#125;;</span><br><span class="line">  console.log(this === numbers); // =&gt; true</span><br><span class="line">  get(); // =&gt; [1, 2]</span><br><span class="line">  // Use arrow function with .apply() and .call()</span><br><span class="line">  get.call([0]);  // =&gt; [1, 2]</span><br><span class="line">  get.apply([0]); // =&gt; [1, 2]</span><br><span class="line">  // Bind</span><br><span class="line">  get.bind([0])(); // =&gt; [1, 2]</span><br><span class="line">&#125;).call(numbers);</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p>无论如何调用箭头函数<code>get</code>，它总是保留词汇上下文<code>numbers</code>。 用其他上下文的隐式调用(通过 <code>get.call([0])</code>或<code>get.apply([0])</code>)或者重新绑定(通过<code>.bind()</code>)都不会起作用。</p>
<p>箭头函数不能用作构造函数。 将它作为构造函数调用(<code>new get()</code>)会抛出一个错误：<code>TypeError: get is not a constructor</code>。</p>
<h4 id="7-2-陷阱-用箭头函数定义方法"><a href="#7-2-陷阱-用箭头函数定义方法" class="headerlink" title="7.2. 陷阱: 用箭头函数定义方法"></a>7.2. 陷阱: 用箭头函数定义方法</h4><p>你可能希望使用箭头函数来声明一个对象上的方法。箭头函数的定义相比于函数表达式短得多：<code>(param) =&gt; &#123;...&#125; instead of function(param) &#123;..&#125;</code>。</p>
<p>来看看例子，用箭头函数在Period类上定义了<code>format()</code>方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function Period (hours, minutes) &#123;  </span><br><span class="line">  this.hours = hours;</span><br><span class="line">  this.minutes = minutes;</span><br><span class="line">&#125;</span><br><span class="line">Period.prototype.format = () =&gt; &#123;</span><br><span class="line">  console.log(this === window); // =&gt; true</span><br><span class="line">  return this.hours + &#x27; hours and &#x27; + this.minutes + &#x27; minutes&#x27;;</span><br><span class="line">&#125;;</span><br><span class="line">const walkPeriod = new Period(2, 30);  </span><br><span class="line">walkPeriod.format(); // =&gt; &#x27;undefined hours and undefined minutes&#x27;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p>由于<code>format</code>是一个箭头函数，并且在全局上下文（最顶层的作用域）中定义，因此 <code>this</code> 指向<code>window</code>对象。</p>
<p>即使<code>format</code>作为方法在一个对象上被调用如<code>walkPeriod.format()</code>，<code>window</code>仍然是这次调用的上下文。之所以会这样是因为箭头函数有静态的上下文，并不会随着调用方式的改变而改变。</p>
<p>该方法返回<code>&#39;undefined hours和undefined minutes&#39;</code>，这不是咱们想要的结果。</p>
<p>函数表达式解决了这个问题，因为常规函数确实能根据实际调用改变它的上下文：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function Period (hours, minutes) &#123;  </span><br><span class="line">  this.hours = hours;</span><br><span class="line">  this.minutes = minutes;</span><br><span class="line">&#125;</span><br><span class="line">Period.prototype.format = function() &#123;</span><br><span class="line">  console.log(this === walkPeriod); // =&gt; true</span><br><span class="line">  return this.hours + &#x27; hours and &#x27; + this.minutes + &#x27; minutes&#x27;;</span><br><span class="line">&#125;;</span><br><span class="line">const walkPeriod = new Period(2, 30);  </span><br><span class="line">walkPeriod.format(); // =&gt; &#x27;2 hours and 30 minutes&#x27;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p><code>walkPeriod.format()</code>是一个对象上的方法调用，它的上下文是<code>walkPeriod</code>对象。<code>this.hours</code>等于<code>2</code>，<code>this.minutes</code>等于<code>30</code>，所以这个方法返回了正确的结果：<code>&#39;2 hours and 30 minutes&#39;</code>。</p>
<p><strong>原文：dmitripavlutin.com/gentle-expl…</strong></p>
<p><strong>代码部署后可能存在的BUG没法实时知道，事后为了解决这些BUG，花了大量的时间进行log 调试，这边顺便给大家推荐一个好用的BUG监控工具 Fundebug。</strong></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>为函数调用对<code>this</code>影响最大，从现在开始不要问自己：</p>
<blockquote>
<p>this 是从哪里来的？</p>
</blockquote>
<p>而是要看看</p>
<blockquote>
<p>函数是怎么被调用的？</p>
</blockquote>
<p>对于箭头函数，需要想想</p>
<blockquote>
<p>在这个箭头函数被定义的地方，this是什么？</p>
</blockquote>
<p>这是处理<code>this</code>时的正确想法，它们可以让你免于头痛。</p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>snippet</tag>
      </tags>
  </entry>
  <entry>
    <title>linux config</title>
    <url>/2015/01/16/linux%20config/</url>
    <content><![CDATA[<h3 id="java-config"><a href="#java-config" class="headerlink" title="java config"></a>java config</h3><ul>
<li>Use <code>java -XshowSettings:properties</code> to show the java.library.path (and others) value.</li>
</ul>
<h3 id="native-lib-config"><a href="#native-lib-config" class="headerlink" title="native lib config"></a>native lib config</h3><ul>
<li><code>/lib</code> contain “essential” libraries that may be needed even in single-user (admin-only) mode and without /usr mounted</li>
<li><code>/usr/lib</code> are the libraries for the normal user-programs, that mostly can be found under /usr.</li>
<li><code>/usr/local/lib</code> are the libraries for locally installed programs and packages ie. things you’ve compiled and installed from source-packages yourself.</li>
</ul>
<h3 id="other"><a href="#other" class="headerlink" title="other"></a>other</h3><ul>
<li><code>/etc/environment</code>是设置整个系统的环境，而<code>/etc/profile</code>是设置所有用户的环境 </li>
</ul>
<h3 id="vmware-centos-ip-config"><a href="#vmware-centos-ip-config" class="headerlink" title="vmware centos ip config"></a>vmware centos ip config</h3><ol>
<li><code> vi /etc/sysconfig/network-scripts/ifcfg-ens33</code>,设置<code>ONBOOT=yes</code></li>
<li><code>service network restart </code></li>
<li><code>ip a</code>查看ip</li>
</ol>
<h3 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h3><ol>
<li><p>进入目录 /root/.ssh</p>
</li>
<li><p>执行命令：<code>ssh-keygen -t rsa</code>，会生成文件id_rsa和id_rsa.pub</p>
</li>
<li><p>将公钥写入文件 authorized_keys，<code>cat id_rsa.pub &gt;&gt; authorized_keys</code></p>
</li>
<li><p>在其它机器重复上述操作</p>
</li>
<li><p>将其它机器的公钥拷贝到第一台机器的authorized_keys文件中</p>
<p><code>ssh-copy-id -i id_rsa.pub 用户@ip</code></p>
<blockquote>
<p>注意，一定不要使用复制拷贝的方式把公钥复制到authorized_keys文件中，因为复制的时候会有特殊字符的加入，可以在vim中使用<code>:set list</code>进行验证</p>
</blockquote>
</li>
<li><p>将第一台机器的authorized_keys复制到其它机器上</p>
<p><code>scp authorized_keys 用户@ip:/路径/.ssh/</code></p>
<p>注意点</p>
</li>
</ol>
<ul>
<li>authorized_keys的权限是600，即读和写（如果默认不是的话，需要修改）</li>
</ul>
<h3 id="界面卡死"><a href="#界面卡死" class="headerlink" title="界面卡死"></a>界面卡死</h3><ol>
<li><p>使用 Ctrl+Alt+F1或F2或到F6，进入tty终端（输入用户名和密码）</p>
</li>
<li><p>执行命令注销桌面重新登录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo pkill Xorg</span><br><span class="line">或</span><br><span class="line">sudo restart lightdm</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>config</tag>
      </tags>
  </entry>
  <entry>
    <title>linux file command</title>
    <url>/2015/10/16/linux%20file/</url>
    <content><![CDATA[<h2 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h2><ul>
<li>去除包含特定字符串的行：</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grep -v &quot;pattern&quot; inputfile &gt; outputfile</span><br></pre></td></tr></table></figure>

<p>参数 <code>-v</code> 是用来反向匹配的选项，它会将不匹配指定模式的行输出</p>
<h2 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h2><p><strong>1.</strong> To delete all files in a directory except filename, type the command below:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm -v !(&quot;filename&quot;)</span><br></pre></td></tr></table></figure>

<p><strong>2.</strong> To delete all files with the exception of <strong>filename1</strong> and <strong>filename2</strong>:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm -v !(&quot;filename1&quot;|&quot;filename2&quot;) </span><br></pre></td></tr></table></figure>

<p><strong>3.</strong> The example below shows how to remove all files other than all <code>.zip</code> files interactively:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm -i !(*.zip)</span><br></pre></td></tr></table></figure>

<p><strong>4.</strong> Next, you can delete all files in a directory apart from all <code>.zip</code> and <code>.odt</code> files as follows, while displaying what is being done:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm -v !(*.zip|*.odt)</span><br></pre></td></tr></table></figure>

<p><strong>5.</strong> 删除指定目录下指定日期的目录，可以使用 <code>find</code> 和 <code>rm</code> 命令来删除指定目录下指定日期的目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find /path/to/directory -type d -mtime +365 -exec rm -rf &#123;&#125; \;</span><br></pre></td></tr></table></figure>

<p><strong>6</strong>. 删除指定目录下前一个星期的文件，可以使用 <code>find</code> 和 <code>rm</code> 命令来删除指定目录下指定日期的文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find /path/to/directory -type f -mtime +7 -exec rm &#123;&#125; \;</span><br></pre></td></tr></table></figure>

<p>or</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find /path/to/directory -type f -mtime +7 -delete</span><br></pre></td></tr></table></figure>

<ul>
<li><p>可指定相关名称</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find /var/log -name &quot;*.log&quot; -type f -mtime +30 </span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="AWK"><a href="#AWK" class="headerlink" title="AWK"></a>AWK</h2><ul>
<li><p><code>awk -v FS=&quot;输入分隔符&quot; -v OFS=&#39;输出分隔符&#39; &#39;&#123;if($1==$5) print $1,$5,$10&#125;&#39; filename</code></p>
<p>查找filename文件（文件中列的分隔符为“输入分隔符”）中，每一行第一列和第五列相等的行，并输出第一列、第五列、第十列，切输出字段分隔符为“输出分隔符”。如果不配置FS和OFS，那么输入输出分隔符均默认为空</p>
</li>
<li><p><a href="https://www.commandlinefu.com/commands/view/6872/exclude-a-column-with-awk">exclude a column with awk</a>, 比如打印除第5列的其它所有列</p>
<p>awk ‘{ $5=””; print }’ file</p>
</li>
</ul>
<h2 id="统计文件行数"><a href="#统计文件行数" class="headerlink" title="统计文件行数"></a>统计文件行数</h2><p>语法：wc [选项] 文件…</p>
<p>说明：该命令统计给定文件中的字节数、字数、行数。如果没有给出文件名，则从标准输入读取。wc同时也给出所有指定文件的总统计数。字是由空格字符区分开的最大字符串。</p>
<p>该命令各选项含义如下：</p>
<p>　　- c 统计字节数。</p>
<p>　　- l 统计行数。</p>
<p>　　- w 统计字数。</p>
<p>这些选项可以组合使用。</p>
<h2 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h2><p>使文件可以直接执行的命令：chmod +x filename</p>
<p>使所有用户对目录都有读写权限：sudo chmod ugo+rw /opt</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">r=4，w=2，x=1</span><br><span class="line">若要rwx属性则4+2+1=7；</span><br><span class="line">若要rw-属性则4+2=6；</span><br><span class="line">若要r-x属性则4+1=7</span><br></pre></td></tr></table></figure>

<h2 id="文件分割"><a href="#文件分割" class="headerlink" title="文件分割"></a>文件分割</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">split [-a] [-b] [-C] [-l] [要分割的文件名] [分割后的文件名前缀]</span><br><span class="line">–version 显示版本信息</span><br><span class="line">– 或者-l,指定每多少行切割一次，用于文本文件分割</span><br><span class="line">-b 指定切割文件大小,单位 m 或 k</span><br><span class="line">-C 与-b类似，但尽量维持每行完整性</span><br><span class="line">-d 使用数字而不是字母作为后缀名</span><br><span class="line">-a 指定后缀名的长度，默认为2位</span><br></pre></td></tr></table></figure>

<p>将多个分割的文件进行合并</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat files_name_1 files_name_2 files_name_3 &gt; files_name</span><br></pre></td></tr></table></figure>

<ul>
<li><p>按行数分割</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">split -l 10000 bigfile.txt smallfile</span><br></pre></td></tr></table></figure>

<blockquote>
<p>分割之后的文件不影响读取</p>
</blockquote>
</li>
<li><p>统计某个文件中的字符数，需要注意的是，如果文件中包含多字节字符（如中文），则每个字符将被视为多个字符来计算。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wc -c /path/to/file</span><br></pre></td></tr></table></figure>

<p>在这基础上，统计内容所占KB</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wc -c /path/to/file | awk &#x27;&#123;print $1/1024&#125;&#x27;</span><br></pre></td></tr></table></figure></li>
<li><p>awk对文件按照指定多列的内容进行排序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">awk &#x27;&#123;print $0&#125;&#x27; head_100.csv | sort -t &#x27;,&#x27; -k2,3 &gt; head_100_sort.csv</span><br></pre></td></tr></table></figure>

<blockquote>
<p>并用<code>sort</code>命令根据指定列的内容进行排序。<code>-t</code>选项表示使用制表符作为字段分隔符，<code>[列数]</code>是你要排序的那一列，“-k1,2”表示先按照第1列排序，若第1列相同则按照第2列排序。</p>
</blockquote>
</li>
<li><p>统计字符的长度</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo 字符 | wc -m</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="markdown"><a href="#markdown" class="headerlink" title="markdown"></a>markdown</h2><ul>
<li>markdown文件转word文件<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pandoc -o output.docx -f markdown -t docx filename.md</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="find"><a href="#find" class="headerlink" title="find"></a>find</h2><ul>
<li>查找具体文件    </li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find / -name 文件名称</span><br></pre></td></tr></table></figure>

<ul>
<li>查找指定用户的文件</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find ./* -user 用户名</span><br></pre></td></tr></table></figure>

<ul>
<li>查找指定用户组的文件</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find ./* -group 用户组</span><br></pre></td></tr></table></figure>

<ul>
<li><p>匹配查找除了某个特定文件类型以外的所有文件，并将结果传递给 <code>rm</code> 命令进行删除</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find . ! -name &quot;*.txt&quot; -delete</span><br></pre></td></tr></table></figure></li>
<li><p>匹配多个</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find . ! \( -name &quot;log4j*&quot; -o -name &quot;flink*&quot; \)</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h2><p><code>ls -lh</code>以可读性G、M查看文件的大小</p>
<h2 id="格式化json"><a href="#格式化json" class="headerlink" title="格式化json"></a>格式化json</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &#x27;&#123;&quot;kind&quot;: &quot;Service&quot;, &quot;apiVersion&quot;: &quot;v1&quot;, &quot;status&quot;: &#123;&quot;loadBalancer&quot;: true&#125;&#125;&#x27;|jq .</span><br></pre></td></tr></table></figure>

<h2 id="SED"><a href="#SED" class="headerlink" title="SED"></a>SED</h2><ul>
<li><p>替换字符</p>
<p>linux环境：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sed -i &#x27;s/Search_String/Replacement_String/g&#x27; Input_File</span><br></pre></td></tr></table></figure>

<p>mac环境（需要设置备份，以防文件损坏）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sed -i .bak &#x27;s/Search_String/Replacement_String/g&#x27; Input_File</span><br></pre></td></tr></table></figure></li>
<li><p>删除指定多行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sed -i &#x27;1,5d&#x27; example.txt</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="转换文件编码格式"><a href="#转换文件编码格式" class="headerlink" title="转换文件编码格式"></a>转换文件编码格式</h2><ul>
<li>查看编码</li>
</ul>
<p>首先我们来看看在 Linux 系统中如何查看文件的编码格式，可以在 vim 中使用如下命令查看：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">:set fileencoding</span><br></pre></td></tr></table></figure>

<p>输出可能是这样</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fileencoding=utf-81</span><br></pre></td></tr></table></figure>

<p>也可以使用 <code>file</code> 和 <code>identify</code> 命令查看。</p>
<ul>
<li>转换编码</li>
</ul>
<p>然后使用 <code>iconv</code> 进行编码格式的转换，比如将一个 utf-8 编码的文件转换成 GBK 编码，命令如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> iconv -f UTF-8 -t GBK input.file -o output.file</span></span><br></pre></td></tr></table></figure>

<ul>
<li>如果遇到]iconv: 未知xxxx处的非法输入序列,一种解决方法是加入 -c选项：忽略无效字符<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">iconv -c  -f gb2312 -t utf8 test.txt -o output.file</span><br></pre></td></tr></table></figure></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">iconv -f gb18030 -t UTF-8 input.file -o output.file</span><br><span class="line"></span><br><span class="line">gb18030</span><br></pre></td></tr></table></figure>

<h2 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h2><ul>
<li><p>c – Creates a new .tar archive file.</p>
</li>
<li><p>x — to untar or extract a tar file</p>
</li>
<li><p>v – Verbosely show the .tar file progress.</p>
</li>
<li><p>f – File name type of the archive file.</p>
</li>
<li><p>z — gzip archive file</p>
</li>
<li><p>j —  bz2 feature compress and create archive file</p>
</li>
<li><p>t — to list the contents of tar archive file</p>
</li>
</ul>
<h2 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h2><p>用zip命令对文件加密压缩和解压</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zip -re filename.zip filename </span><br><span class="line">回车，输入2次密码</span><br></pre></td></tr></table></figure>

<h2 id="批量替换文件名"><a href="#批量替换文件名" class="headerlink" title="批量替换文件名"></a>批量替换文件名</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rename -n -e <span class="string">&#x27;s/待替换字符串/替换字符串/&#x27;</span>  *.png</span><br></pre></td></tr></table></figure>

<h2 id="查找指定目录下的文件内容"><a href="#查找指定目录下的文件内容" class="headerlink" title="查找指定目录下的文件内容"></a>查找指定目录下的文件内容</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grep -rn &quot;info&quot; *</span><br></pre></td></tr></table></figure>

<h2 id="查询大文件里面的内容"><a href="#查询大文件里面的内容" class="headerlink" title="查询大文件里面的内容"></a>查询大文件里面的内容</h2><p>格式：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// 使用管道符可以实现过滤既满足时间又满足ip的行。</span><br><span class="line">grep -n -e “10.198.2.133” prometheus.log |grep -e “2019-09-24”|head -n 3</span><br></pre></td></tr></table></figure>

<p>参数解释：<br>-n 参数的作用是显示查找结果的所在行号<br>-e 参数表示我们需要搜索的关键字，多个关键字就用多个 -e 参数<br>prometheus.log 表示待搜索的大日志文件<br>head -n 3 表示显示前面查询结果的前三条记录</p>
<h2 id="排除指定内容"><a href="#排除指定内容" class="headerlink" title="排除指定内容"></a>排除指定内容</h2><p>要仅打印与搜索模式不匹配的行，可以使用grep的<code>-v</code>或<code>--invert-match</code>选项。进行反转的匹配。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grep -v xxx</span><br></pre></td></tr></table></figure>



<h2 id="wget"><a href="#wget" class="headerlink" title="wget"></a>wget</h2><ul>
<li>下载指定目录</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -r --no-parent http://abc.tamu.edu/projects/tzivi/repository/revisions/2/raw/tzivi/</span><br></pre></td></tr></table></figure>



<h2 id="软连接"><a href="#软连接" class="headerlink" title="软连接"></a>软连接</h2><ul>
<li><p>创建软连接</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ln  -s  [源文件或目录]  [目标文件或目录]</span><br></pre></td></tr></table></figure></li>
<li><p>查找指定目录的软连接文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls -alR | grep ^l</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sort --parallel=8 -S 4G -T /data -k2,3 largefile.txt &gt; sorted_file.txt</span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用了8个线程并行排序，并且sort命令在排序过程中最多使用4GB的内存缓冲区。我们还使用了<code>-T /data</code>选项，指定sort命令使用/data目录来存储临时文件，而不是默认路径。</p>
<p>“-k1,2”表示先按照第1列排序，若第1列相同则按照第2列排序。</p>
</blockquote>
<h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><ul>
<li><p>Base64</p>
<ul>
<li><p>解码</p>
<p><code>echo [base64-encoded-string] | base64 --decode</code></p>
</li>
<li><p>编码</p>
<p><code>echo &quot;your string&quot; | base64</code></p>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>command</tag>
      </tags>
  </entry>
  <entry>
    <title>linux network</title>
    <url>/2017/05/09/linux%20network/</url>
    <content><![CDATA[<h2 id="PORT"><a href="#PORT" class="headerlink" title="PORT"></a>PORT</h2><ul>
<li><p>Check the listening ports</p>
<p>Run any one of the following command:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo lsof -i -P -n | grep LISTEN </span><br><span class="line">sudo netstat -tulpn | grep LISTEN</span><br><span class="line">sudo nmap -sTU -O IP-address-Here</span><br></pre></td></tr></table></figure></li>
<li><p>checking <strong>remote system</strong> tcp 80 port status</p>
<ol>
<li><p>Telnet</p>
</li>
<li><p>nc</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> nc -zvw10 192.168.0.1 22</span><br><span class="line">其中参数：</span><br><span class="line">z: zero-I/O mode which is used for scanning</span><br><span class="line">v: for verbose output</span><br><span class="line">w10: timeout wait seconds</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
<ol start="3">
<li>nmap<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">telnet myserver.com 80 </span><br><span class="line">nc -v myserver.com 80</span><br><span class="line">nc -vn 192.168.40.146 2424</span><br><span class="line">nmap myserver.com 80 </span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li><p>通过进程名查看占用端口</p>
<ul>
<li>先查看进程pid    <code>ps -ef | grep 进程名 </code></li>
<li>再通过pid查看占用端口    <code>netstat -nap | grep 进程pid </code></li>
</ul>
</li>
<li><p>通过端口查看进程</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netstat -an | grep &lt;portnumber&gt;</span><br><span class="line">lsof -i:&lt;portnumber&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="进程号"><a href="#进程号" class="headerlink" title="进程号"></a>进程号</h2><ul>
<li><p>根据进程号查看启动文件所在位置</p>
<p><code>readlink /proc/&lt;线程ID&gt;/exe</code></p>
</li>
<li><p>查看进程的启动命令</p>
<p><code>cat /proc/&lt;线程ID&gt;/cmdline</code></p>
</li>
</ul>
<h2 id="网络代理"><a href="#网络代理" class="headerlink" title="网络代理"></a>网络代理</h2><ul>
<li><p>查看本地网络代理</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export | grep -i proxy</span><br></pre></td></tr></table></figure></li>
<li><p>关闭代理</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">unset http_proxy </span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h2><ul>
<li><p>pretty json </p>
<p>curl ‘address:port’ | json_pp</p>
</li>
</ul>
<h2 id="端口远程访问"><a href="#端口远程访问" class="headerlink" title="端口远程访问"></a>端口远程访问</h2><p>检测端口是否允许远程访问</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netstat -an | grep &lt;port&gt;</span><br><span class="line"></span><br><span class="line">查看输出结果。如果输出结果中有 0.0.0.0:&lt;port&gt; 或者 :::&lt;port&gt;，表示该端口允许远程访问；</span><br><span class="line">如果输出结果中只有 127.0.0.1:&lt;port&gt; 或者 ::1:&lt;port&gt;，表示该端口只允许本地访问</span><br></pre></td></tr></table></figure>

<ul>
<li>在 Ubuntu 中，要开启指定端口的远程访问，需要进行以下步骤：</li>
</ul>
<ol>
<li><p>确认端口是否已经开启：使用 <code>netstat</code> 命令检查要开启的端口是否已经在监听状态。如果已经在监听状态，则可以直接进行下一步操作；如果没有在监听状态，则需要先启动对应的服务程序。</p>
</li>
<li><p>修改防火墙规则：使用 <code>ufw</code> 命令修改防火墙规则，开放指定端口。例如，要开放端口号为 80 的端口，可以使用以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo ufw allow 80/tcp</span><br></pre></td></tr></table></figure>

<p>这个命令会将端口号为 80 的端口加入到防火墙规则中，并允许 TCP 协议通过该端口进行访问。</p>
</li>
<li><p>重启防火墙服务：在修改防火墙规则后，需要重启防火墙服务才能使修改生效。可以使用以下命令重启防火墙服务：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo service ufw restart</span><br></pre></td></tr></table></figure></li>
<li><p>确认防火墙规则是否正确：使用以下命令查看当前的防火墙规则：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo ufw status numbered</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="根据PID查看子进程"><a href="#根据PID查看子进程" class="headerlink" title="根据PID查看子进程"></a>根据PID查看子进程</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netstat -lntp |grep PID</span><br></pre></td></tr></table></figure>

<h2 id="子网掩码"><a href="#子网掩码" class="headerlink" title="子网掩码"></a>子网掩码</h2><p>xx.xx.xx.xx/24</p>
<p>在网络中，IP地址由两个部分组成：网络地址和主机地址。IP地址的网络部分用于标识网络，而主机部分用于标识特定的设备或主机。</p>
<p>CIDR（无类别域间路由）表示法通常用于指定IP地址的子网掩码，以确定网络地址和主机地址的边界。CIDR表示法使用斜线后面的数字来表示网络地址中前多少位是固定的，即网络前缀长度。例如，/24 表示前 24 位是网络地址，剩下的 8 位则是主机地址。</p>
<p>对于 IPv4 地址，每个 IP 地址都由 32 位二进制数表示。通过将前 24 位作为网络地址并保留最后 8 位作为主机地址，可以创建一个包含 256 个可能主机地址的网络。这被称为 “24 位网络” 或 “24 位子网”，它的子网掩码是 255.255.255.0。</p>
<p>因此，当你配置一个 IP 地址并添加 /24 后缀时，你正在指定该地址所属的网络和子网掩码。这样可以帮助确定该地址所在的网络，并确保与其他设备进行通信时，数据包能够正确地路由到目标设备。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>snippet</tag>
      </tags>
  </entry>
  <entry>
    <title>linux snippet</title>
    <url>/2017/05/09/linux%20snippet/</url>
    <content><![CDATA[<ul>
<li>/bin/    用以存储二进制可执行命令文件，/usr/bin/也存储了一些基于用户的命令文件。</li>
<li>/sbin/    许多系统命令的存储位置，/usr/sbin/中也包括了许多命令。</li>
<li>/root/    超级用户，即根用户的主目录。</li>
<li>/home/    普通用户的默认目录，在该目录下，每个用户拥有一个以用户名命名的文件夹。</li>
<li>/boot/    存放Ubuntu内核和系统启动文件。</li>
<li>/mnt/     通常包括系统引导后被挂载的文件系统的挂载点。</li>
<li>/dev/    存储设备文件，包括计算机的所有外部设备，如硬盘、是、键盘、鼠标等。</li>
<li>/etc/    存放文件管理配置文件和目录。</li>
<li>/lib/    存储各种程序所需要的共享库文件。</li>
<li>/lost+found/    一般为空，当非法关机时，会存放一些零散的文件。</li>
<li>/var/    用于存放很多不断变化的文件，例如日志文件等。</li>
<li>/usr/    包括与系统用户直接有关的文件和目录</li>
<li>/media/    存放Ubuntu系统自动挂载的设备文件。</li>
<li>/proc/    这是一个虚拟目录，它是内存的映射，包括系统信息和进程信息。</li>
<li>/tmp/    存储系统和用户的临时信息。</li>
<li>/initrd/    用来加载启动时临时挂载的initrd.img映像文件，以及载入所要的设备模块目录。</li>
<li>/opt/    作为可选文件和程序的存放目录，否则将无法引导计算机进入操作系统。</li>
<li>/srv/    存储系统提供的服务数据。</li>
<li>/sys/    系统设备和文件层次结构，并向用户程序提供详细的内核数据信息。</li>
</ul>
<h2 id="装机问题"><a href="#装机问题" class="headerlink" title="装机问题"></a>装机问题</h2><h3 id="Wifi-Not-Enabled-Acer-Aspire-4750"><a href="#Wifi-Not-Enabled-Acer-Aspire-4750" class="headerlink" title="Wifi Not Enabled Acer Aspire 4750"></a>Wifi Not Enabled Acer Aspire 4750</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">~$</span><span class="bash"> rfkill list all</span></span><br><span class="line">0: phy0: Wireless LAN</span><br><span class="line">Soft blocked: no</span><br><span class="line">Hard blocked: yes</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">~$</span><span class="bash"> sudo rmmod acer-wmi</span></span><br><span class="line">​```</span><br><span class="line"></span><br><span class="line">add below line at the end of the file : /etc/modprobe.d/blacklist.conf</span><br><span class="line">blacklist acer-wmi</span><br><span class="line"></span><br><span class="line">Then restart the system.</span><br><span class="line"><span class="meta">~$</span><span class="bash"> rfkill list all</span></span><br><span class="line">0: phy0: Wireless LAN</span><br><span class="line">Soft blocked: no</span><br><span class="line">Hard blocked: no</span><br></pre></td></tr></table></figure>

<h2 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h2><ul>
<li>防火墙 firewalld.service</li>
</ul>
<h2 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h2><p><strong>shell与export命令</strong></p>
<p>用户登录到Linux系统后，系统将启动一个用户shell。在这个shell中，可以使用shell命令或声明变量，也可以创建并运行 shell脚本程序。运行shell脚本程序时，系统将创建一个子shell。此时，系统中将有两个shell，一个是登录时系统启动的shell，另一 个是系统为运行脚本程序创建的shell。当一个脚本程序运行完毕，它的脚本shell将终止，可以返回到执行该脚本之前的shell。从这种意义上来 说，用户可以有许多 shell，每个shell都是由某个shell（称为父shell）派生的。</p>
<p>在子 shell中定义的变量只在该子shell内有效。如果在一个shell脚本程序中定义了一个变量，当该脚本程序运行时，这个定义的变量只是该脚本程序内 的一个局部变量，其他的shell不能引用它，要使某个变量的值可以在其他shell中被改变，可以使用export命令对已定义的变量进行输出。 export命令将使系统在创建每一个新的shell时定义这个变量的一个拷贝。这个过程称之为变量输出。</p>
<h3 id="操作文件名中含有“-”的文件"><a href="#操作文件名中含有“-”的文件" class="headerlink" title="操作文件名中含有“-”的文件"></a>操作文件名中含有“-”的文件</h3><ul>
<li>使用转移字符 “–”， 比如查看文件“-abc.txt“，命令为 <code>vim -- -abc.txt</code></li>
</ul>
<h3 id="KVM"><a href="#KVM" class="headerlink" title="KVM"></a>KVM</h3><p>KVM 的全称是：Kernel-based Virtual Machine，简单一句话概括，就是一个基于 Linux 内核的虚拟化管理系统。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>snippet</tag>
      </tags>
  </entry>
  <entry>
    <title>linux systemInfo command</title>
    <url>/2015/10/16/linux%20systemInfo/</url>
    <content><![CDATA[<h2 id="查看系统配置"><a href="#查看系统配置" class="headerlink" title="查看系统配置"></a>查看系统配置</h2><ul>
<li><p>查看系统</p>
<ul>
<li><code>cat /etc/os-release</code></li>
</ul>
</li>
<li><p>查看内核</p>
<ul>
<li><code>cat /proc/version</code></li>
<li><code>uname -a</code></li>
</ul>
</li>
<li><p>查看linux版本</p>
<ul>
<li><code>lsb_release -a</code></li>
<li><code>cat /etc/issue</code></li>
</ul>
</li>
<li><blockquote>
<p>总核数 = 物理CPU个数 X 每颗物理CPU的核数 </p>
<p>总逻辑CPU数 = 物理CPU个数 X 每颗物理CPU的核数 X 超线程数</p>
</blockquote>
<ul>
<li><p>查看物理CPU个数</p>
<ol>
<li>top命令，然后输入数字1查看，各项参数如下<ul>
<li><code>us</code>：用户空间占用 CPU 的百分比。</li>
<li><code>sy</code>：内核空间占用 CPU 的百分比。</li>
<li><code>ni</code>：调整过优先级的进程占用 CPU 的百分比。</li>
<li><code>id</code>：空闲 CPU 的百分比。</li>
<li><code>wa</code>：等待 I/O 的 CPU 时间的百分比。</li>
<li><code>hi</code>：硬中断（hardware interrupt）占用 CPU 的时间的百分比。</li>
<li><code>si</code>：软中断（software interrupt）占用 CPU 的时间的百分比。</li>
<li><code>st</code>：虚拟机或者运行在它上面的虚拟 CPU 占用 CPU 的时间的百分比。</li>
</ul>
</li>
<li>输入mpstat查看</li>
<li>输入以下命令</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /proc/cpuinfo| grep &quot;physical id&quot;| sort| uniq| wc -l</span><br></pre></td></tr></table></figure></li>
<li><p>查看每个物理CPU中core的个数(即核数)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /proc/cpuinfo| grep &quot;cpu cores&quot;| uniq</span><br></pre></td></tr></table></figure></li>
<li><p>查看逻辑CPU的总数</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /proc/cpuinfo| grep &quot;processor&quot;| wc -l</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h1 id="top"><a href="#top" class="headerlink" title="top"></a>top</h1><ul>
<li><p>进程CPU占用率</p>
<p>top显示某个进程占用cpu达到100%，则表明该进程正在使用所有可用的 CPU 资源。这通常是因为该进程执行的任务非常耗费 CPU 资源，或者该进程存在某些问题导致 CPU 使用率异常高。</p>
<p>在 Linux 系统中，每个进程都只能在单个 CPU 核心上运行。但是，系统可以通过调度程序（scheduler）在多个 CPU 核心之间轮换运行进程，从而达到让多个进程同时执行的效果。</p>
</li>
</ul>
<h2 id="时区"><a href="#时区" class="headerlink" title="时区"></a>时区</h2><p><a href="https://www.cnblogs.com/zhangeamon/p/5500744.html">CentOS 7 时区设置</a></p>
<h2 id="清理内存"><a href="#清理内存" class="headerlink" title="清理内存"></a>清理内存</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sync; echo 1 &gt; /proc/sys/vm/drop_caches</span><br></pre></td></tr></table></figure>

<h2 id="查看buff-cache"><a href="#查看buff-cache" class="headerlink" title="查看buff/cache"></a>查看buff/cache</h2><ul>
<li>工具推荐 <a href="https://github.com/silenceshell/hcache">https://github.com/silenceshell/hcache</a></li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>command</tag>
      </tags>
  </entry>
  <entry>
    <title>macos command</title>
    <url>/2022/01/07/mac%20command/</url>
    <content><![CDATA[<ul>
<li>解压带有中文名称的zip包</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ditto -V -x -k --sequesterRsrc filename.zip destination</span><br></pre></td></tr></table></figure>

<ul>
<li>查看目录下文件夹大小<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">du -d 1 -h    命令查看当前目录下所有文件夹的大小 -d 指深度，后面加一个数值</span><br><span class="line">或</span><br><span class="line">du -hd1</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>macos</category>
      </categories>
      <tags>
        <tag>command</tag>
      </tags>
  </entry>
  <entry>
    <title>maven snippet</title>
    <url>/2018/01/09/maven%20snippet/</url>
    <content><![CDATA[<h3 id="命令介绍"><a href="#命令介绍" class="headerlink" title="命令介绍"></a>命令介绍</h3><ol>
<li><strong>mvn compile</strong> 编译,将Java 源程序编译成 class 字节码文件。</li>
<li><strong>mvn test</strong> 测试，并生成测试报告</li>
<li><strong>mvn clean</strong> 将以前编译得到的旧的 class 字节码文件删除</li>
<li><strong>mvn pakage</strong> 打包,动态 web工程打 war包，Java工程打 jar 包。</li>
<li><strong>mvn install</strong> 将项目生成 jar 包放在仓库中，以便别的模块调用</li>
<li><a href="https://www.cnblogs.com/zhangxh20/p/6298062.html">Maven的几个常用plugin</a></li>
</ol>
<h3 id="tomcat项目的部署"><a href="#tomcat项目的部署" class="headerlink" title="tomcat项目的部署"></a>tomcat项目的部署</h3><ul>
<li>参照 <a href="https://blog.csdn.net/u012076316/article/details/46907823">tomcat 设置热部署</a></li>
<li>参照<a href="http://www.jb51.net/article/117334.htm">war和war exploded区别及问题汇总</a></li>
<li>参照<a href="https://www.jianshu.com/p/fb0ed26c35d5">tomcat部署的不同方式</a></li>
<li>启动项目时，如果test包里面有测试程序，为了忽略编译test测试程序，需要运行命令打包<code>mvn clean package -DskipTests</code>，另外运行tomcat的时候以debug模式进行启动。</li>
</ul>
<h3 id="maven多项目之间相互引用"><a href="#maven多项目之间相互引用" class="headerlink" title="maven多项目之间相互引用"></a>maven多项目之间相互引用</h3><ul>
<li><p>应该在父目录下进行maven install操作，会自动生成子模块的jar或war包。</p>
</li>
<li><p><strong>解决maven无法加载本地lib/下的jar包问题(程序包XXX不存在)</strong></p>
<ul>
<li><p>原因</p>
<p>若该程序包是第三方的jar，解决方案是让maven既加载maven库中的jar包，又要加载本地WEB-INF/lib下的jar包。 </p>
</li>
<li><p>解决</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.6.0&lt;/version&gt;</span><br><span class="line">    &lt;configuration&gt;</span><br><span class="line">        &lt;source&gt;1.8&lt;/source&gt;</span><br><span class="line">        &lt;target&gt;1.8&lt;/target&gt;</span><br><span class="line">        &lt;encoding&gt;UTF-8&lt;/encoding&gt;</span><br><span class="line">        &lt;compilerArguments&gt;</span><br><span class="line">            &lt;extdirs&gt;$&#123;project.basedir&#125;/src/main/webapp/WEB-INF/lib&lt;/extdirs&gt;</span><br><span class="line">        &lt;/compilerArguments&gt;</span><br><span class="line">    &lt;/configuration&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="创建本地引用包"><a href="#创建本地引用包" class="headerlink" title="创建本地引用包"></a>创建本地引用包</h2><h4 id="1-直接引用本地jar"><a href="#1-直接引用本地jar" class="headerlink" title="1.直接引用本地jar"></a>1.直接引用本地jar</h4><p>将jar放在项目中，例如web项目就放在 <code>webapp/WEB-INF/lib</code>下面<br>然后再<code>pom.xml</code>中添加jar的依赖：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;myjar&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;myjar&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0.0&lt;/version&gt;</span><br><span class="line">    &lt;scope&gt;system&lt;/scope&gt;</span><br><span class="line">    &lt;systemPath&gt;$&#123;project.basedir&#125;/webapp/WEB-INF/lib/myjar-1.0.0.jar&lt;/systemPath&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h4 id="2-安装到本地仓库"><a href="#2-安装到本地仓库" class="headerlink" title="2.安装到本地仓库"></a>2.安装到本地仓库</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mvn install:install-file -Dfile=xxx.jar -DgroupId=xx.xxx.xx -DartifactId=xx -Dversion=xx -Dpackaging=jar</span><br><span class="line"></span><br><span class="line">参数说明:</span><br><span class="line">-DgroupId:对应dependency的groupId</span><br><span class="line">-DartifactId:对应dependency的artifactId</span><br><span class="line">-Dversion:对应dependency中的version</span><br><span class="line">-Dpackaging:安装的类型，jar或者pom</span><br><span class="line">-Dfile:要安装的jar文件的路径</span><br></pre></td></tr></table></figure>

<h2 id="scope"><a href="#scope" class="headerlink" title="scope"></a>scope</h2><ul>
<li><p>compile<br>默认就是compile，什么都不配置也就是意味着compile。compile表示被依赖项目需要参与当前项目的编译，当然后续的测试，运行周期也参与其中，是一个比较强的依赖。打包的时候通常需要包含进去。</p>
</li>
<li><p>test<br>scope为test表示依赖项目仅仅参与测试相关的工作，包括测试代码的编译，执行。比较典型的如junit。</p>
</li>
<li><p>runntime<br>runntime表示被依赖项目无需参与项目的编译，不过后期的测试和运行周期需要其参与。与compile相比，跳过编译而已，说实话在终端的项目（非开源，企业内部系统）中，和compile区别不是很大。比较常见的如JSR×××的实现，对应的API jar是compile的，具体实现是runtime的，compile只需要知道接口就足够了。oracle jdbc驱动架包就是一个很好的例子，一般scope为runntime。另外runntime的依赖通常和optional搭配使用，optional为true。我可以用A实现，也可以用B实现。</p>
</li>
<li><p>provided<br>provided意味着打包的时候可以不用包进去，别的设施(Web Container)会提供。事实上该依赖理论上可以参与编译，测试，运行等周期。相当于compile，但是在打包阶段做了exclude的动作。</p>
</li>
<li><p>system<br>从参与度来说，和provided相同，不过被依赖项不会从maven仓库抓，而是从本地文件系统拿，一定需要配合systemPath属性使用</p>
</li>
</ul>
<h2 id="依赖传递原则"><a href="#依赖传递原则" class="headerlink" title="依赖传递原则"></a>依赖传递原则</h2><p>几乎所有的Jar包冲突都和依赖传递原则有关，所以我们先说Maven中的依赖传递原则：</p>
<p><strong>最短路径优先原则</strong></p>
<p>假如引入了2个Jar包A和B，都传递依赖了Z这个Jar包：</p>
<p>A -&gt; X -&gt; Y -&gt; Z(2.5)<br>B -&gt; X -&gt; Z(2.0)</p>
<p>那其实最终生效的是Z(2.0)这个版本。因为他的路径更加短。如果我本地引用了Z(3.0)的包，那生效的就是3.0的版本。一样的道理。</p>
<p><strong>最先声明优先原则</strong></p>
<p>如果路径长短一样，优先选最先声明的那个。</p>
<p>A -&gt; Z(3.0)<br>B -&gt; Z(2.5)</p>
<p>这里A最先声明，所以传递过来的Z选择用3.0版本的。</p>
<h2 id="引用本地jar包依赖"><a href="#引用本地jar包依赖" class="headerlink" title="引用本地jar包依赖"></a>引用本地jar包依赖</h2><ol>
<li><p>jar包放入项目指定位置 ie：${project.basedir}/src/main/resources/lib/xxx.jar</p>
</li>
<li><p>pom文件引入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sdk.core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>system<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">systemPath</span>&gt;</span>$&#123;project.basedir&#125;/src/main/resources/lib/xxx.jar<span class="tag">&lt;/<span class="name">systemPath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>systemPath这个路径是jar包的路径。${project.basedir}只是一个系统自己的常量。</p>
</blockquote>
</li>
<li><p>在将项目用Maven打包是需要在 <plugin> 标签中加入:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includeSystemScope</span>&gt;</span>true<span class="tag">&lt;/<span class="name">includeSystemScope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="init-project"><a href="#init-project" class="headerlink" title="init project"></a>init project</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mvn archetype:generate -DgroupId=brook.hbase -DartifactId=hbase-client -DarchetypeArtifactId=maven-archetype-quickstart -DarchetypeVersion=1.4 -DinteractiveMode=false</span><br></pre></td></tr></table></figure>

<h2 id="命令启动springboot"><a href="#命令启动springboot" class="headerlink" title="命令启动springboot"></a>命令启动springboot</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mvn spring-boot:run</span><br></pre></td></tr></table></figure>



<h2 id="add-git-commit-info-to-jar-package"><a href="#add-git-commit-info-to-jar-package" class="headerlink" title="add git commit info to jar package"></a>add git commit info to jar package</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>pl.project13.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>git-commit-id-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>get-the-git-infos<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>revision<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dotGitDirectory</span>&gt;</span>$&#123;project.basedir&#125;/.git<span class="tag">&lt;/<span class="name">dotGitDirectory</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">prefix</span>&gt;</span>git<span class="tag">&lt;/<span class="name">prefix</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">verbose</span>&gt;</span>false<span class="tag">&lt;/<span class="name">verbose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">generateGitPropertiesFile</span>&gt;</span>true&lt;/generateGitPropertiesFile</span><br><span class="line">  <span class="tag">&lt;<span class="name">generateGitPropertiesFilename</span>&gt;</span>$&#123;project.build.outputDirectory&#125;/git.properties<span class="tag">&lt;/<span class="name">generateGitPropertiesFilename</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">format</span>&gt;</span>json<span class="tag">&lt;/<span class="name">format</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">gitDescribe</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">skip</span>&gt;</span>false<span class="tag">&lt;/<span class="name">skip</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">always</span>&gt;</span>false<span class="tag">&lt;/<span class="name">always</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dirty</span>&gt;</span>-dirty<span class="tag">&lt;/<span class="name">dirty</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">gitDescribe</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>生成的<code>git.properties</code>会在jar包位置 <code>BOOT-INF/classes/git.properties</code></p>
</blockquote>
<h1 id="相关问题"><a href="#相关问题" class="headerlink" title="相关问题"></a>相关问题</h1><ul>
<li><p><a href="https://www.cnblogs.com/baixiaoshuai/p/8939989.html">idea中的maven模块变成灰色的可能原因</a></p>
</li>
<li><p><a href="https://blog.csdn.net/qq_38663729/article/details/78275209">jar包和war包的介绍与区别</a></p>
</li>
<li><p>由于没有mvn install操作，没有在本地下载依赖包到lib目录下，所以启动项目，会提示java.lang.ClassNotFoundException: org.springframework.web.context.ContextLoaderListener错误</p>
</li>
</ul>
]]></content>
      <categories>
        <category>maven</category>
      </categories>
      <tags>
        <tag>snippet</tag>
      </tags>
  </entry>
  <entry>
    <title>macos snippet</title>
    <url>/2021/12/20/macos%20snippet/</url>
    <content><![CDATA[<h2 id="Install-pkg"><a href="#Install-pkg" class="headerlink" title="Install .pkg"></a>Install .pkg</h2><p>a.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo installer -pkg /path/to/package.pkg -target /</span><br></pre></td></tr></table></figure>

<blockquote>
<p>will install the package in /Applications.</p>
</blockquote>
<p>is all that’s needed. Here <code>/</code> is the mount point of <code>Macintosh HD</code> volume. <code>-target</code> accepts path like <code>&quot;/Volumes/Macintosh HD&quot;</code>, or <code>/dev/disk0</code> also.</p>
<p>b.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">installer -pkg myapp.pkg -target CurrentUserHomeDirectory</span><br></pre></td></tr></table></figure>

<blockquote>
<p>will install the package in ~/Applications.</p>
</blockquote>
<h2 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h2><ul>
<li><a href="https://stackoverflow.com/questions/10757169/location-of-my-cnf-file-on-macos">Location of my.cnf file on macOS</a></li>
</ul>
<p>Regenerate</p>
]]></content>
      <categories>
        <category>macos</category>
      </categories>
      <tags>
        <tag>snippet</tag>
      </tags>
  </entry>
  <entry>
    <title>mybatis snippet</title>
    <url>/2016/10/16/mybatis%20snippet/</url>
    <content><![CDATA[<h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><ul>
<li><p>about date jdbcType</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#&#123;beginDate,jdbcType=DATE&#125; (no time of the day), or</span><br><span class="line">#&#123;beginDate,jdbcType=TIMESTAMP&#125; (if you need to include the time of the day).</span><br></pre></td></tr></table></figure></li>
</ul>
<p>And the Java parameter you want to apply should be of type:<br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java.sql.Date (date without time)</span><br><span class="line">java.sql.Timestamp (timestamp)</span><br><span class="line">java.util.Date (date and time).</span><br></pre></td></tr></table></figure></p>
<ul>
<li>the Greater Than/Equal Operator and the Less Than/Equal Operators:<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ROWNUM &amp;gt;= 20</span><br><span class="line">ROWNUM &amp;lt;= 20</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><p>使用SpringMVC+Mybatis框架写项目的时候，在mapper里面的sql语句</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;updateTime != null&quot;</span>&gt;</span></span><br><span class="line">	and update_time <span class="symbol">&amp;gt;</span> #&#123;updateTime,jdbcType=TIMESTAMP&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>出错：<code>There is no getter for property named &#39;updateTime&#39; in &#39;class java.util.Date&#39;</code></p>
<p>原因是：<br>如果将and语句中的#｛属性｝写在if语句中，mybatis会去对象中从它的get方法中取值，而我之前是直接传递的值，并没有封装对象。<br>解决办法：</p>
<pre><code> 1. 把updateTime需改为date
2. 把updateTime代表的参数封装到一个对象中
</code></pre>
]]></content>
      <categories>
        <category>mybatis</category>
      </categories>
      <tags>
        <tag>snippet</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql HA &amp; keepalived</title>
    <url>/2022/01/19/mysql%20HA/</url>
    <content><![CDATA[<h1 id="mysql数据备份"><a href="#mysql数据备份" class="headerlink" title="mysql数据备份"></a>mysql数据备份</h1><h2 id="方案二：双主机HA部署"><a href="#方案二：双主机HA部署" class="headerlink" title="方案二：双主机HA部署"></a>方案二：双主机HA部署</h2><p><strong>前提</strong>：准备两个机器master1（172.20.3.113）和master2（172.20.3.114），且分别安装了mysql，其中IP地址根据生产具体ip进行替换</p>
<h3 id="一、配置my-cnf信息"><a href="#一、配置my-cnf信息" class="headerlink" title="一、配置my.cnf信息"></a>一、配置my.cnf信息</h3><ul>
<li><p>配置/etc/my.cnf文件（从mysql5.7开始不会自动生成my.cnf文件，所以需要手动创建）my.cnf文件内容大致如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[mysql]</span><br><span class="line">default-character-set=utf8         #设置mysql客户端默认字符集</span><br><span class="line">[mysqld]</span><br><span class="line">port = 3306  #可自行更改端口</span><br><span class="line">basedir=/usr/local/mysql</span><br><span class="line">datadir=/usr/local/mysql/data</span><br><span class="line">max_connections = 500              #最大连接数</span><br><span class="line">log_bin=mysql-bin</span><br><span class="line">server_id = 1                            #机器1设置为1，机器2设置为2</span><br><span class="line">binlog_format=ROW</span><br><span class="line">auto-increment-increment = 2            #字段变化增量值</span><br><span class="line">auto-increment-offset = 1               #机器1设置为1，机器2设置为2</span><br><span class="line">slave-skip-errors = all                 #忽略所有复制产生的错误</span><br><span class="line">gtid_mode=ON</span><br><span class="line">enforce-gtid-consistency=ON</span><br><span class="line"></span><br><span class="line">character-set-server = utf8</span><br><span class="line">default-storage-engine = INNODB</span><br><span class="line">lower_case_table_names = 1</span><br></pre></td></tr></table></figure>

<ul>
<li><p>[mysql]代表我们使用mysql命令登录mysql数据库时的默认设置 </p>
</li>
<li><p>[mysqld]代表数据库自身的默认设置</p>
<blockquote>
<p>注意：机器1和机器2只有server-id不同和auto-increment-offset不同,其他必须相同。</p>
<p>部分配置项解释如下：</p>
<p>binlog_format= ROW：指定mysql的binlog日志的格式，日志中会记录成每一行数据被修改的形式，然后在 slave 端再对相同的数据进行修改。</p>
<p>auto-increment-increment= 2：表示自增长字段每次递增的量，其默认值是1。它的值应设为整个结构中服务器的总数，本案例用到两台服务器，所以值设为2。</p>
<p>auto-increment-offset= 2：用来设定数据库中自动增长的起点(即初始值)，因为这两能服务器都设定了一次自动增长值2，所以它们的起点必须得不同，这样才能避免两台服务器数据同步时出现主键冲突。</p>
<p>注：另外还可以在my.cnf配置文件中，添加“binlog_do_db=数据库名”配置项（可以添加多个）来指定要同步的数据库。如果配置了这个配置项，如果没添加在该配置项后面的数据库，则binlog不记录它的事件。</p>
</blockquote>
</li>
</ul>
</li>
<li><p>切换到datacanvas用户进行mysql启动服务 （建议）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/usr/local/mysql/support-files/mysql.server start</span><br></pre></td></tr></table></figure>

<p>或者在已经创建软连接的前提下，切换到root用户，并启动mysql服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service mysql restart</span><br></pre></td></tr></table></figure></li>
<li><p>客户端登录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/usr/local/mysql/bin/mysql -uroot -p</span><br></pre></td></tr></table></figure>

<p>  设置可远程登录root用户</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;123456&#x27;</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> OPTION;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：上面的密码’123456’修改成真实的root密码</p>
</blockquote>
</li>
</ul>
<h4 id="开始设置双主备份"><a href="#开始设置双主备份" class="headerlink" title="开始设置双主备份"></a>开始设置双主备份</h4><ul>
<li><p>在master1上操作</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">先在master2上执行，</span><br><span class="line"><span class="keyword">show</span> master status;（获取master_log_file和master_log_pos信息）</span><br><span class="line"></span><br><span class="line">在master1上执行</span><br><span class="line">change master <span class="keyword">to</span> master_host<span class="operator">=</span><span class="string">&#x27;172.20.3.114&#x27;</span>,master_port<span class="operator">=</span><span class="number">3306</span>,master_user<span class="operator">=</span><span class="string">&#x27;rt&#x27;</span>,master_password<span class="operator">=</span><span class="string">&#x27;rt123&#x27;</span>,master_log_file<span class="operator">=</span><span class="string">&#x27;mysql-bin.000003&#x27;</span>,master_log_pos<span class="operator">=</span><span class="number">194</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">start</span> slave;</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> slave status\G</span><br></pre></td></tr></table></figure></li>
<li><p>在master2上操作</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">先在master1上执行，</span><br><span class="line"><span class="keyword">show</span> master status;（获取master_log_file和master_log_pos信息）</span><br><span class="line">在master2上执行</span><br><span class="line">change master <span class="keyword">to</span> master_host<span class="operator">=</span><span class="string">&#x27;172.20.3.113&#x27;</span>,master_port<span class="operator">=</span><span class="number">3306</span>,master_user<span class="operator">=</span><span class="string">&#x27;rt&#x27;</span>,master_password<span class="operator">=</span><span class="string">&#x27;rt123&#x27;</span>,master_log_file<span class="operator">=</span><span class="string">&#x27;mysql-bin.000004&#x27;</span>,master_log_pos<span class="operator">=</span><span class="number">194</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">start</span> slave;</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> slave status\G</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h3 id="二、keepalived安装配置"><a href="#二、keepalived安装配置" class="headerlink" title="二、keepalived安装配置"></a>二、keepalived安装配置</h3><p>需要在master1和master2的机器上安装keepalived服务，安装过程大致如下：</p>
<ul>
<li><p>通过地址<a href="https://pkgs.org/download/keepalived%E4%B8%8B%E8%BD%BD%E7%9B%B8%E5%BA%94%E7%9A%84%E5%AE%89%E8%A3%85%E7%89%88%E6%9C%AC%EF%BC%8C%E7%84%B6%E5%90%8E%E8%A7%A3%E5%8E%8B%E7%9A%84%E7%9B%B8%E5%85%B3%E7%9B%AE%E5%BD%95%E3%80%82">https://pkgs.org/download/keepalived下载相应的安装版本，然后解压的相关目录。</a></p>
</li>
<li><p>源码的安装一般由3个步骤组成：配置（configure）、编译（make）、安装( make install）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./configure --prefix=/usr/local/keepalived</span><br></pre></td></tr></table></figure>

<p> 如果提示错误信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">configure: error: </span><br><span class="line">  !!! OpenSSL is not properly installed on your system. !!!</span><br><span class="line">  !!! Can not include OpenSSL headers files.            !!!</span><br></pre></td></tr></table></figure>

<p>需要安装yum install openssl openssl-devel（RedHat系统），<br>再次执行./configure –prefix=/usr/local/keepalived</p>
</li>
<li><p>在安装目录执行<code>make &amp;&amp; make install</code>进行编译安装</p>
</li>
<li><p>keepalived配置文件，默认情况下keepalived启动时会去/etc/keepalived目录下加载配置文件keepalived.conf</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">! Configuration File forkeepalived</span><br><span class="line">global_defs &#123;</span><br><span class="line">notification_email &#123;</span><br><span class="line">[email protected]</span><br><span class="line"> &#125;</span><br><span class="line">notification_email_from  [email protected]</span><br><span class="line">smtp_server 127.0.0.1</span><br><span class="line">smtp_connect_timeout 30</span><br><span class="line">router_id MYSQL_HA      #标识，双主相同</span><br><span class="line"> &#125;</span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line"> state BACKUP           #两台都设置BACKUP</span><br><span class="line"> interface eth0         #网卡名称</span><br><span class="line"> virtual_router_id 51       #主备相同</span><br><span class="line"> priority 100   #优先级，另一台改为90    </span><br><span class="line"> advert_int 1    </span><br><span class="line"> nopreempt  #不抢占，只在优先级高的机器上设置即可，优先级低的机器不设置    </span><br><span class="line"> authentication &#123;</span><br><span class="line"> auth_type PASS    #鉴权，默认通过</span><br><span class="line"> auth_pass 1111    # 鉴权访问密码</span><br><span class="line"> &#125;</span><br><span class="line"> virtual_ipaddress &#123;</span><br><span class="line">  172.20.3.200    #虚拟ip</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">virtual_server 172.20.3.200 3306 &#123;    </span><br><span class="line">     delay_loop 2   #每个2秒检查一次real_server状态    </span><br><span class="line">     lb_algo wrr   #LVS算法    </span><br><span class="line">     lb_kind DR    #LVS模式    </span><br><span class="line">     persistence_timeout 60   #会话保持时间    </span><br><span class="line">     protocol TCP    </span><br><span class="line">     real_server 172.20.3.113 3306 &#123;    </span><br><span class="line">         weight 1    #指定了当前主机的权重    </span><br><span class="line">         notify_down /usr/local/keepalived/kill_keepalived.sh  #检测到服务down后执行的脚本    </span><br><span class="line">         TCP_CHECK &#123;    </span><br><span class="line">             connect_timeout 10    #连接超时时间</span><br><span class="line">             delay_before_retry 3   #重连间隔时间    </span><br><span class="line">             connect_port 3306   #健康检查端口  </span><br><span class="line">         &#125;  </span><br><span class="line">     &#125;</span><br><span class="line">     real_server 172.20.3.114 3306 &#123;</span><br><span class="line">        weight 2</span><br><span class="line">        notify_down /usr/local/keepalived/kill_keepalived.sh  #检测到服务down后执行的脚本</span><br><span class="line">        TCP_CHECK &#123;</span><br><span class="line">            connect_timeout 10</span><br><span class="line">            delay_before_retry 3</span><br><span class="line">            connect_port 3306</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：参数priority两个服务器配置不同，其中virtual_ipaddress是虚拟ip，之后项目可通过访问 172.20.3.200:3306进行访问双主mysql机群。</p>
<p>上述配置中会涉及/usr/local/keepalived/kill_keepalived.sh，分别在两台服务器上编写kill_keepalived.sh脚本内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">pkill keepalived</span><br></pre></td></tr></table></figure>

<p>   然后给脚本加权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod +x /usr/local/keepalived/kill_keepalived.sh</span><br></pre></td></tr></table></figure>

<ul>
<li>启动keepalived服务<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service keepalived start</span><br></pre></td></tr></table></figure>

如果启动失败，尝试输入<code>pkill -9 keepalived</code>，然后再尝试重启</li>
</ul>
<hr>
<h3 id="三、访问双主mysql集群"><a href="#三、访问双主mysql集群" class="headerlink" title="三、访问双主mysql集群"></a>三、访问双主mysql集群</h3><p>两台机器的mysql和keepalived配置完成之后，即可在项目中，通过访问虚拟ip地址（172.20.3.200:3306）进行mysql集群的访问。</p>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>HA</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql backup plan</title>
    <url>/2022/01/19/mysql%20backup%20A/</url>
    <content><![CDATA[<h1 id="mysql数据备份"><a href="#mysql数据备份" class="headerlink" title="mysql数据备份"></a>mysql数据备份</h1><h2 id="方案一：定期备份数据库数据文件"><a href="#方案一：定期备份数据库数据文件" class="headerlink" title="方案一：定期备份数据库数据文件"></a>方案一：定期备份数据库数据文件</h2><h3 id="一、编写shell脚本"><a href="#一、编写shell脚本" class="headerlink" title="一、编写shell脚本"></a>一、编写shell脚本</h3><p>脚本文件<strong>backup_mysql.sh</strong>信息如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">用户名</span></span><br><span class="line">username=root</span><br><span class="line"><span class="meta">#</span><span class="bash">密码</span></span><br><span class="line">password=填写密码</span><br><span class="line"><span class="meta">#</span><span class="bash">将要备份的数据库</span></span><br><span class="line">database_name=填写需要备份的数据库</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">保存备份文件最多个数</span></span><br><span class="line">count=30</span><br><span class="line"><span class="meta">#</span><span class="bash">备份保存路径</span></span><br><span class="line">backup_path=/data/mysql_backup</span><br><span class="line"><span class="meta">#</span><span class="bash">日期</span></span><br><span class="line">date_time=`date +%Y-%m-%d-%H-%M`</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">如果文件夹不存在则创建</span></span><br><span class="line">if [ ! -d $backup_path ]; </span><br><span class="line">then     </span><br><span class="line">    mkdir -p $backup_path; </span><br><span class="line">fi</span><br><span class="line"><span class="meta">#</span><span class="bash">开始备份</span></span><br><span class="line">mysqldump -u $username -p$password $database_name &gt; $backup_path/$database_name-$date_time.sql</span><br><span class="line"><span class="meta">#</span><span class="bash">开始压缩</span></span><br><span class="line">cd $backup_path</span><br><span class="line">tar -zcvf $database_name-$date_time.tar.gz $database_name-$date_time.sql</span><br><span class="line"><span class="meta">#</span><span class="bash">删除源文件</span></span><br><span class="line">rm -rf $backup_path/$database_name-$date_time.sql</span><br><span class="line"><span class="meta">#</span><span class="bash">更新备份日志</span></span><br><span class="line">echo &quot;create $backup_path/$database_name-$date_time.tar.gz&quot; &gt;&gt; $backup_path/dump.log</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">找出需要删除的备份</span></span><br><span class="line">delfile=`ls -l -crt $backup_path/*.tar.gz | awk &#x27;&#123;print $9 &#125;&#x27; | head -1`</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">判断现在的备份数量是否大于阈值</span></span><br><span class="line">number=`ls -l -crt  $backup_path/*.tar.gz | awk &#x27;&#123;print $9 &#125;&#x27; | wc -l`</span><br><span class="line"></span><br><span class="line">if [ $number -gt $count ]</span><br><span class="line">then</span><br><span class="line"><span class="meta">  #</span><span class="bash">删除最早生成的备份，只保留count数量的备份</span></span><br><span class="line">  rm $delfile</span><br><span class="line"><span class="meta">  #</span><span class="bash">更新删除文件日志</span></span><br><span class="line">  echo &quot;delete $delfile&quot; &gt;&gt; $backup_path/dump.log</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<p>该脚本实现的功能：备份指定数据库的数据信息到指定目录，并只保存指定数量的最新文件。</p>
<p>注意：脚本中需要补全脚本中的<strong>password</strong>和<strong>database_name</strong>信息，可修改备份保存路径<strong>backup_path</strong>，以及最多保存的备份文件数量<strong>count</strong>。</p>
<p>编写完脚本信息之后，需要给脚本赋予可执行权限 <code>chmod +x backup_mysql.sh</code></p>
<h3 id="二、设定定时任务crontab"><a href="#二、设定定时任务crontab" class="headerlink" title="二、设定定时任务crontab"></a>二、设定定时任务crontab</h3><p>运行crontab -e命令，打开一个可编辑的文本，输入<code>0 1 * * * /path/to/backup_mysql.sh</code>  保本并退出即添加完成。</p>
<p>注意：其中<code>0 1 * * *</code>，表示每天凌晨1点进行备份操作，可自行修改1的值（范围0～23）</p>
<p>其中路径信息<code>/path/to/backup_mysql.sh</code>需要修改为实际的脚本路径。</p>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>backup</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql snippet</title>
    <url>/2015/12/16/mysql%20snippet/</url>
    <content><![CDATA[<h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><ul>
<li><p>the size of blob column</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  A BLOB can be 65535 bytes (64 KB) maximum.</span><br><span class="line">If you need more consider using:</span><br><span class="line">a MEDIUMBLOB for 16777215 bytes (16 MB)</span><br><span class="line">a LONGBLOB for 4294967295 bytes (4 GB).</span><br></pre></td></tr></table></figure></li>
<li><p>join sql</p>
</li>
<li><p>string convert to timstamp</p>
<p><code>SELECT STR_TO_DATE(&#39;2014-05-28 11:30:10&#39;,&#39;%Y-%m-%d %H:%i:%s&#39;);</code></p>
</li>
</ul>
<h3 id="sql语句"><a href="#sql语句" class="headerlink" title="sql语句"></a>sql语句</h3><ul>
<li>IN</li>
</ul>
<p>确定给定的值是否与子查询或列表中的值相匹配。in在查询的时候，首先查询子查询的表，然后将内表和外表做一个笛卡尔积，然后按照条件进行筛选。所以相对内表比较小的时候，in的速度较快。 </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    `<span class="keyword">user</span>`</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    `<span class="keyword">user</span>`.id <span class="keyword">IN</span> (</span><br><span class="line">        <span class="keyword">SELECT</span></span><br><span class="line">            `<span class="keyword">order</span>`.user_id</span><br><span class="line">        <span class="keyword">FROM</span></span><br><span class="line">            `<span class="keyword">order</span>`</span><br><span class="line">    )</span><br></pre></td></tr></table></figure>

<p>以上查询使用了in语句,in()只执行一次,它查出B表中的所有id字段并缓存起来.之后,检查A表的id是否与B表中的id相等,如果相等则将A表的记录加入结果集中,直到遍历完A表的所有记录。</p>
<p>可以看出,当B表数据较大时不适合使用in(),因为它会B表数据全部遍历一次. 如:A表有10000条记录,B表有1000000条记录,那么最多有可能遍历10000<code>*</code>1000000次,效率很差. 再如:A表有10000条记录,B表有100条记录,那么最多有可能遍历10000*100次,遍历次数大大减少,效率大大提升。</p>
<ul>
<li>exists</li>
</ul>
<p>指定一个子查询，检测行的存在。遍历循环外表，然后看外表中的记录有没有和内表的数据一样的。匹配上就将结果放入结果集中。 </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> a.<span class="operator">*</span> <span class="keyword">from</span> A a <span class="keyword">where</span> <span class="keyword">exists</span>(<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> B b <span class="keyword">where</span> a.id<span class="operator">=</span>b.id)</span><br></pre></td></tr></table></figure>

<p>以上查询使用了exists语句,exists()会执行A.length次,它并不缓存exists()结果集,因为exists()结果集的内容并不重要,重要的是结果集中是否有记录,如果有则返回true,没有则返回false。</p>
<p>当B表比A表数据大时适合使用exists(),因为它没有那么遍历操作,只需要再执行一次查询就行. 如:A表有10000条记录,B表有1000000条记录,那么exists()会执行10000次去判断A表中的id是否与B表中的id相等. 如:A表有10000条记录,B表有100000000条记录,那么exists()还是执行10000次,因为它只执行A.length次,可见B表数据越多,越适合exists()发挥效果. 再如:A表有10000条记录,B表有100条记录,那么exists()还是执行10000次,还不如使用in()遍历10000*100次,因为in()是在内存里遍历比较,而exists()需要查询数据库,我们都知道查询数据库所消耗的性能更高,而内存比较很快. </p>
<ul>
<li>where</li>
</ul>
<p>sql查询条件中<code>where 1=1,1=2和1=0</code>，这种写法，主要是为了拼凑动态的sql语句，如果使用不好会起到副作用的，是根据个人的一些习惯，是为了避免where 关键字后面的第一个词直接就是 “and”而导致语法错误，是为了后面附加and …方便程序逻辑处理用的。 </p>
<ul>
<li>select count(*)和select count(1)的区别<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一般情况下，Select Count(*)和Select Count(1)两着返回结果是一样的，假如表没有主键(Primary key), 那么count(1)比count(*)快，如果有主键的话，那主键作为count的条件时候count(主键)最快，如果你的表只有一个字段的话那count(*)就是最快的。</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="事物隔离级别"><a href="#事物隔离级别" class="headerlink" title="事物隔离级别"></a>事物隔离级别</h3><ul>
<li><p>read uncommitted（读取未提交数据）</p>
<blockquote>
<p>我们将事务隔离级别设置为read uncommitted，即便是事务没有commit，但是我们仍然能读到未提交的数据，这是所有隔离级别中最低的一种。</p>
<p>脏读</p>
</blockquote>
</li>
<li><p>read committed（可以读取其他事务提交的数据）</p>
<blockquote>
<p>大多数数据库默认的隔离级别;</p>
<p>当我们将当前会话的隔离级别设置为read committed的时候，当前会话只能读取到其他事务提交的数据，未提交的数据读不到。</p>
</blockquote>
</li>
<li><p>repeatable read（可重读）</p>
<blockquote>
<p>MySQL默认的隔离级别</p>
<p>当我们将当前会话的隔离级别设置为repeatable read的时候，当前会话可以重复读，就是每次读取的结果集都相同，而不管其他事务有没有提交。</p>
<p>幻读</p>
</blockquote>
</li>
<li><p>serializable（串行化）</p>
<blockquote>
<p>当我们将当前会话的隔离级别设置为serializable的时候，其他会话对该表的写操作将被挂起。可以看到，这是隔离级别中最严格的，但是这样做势必对性能造成影响。所以在实际的选用上，我们要根据当前具体的情况选用合适的。</p>
</blockquote>
</li>
</ul>
<h3 id="DDL-VS-DML"><a href="#DDL-VS-DML" class="headerlink" title="DDL VS DML"></a>DDL VS DML</h3><p>DML statements are SQL statements that manipulate data. DML stands for Data Manipulation Language. The SQL statements that are in the DML class are INSERT, UPDATE and DELETE. Some people also lump the SELECT statement in the DML classification.</p>
<p>Data Definition Languages (DDL) are used to define the database structure. Any CREATE, DROP and ALTER commands are examples of DDL SQL statements.</p>
<h3 id="设置远程登录"><a href="#设置远程登录" class="headerlink" title="设置远程登录"></a>设置远程登录</h3><ul>
<li><p>mysql 8版本设置可用root远程访问服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;password&#x27;;</span><br><span class="line"></span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO &#x27;root&#x27;@&#x27;%&#x27; WITH GRANT OPTION;</span><br><span class="line"></span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="mysqldump"><a href="#mysqldump" class="headerlink" title="mysqldump"></a>mysqldump</h3><ul>
<li><p>导出数据库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqldump -h127.0.0.1 -P3306 -uroot -p database &gt; file.sql</span><br><span class="line">其中 -h和-P可以省略（不过mysql在docker中不可以省略）,database是数据库名称</span><br></pre></td></tr></table></figure></li>
<li><p>导出数据表数据（根据sql的where条件）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqldump -uroot -p database --tables tablename --where=&quot;id&gt;8&quot; &gt; result.sql </span><br></pre></td></tr></table></figure></li>
<li><p>执行sql文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> <span class="built_in">source</span> /path/to/files/file.sql</span></span><br></pre></td></tr></table></figure></li>
<li><p>导出所有数据库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqldump -u root -p --all-databases &gt; backup_filename.sql</span><br></pre></td></tr></table></figure></li>
<li><p>只导出建表语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysqldump <span class="operator">-</span>u your_username <span class="operator">-</span>p <span class="comment">--no-data your_database &gt; backup.sql</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="新增主键"><a href="#新增主键" class="headerlink" title="新增主键"></a>新增主键</h3><p>suppose you don’t have column for auto increment like id, no, then you can add using following query:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">ADD</span> id <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT <span class="keyword">primary</span> key <span class="keyword">FIRST</span></span><br></pre></td></tr></table></figure>

<p>If you’ve column, then alter to auto increment using following query:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name MODIFY column_name datatype(length) AUTO_INCREMENT <span class="keyword">PRIMARY</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>database</category>
      </categories>
      <tags>
        <tag>snippet</tag>
      </tags>
  </entry>
  <entry>
    <title>nacos snippet</title>
    <url>/2021/12/01/nacos%20snippet/</url>
    <content><![CDATA[<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p><a href="https://juejin.cn/post/7136952484903256077">https://juejin.cn/post/7136952484903256077</a></p>
<h5 id="服务注册"><a href="#服务注册" class="headerlink" title="服务注册"></a>服务注册</h5><p>Spring Cloud Alibaba Nacos Discovery 遵循了 Spring Cloud Common 标准，实现了 AutoServiceRegistration、ServiceRegistry、Registration 这三个接口。</p>
<p>在 Spring Cloud 应用的启动阶段，监听了 WebServerInitializedEvent 事件，当 Web 容器初始化完成后，即收到 WebServerInitializedEvent 事件后，会触发注册的动作，调用 ServiceRegistry 的 register 方法，将服务注册到 Nacos Server。</p>
<p>![nacos客户端注册机制](/images/nacos/nacos client register mechanism.png)</p>
<ul>
<li><p>python nacos client</p>
<p><a href="https://pypi.org/project/nacos-client-python/">nacos-client-python</a></p>
</li>
</ul>
<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><ul>
<li>2.x版本启动，需要添加 -m属性<code>./startup.sh -m standalone</code></li>
</ul>
<h2 id="心跳机制"><a href="#心跳机制" class="headerlink" title="心跳机制"></a>心跳机制</h2><h3 id="健康检查"><a href="#健康检查" class="headerlink" title="健康检查"></a>健康检查</h3><p>服务端接受到客户端的服务注册请求后，在创建空的Service后，就会开启健康检查任务</p>
<ul>
<li>在超过15秒没收到客户端心跳时，就会把注册表中实例的健康状态改为false</li>
<li>超时30秒没有收到客户端心跳时，就会从注册表表剔除该实例，会使用HTTP DELETE方式调用/v1/ns/instance地址</li>
</ul>
<h2 id="open-API"><a href="#open-API" class="headerlink" title="open API"></a>open API</h2><ul>
<li>获取心跳</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -X PUT &#x27;127.0.0.1:8848/nacos/v2/ns/instance/beat&#x27; \</span><br><span class="line">-d &#x27;&#123;</span><br><span class="line">      &quot;namespaceId&quot;: &quot;jarvex_space&quot;,</span><br><span class="line">      &quot;serviceName&quot;: &quot;jarvex-common-group@@entity-server&quot;,</span><br><span class="line">      &quot;ip&quot;: &quot;127.0.0.1&quot;,</span><br><span class="line">      &quot;port&quot;: &quot;5333&quot;</span><br><span class="line">&#125;&#x27;</span><br><span class="line">或</span><br><span class="line">curl -X PUT &#x27;127.0.0.1:8848/nacos/v2/ns/instance/beat&#x27; \</span><br><span class="line">      -d &#x27;namespaceId=jarvex_space&#x27; \</span><br><span class="line">      -d &#x27;serviceName=jarvex-common-group@@entity-server&#x27; \</span><br><span class="line">      -d &#x27;ip=127.0.0.1&#x27; \</span><br><span class="line">      -d &#x27;port=5333&#x27;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>创建命令空间</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -d &#x27;namespaceId=jarvex_space&#x27; \</span><br><span class="line">  -d &#x27;namespaceName=jarvex&#x27; \</span><br><span class="line">  -X POST</span><br></pre></td></tr></table></figure></li>
<li><p>删除持久化实例</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -X DELETE &quot;http://127.0.0.1:8848/nacos/v2/ns/instance?serviceName=jarvex-gateway&amp;ip=192.168.1.148&amp;port=8085&amp;namespaceId=jarvex_space&amp;groupName=jarvex-common-group&amp;ephemeral=false&quot;</span><br></pre></td></tr></table></figure>

<h2 id="动态配置"><a href="#动态配置" class="headerlink" title="动态配置"></a>动态配置</h2><h3 id="方案一-nacos-config配置中心获取"><a href="#方案一-nacos-config配置中心获取" class="headerlink" title="方案一: nacos config配置中心获取"></a>方案一: nacos config配置中心获取</h3><ul>
<li><p>通过配置nacos config和 controller获取</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">config</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">enabled</span>: <span class="string">true</span></span><br><span class="line">  <span class="meta">server-addr</span>: <span class="string">$&#123;spring.cloud.nacos.server-addr&#125;</span></span><br><span class="line">  <span class="meta">file-extension</span>: <span class="string">yaml</span></span><br><span class="line">  <span class="attr">namespace</span>: <span class="string">public</span></span><br></pre></td></tr></table></figure>

<p>controller类使用 @Refresh，刷新动态配置</p>
</li>
</ul>
<h3 id="方案二：nacos-client-监听指定配置文件（recommended）"><a href="#方案二：nacos-client-监听指定配置文件（recommended）" class="headerlink" title="方案二：nacos client 监听指定配置文件（recommended）"></a>方案二：nacos client 监听指定配置文件（recommended）</h3><ul>
<li>编写监听类</li>
<li>手动刷新配置</li>
</ul>
<h3 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h3><ul>
<li><a href="https://www.lijunyi.xyz/docs/SpringCloud/SpringCloud.html#%E6%95%B4%E4%BD%93%E5%A4%A7%E7%BA%B2%F0%9F%92%A8">https://www.lijunyi.xyz/docs/SpringCloud/SpringCloud.html#%E6%95%B4%E4%BD%93%E5%A4%A7%E7%BA%B2%F0%9F%92%A8</a></li>
<li><a href="http://47.109.59.205/2023/01/02/SpringCloud%E5%AE%9E%E7%94%A8%E7%AF%8702/#1-Nacos%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86">http://47.109.59.205/2023/01/02/SpringCloud%E5%AE%9E%E7%94%A8%E7%AF%8702/#1-Nacos%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86</a></li>
<li><a href="https://cloud.tencent.com/developer/article/2096938">https://cloud.tencent.com/developer/article/2096938</a></li>
<li><a href="https://www.cnblogs.com/taojietaoge/p/16638226.html">https://www.cnblogs.com/taojietaoge/p/16638226.html</a></li>
</ul>
]]></content>
      <categories>
        <category>spring cloud</category>
      </categories>
      <tags>
        <tag>snippet</tag>
      </tags>
  </entry>
  <entry>
    <title>neo4j snippet</title>
    <url>/2017/11/21/neo4j%20snippet/</url>
    <content><![CDATA[<ul>
<li>cypher语法对大小写敏感，注意属性的大小写</li>
<li>导入csv出现乱码时，需要通过记事本更改编码格式，如果文本过大，需要一段一段的复制粘贴到新文本中，且以UTF-8格式编码</li>
<li>MERGE命令是CREATE命令和MATCH命令的组合。<code>MERGE = CREATE + MATCH</code></li>
</ul>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>1.<br>​    <strong>现象</strong>： 在外部处理csv数据，导入服务器，然后load csv到neo4j中，可能由于文件所属问题，不能成功导入csv，提示<code>Couldn&#39;t load the external resource</code>的错误。<br>​    <strong>解决</strong>：复制可以导入的csv文件为副本，把待导入的数据粘贴到副本中，load csv副本即可</p>
<p>2.<br>​    <strong>现象</strong>： 在外部处理csv数据，进行merge操作的时候，提示<code>cannot merge using null property value for uid</code>的错误。<br>​    <strong>解决</strong>：经发现，是由于指令中的属性拼写错误，导致<code>Neo.ClientError.Statement.SemanticError</code>的错误，例如把<code>sfzh</code>拼写成<code>sfhm</code>。</p>
<p>3.<br>​    <strong>现象</strong>： 大量数据的导入问题。<br>​    <strong>解决</strong>：需使用<a href="https://neo4j.com/docs/operations-manual/current/tools/import/" title="大量数据的导入">https://neo4j.com/docs/operations-manual/current/tools/import/</a><br>​    <strong>注意</strong>：<code>Import tool is only for newly created databases.</code><br>​        <code>You can use LOAD CSV cypher command to load into an existing database.</code>也就是说neo4j-admin import只会在新建数据库的时候会用到</p>
]]></content>
      <categories>
        <category>neo4j</category>
      </categories>
      <tags>
        <tag>snippet</tag>
      </tags>
  </entry>
  <entry>
    <title>next optimize</title>
    <url>/2017/06/01/next%20optimize/</url>
    <content><![CDATA[<h3 id="安装评论"><a href="#安装评论" class="headerlink" title="安装评论"></a>安装评论</h3><p><a href="https://zhuanlan.zhihu.com/p/33617273">来必力评论</a></p>
<p><a href="https://sjq597.github.io/2018/05/18/Hexo-%E4%BD%BF%E7%94%A8Gitment%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/">使用Gitment评论功能</a></p>
<h3 id="置顶功能"><a href="#置顶功能" class="headerlink" title="置顶功能"></a>置顶功能</h3><p><a href="https://donlex.cn/archives/caeb67e2.html">添加置顶</a></p>
]]></content>
      <categories>
        <category>next</category>
      </categories>
      <tags>
        <tag>optimize</tag>
      </tags>
  </entry>
  <entry>
    <title>npm snippet</title>
    <url>/2018/06/01/npm%20snippet/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vue项目： npm run dev  会在开发环境下 立即启动项目   </span><br><span class="line"></span><br><span class="line">react项目： npm run start  会在开发环境下 立即启动项目</span><br><span class="line"></span><br><span class="line">编译打包项目:npm run build  </span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>npm</category>
      </categories>
      <tags>
        <tag>snippet</tag>
      </tags>
  </entry>
  <entry>
    <title>postgresql snippet</title>
    <url>/2021/12/01/postgresql%20snippet/</url>
    <content><![CDATA[<h3 id="终端登录pg"><a href="#终端登录pg" class="headerlink" title="终端登录pg"></a>终端登录pg</h3><ul>
<li><p>如果之前没有登录过，需要设置当前用户进行登录操作</p>
<p>There is no default username and password without you creating one. The simplest possible setup is to follow these steps to set up your own user as a superuser.</p>
<p>At a terminal prompt, create a postgres user with your own username</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo -u postgres createuser --superuser $USER	# $USER无须替换</span><br></pre></td></tr></table></figure>

<p>Start the postgresql command prompt as your username but running as root since you didn’t set a password yet;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo -u postgres psql</span><br></pre></td></tr></table></figure>

<p>At the postgresql prompt, set your password;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\password $USER    # 其中$USER需要替换成当前用户名</span><br></pre></td></tr></table></figure>

<p>After that, you should be able to log on just fine.</p>
</li>
</ul>
<ul>
<li><p>如果之前设置了上面的步骤，可直接运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">psql postgres</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="导入文件"><a href="#导入文件" class="headerlink" title="导入文件"></a>导入文件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">psql postgres	# login command</span><br><span class="line">\c some_database	# choose database</span><br><span class="line">\i \path\TO\file_name.sql	# execute sql</span><br></pre></td></tr></table></figure>





<h3 id="连接指定schema"><a href="#连接指定schema" class="headerlink" title="连接指定schema"></a>连接指定schema</h3><ul>
<li><p>如果不指定schema的话，会默认访问public的schema</p>
</li>
<li><p>指定schema</p>
<p><code>jdbc:postgresql://localhost:5432/mydatabase?currentSchema=myschema</code></p>
</li>
</ul>
]]></content>
      <categories>
        <category>fragment</category>
      </categories>
      <tags>
        <tag>snippet</tag>
      </tags>
  </entry>
  <entry>
    <title>rabbitmq learn</title>
    <url>/2019/05/14/rabbitmq/</url>
    <content><![CDATA[<ul>
<li><p>查询已有queue</p>
<p><code>sudo rabbitmqctl list_queues</code></p>
</li>
<li><p>查询已有exchanges</p>
<p><code>sudo rabbitmqctl list_exchanges</code></p>
</li>
</ul>
<h2 id="Publish-Subscribe"><a href="#Publish-Subscribe" class="headerlink" title="Publish/Subscribe"></a>Publish/Subscribe</h2><ul>
<li><p>Exchanges</p>
<p>There are a few exchange types available: <strong>direct</strong>, <strong>topic</strong>, <strong>headers</strong> and <strong>fanout</strong>.</p>
</li>
<li><p>Bindings</p>
<p>A binding is a relationship between an exchange and a queue</p>
</li>
</ul>
]]></content>
      <categories>
        <category>rabbitmq</category>
      </categories>
      <tags>
        <tag>learn</tag>
      </tags>
  </entry>
  <entry>
    <title>reactjs learn</title>
    <url>/2019/03/29/reactjs%20learn/</url>
    <content><![CDATA[<blockquote>
<p>Like any unfamiliar technology, React does have a learning curve. With practice and some patience, you <em>will</em> get the hang of it.</p>
</blockquote>
<ul>
<li>React also streamlines how data is stored and handled, using <strong>state</strong> and <strong>props</strong>.</li>
</ul>
<h3 id="create-react-app"><a href="#create-react-app" class="headerlink" title="create react app"></a>create react app</h3><ul>
<li><code>npm install -g create-react-app</code></li>
<li><code>npx create-react-app my-app</code> or <code>npm init react-app my-app</code></li>
</ul>
<h2 id="JSX-JavaScript-XML"><a href="#JSX-JavaScript-XML" class="headerlink" title="JSX: JavaScript + XML"></a>JSX: JavaScript + XML</h2><blockquote>
<p>Babel compiles JSX down to <code>React.createElement()</code> calls.</p>
</blockquote>
<p>jsx</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> heading = <span class="xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">className</span>=<span class="string">&quot;site-heading&quot;</span>&gt;</span>Hello, React<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>non-jsx</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const heading = React.createElement(&#x27;h1&#x27;, &#123; className: &#x27;site-heading&#x27; &#125;, &#x27;Hello, React!&#x27;)</span><br></pre></td></tr></table></figure>

<p>the feature of jsx:</p>
<ul>
<li><code>className</code> is used instead of <code>class</code> for adding CSS classes, as <code>class</code> is a reserved keyword in JavaScript.</li>
<li>Properties and methods in JSX are camelCase - <code>onclick</code> will become <code>onClick</code>.</li>
<li>Self-closing tags <em>must</em> end in a slash - e.g. <code>&lt;img /&gt;</code></li>
</ul>
<h2 id="Components"><a href="#Components" class="headerlink" title="Components"></a>Components</h2><blockquote>
<p>Whether you declare a component <a href="https://reactjs.org/docs/components-and-props.html#function-and-class-components">as a function or a class</a>, it must never modify its own props. </p>
</blockquote>
<h3 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h3><p>The simplest way to define a component is to write a JavaScript function:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Welcome</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Class-Components"><a href="#Class-Components" class="headerlink" title="Class Components"></a>Class Components</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Table</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>Job<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>Charlie<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>Janitor<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Table</span><br></pre></td></tr></table></figure>

<h3 id="Simple-Components"><a href="#Simple-Components" class="headerlink" title="Simple Components"></a>Simple Components</h3><blockquote>
<p>The other type of component in React is the <strong>simple component</strong>, which is a function. This component doesn’t use the <code>class</code> keyword. Let’s take our <code>Table</code> and make two simple components for it - a table header, and a table body.</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> TableHeader = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">thead</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Job<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> TableBody = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>Charlie<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>Janitor<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Table</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">TableHeader</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">TableBody</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>Everything should appear as it did before. As you can see, components can be nested in other components, and simple and class components can be mixed.</p>
<p><strong>A class component must include <code>render()</code>, and the <code>return</code> can only return one parent element.</strong></p>
<h3 id="Converting-a-Function-to-a-Class"><a href="#Converting-a-Function-to-a-Class" class="headerlink" title="Converting a Function to a Class"></a>Converting a Function to a Class</h3><p>convert a function component to a class in five steps:</p>
<ol>
<li>Create an <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes">ES6 class</a>, with the same name, that extends <code>React.Component</code>.</li>
<li>Add a single empty method to it called <code>render()</code>.</li>
<li>Move the body of the function into the <code>render()</code> method.</li>
<li>Replace <code>props</code> with <code>this.props</code> in the <code>render()</code> body.</li>
<li>Delete the remaining empty function declaration.</li>
</ol>
<h2 id="Props"><a href="#Props" class="headerlink" title="Props"></a>Props</h2><blockquote>
<p>Props are an effective way to pass existing data to a React component, however the component cannot change the props - they’re read-only. </p>
</blockquote>
<ul>
<li><em>props</em> are a way of passing data from parent to child.</li>
</ul>
<h2 id="State"><a href="#State" class="headerlink" title="State"></a>State</h2><p>State is similar to props, but it is private and fully controlled by the component.</p>
<p>State is reserved only for interactivity, that is, data that changes over time. </p>
<blockquote>
<p>You can think of state as any data that should be saved and modified without necessarily being added to a database - for example, adding and removing items from a shopping cart before confirming your purchase.</p>
</blockquote>
<ul>
<li><p>You must use <code>this.setState()</code> to modify an array. Simply applying a new value to <code>this.state.property</code> will not work.</p>
<p> ie.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Wrong</span></span><br><span class="line"><span class="built_in">this</span>.state.comment = <span class="string">&#x27;Hello&#x27;</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Correct</span></span><br><span class="line"><span class="built_in">this</span>.setState(&#123;<span class="attr">comment</span>: <span class="string">&#x27;Hello&#x27;</span>&#125;);</span><br></pre></td></tr></table></figure></li>
</ul>
<p>tips:</p>
<p>Because <code>this.props</code> and <code>this.state</code> may be updated asynchronously, you should not rely on their values for calculating the next state.</p>
<p>ie.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Wrong</span></span><br><span class="line"><span class="built_in">this</span>.setState(&#123;</span><br><span class="line">  <span class="attr">counter</span>: <span class="built_in">this</span>.state.counter + <span class="built_in">this</span>.props.increment,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>use a second form of <code>setState()</code> that accepts a function rather than an object. That function will receive the previous state as the first argument, and the props at the time the update is applied as the second argument:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Correct</span></span><br><span class="line"><span class="built_in">this</span>.setState(<span class="function">(<span class="params">state, props</span>) =&gt;</span> (&#123;</span><br><span class="line">  <span class="attr">counter</span>: state.counter + props.increment</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure>

<h3 id="The-Data-Flows-Down"><a href="#The-Data-Flows-Down" class="headerlink" title="The Data Flows Down"></a>The Data Flows Down</h3><blockquote>
<p>If you imagine a component tree as a waterfall of props, each component’s state is like an additional water source that joins it at an arbitrary point but also flows down.</p>
</blockquote>
<p>Neither parent nor child components can know if a certain component is stateful or stateless, and they shouldn’t care whether it is defined as a function or a class.</p>
<p>This is why state is often called local or encapsulated. It is not accessible to any component other than the one that owns and sets it.</p>
<p>This is commonly called a “top-down” or “unidirectional” data flow. Any state is always owned by some specific component, and any data or UI derived from that state can only affect components “below” them in the tree.</p>
<h2 id="Lifecycle-methods"><a href="#Lifecycle-methods" class="headerlink" title="Lifecycle methods"></a>Lifecycle methods</h2><h3 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h3><h3 id="componentDidMount"><a href="#componentDidMount" class="headerlink" title="componentDidMount"></a>componentDidMount</h3><blockquote>
<p>The <code>componentDidMount()</code> method runs after the component output has been rendered to the DOM. </p>
</blockquote>
<h3 id="componentWillUnmount"><a href="#componentWillUnmount" class="headerlink" title="componentWillUnmount"></a>componentWillUnmount</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clock</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(props);</span><br><span class="line">    <span class="built_in">this</span>.state = &#123;<span class="attr">date</span>: <span class="keyword">new</span> <span class="built_in">Date</span>()&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.timerID = <span class="built_in">setInterval</span>(</span><br><span class="line">      <span class="function">() =&gt;</span> <span class="built_in">this</span>.tick(),</span><br><span class="line">      <span class="number">1000</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">componentWillUnmount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">clearInterval</span>(<span class="built_in">this</span>.timerID);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">tick</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      <span class="attr">date</span>: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>It is &#123;this.state.date.toLocaleTimeString()&#125;.<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Clock</span> /&gt;</span></span>,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>Let’s quickly recap what’s going on and the order in which the methods are called:</p>
<ol>
<li>When <code>&lt;Clock /&gt;</code> is passed to <code>ReactDOM.render()</code>, React calls the constructor of the <code>Clock</code>component. Since <code>Clock</code> needs to display the current time, it initializes <code>this.state</code> with an object including the current time. We will later update this state.</li>
<li>React then calls the <code>Clock</code> component’s <code>render()</code> method. This is how React learns what should be displayed on the screen. React then updates the DOM to match the <code>Clock</code>’s render output.</li>
<li>When the <code>Clock</code> output is inserted in the DOM, React calls the <code>componentDidMount()</code> lifecycle method. Inside it, the <code>Clock</code> component asks the browser to set up a timer to call the component’s <code>tick()</code> method once a second.</li>
<li>Every second the browser calls the <code>tick()</code> method. Inside it, the <code>Clock</code> component schedules a UI update by calling <code>setState()</code> with an object containing the current time. Thanks to the <code>setState()</code> call, React knows the state has changed, and calls the <code>render()</code> method again to learn what should be on the screen. This time, <code>this.state.date</code> in the <code>render()</code> method will be different, and so the render output will include the updated time. React updates the DOM accordingly.</li>
<li>If the <code>Clock</code> component is ever removed from the DOM, React calls the <code>componentWillUnmount()</code> lifecycle method so the timer is stopped.</li>
</ol>
<p>总结：constructor-&gt;render()-&gt;componentDidMount()</p>
<p>state改变-&gt;render()</p>
<h3 id="componentWillReceiveProps"><a href="#componentWillReceiveProps" class="headerlink" title="componentWillReceiveProps"></a>componentWillReceiveProps</h3><p>componentWillReceiveProps在初始化render的时候不会执行，它会在Component接受到新的状态(Props)时被触发，一般用于父组件状态更新时子组件的重新渲染。</p>
<p>在componentWillReceiveProps中想作任何变更最好都将两个状态进行比较，假如状态有异才执行下一步。不然容易造成组件的多次渲染，并且这些渲染都是没有意义的。</p>
<h2 id="Events"><a href="#Events" class="headerlink" title="Events"></a>Events</h2><h2 id="Conditional-Rendering"><a href="#Conditional-Rendering" class="headerlink" title="Conditional Rendering"></a>Conditional Rendering</h2><blockquote>
<p>Also remember that whenever conditions become too complex, it might be a good time to <a href="https://reactjs.org/docs/components-and-props.html#extracting-components">extract a component</a>.</p>
</blockquote>
<ul>
<li>Returning <code>null</code> from a component’s <code>render</code> method does not affect the firing of the component’s lifecycle methods. For instance <code>componentDidUpdate</code> will still be called.</li>
</ul>
<h2 id="Lists-and-Keys"><a href="#Lists-and-Keys" class="headerlink" title="Lists and Keys"></a>Lists and Keys</h2><blockquote>
<p>Keep in mind that if the <code>map()</code> body is too nested, it might be a good time to <a href="https://reactjs.org/docs/components-and-props.html#extracting-components">extract a component</a>.</p>
</blockquote>
<h2 id="Forms"><a href="#Forms" class="headerlink" title="Forms"></a>Forms</h2><h2 id="Lifting-State-Up"><a href="#Lifting-State-Up" class="headerlink" title="Lifting State Up"></a>Lifting State Up</h2><h2 id="Composition-vs-Inheritance"><a href="#Composition-vs-Inheritance" class="headerlink" title="Composition vs Inheritance"></a>Composition vs Inheritance</h2><ul>
<li>Remember that components may accept arbitrary props, including primitive values, React elements, or functions.</li>
</ul>
<h2 id="Thinking-in-React"><a href="#Thinking-in-React" class="headerlink" title="Thinking in React"></a>Thinking in React</h2><ul>
<li>You can build top-down or bottom-up. That is, you can either start with building the components higher up in the hierarchy or with the ones lower in it. In simpler examples, it’s usually easier to go top-down, and on larger projects, it’s easier to go bottom-up and write tests as you build.</li>
<li><strong>Remember</strong>: React is all about one-way data flow down the component hierarchy. </li>
</ul>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>learn</tag>
      </tags>
  </entry>
  <entry>
    <title>other snippet</title>
    <url>/2017/02/16/other%20tips/</url>
    <content><![CDATA[<h2 id="other-snippet"><a href="#other-snippet" class="headerlink" title="other snippet"></a>other snippet</h2><h3 id="generate-code-based-proto-file"><a href="#generate-code-based-proto-file" class="headerlink" title="generate code based proto file"></a>generate code based proto file</h3><p><code>protoc --proto_path=扫描目录 --java_out=代码生成目录 proto文件目录</code></p>
<blockquote>
<p>protoc –proto_path=src –java_out=build/gen src/foo.proto</p>
</blockquote>
<h3 id="Spring-provides-three-way-of-scheduling"><a href="#Spring-provides-three-way-of-scheduling" class="headerlink" title="Spring provides three way of scheduling:"></a>Spring provides three way of scheduling:</h3><ul>
<li>@Scheduled</li>
<li>Via Quartz</li>
<li>Via JDK Timer</li>
</ul>
<hr>
<h3 id="one-word"><a href="#one-word" class="headerlink" title="one word"></a>one word</h3><ul>
<li>\x对应的是UTF-8编码的数据</li>
</ul>
]]></content>
      <categories>
        <category>fragment</category>
      </categories>
      <tags>
        <tag>snippet</tag>
      </tags>
  </entry>
  <entry>
    <title>redis snippet</title>
    <url>/2018/02/16/redis%20snippet/</url>
    <content><![CDATA[<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ul>
<li><p>String</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; SET name &quot;runoob&quot;</span><br><span class="line">OK</span><br><span class="line">redis 127.0.0.1:6379&gt; GET name</span><br><span class="line">&quot;runoob&quot;</span><br></pre></td></tr></table></figure></li>
<li><p>Hash</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis&gt; HMSET myhash field1 &quot;Hello&quot; field2 &quot;World&quot;</span><br><span class="line">&quot;OK&quot;</span><br><span class="line">redis&gt; HGET myhash field1</span><br><span class="line">&quot;Hello&quot;</span><br><span class="line">redis&gt; HGET myhash field2</span><br><span class="line">&quot;World&quot;</span><br></pre></td></tr></table></figure></li>
<li><p>List</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; lpush runoob redis</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; lpush runoob mongodb</span><br><span class="line">(integer) 2</span><br><span class="line">redis 127.0.0.1:6379&gt; lpush runoob rabitmq</span><br><span class="line">(integer) 3</span><br><span class="line">redis 127.0.0.1:6379&gt; lrange runoob 0 10</span><br><span class="line">1) &quot;rabitmq&quot;</span><br><span class="line">2) &quot;mongodb&quot;</span><br><span class="line">3) &quot;redis&quot;</span><br><span class="line">redis 127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>Set</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; sadd runoob redis</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; sadd runoob mongodb</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; sadd runoob rabitmq</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; sadd runoob rabitmq</span><br><span class="line">(integer) 0</span><br><span class="line">redis 127.0.0.1:6379&gt; smembers runoob</span><br><span class="line"></span><br><span class="line">1) &quot;redis&quot;</span><br><span class="line">2) &quot;rabitmq&quot;</span><br><span class="line">3) &quot;mongodb&quot;</span><br></pre></td></tr></table></figure></li>
<li><p>zset(sorted set：有序集合)</p>
<ul>
<li><p>Redis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。</p>
<p>不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。zset的成员是唯一的,但分数(score)却可以重复。</p>
</li>
<li><p>命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zadd key score member </span><br></pre></td></tr></table></figure></li>
<li><p>实例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; zadd runoob 0 redis</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; zadd runoob 0 mongodb</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; zadd runoob 0 rabitmq</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; zadd runoob 0 rabitmq</span><br><span class="line">(integer) 0</span><br><span class="line">redis 127.0.0.1:6379&gt; &gt; ZRANGEBYSCORE runoob 0 1000</span><br><span class="line">1) &quot;mongodb&quot;</span><br><span class="line">2) &quot;rabitmq&quot;</span><br><span class="line">3) &quot;redis&quot;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><ul>
<li><p>show all keys</p>
<p><code>KEYS *</code></p>
</li>
<li><p>Delete All Keys In Redis</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">  Delete all keys from all Redis databases:</span><br><span class="line">`$ redis-cli FLUSHALL`</span><br><span class="line">Delete all keys of the currently selected Redis database:</span><br><span class="line">`$ redis-cli FLUSHDB`</span><br><span class="line">Delete all keys of the specified Redis database:</span><br><span class="line">`$ redis-cli -n &lt;database_number&gt; FLUSHDB`</span><br></pre></td></tr></table></figure></li>
<li><p>删除指定前缀的数据</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 删除指定CCR866前缀的redis数据</span></span><br><span class="line">path/to/redis-cli -p 16379 -a Redis6379  -n 1 keys &#x27;CCR866*&#x27; | xargs ./redis-cli -p 16379 -a Redis6379 -n 1 del</span><br></pre></td></tr></table></figure></li>
<li><p>在启动命令中添加 –raw,可以查看value的中文信息</p>
</li>
</ul>
<h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><ul>
<li><p>RedisConnectionFailureException</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis.conf中默认的是bind 127.0.0.1，需要将这段注释</span><br><span class="line">设置protected-mode no，因为如果是yes的话，只能进行本地访问。如果设置了密码和bind这个可以开启，如果没有设置，这个属性可以设置为no即可。</span><br><span class="line">daemonize  yes表示后台运行</span><br></pre></td></tr></table></figure></li>
<li><p>需要安装gcc</p>
</li>
<li><p>make时，提示fatal error: jemalloc/jemalloc.h: No such file or directory</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">解决：   </span><br><span class="line"><span class="built_in">cd</span> src/deps</span><br><span class="line">make hiredis jemalloc linenoise lua geohash-int</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>

<h3 id="自定义配置redis-server"><a href="#自定义配置redis-server" class="headerlink" title="自定义配置redis server"></a>自定义配置redis server</h3><p>涉及到的目录或文件有</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.配置文件    /etc/redis/xxxx.conf</span><br><span class="line">2.日志、数据文件    /data/redis/xxxx</span><br><span class="line">3.启动脚本    /etc/init.d/redis_xxxx</span><br></pre></td></tr></table></figure></li>
<li><p>客户端启动时    redis-cli -p xxxx</p>
</li>
</ul>
]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>snippet</tag>
      </tags>
  </entry>
  <entry>
    <title>redux learn</title>
    <url>/2019/04/07/redux%20learn/</url>
    <content><![CDATA[<h3 id="Passing-Data-Between-Adjacent-Components"><a href="#Passing-Data-Between-Adjacent-Components" class="headerlink" title="Passing Data Between Adjacent Components"></a>Passing Data Between Adjacent Components</h3><p>If you have components that are siblings and need to share data, the way to do that in React is to pull that data up into a parent component and pass it down with props.</p>
<p>That can be cumbersome though. Redux can help by giving you one global “parent” where you can store the data, and then you can <code>connect</code> the sibling components to the data with React-Redux.</p>
<h3 id="redux-vs-react-redux"><a href="#redux-vs-react-redux" class="headerlink" title="redux vs react-redux"></a>redux vs react-redux</h3><p><code>redux</code> knows nothing about React <em>at all</em>. (The <code>redux</code> library can be used outside of a React app too. It’ll work with Vue, Angular, and even backend Node/Express apps.)</p>
<p><code>react-redux</code> lets you connect pieces of the state to React components.</p>
<h3 id="store"><a href="#store" class="headerlink" title="store"></a>store</h3><p>in charge for orchestrating all the interactions</p>
<p>the <strong>state</strong> is the data, and the <strong>store</strong> is where it’s kept.</p>
<h3 id="reducer"><a href="#reducer" class="headerlink" title="reducer"></a>reducer</h3><p>the producer to make the state</p>
<blockquote>
<p>(state, action) =&gt; newState</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> letters = [<span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;x&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// `reduce` takes 2 arguments:</span></span><br><span class="line"><span class="comment">//   - a function to do the reducing (you might say, a &quot;reducer&quot;)</span></span><br><span class="line"><span class="comment">//   - an initial value for accumulatedResult</span></span><br><span class="line"><span class="keyword">var</span> word = letters.reduce(</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">accumulatedResult, arrayItem</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> accumulatedResult + arrayItem;</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="string">&#x27;&#x27;</span>); <span class="comment">// &lt;-- notice this empty string argument: it&#x27;s the initial value</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(word) <span class="comment">// =&gt; &quot;redux&quot;</span></span><br></pre></td></tr></table></figure>

<p>**Important Rule of Reducers **:</p>
<ul>
<li>Never return undefined from a reducer.</li>
<li>Reducers must be pure functions.(This means that they can’t modify their arguments, and they can’t have side effects.)</li>
</ul>
<h3 id="action"><a href="#action" class="headerlink" title="action"></a>action</h3><p>plain JavaScript objects with a property named type. </p>
<blockquote>
<p>An action object describes a change you want to make (like “please increment the counter”) or an event that happenend (like “the request to the server failed with this error”).</p>
<p>action don’t really <em>do</em> anything. Not on their own, anyway.</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&quot;add an item&quot;</span>,</span><br><span class="line">  <span class="attr">item</span>: <span class="string">&quot;Apple&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">or</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="number">7008</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">or</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&quot;INCREMENT&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>In order to make an action DO something, you need to <strong>dispatch</strong> it.</p>
<hr>
<h3 id="redux-tips"><a href="#redux-tips" class="headerlink" title="redux tips"></a>redux tips</h3><h4 id="Redux-avoids-these-problems-with-some-simple-rules"><a href="#Redux-avoids-these-problems-with-some-simple-rules" class="headerlink" title="Redux avoids these problems with some simple rules."></a>Redux avoids these problems with some simple rules.</h4><ul>
<li>State is read-only, and actions are the only way to modify it.</li>
<li>Changes happen one way, and one way only: dispatch(action) -&gt; reducer -&gt; new state.</li>
<li>The reducer function must be “pure” – it cannot modify its arguments, and it can’t have side effects.</li>
</ul>
<h4 id="The-most-important-methods"><a href="#The-most-important-methods" class="headerlink" title="The most important methods."></a>The most important methods.</h4><ul>
<li>getState for <strong>accessing the current state</strong> of the application</li>
<li>dispatch for <strong>dispatching an action</strong></li>
<li>subscribe for <strong>listening on state changes</strong></li>
</ul>
<h3 id="react-redux"><a href="#react-redux" class="headerlink" title="react-redux"></a>react-redux</h3><h4 id="Provider"><a href="#Provider" class="headerlink" title="Provider"></a>Provider</h4><p>By wrapping the entire app with the <code>Provider</code> component, <em>every component</em> in the app tree will be able to access the Redux store if it wants to.</p>
<h4 id="connect"><a href="#connect" class="headerlink" title="connect"></a>connect</h4><p>all of components can access the Redux store, but not automatically , We’ll need to use the <code>connect</code> function on our components to access the store.</p>
<h4 id="connects-a-React-component-with-the-Redux-store"><a href="#connects-a-React-component-with-the-Redux-store" class="headerlink" title="connects a React component with the Redux store."></a>connects a React component with the Redux store.</h4><ul>
<li>the mapStateToProps function</li>
<li>the mapDispatchToProps function</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> logo <span class="keyword">from</span> <span class="string">&quot;./logo.svg&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./App.css&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">&quot;react-redux&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; fetching, dog, onRequestDog, error &#125; = <span class="built_in">this</span>.props;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        ......</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mapStateToProps = <span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">fetching</span>: state.fetching,</span><br><span class="line">    <span class="attr">dog</span>: state.dog,</span><br><span class="line">    <span class="attr">error</span>: state.error</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mapDispatchToProps = <span class="function"><span class="params">dispatch</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">onRequestDog</span>: <span class="function">() =&gt;</span> dispatch(&#123; <span class="attr">type</span>: <span class="string">&quot;API_CALL_REQUEST&quot;</span> &#125;)</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(mapStateToProps, mapDispatchToProps)(App);</span><br></pre></td></tr></table></figure>



<h3 id="redux-thunk"><a href="#redux-thunk" class="headerlink" title="redux-thunk"></a>redux-thunk</h3><p>It is a <strong>middleware</strong>, basically a plugin for Redux, that enables Redux to deal with actions like <code>getUser()</code>, ie.<code>dispatch(getUser())</code></p>
<p>thunk: it’s an action creator that returns a function instead of a plain action object, like this:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doStuff</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">dispatch, getState</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// dispatch actions here</span></span><br><span class="line">    <span class="comment">// or fetch data</span></span><br><span class="line">    <span class="comment">// or whatever</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>the 2 agruments in return function,Most of the time you’ll only need <code>dispatch</code>, but sometimes you want to do something conditionally, based on some value in the Redux state. In that case, call <code>getState()</code> and you’ll have the entire state to read as needed.</p>
<h4 id="setup-redux-thunk"><a href="#setup-redux-thunk" class="headerlink" title="setup redux thunk"></a>setup redux thunk</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">&#x27;redux-thunk&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createStore, applyMiddleware &#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reducer</span>(<span class="params">state, action</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = createStore(</span><br><span class="line">  reducer,</span><br><span class="line">  applyMiddleware(thunk)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h3 id="redux-saga"><a href="#redux-saga" class="headerlink" title="redux-saga"></a>redux-saga</h3><p><code>redux-saga</code> relies on generators, but does a decent amount of the work for us, so (in my fairly limited experience) a deep understanding of them for this use-case isn’t necessary.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; takeLatest, call, put &#125; <span class="keyword">from</span> <span class="string">&quot;redux-saga/effects&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// watcher saga: watches for actions dispatched to the store, starts worker saga</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span>* <span class="title">watcherSaga</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> takeLatest(<span class="string">&quot;API_CALL_REQUEST&quot;</span>, workerSaga);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// function that makes the api request and returns a Promise for response</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fetchDog</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> axios(&#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&quot;get&quot;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&quot;https://dog.ceo/api/breeds/image/random&quot;</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// worker saga: makes the api call when watcher saga sees the action</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">workerSaga</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">yield</span> call(fetchDog);</span><br><span class="line">    <span class="keyword">const</span> dog = response.data.message;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// dispatch a success action to the store with the new dog</span></span><br><span class="line">    <span class="keyword">yield</span> put(&#123; <span class="attr">type</span>: <span class="string">&quot;API_CALL_SUCCESS&quot;</span>, dog &#125;);</span><br><span class="line">  </span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="comment">// dispatch a failure action to the store with the error</span></span><br><span class="line">    <span class="keyword">yield</span> put(&#123; <span class="attr">type</span>: <span class="string">&quot;API_CALL_FAILURE&quot;</span>, error &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>redux</category>
      </categories>
      <tags>
        <tag>learn</tag>
      </tags>
  </entry>
  <entry>
    <title>spring boot learn</title>
    <url>/2019/03/31/regex%20learn/</url>
    <content><![CDATA[<p align="center">
    <br/>
    <a href="https://github.com/ziishaned/learn-regex">
        <img src="https://i.imgur.com/bYwl7Vf.png" alt="Learn Regex">
    </a>
    <br /><br />
    <p>
        <a href="https://twitter.com/home?status=Learn%20regex%20the%20easy%20way%20by%20%40ziishaned%20http%3A//github.com/ziishaned/learn-regex">
            <img src="https://img.shields.io/badge/twitter-tweet-blue.svg?style=flat-square"/>
        </a>
        <a href="https://twitter.com/ziishaned">
            <img src="https://img.shields.io/badge/feedback-@ziishaned-blue.svg?style=flat-square" />
        </a>
    </p>
</p>
什么是正则表达式?

<blockquote>
<p>正则表达式是一组由字母和符号组成的特殊文本, 它可以用来从文本中找出满足你想要的格式的句子.</p>
</blockquote>
<p>一个正则表达式是在一个主体字符串中从左到右匹配字符串时的一种样式.<br>“Regular expression”这个词比较拗口, 我们常使用缩写的术语”regex”或”regexp”.<br>正则表达式可以从一个基础字符串中根据一定的匹配模式替换文本中的字符串、验证表单、提取字符串等等.</p>
<p>想象你正在写一个应用, 然后你想设定一个用户命名的规则, 让用户名包含字符,数字,下划线和连字符,以及限制字符的个数,好让名字看起来没那么丑.<br>我们使用以下正则表达式来验证一个用户名:</p>
<p><img src="https://i.imgur.com/H5uDOzW.png"></p>
<p>以上的正则表达式可以接受 <code>john_doe</code>, <code>jo-hn_doe</code>, <code>john12_as</code>.<br>但不匹配<code>Jo</code>, 因为它包含了大写的字母而且太短了.</p>
<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul>
<li><a href="#1-%E5%9F%BA%E6%9C%AC%E5%8C%B9%E9%85%8D">1. 基本匹配</a></li>
<li><a href="#2-%E5%85%83%E5%AD%97%E7%AC%A6">2. 元字符</a><pre><code> * [2.1 点运算符 .](#21-点运算符-)
 * [2.2 字符集](#22-字符集)
 * [2.2.1 否定字符集](#221-否定字符集)
</code></pre>
<ul>
<li><a href="#23-%E9%87%8D%E5%A4%8D%E6%AC%A1%E6%95%B0">2.3 重复次数</a><ul>
<li><a href="#231--%E5%8F%B7">2.3.1 * 号</a></li>
<li><a href="#232--%E5%8F%B7">2.3.2 + 号</a></li>
<li><a href="#233--%E5%8F%B7">2.3.3 ? 号</a></li>
</ul>
</li>
<li><a href="#24--%E5%8F%B7">2.4 {} 号</a></li>
<li><a href="#25--%E7%89%B9%E5%BE%81%E6%A0%87%E7%BE%A4">2.5 (…) 特征标群</a></li>
<li><a href="#26--%E6%88%96%E8%BF%90%E7%AE%97%E7%AC%A6">2.6 | 或运算符</a></li>
<li><a href="#27-%E8%BD%AC%E7%A0%81%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6">2.7 转码特殊字符</a></li>
<li><a href="#28-%E9%94%9A%E7%82%B9">2.8 锚点</a><ul>
<li><a href="#281--%E5%8F%B7">2.8.1 ^ 号</a></li>
<li><a href="#282--%E5%8F%B7">2.8.2 $ 号</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#3-%E7%AE%80%E5%86%99%E5%AD%97%E7%AC%A6%E9%9B%86">3. 简写字符集</a></li>
<li><a href="#4-%E9%9B%B6%E5%AE%BD%E5%BA%A6%E6%96%AD%E8%A8%80%E5%89%8D%E5%90%8E%E9%A2%84%E6%9F%A5">4. 零宽度断言(前后预查)</a><ul>
<li><a href="#41--%E6%AD%A3%E5%85%88%E8%A1%8C%E6%96%AD%E8%A8%80">4.1 ?=… 正先行断言</a></li>
<li><a href="#42--%E8%B4%9F%E5%85%88%E8%A1%8C%E6%96%AD%E8%A8%80">4.2 ?!… 负先行断言</a></li>
<li><a href="#43---%E6%AD%A3%E5%90%8E%E5%8F%91%E6%96%AD%E8%A8%80">4.3 ?&lt;= … 正后发断言</a></li>
<li><a href="#44--%E8%B4%9F%E5%90%8E%E5%8F%91%E6%96%AD%E8%A8%80">4.4 ?&lt;!… 负后发断言</a></li>
</ul>
</li>
<li><a href="#5-%E6%A0%87%E5%BF%97">5. 标志</a><ul>
<li><a href="#51-%E5%BF%BD%E7%95%A5%E5%A4%A7%E5%B0%8F%E5%86%99-case-insensitive">5.1 忽略大小写 (Case Insensitive)</a></li>
<li><a href="#52-%E5%85%A8%E5%B1%80%E6%90%9C%E7%B4%A2-global-search">5.2 全局搜索 (Global search)</a></li>
<li><a href="#53-%E5%A4%9A%E8%A1%8C%E4%BF%AE%E9%A5%B0%E7%AC%A6-multiline">5.3 多行修饰符 (Multiline)</a></li>
</ul>
</li>
<li><a href="#%E9%A2%9D%E5%A4%96%E8%A1%A5%E5%85%85">额外补充</a></li>
<li><a href="#%E8%B4%A1%E7%8C%AE">贡献</a></li>
<li><a href="#%E8%AE%B8%E5%8F%AF%E8%AF%81">许可证</a></li>
</ul>
<h2 id="1-基本匹配"><a href="#1-基本匹配" class="headerlink" title="1. 基本匹配"></a>1. 基本匹配</h2><p>正则表达式其实就是在执行搜索时的格式, 它由一些字母和数字组合而成.<br>例如: 一个正则表达式 <code>the</code>, 它表示一个规则: 由字母<code>t</code>开始,接着是<code>h</code>,再接着是<code>e</code>.</p>
<pre>
"the" => The fat cat sat on <a href="#learn-regex"><strong>the</strong></a> mat.
</pre>

<p><a href="https://regex101.com/r/dmRygT/1">在线练习</a></p>
<p>正则表达式<code>123</code>匹配字符串<code>123</code>. 它逐个字符的与输入的正则表达式做比较.</p>
<p>正则表达式是大小写敏感的, 所以<code>The</code>不会匹配<code>the</code>.</p>
<pre>
"The" => <a href="#learn-regex"><strong>The</strong></a> fat cat sat on the mat.
</pre>

<p><a href="https://regex101.com/r/1paXsy/1">在线练习</a></p>
<h2 id="2-元字符"><a href="#2-元字符" class="headerlink" title="2. 元字符"></a>2. 元字符</h2><p>正则表达式主要依赖于元字符.<br>元字符不代表他们本身的字面意思, 他们都有特殊的含义. 一些元字符写在方括号中的时候有一些特殊的意思. 以下是一些元字符的介绍:</p>
<table>
<thead>
<tr>
<th align="center">元字符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">.</td>
<td>句号匹配任意单个字符除了换行符.</td>
</tr>
<tr>
<td align="center">[ ]</td>
<td>字符种类. 匹配方括号内的任意字符.</td>
</tr>
<tr>
<td align="center">[^ ]</td>
<td>否定的字符种类. 匹配除了方括号里的任意字符</td>
</tr>
<tr>
<td align="center">*</td>
<td>匹配&gt;=0个重复的在*号之前的字符.</td>
</tr>
<tr>
<td align="center">+</td>
<td>匹配&gt;=1个重复的+号前的字符.</td>
</tr>
<tr>
<td align="center">?</td>
<td>标记?之前的字符为可选.</td>
</tr>
<tr>
<td align="center">{n,m}</td>
<td>匹配num个大括号之前的字符 (n &lt;= num &lt;= m).</td>
</tr>
<tr>
<td align="center">(xyz)</td>
<td>字符集, 匹配与 xyz 完全相等的字符串.</td>
</tr>
<tr>
<td align="center">&#124;</td>
<td>或运算符,匹配符号前或后的字符.</td>
</tr>
<tr>
<td align="center">&#92;</td>
<td>转义字符,用于匹配一些保留的字符 <code>[ ] ( ) &#123; &#125; . * + ? ^ $ \ &#124;</code></td>
</tr>
<tr>
<td align="center">^</td>
<td>从开始行开始匹配.</td>
</tr>
<tr>
<td align="center">$</td>
<td>从末端开始匹配.</td>
</tr>
</tbody></table>
<h2 id="2-1-点运算符"><a href="#2-1-点运算符" class="headerlink" title="2.1 点运算符 ."></a>2.1 点运算符 <code>.</code></h2><p><code>.</code>是元字符中最简单的例子.<br><code>.</code>匹配任意单个字符, 但不匹配换行符.<br>例如, 表达式<code>.ar</code>匹配一个任意字符后面跟着是<code>a</code>和<code>r</code>的字符串.</p>
<pre>
".ar" => The <a href="#learn-regex"><strong>car</strong></a> <a href="#learn-regex"><strong>par</strong></a>ked in the <a href="#learn-regex"><strong>gar</strong></a>age.
</pre>

<p><a href="https://regex101.com/r/xc9GkU/1">在线练习</a></p>
<h2 id="2-2-字符集"><a href="#2-2-字符集" class="headerlink" title="2.2 字符集"></a>2.2 字符集</h2><p>字符集也叫做字符类.<br>方括号用来指定一个字符集.<br>在方括号中使用连字符来指定字符集的范围.<br>在方括号中的字符集不关心顺序.<br>例如, 表达式<code>[Tt]he</code> 匹配 <code>the</code> 和 <code>The</code>.</p>
<pre>
"[Tt]he" => <a href="#learn-regex"><strong>The</strong></a> car parked in <a href="#learn-regex"><strong>the</strong></a> garage.
</pre>

<p><a href="https://regex101.com/r/2ITLQ4/1">在线练习</a></p>
<p>方括号的句号就表示句号.<br>表达式 <code>ar[.]</code> 匹配 <code>ar.</code>字符串</p>
<pre>
"ar[.]" => A garage is a good place to park a c<a href="#learn-regex"><strong>ar.</strong></a>
</pre>

<p><a href="https://regex101.com/r/wL3xtE/1">在线练习</a></p>
<h3 id="2-2-1-否定字符集"><a href="#2-2-1-否定字符集" class="headerlink" title="2.2.1 否定字符集"></a>2.2.1 否定字符集</h3><p>一般来说 <code>^</code> 表示一个字符串的开头, 但它用在一个方括号的开头的时候, 它表示这个字符集是否定的.<br>例如, 表达式<code>[^c]ar</code> 匹配一个后面跟着<code>ar</code>的除了<code>c</code>的任意字符.</p>
<pre>
"[^c]ar" => The car <a href="#learn-regex"><strong>par</strong></a>ked in the <a href="#learn-regex"><strong>gar</strong></a>age.
</pre>

<p><a href="https://regex101.com/r/nNNlq3/1">在线练习</a></p>
<h2 id="2-3-重复次数"><a href="#2-3-重复次数" class="headerlink" title="2.3 重复次数"></a>2.3 重复次数</h2><p>后面跟着元字符 <code>+</code>, <code>*</code> or <code>?</code> 的, 用来指定匹配子模式的次数.<br>这些元字符在不同的情况下有着不同的意思.</p>
<h3 id="2-3-1-号"><a href="#2-3-1-号" class="headerlink" title="2.3.1 * 号"></a>2.3.1 <code>*</code> 号</h3><p><code>*</code>号匹配 在<code>*</code>之前的字符出现<code>大于等于0</code>次.<br>例如, 表达式 <code>a*</code> 匹配以0或更多个a开头的字符, 因为有0个这个条件, 其实也就匹配了所有的字符. 表达式<code>[a-z]*</code> 匹配一个行中所有以小写字母开头的字符串.</p>
<pre>
"[a-z]*" => T<a href="#learn-regex"><strong>he</strong></a> <a href="#learn-regex"><strong>car</strong></a> <a href="#learn-regex"><strong>parked</strong></a> <a href="#learn-regex"><strong>in</strong></a> <a href="#learn-regex"><strong>the</strong></a> <a href="#learn-regex"><strong>garage</strong></a> #21.
</pre>

<p><a href="https://regex101.com/r/7m8me5/1">在线练习</a></p>
<p><code>*</code>字符和<code>.</code>字符搭配可以匹配所有的字符<code>.*</code>.<br><code>*</code>和表示匹配空格的符号<code>\s</code>连起来用, 如表达式<code>\s*cat\s*</code>匹配0或更多个空格开头和0或更多个空格结尾的cat字符串.</p>
<pre>
"\s*cat\s*" => The fat<a href="#learn-regex"><strong> cat </strong></a>sat on the con<a href="#learn-regex"><strong>cat</strong></a>enation.
</pre>

<p><a href="https://regex101.com/r/gGrwuz/1">在线练习</a></p>
<h3 id="2-3-2-号"><a href="#2-3-2-号" class="headerlink" title="2.3.2 + 号"></a>2.3.2 <code>+</code> 号</h3><p><code>+</code>号匹配<code>+</code>号之前的字符出现 &gt;=1 次.<br>例如表达式<code>c.+t</code> 匹配以首字母<code>c</code>开头以<code>t</code>结尾,中间跟着任意个字符的字符串.</p>
<pre>
"c.+t" => The fat <a href="#learn-regex"><strong>cat sat on the mat</strong></a>.
</pre>

<p><a href="https://regex101.com/r/Dzf9Aa/1">在线练习</a></p>
<h3 id="2-3-3-号"><a href="#2-3-3-号" class="headerlink" title="2.3.3 ? 号"></a>2.3.3 <code>?</code> 号</h3><p>在正则表达式中元字符 <code>?</code> 标记在符号前面的字符为可选, 即出现 0 或 1 次.<br>例如, 表达式 <code>[T]?he</code> 匹配字符串 <code>he</code> 和 <code>The</code>.</p>
<pre>
"[T]he" => <a href="#learn-regex"><strong>The</strong></a> car is parked in the garage.
</pre>

<p><a href="https://regex101.com/r/cIg9zm/1">在线练习</a></p>
<pre>
"[T]?he" => <a href="#learn-regex"><strong>The</strong></a> car is parked in t<a href="#learn-regex"><strong>he</strong></a> garage.
</pre>

<p><a href="https://regex101.com/r/kPpO2x/1">在线练习</a></p>
<h2 id="2-4-号"><a href="#2-4-号" class="headerlink" title="2.4 {} 号"></a>2.4 <code>&#123;&#125;</code> 号</h2><p>在正则表达式中 <code>&#123;&#125;</code> 是一个量词, 常用来一个或一组字符可以重复出现的次数.<br>例如,  表达式 <code>[0-9]&#123;2,3&#125;</code> 匹配最少 2 位最多 3 位 0~9 的数字.</p>
<pre>
"[0-9]{2,3}" => The number was 9.<a href="#learn-regex"><strong>999</strong></a>7 but we rounded it off to <a href="#learn-regex"><strong>10</strong></a>.0.
</pre>

<p><a href="https://regex101.com/r/juM86s/1">在线练习</a></p>
<p>我们可以省略第二个参数.<br>例如, <code>[0-9]&#123;2,&#125;</code> 匹配至少两位 0~9 的数字.</p>
<p>如果逗号也省略掉则表示重复固定的次数.<br>例如, <code>[0-9]&#123;3&#125;</code> 匹配3位数字</p>
<pre>
"[0-9]{2,}" => The number was 9.<a href="#learn-regex"><strong>9997</strong></a> but we rounded it off to <a href="#learn-regex"><strong>10</strong></a>.0.
</pre>

<p><a href="https://regex101.com/r/Gdy4w5/1">在线练习</a></p>
<pre>
"[0-9]{3}" => The number was 9.<a href="#learn-regex"><strong>999</strong></a>7 but we rounded it off to 10.0.
</pre>

<p><a href="https://regex101.com/r/Sivu30/1">在线练习</a></p>
<h2 id="2-5-特征标群"><a href="#2-5-特征标群" class="headerlink" title="2.5 (...) 特征标群"></a>2.5 <code>(...)</code> 特征标群</h2><p>特征标群是一组写在 <code>(...)</code> 中的子模式. 例如之前说的 <code>&#123;&#125;</code> 是用来表示前面一个字符出现指定次数. 但如果在 <code>&#123;&#125;</code> 前加入特征标群则表示整个标群内的字符重复 N 次. 例如, 表达式 <code>(ab)*</code> 匹配连续出现 0 或更多个 <code>ab</code>.</p>
<p>我们还可以在 <code>()</code> 中用或字符 <code>|</code> 表示或. 例如, <code>(c|g|p)ar</code> 匹配 <code>car</code> 或 <code>gar</code> 或 <code>par</code>.</p>
<pre>
"(c|g|p)ar" => The <a href="#learn-regex"><strong>car</strong></a> is <a href="#learn-regex"><strong>par</strong></a>ked in the <a href="#learn-regex"><strong>gar</strong></a>age.
</pre>

<p><a href="https://regex101.com/r/tUxrBG/1">在线练习</a></p>
<h2 id="2-6-或运算符"><a href="#2-6-或运算符" class="headerlink" title="2.6 | 或运算符"></a>2.6 <code>|</code> 或运算符</h2><p>或运算符就表示或, 用作判断条件.</p>
<p>例如 <code>(T|t)he|car</code> 匹配 <code>(T|t)he</code> 或 <code>car</code>.</p>
<pre>
"(T|t)he|car" => <a href="#learn-regex"><strong>The</strong></a> <a href="#learn-regex"><strong>car</strong></a> is parked in <a href="#learn-regex"><strong>the</strong></a> garage.
</pre>

<p><a href="https://regex101.com/r/fBXyX0/1">在线练习</a></p>
<h2 id="2-7-转码特殊字符"><a href="#2-7-转码特殊字符" class="headerlink" title="2.7 转码特殊字符"></a>2.7 转码特殊字符</h2><p>反斜线 <code>\</code> 在表达式中用于转码紧跟其后的字符. 用于指定 <code>&#123; &#125; [ ] / \ + * . $ ^ | ?</code> 这些特殊字符. 如果想要匹配这些特殊字符则要在其前面加上反斜线 <code>\</code>.</p>
<p>例如 <code>.</code> 是用来匹配除换行符外的所有字符的. 如果想要匹配句子中的 <code>.</code> 则要写成 <code>\.</code> 以下这个例子 <code>\.?</code>是选择性匹配<code>.</code></p>
<pre>
"(f|c|m)at\.?" => The <a href="#learn-regex"><strong>fat</strong></a> <a href="#learn-regex"><strong>cat</strong></a> sat on the <a href="#learn-regex"><strong>mat.</strong></a>
</pre>

<p><a href="https://regex101.com/r/DOc5Nu/1">在线练习</a></p>
<h2 id="2-8-锚点"><a href="#2-8-锚点" class="headerlink" title="2.8 锚点"></a>2.8 锚点</h2><p>在正则表达式中, 想要匹配指定开头或结尾的字符串就要使用到锚点. <code>^</code> 指定开头, <code>$</code> 指定结尾.</p>
<h3 id="2-8-1-号"><a href="#2-8-1-号" class="headerlink" title="2.8.1 ^ 号"></a>2.8.1 <code>^</code> 号</h3><p><code>^</code> 用来检查匹配的字符串是否在所匹配字符串的开头.</p>
<p>例如, 在 <code>abc</code> 中使用表达式 <code>^a</code> 会得到结果 <code>a</code>. 但如果使用 <code>^b</code> 将匹配不到任何结果. 因为在字符串 <code>abc</code> 中并不是以 <code>b</code> 开头.</p>
<p>例如, <code>^(T|t)he</code> 匹配以 <code>The</code> 或 <code>the</code> 开头的字符串.</p>
<pre>
"(T|t)he" => <a href="#learn-regex"><strong>The</strong></a> car is parked in <a href="#learn-regex"><strong>the</strong></a> garage.
</pre>

<p><a href="https://regex101.com/r/5ljjgB/1">在线练习</a></p>
<pre>
"^(T|t)he" => <a href="#learn-regex"><strong>The</strong></a> car is parked in the garage.
</pre>

<p><a href="https://regex101.com/r/jXrKne/1">在线练习</a></p>
<h3 id="2-8-2-号"><a href="#2-8-2-号" class="headerlink" title="2.8.2 `###  号"></a>2.8.2 `###  号</h3><p>同理于 <code>^</code> 号, <code>$</code> 号用来匹配字符是否是最后一个.</p>
<p>例如, <code>(at\.)$</code> 匹配以 <code>at.</code> 结尾的字符串.</p>
<pre>
"(at\.)" => The fat c<a href="#learn-regex"><strong>at.</strong></a> s<a href="#learn-regex"><strong>at.</strong></a> on the m<a href="#learn-regex"><strong>at.</strong></a>
</pre>

<p><a href="https://regex101.com/r/y4Au4D/1">在线练习</a></p>
<pre>
"(at\.)$" => The fat cat. sat. on the m<a href="#learn-regex"><strong>at.</strong></a>
</pre>

<p><a href="https://regex101.com/r/t0AkOd/1">在线练习</a></p>
<h2 id="3-简写字符集"><a href="#3-简写字符集" class="headerlink" title="3. 简写字符集"></a>3. 简写字符集</h2><p>正则表达式提供一些常用的字符集简写. 如下:</p>
<table>
<thead>
<tr>
<th align="center">简写</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">.</td>
<td>除换行符外的所有字符</td>
</tr>
<tr>
<td align="center">\w</td>
<td>匹配所有字母数字, 等同于 <code>[a-zA-Z0-9_]</code></td>
</tr>
<tr>
<td align="center">\W</td>
<td>匹配所有非字母数字, 即符号, 等同于: <code>[^\w]</code></td>
</tr>
<tr>
<td align="center">\d</td>
<td>匹配数字: <code>[0-9]</code></td>
</tr>
<tr>
<td align="center">\D</td>
<td>匹配非数字: <code>[^\d]</code></td>
</tr>
<tr>
<td align="center">\s</td>
<td>匹配所有空格字符, 等同于: <code>[\t\n\f\r\p&#123;Z&#125;]</code></td>
</tr>
<tr>
<td align="center">\S</td>
<td>匹配所有非空格字符: <code>[^\s]</code></td>
</tr>
<tr>
<td align="center">\f</td>
<td>匹配一个换页符</td>
</tr>
<tr>
<td align="center">\n</td>
<td>匹配一个换行符</td>
</tr>
<tr>
<td align="center">\r</td>
<td>匹配一个回车符</td>
</tr>
<tr>
<td align="center">\t</td>
<td>匹配一个制表符</td>
</tr>
<tr>
<td align="center">\v</td>
<td>匹配一个垂直制表符</td>
</tr>
<tr>
<td align="center">\p</td>
<td>匹配 CR/LF (等同于 <code>\r\n</code>)，用来匹配 DOS 行终止符</td>
</tr>
</tbody></table>
<h2 id="4-零宽度断言-前后预查"><a href="#4-零宽度断言-前后预查" class="headerlink" title="4. 零宽度断言(前后预查)"></a>4. 零宽度断言(前后预查)</h2><p>先行断言和后发断言都属于<strong>非捕获簇</strong>(不捕获文本 ，也不针对组合计进行计数).<br>先行断言用于判断所匹配的格式是否在另一个确定的格式之前, 匹配结果不包含该确定格式(仅作为约束).</p>
<p>例如, 我们想要获得所有跟在 <code>$</code> 符号后的数字, 我们可以使用正后发断言 <code>(?&lt;=\$)[0-9\.]*</code>.<br>这个表达式匹配 <code>$</code> 开头, 之后跟着 <code>0,1,2,3,4,5,6,7,8,9,.</code> 这些字符可以出现大于等于 0 次.</p>
<p>零宽度断言如下:</p>
<table>
<thead>
<tr>
<th align="center">符号</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">?=</td>
<td>正先行断言-存在</td>
</tr>
<tr>
<td align="center">?!</td>
<td>负先行断言-排除</td>
</tr>
<tr>
<td align="center">?&lt;=</td>
<td>正后发断言-存在</td>
</tr>
<tr>
<td align="center">?&lt;!</td>
<td>负后发断言-排除</td>
</tr>
</tbody></table>
<h3 id="4-1-正先行断言"><a href="#4-1-正先行断言" class="headerlink" title="4.1 ?=... 正先行断言"></a>4.1 <code>?=...</code> 正先行断言</h3><p><code>?=...</code> 正先行断言, 表示第一部分表达式之后必须跟着 <code>?=...</code>定义的表达式.</p>
<p>返回结果只包含满足匹配条件的第一部分表达式.<br>定义一个正先行断言要使用 <code>()</code>. 在括号内部使用一个问号和等号: <code>(?=...)</code>. </p>
<p>正先行断言的内容写在括号中的等号后面.<br>例如, 表达式 <code>(T|t)he(?=\sfat)</code> 匹配 <code>The</code> 和 <code>the</code>, 在括号中我们又定义了正先行断言 <code>(?=\sfat)</code> ,即 <code>The</code> 和 <code>the</code> 后面紧跟着 <code>(空格)fat</code>.</p>
<pre>
"(T|t)he(?=\sfat)" => <a href="#learn-regex"><strong>The</strong></a> fat cat sat on the mat.
</pre>

<p><a href="https://regex101.com/r/IDDARt/1">在线练习</a></p>
<h3 id="4-2-负先行断言"><a href="#4-2-负先行断言" class="headerlink" title="4.2 ?!... 负先行断言"></a>4.2 <code>?!...</code> 负先行断言</h3><p>负先行断言 <code>?!</code> 用于筛选所有匹配结果, 筛选条件为 其后不跟随着断言中定义的格式.<br><code>正先行断言</code>  定义和 <code>负先行断言</code> 一样, 区别就是 <code>=</code> 替换成 <code>!</code> 也就是 <code>(?!...)</code>.</p>
<p>表达式 <code>(T|t)he(?!\sfat)</code> 匹配 <code>The</code> 和 <code>the</code>, 且其后不跟着 <code>(空格)fat</code>.</p>
<pre>
"(T|t)he(?!\sfat)" => The fat cat sat on <a href="#learn-regex"><strong>the</strong></a> mat.
</pre>

<p><a href="https://regex101.com/r/V32Npg/1">在线练习</a></p>
<h3 id="4-3-lt-正后发断言"><a href="#4-3-lt-正后发断言" class="headerlink" title="4.3 ?&lt;= ... 正后发断言"></a>4.3 <code>?&lt;= ...</code> 正后发断言</h3><p>正后发断言 记作<code>(?&lt;=...)</code> 用于筛选所有匹配结果, 筛选条件为 其前跟随着断言中定义的格式.<br>例如, 表达式 <code>(?&lt;=(T|t)he\s)(fat|mat)</code> 匹配 <code>fat</code> 和 <code>mat</code>, 且其前跟着 <code>The</code> 或 <code>the</code>.</p>
<pre>
"(?<=(T|t)he\s)(fat|mat)" => The <a href="#learn-regex"><strong>fat</strong></a> cat sat on the <a href="#learn-regex"><strong>mat</strong></a>.
</pre>

<p><a href="https://regex101.com/r/avH165/1">在线练习</a></p>
<h3 id="4-4-lt-负后发断言"><a href="#4-4-lt-负后发断言" class="headerlink" title="4.4 ?&lt;!... 负后发断言"></a>4.4 <code>?&lt;!...</code> 负后发断言</h3><p>负后发断言 记作 <code>(?&lt;!...)</code> 用于筛选所有匹配结果, 筛选条件为 其前不跟随着断言中定义的格式.<br>例如, 表达式 <code>(?&lt;!(T|t)he\s)(cat)</code> 匹配 <code>cat</code>, 且其前不跟着 <code>The</code> 或 <code>the</code>.</p>
<pre>
"(?&lt;!(T|t)he\s)(cat)" => The cat sat on <a href="#learn-regex"><strong>cat</strong></a>.
</pre>

<p><a href="https://regex101.com/r/8Efx5G/1">在线练习</a></p>
<h2 id="5-标志"><a href="#5-标志" class="headerlink" title="5. 标志"></a>5. 标志</h2><p>标志也叫模式修正符, 因为它可以用来修改表达式的搜索结果.<br>这些标志可以任意的组合使用, 它也是整个正则表达式的一部分.</p>
<table>
<thead>
<tr>
<th align="center">标志</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">i</td>
<td>忽略大小写.</td>
</tr>
<tr>
<td align="center">g</td>
<td>全局搜索.</td>
</tr>
<tr>
<td align="center">m</td>
<td>多行的: 锚点元字符 <code>^</code> <code>$</code> 工作范围在每行的起始.</td>
</tr>
</tbody></table>
<h3 id="5-1-忽略大小写-Case-Insensitive"><a href="#5-1-忽略大小写-Case-Insensitive" class="headerlink" title="5.1 忽略大小写 (Case Insensitive)"></a>5.1 忽略大小写 (Case Insensitive)</h3><p>修饰语 <code>i</code> 用于忽略大小写.<br>例如, 表达式 <code>/The/gi</code> 表示在全局搜索 <code>The</code>, 在后面的 <code>i</code> 将其条件修改为忽略大小写, 则变成搜索 <code>the</code> 和 <code>The</code>, <code>g</code> 表示全局搜索.</p>
<pre>
"The" => <a href="#learn-regex"><strong>The</strong></a> fat cat sat on the mat.
</pre>

<p><a href="https://regex101.com/r/dpQyf9/1">在线练习</a></p>
<pre>
"/The/gi" => <a href="#learn-regex"><strong>The</strong></a> fat cat sat on <a href="#learn-regex"><strong>the</strong></a> mat.
</pre>

<p><a href="https://regex101.com/r/ahfiuh/1">在线练习</a></p>
<h3 id="5-2-全局搜索-Global-search"><a href="#5-2-全局搜索-Global-search" class="headerlink" title="5.2 全局搜索 (Global search)"></a>5.2 全局搜索 (Global search)</h3><p>修饰符 <code>g</code> 常用于执行一个全局搜索匹配, 即(不仅仅返回第一个匹配的, 而是返回全部).<br>例如, 表达式 <code>/.(at)/g</code> 表示搜索 任意字符(除了换行) + <code>at</code>, 并返回全部结果.</p>
<pre>
"/.(at)/" => The <a href="#learn-regex"><strong>fat</strong></a> cat sat on the mat.
</pre>

<p><a href="https://regex101.com/r/jnk6gM/1">在线练习</a></p>
<pre>
"/.(at)/g" => The <a href="#learn-regex"><strong>fat</strong></a> <a href="#learn-regex"><strong>cat</strong></a> <a href="#learn-regex"><strong>sat</strong></a> on the <a href="#learn-regex"><strong>mat</strong></a>.
</pre>

<p><a href="https://regex101.com/r/dO1nef/1">在线练习</a></p>
<h3 id="5-3-多行修饰符-Multiline"><a href="#5-3-多行修饰符-Multiline" class="headerlink" title="5.3 多行修饰符 (Multiline)"></a>5.3 多行修饰符 (Multiline)</h3><p>多行修饰符 <code>m</code> 常用语执行一个多行匹配.</p>
<p>像之前介绍的 <code>(^,$)</code> 用于检查格式是否是在待检测字符串的开头或结尾. 但我们如果想要它在每行的开头和结尾生效, 我们需要用到多行修饰符 <code>m</code>.</p>
<p>例如, 表达式 <code>/at(.)?$/gm</code> 表示小写字符 <code>a</code> 后跟小写字符 <code>t</code> , 末尾可选除换行符外任意字符. 根据 <code>m</code> 修饰符, 现在表达式匹配每行的结尾.</p>
<pre>
"/.at(.)?$/" => The fat
                cat sat
                on the <a href="#learn-regex"><strong>mat.</strong></a>
</pre>

<p><a href="https://regex101.com/r/hoGMkP/1">在线练习</a></p>
<pre>
"/.at(.)?$/gm" => The <a href="#learn-regex"><strong>fat</strong></a>
                  cat <a href="#learn-regex"><strong>sat</strong></a>
                  on the <a href="#learn-regex"><strong>mat.</strong></a>
</pre>

<p><a href="https://regex101.com/r/E88WE2/1">在线练习</a></p>
<h3 id="6-贪婪匹配与惰性匹配-Greedy-vs-lazy-matching"><a href="#6-贪婪匹配与惰性匹配-Greedy-vs-lazy-matching" class="headerlink" title="6. 贪婪匹配与惰性匹配 (Greedy vs lazy matching)"></a>6. 贪婪匹配与惰性匹配 (Greedy vs lazy matching)</h3><p>正则表达式默认采用贪婪匹配模式，在该模式下意味着会匹配尽可能长的子串。我们可以使用 <code>?</code> 将贪婪匹配模式转化为惰性匹配模式。</p>
<pre>
"/(.*at)/" => <a href="#learn-regex"><strong>The fat cat sat on the mat</strong></a>. </pre>

<p><a href="https://regex101.com/r/AyAdgJ/1">在线练习</a></p>
<pre>
"/(.*?at)/" => <a href="#learn-regex"><strong>The fat</strong></a> cat sat on the mat. </pre>


<p><a href="https://regex101.com/r/AyAdgJ/2">在线练习</a></p>
<h2 id="贡献"><a href="#贡献" class="headerlink" title="贡献"></a>贡献</h2><ul>
<li>报告问题</li>
<li>开放合并请求</li>
<li>传播此文档</li>
<li>直接和我联系 <a href="mailto:&#x7a;&#x69;&#x69;&#115;&#x68;&#97;&#x6e;&#101;&#x64;&#x40;&#103;&#x6d;&#97;&#105;&#108;&#x2e;&#99;&#111;&#x6d;">&#x7a;&#x69;&#x69;&#115;&#x68;&#97;&#x6e;&#101;&#x64;&#x40;&#103;&#x6d;&#97;&#105;&#108;&#x2e;&#99;&#111;&#x6d;</a> 或 <a href="https://twitter.com/ziishaned"><img src="https://img.shields.io/twitter/url/https/twitter.com/ziishaned.svg?style=social&label=Follow%20@ziishaned" alt="Twitter URL"></a></li>
</ul>
<h2 id="许可证"><a href="#许可证" class="headerlink" title="许可证"></a>许可证</h2><p>MIT &copy; <a href="https://twitter.com/ziishaned">Zeeshan Ahmad</a></p>
]]></content>
      <categories>
        <category>spring boot</category>
      </categories>
      <tags>
        <tag>learn</tag>
      </tags>
  </entry>
  <entry>
    <title>restful snippet</title>
    <url>/2017/12/08/restful%20snippet/</url>
    <content><![CDATA[<ul>
<li><strong>GET</strong>: A safe read-only method that reads a single or a list of resources.</li>
<li><strong>POST</strong>: Creates a new resource.</li>
<li><strong>PUT</strong>: Completely replaces the resource(s) at the given location with the new data.</li>
<li><strong>PATCH</strong>: Merges the resource(s) at the given location with the new data.</li>
<li><strong>DELETE</strong>: Deletes the resource(s) at a location.</li>
<li><strong>HEAD</strong>: Same as GET but only returns the header and no data.</li>
</ul>
<p><strong>用 URL 表示要操作的资源，用不同的 HTTP 请求（GET，POST，PUT，DELETE）描述对资源的操作，通过 HTTP 的状态码来判断此次对资源操作的结果</strong>，这就是 Restful风格。 </p>
<ol>
<li>GET 用来获取资源</li>
<li>POST 用来新增资源</li>
<li>PUT 用来更新资源</li>
<li>DELETE 用来删除资源</li>
</ol>
<ul>
<li>put和delete虽然是http协议的规范 ,但是遗憾的是,所有的无论是html4还是h5都不支持,所以我们在实际开开发过程当中要模拟这两种状态。 </li>
</ul>
<h3 id="Restful有什么意义"><a href="#Restful有什么意义" class="headerlink" title="Restful有什么意义"></a>Restful有什么意义</h3><ul>
<li>网络上的所有的信息体都看作一种资源，对网络资源的某种操作，都是通过 method 来确定的。 </li>
<li>对于现在的数据或者资源提供方，对外透露的接口一般是 restful 风格的，有利于不同系统之间的资源共享,而且只需要遵守规范不需要做另外的配置就能达到资源共享。 </li>
</ul>
<p><strong>restful 是用来外提供接口的，主要用于在不同的系统之间进行数据的交互。</strong></p>
<p><strong>ps：其实在做内部系统的时候并不会使用 restful 风格的 url 请求，只用普通的 @RequestMapping 来匹配请求就行了。</strong></p>
<h2 id="返回码"><a href="#返回码" class="headerlink" title="返回码"></a>返回码</h2><p>RESTful API 中的标准返回码通常遵循 HTTP 状态码，并根据不同的操作和结果返回不同的状态码。以下是一些常见的 HTTP 状态码及其通常的含义：</p>
<ul>
<li><strong>200 OK</strong>: 表示请求成功。通常用于 GET 请求。</li>
<li><strong>201 Created</strong>: 表示成功创建了新的资源。通常用于 POST 请求。</li>
<li><strong>204 No Content</strong>: 表示请求成功处理，但没有返回内容。通常用于 DELETE 请求。</li>
<li><strong>400 Bad Request</strong>: 表示客户端发送的请求有错误，服务器无法理解。</li>
<li><strong>401 Unauthorized</strong>: 表示请求需要用户认证，用户没有提供有效的认证信息。</li>
<li><strong>403 Forbidden</strong>: 表示服务器理解请求，但拒绝执行，通常因为权限问题。</li>
<li><strong>404 Not Found</strong>: 表示请求的资源不存在。</li>
<li><strong>405 Method Not Allowed</strong>: 表示请求方法不被允许。</li>
<li><strong>409 Conflict</strong>: 表示请求可能引发冲突，例如更新资源时的版本冲突。</li>
<li><strong>500 Internal Server Error</strong>: 表示服务器在处理请求时发生了错误。</li>
<li>502 <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/502">Bad Gateway</a> - This indicates an invalid response from an upstream server.</li>
<li>503 Service Unavailable - This indicates that something unexpected happened on server side (It can be anything like server overload, some parts of the system failed, etc.).</li>
</ul>
<p>RESTful API 的返回码可以根据实际情况进行适当扩展和调整，但通常遵循以上基本的 HTTP 状态码标准。</p>
<h2 id="TIPS"><a href="#TIPS" class="headerlink" title="TIPS"></a>TIPS</h2><ul>
<li>url中包含传参时，例如delete  /auth/user/{参数}，那此时其他delete方法 /auth/user/other，会发生冲突，需要在路径侯后面添加“/”，变成/auth/user/other/</li>
</ul>
<hr>
<ul>
<li>reference <a href="https://stackoverflow.blog/2020/03/02/best-practices-for-rest-api-design/">Best practices for REST API design</a></li>
</ul>
]]></content>
      <categories>
        <category>restful</category>
      </categories>
      <tags>
        <tag>snippet</tag>
      </tags>
  </entry>
  <entry>
    <title>rpc snippet</title>
    <url>/2017/12/16/rpc%20snippet/</url>
    <content><![CDATA[<p>RPC<br>Remote Procedure Call，远程过程调用</p>
<hr>
<p>服务之间的调用大多采用rpc的方式调用，或者消息队列的方式进行解耦。</p>
<p>RPC与http调用的区别<br>rpc是基于TCP/IP协议的，而HTTP服务主要是基于HTTP协议的，而http协议是在传输层协议TCP之上的。所以rpc效率更好。</p>
<p>RPC是指远程过程调用，也就是说两台服务器A，B，一个应用部署在A服务器上，想要调用B服务器上应用提供的函数/方法，<br>由于不在一个内存空间，不能直接调用，需要通过网络来表达调用的语义和传达调用的数据。</p>
<p>由于计算能力需要横向扩展，需要在多台机器组成的集群上部署应用。</p>
]]></content>
      <categories>
        <category>rpc</category>
      </categories>
      <tags>
        <tag>snippet</tag>
      </tags>
  </entry>
  <entry>
    <title>rpc vs mq</title>
    <url>/2018/12/08/rpc%20vs%20mq/</url>
    <content><![CDATA[<h3 id="系统结构"><a href="#系统结构" class="headerlink" title="系统结构"></a>系统结构</h3><ul>
<li><p>rpc</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Consumer =&gt; Provider</span><br><span class="line">Consumer调用的Provider提供的服务。</span><br></pre></td></tr></table></figure>

<ul>
<li>同步调用，对于要等待返回结果/处理结果的场景，RPC是可以非常自然直觉的使用方式。</li>
<li>由于等待结果，Consumer（Client）会有线程消耗。</li>
<li>RPC也可以是异步调用，如果以异步RPC的方式使用，Consumer（Client）线程消耗可以去掉。但不能做到像消息一样暂存消息/请求，压力会直接传导到服务Provider。</li>
</ul>
</li>
<li><p>message queue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Sender =&gt; Queue &lt;= Receiver</span><br><span class="line">Sender发送消息给Queue;Receiver从Queue拿到消息来处理</span><br></pre></td></tr></table></figure>

<ul>
<li>Message Queue把请求的压力保存一下，逐渐释放出来，让处理者按照自己的节奏来处理。</li>
<li>Message Queue引入一下新的结点，让系统的可靠性会受Message Queue结点的影响。</li>
<li>Message Queue是<strong>异步单向</strong>的消息。发送消息设计成是<strong>不需要等待</strong>消息处理的完成。</li>
</ul>
</li>
</ul>
<h3 id="见解"><a href="#见解" class="headerlink" title="见解"></a>见解</h3><ul>
<li>这两者可以拿来比较，但是个人感觉并不是同一个层面的问题。RPC是分布式服务之间调用的一种解决方案，是我们在做架构设计决策时同分布式对象，REST等层面的东西比较，决策的一个方案！ 消息系统更多是我们为了解决系统之间的解耦，以及性能问题等方面所考虑的方案。</li>
</ul>
]]></content>
      <categories>
        <category>a vs b</category>
      </categories>
      <tags>
        <tag>vs</tag>
      </tags>
  </entry>
  <entry>
    <title>session tracking</title>
    <url>/2015/02/18/session%20tracking/</url>
    <content><![CDATA[<h2 id="session"><a href="#session" class="headerlink" title="session"></a>session</h2><blockquote>
<p>Session simply means a particular interval of time.<br>Session Tracking is a way to maintain state (data) of an user. It is also known as session management in servlet.</p>
</blockquote>
<ul>
<li><p>HTTP is stateless that means each request is considered as the new request. It is shown in the figure given below:<br><img src="https://www.javatpoint.com/images/newrequest.JPG"></p>
</li>
<li><p>There are four techniques used in Session tracking:</p>
<ul>
<li>Cookies</li>
<li>Hidden Form Field</li>
<li>URL Rewriting</li>
<li>HttpSession</li>
</ul>
</li>
</ul>
<h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><blockquote>
<p>A cookie is a small piece of information that is persisted between the multiple client requests.<br>A cookie has a name, a single value, and optional attributes such as a comment, path and domain qualifiers, a maximum age, and a version number.</p>
</blockquote>
<h3 id="how-cookie-work"><a href="#how-cookie-work" class="headerlink" title="how cookie work"></a>how cookie work</h3><p><img src="https://www.javatpoint.com/phppages/images/cookie.png"></p>
<h3 id="type-of-cookie"><a href="#type-of-cookie" class="headerlink" title="type of cookie"></a>type of cookie</h3><ul>
<li><p>Non-persistent cookie</p>
<blockquote>
<p>It is valid for single session only. It is removed each time when user closes the browser.</p>
</blockquote>
</li>
<li><p>Persistent cookie</p>
<blockquote>
<p>It is valid for multiple session . It is not removed each time when user closes the browser. It is removed only if user logout or signout.</p>
</blockquote>
</li>
<li><p>Advantage </p>
<ul>
<li>Simplest technique of maintaining the state.</li>
<li>Cookies are maintained at client side.</li>
</ul>
</li>
<li><p>Disadvantage</p>
<ul>
<li>It will not work if cookie is disabled from the browser.</li>
<li>Only textual information can be set in Cookie object.</li>
</ul>
</li>
</ul>
<h2 id="HttpSession-Interface"><a href="#HttpSession-Interface" class="headerlink" title="HttpSession Interface"></a>HttpSession Interface</h2><ul>
<li>An object of HttpSession can be used to perform two tasks:<ul>
<li>bind objects</li>
<li>view and manipulate information about a session, such as the session identifier, creation time, and last accessed time.<br><img src="https://www.javatpoint.com/images/httpsession.JPG"></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>learn</tag>
      </tags>
  </entry>
  <entry>
    <title>shiro snippet</title>
    <url>/2016/05/20/shiro%20snippet/</url>
    <content><![CDATA[<p>**对于一个好的框架，从外部来看应该具有非常简单易于使用的 API，且 API 契约明确；从内部来看的话，其应该有一个可扩展的架构，即非常容易插入用户自定义实现，因为任何框架都不能满足所有需求。 **</p>
<hr>
<ul>
<li><p>Subject</p>
<p>主体，代表了当前的用户</p>
</li>
<li><p>SecurityManager</p>
<p>安全管理器，它管理着所有Subject，相当于springmvc中的DispatcherServlet(前端控制器)</p>
</li>
<li><p>Realm</p>
<p>域，Shiro从Realm获取安全数据（如用户、角色、权限） ，是验证主体subject的数据源</p>
</li>
</ul>
<p>流程如图：</p>
<p><img src="http://wiki.jikexueyuan.com/project/shiro/images/2.png"></p>
<p><strong>流程说明</strong>：</p>
<ol>
<li>应用代码通过 Subject 来进行认证和授权，而 Subject 又委托给 SecurityManager；</li>
<li>我们需要给 Shiro 的 SecurityManager 注入 Realm，从而让 SecurityManager 能得到合法的用户及其权限进行判断。</li>
</ol>
<p><strong>从以上也可以看出，Shiro 不提供维护用户 / 权限，而是通过 Realm 让开发人员自己注入。</strong> </p>
<hr>
<p>shiro的内部结构如图：</p>
<p><img src="http://wiki.jikexueyuan.com/project/shiro/images/3.png"></p>
<hr>
<h3 id="身份验证"><a href="#身份验证" class="headerlink" title="身份验证"></a>身份验证</h3><p><strong>principals</strong>：身份，即主体的标识属性，可以是任何东西，如用户名、邮箱等，唯一即可。 </p>
<p><strong>credentials</strong>：证明 / 凭证，即只有主体知道的安全值，如密码 / 数字证书等。 </p>
<ul>
<li>身份认证流程</li>
</ul>
<p><img src="http://wiki.jikexueyuan.com/project/shiro/images/4.png"></p>
<hr>
<h3 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h3><p>授权，也叫访问控制，即在应用中控制谁能访问哪些资源（如访问页面/编辑数据/页面操作等）。在授权中需了解的几个关键对象：主体（Subject）、资源（Resource）、权限（Permission）、角色（Role）。 </p>
<ul>
<li>授权方式编程式、注解式、jsp/gsp标签式</li>
</ul>
]]></content>
      <categories>
        <category>shiro</category>
      </categories>
      <tags>
        <tag>snippet</tag>
      </tags>
  </entry>
  <entry>
    <title>spring snippet</title>
    <url>/2016/10/16/spring%20snippet/</url>
    <content><![CDATA[<h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><h4 id="传JSON字符串-RequestBody接收"><a href="#传JSON字符串-RequestBody接收" class="headerlink" title="传JSON字符串+@RequestBody接收"></a>传JSON字符串+@RequestBody接收</h4><ul>
<li>前端<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">function <span class="title">icheckDelete</span><span class="params">(url)</span></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> parms = &#123;</span><br><span class="line">      list : array <span class="comment">//这是个数组</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  $.ajax(&#123;</span><br><span class="line">      dataType: <span class="string">&quot;JSON&quot;</span>,</span><br><span class="line">      contentType:<span class="string">&#x27;application/json;charset=UTF-8&#x27;</span>,<span class="comment">//关键是要加上这行</span></span><br><span class="line">      traditional:<span class="keyword">true</span>,<span class="comment">//这使json格式的字符不会被转码</span></span><br><span class="line">      data: JSON.stringify(parms),</span><br><span class="line">      type: <span class="string">&quot;DELETE&quot;</span>, </span><br><span class="line">      timeout: <span class="number">20000</span>,</span><br><span class="line">      url: url,</span><br><span class="line">      success : function () &#123;</span><br><span class="line">          alert(<span class="string">&quot;删除成功！&quot;</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">      error : function (data)&#123;</span><br><span class="line">          alert(data.responseText);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></li>
</ul>
<p>}</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">- 后端</span><br><span class="line">Controller:</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;deleteList&quot;, method = RequestMethod.DELETE)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">delete</span><span class="params">(<span class="meta">@RequestBody</span> DeleteListRequest request)</span> <span class="keyword">throws</span> WebTransException</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 逻辑代码 */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="RESTFUL"><a href="#RESTFUL" class="headerlink" title="RESTFUL"></a>RESTFUL</h2><ul>
<li> <code>@RestController</code> class level annotation and then add the following <code>@RequestMapping</code> to the class</li>
</ul>
]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>snippet</tag>
      </tags>
  </entry>
  <entry>
    <title>spring aop</title>
    <url>/2017/12/18/spring%20aop/</url>
    <content><![CDATA[<h3 id="Architectural"><a href="#Architectural" class="headerlink" title="Architectural"></a>Architectural</h3><p><img src="https://www.baeldung.com/wp-content/uploads/2017/11/Program_Execution.jpg"></p>
<h3 id="Business-Object"><a href="#Business-Object" class="headerlink" title="Business Object"></a>Business Object</h3><blockquote>
<p><strong>A business object is a normal class which has a normal business logic.</strong></p>
</blockquote>
<h3 id="Aspect"><a href="#Aspect" class="headerlink" title="Aspect"></a>Aspect</h3><blockquote>
<p><strong>An aspect is a modularization of a concern that cuts across multiple classes.</strong></p>
</blockquote>
<h3 id="JoinPoint"><a href="#JoinPoint" class="headerlink" title="JoinPoint"></a>JoinPoint</h3><blockquote>
<p><strong>A Joinpoint is a point during the execution of a program, such as execution of a method or the handling of an exception.</strong></p>
</blockquote>
<p>In Spring AOP, a <em>JoinPoint</em> always represents a method execution.</p>
<h3 id="Pointcut"><a href="#Pointcut" class="headerlink" title="Pointcut"></a>Pointcut</h3><blockquote>
<p><strong>A Pointcut is a predicate that helps match an <em>Advice</em> to be applied by an <em>Aspect</em> at a particular <em>JoinPoint</em>.</strong></p>
</blockquote>
<p>The Advice is often associated with a <em>Pointcut</em> expression and runs at any <em>Joinpoint</em> matched by the Pointcut.</p>
<h3 id="Advice"><a href="#Advice" class="headerlink" title="Advice"></a>Advice</h3><blockquote>
<p><strong>An advice is an action taken by an aspect at a particular <em>Joinpoint</em>. Different types of advice include <em>“around,” “before”</em> and <em>“after”</em> advice.</strong></p>
</blockquote>
<p>In Spring, an <em>Advice</em> is modeled as an interceptor, maintaining a chain of interceptors around the <em>Joinpoint</em>.</p>
<hr>
<h3 id="Example-Wiring-Business-Object-and-Aspect"><a href="#Example-Wiring-Business-Object-and-Aspect" class="headerlink" title="Example:Wiring Business Object and Aspect"></a>Example:Wiring Business Object and Aspect</h3><ul>
<li><p>Business Object</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleAdder</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>a simple Aspect</p>
<p>Unified logging can be an example of such cross-cutting concern:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdderAfterReturnAspect</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturn</span><span class="params">(Object returnValue)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        logger.info(<span class="string">&quot;value return was &#123;&#125;&quot;</span>,  returnValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>config excerpt</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sampleAdder&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.xxx.SampleAdder&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;doAfterReturningAspect&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">&quot;org.xxx.AdderAfterReturnAspect&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">&quot;aspects&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;doAfterReturningAspect&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointCutAfterReturning&quot;</span> <span class="attr">expression</span>=</span></span><br><span class="line"><span class="tag">         <span class="string">&quot;execution(* org.xxx.SampleAdder+.*(..))&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">&quot;afterReturn&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">returning</span>=<span class="string">&quot;returnValue&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointCutAfterReturning&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<blockquote>
<p>依赖注入DI有助于应用对象之间的解耦，而AOP可以实现横切关注点与它们所影响的对象之间的解耦</p>
</blockquote>
<ul>
<li><p>通知Advice</p>
<blockquote>
<p>切面的工作被称为通知，通知定义了切面是什么以及何时使用。</p>
</blockquote>
<ul>
<li>前置通知（Before）：在目标方法被调用之前调用通知功能</li>
<li>后置通知（After）：在目标方法完成之后调用通知，此时不会关心方法的输出</li>
<li>返回通知（After-returning）：在目标方法成功执行之后调用通知</li>
<li>异常通知（After-throwing）：在目标方法抛出异常后调用通知</li>
<li>环绕通知（Around）：通知包裹了被通知的方法，在被通知的方法调用之前和调用之后执行自定义的行为。</li>
</ul>
</li>
<li><p>连接点Join point</p>
<blockquote>
<p>连接点是应用程序的点，可供插入切面</p>
<p>我理解的是程序的某处，或者任意一处都可以称作为连接点</p>
</blockquote>
</li>
<li><p>切点Pointcut</p>
<blockquote>
<p>切点有助于缩小切面所通知的连接点的范围</p>
<p>如果Advice定义了切面的what和when,那么pointcut就定义了where</p>
</blockquote>
</li>
<li><p>切面Aspect</p>
<blockquote>
<p>Aspect是Advice和Pointcut的结合</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>learn</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot snippet</title>
    <url>/2016/08/14/springboot%20snippet/</url>
    <content><![CDATA[<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><ul>
<li><p>```<br>bootstrap.yml（bootstrap.properties）用来程序引导时执行，应用于更加早期配置信息读取，如可以使用来配置application.yml中使用到参数等</p>
<p>application.yml（application.properties) 应用程序特有配置信息，可以用来配置后续各个模块中需使用的公共参数等。</p>
<p>加载顺序：bootstrap.yml &gt; application.yml &gt; application-dev(prod).yml </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">## 问题随记</span><br><span class="line"></span><br><span class="line">### Spring Boot通过Mybatis，使用mapper接口和xml配置sql，连接数据库</span><br><span class="line"></span><br><span class="line">- 首先在配置文件application.properties</span><br><span class="line">  </span><br><span class="line">  ```properties</span><br><span class="line">  spring.datasource.url=jdbc:mysql://localhost:3306/test</span><br><span class="line">  spring.datasource.username=***</span><br><span class="line">  spring.datasource.password=***</span><br><span class="line">  spring.datasource.driverClassName=com.mysql.jdbc.Driver</span><br><span class="line">  </span><br><span class="line">  #mybatis.typeAliasesPackage：为实体对象所在的包，跟数据库表一一对应</span><br><span class="line">  #mybatis.mapperLocations：mapper文件的位置</span><br><span class="line">  </span><br><span class="line">  mybatis.typeAliasesPackage=com.xxx.model</span><br><span class="line">  mybatis.mapperLocations=classpath:mybatis/mapper/*Mapper.xml</span><br></pre></td></tr></table></figure></li>
<li><p>在启动类Application.java中写上配置信息 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.xxx.dao&quot;)</span> <span class="comment">// mybatis扫描路径，针对的是接口Mapper类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DailyreportApplication</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DailyreportApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="2">
<li>mysql连接异常<code>java.sql.SQLException: Value &#39;0000-00-00&#39; can not be represented as java.sql.Date</code></li>
</ol>
<ul>
<li>解决办法<code>jdbc:mysql://yourserver:3306/yourdatabase?zeroDateTimeBehavior=convertToNull </code></li>
</ul>
]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>snippet</tag>
      </tags>
  </entry>
  <entry>
    <title>tomcat snippet</title>
    <url>/2016/12/16/tomcat%20snippet/</url>
    <content><![CDATA[<h3 id="配置项"><a href="#配置项" class="headerlink" title="配置项"></a>配置项</h3><ul>
<li>项目部署到linux的tomcat中，验证码在页面中刷新不了，需要修改<code>catalina.sh</code>,添加<code>JAVA_OPTS=&quot;$JAVA_OPTS -Djava.awt.headless=true&quot;</code>配置</li>
</ul>
<h3 id="设置虚拟路径的两种方法"><a href="#设置虚拟路径的两种方法" class="headerlink" title="设置虚拟路径的两种方法"></a>设置虚拟路径的两种方法</h3><ul>
<li>使用tomcat自身设置虚拟路径</li>
</ul>
<ol>
<li><p>在tomcat的server.xml配置文件中，配置context标签</p>
<p>Context标签中的相关属性：</p>
<ul>
<li>path: 指定访问该web应用的URL入口，即虚拟文件目录</li>
<li>docBase:为访问的真实路径</li>
<li>reloadable:如果这个属性设为true，tomcat服务器在运行状态下会监视在WEB-INF/classes和WEB-INF/lib目录下class文件的改动， 如果监测到有class文件被更新的，服务器会自动重新加载Web应用。 </li>
</ul>
</li>
<li><p>如果这事使用idea启动项目，需要将Deploy applications configured in Tomcat instance勾上 </p>
</li>
</ol>
<ul>
<li><p>单独设置IDEA进行设置虚拟路径</p>
<ol>
<li><p>上图的中<code>Deploy applications configured in Tomcat instance</code>不要勾上 </p>
</li>
<li><p>选中<code>edit configurations</code>，点击加号按钮，选择实际路径，并在<code>Appication context</code>中填写虚拟路径。</p>
</li>
</ol>
</li>
</ul>
<h3 id="设置URL请求参数长度"><a href="#设置URL请求参数长度" class="headerlink" title="设置URL请求参数长度"></a>设置URL请求参数长度</h3><ul>
<li><p>问题描述</p>
<p>post请求，本身请求参数无大小限制，但是一般的服务器像tomcat都有默认大小，如果传输的参数超过了默认大小，则会报错<code>http post request header is too large</code></p>
</li>
<li><p>解决办法</p>
<p>在server.xml中<code>&lt;Connector connectionTimeout=&quot;20000&quot; port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot; redirectPort=&quot;8443&quot;/&gt;  </code>，添加设置项<code>maxHttpHeaderSize =&quot;102400&quot; </code></p>
</li>
</ul>
]]></content>
      <categories>
        <category>tomcat</category>
      </categories>
      <tags>
        <tag>snippet</tag>
      </tags>
  </entry>
  <entry>
    <title>TOP command</title>
    <url>/2022/01/03/top%20command/</url>
    <content><![CDATA[<h3 id="cpu"><a href="#cpu" class="headerlink" title="cpu"></a>cpu</h3><p>us：用户态使用的cpu时间比<br>sy：系统态使用的cpu时间比<br>ni：用做nice加权的进程分配的用户态cpu时间比<br>id：空闲的cpu时间比<br>wa：cpu等待磁盘写入完成时间<br>hi：硬中断消耗时间<br>si：软中断消耗时间<br>st：虚拟机偷取时间</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>command</tag>
      </tags>
  </entry>
  <entry>
    <title>sublime snippet</title>
    <url>/2017/09/07/sublime%20snippet/</url>
    <content><![CDATA[<ul>
<li><p>安装插件</p>
<p><code>CTRL + SHIFT + P并且输入Package Control: Install Package  </code></p>
</li>
<li><p>html格式化</p>
<p><code>输入！，然后按 TAB</code></p>
</li>
<li><p>Pretty JSON插件</p>
<p><code>格式化  CTRL + ALT + J</code></p>
</li>
</ul>
]]></content>
      <categories>
        <category>sublime</category>
      </categories>
      <tags>
        <tag>command</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu snippet</title>
    <url>/2021/10/08/ubuntu%20snippet/</url>
    <content><![CDATA[<h2 id="磁盘挂载"><a href="#磁盘挂载" class="headerlink" title="磁盘挂载"></a>磁盘挂载</h2><ol>
<li><p>Get the UUID of the partition</p>
<p><code>sudo blkid</code></p>
</li>
<li><p>Add partition to fstab</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> /data was on /dev/sda3</span></span><br><span class="line">UUID=0009091A00027E42 /data            ntfs   defaults,iocharset=utf8,fmask=111,dmask=002        0       2</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="deepin-wine"><a href="#deepin-wine" class="headerlink" title="deepin wine"></a>deepin wine</h2><h2 id="百度网盘id"><a href="#百度网盘id" class="headerlink" title="百度网盘id"></a>百度网盘id</h2><ul>
<li><p>一直停留在登录界面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">删除　～/baidunetdisk文件夹，再次启动即可</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="光驱相关"><a href="#光驱相关" class="headerlink" title="光驱相关"></a>光驱相关</h2><p>CDROM, DVD 这些设备现在来说都是属于古董了，但因为有些第三方软件是以CDROM的形式提供的，所以有时候还会遇到如何挂载的问题?</p>
<p>在Ubuntu Server 18.04中，要挂载 CDROM(DVD)可以遵循以下步骤:</p>
<h4 id="挂载-CDROM-DVD"><a href="#挂载-CDROM-DVD" class="headerlink" title="挂载 CDROM(DVD)"></a>挂载 CDROM(DVD)</h4><ol>
<li>确认设备文件名, 进入 dev 目录， 执行：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /dev</span><br><span class="line">ls -lt | less</span><br></pre></td></tr></table></figure>

<p>系统显示一个设备列表，可以看到其中有两个特别的，分别是:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cdrom -&gt; sr0</span><br><span class="line">dvd -&gt; sr0</span><br></pre></td></tr></table></figure>

<p>说明系统已经将 cdrom, dvd 命名为 sr0 的别名，其实是同一个设备。</p>
<ol>
<li>执行 mount 命令挂载cdrom, 因为 ubuntu server 18.04中，已经在根目录下建了一个名为 cdrom 的目录，我们就使用这个目录来挂载，执行:</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo mount /dev/cdrom /cdrom</span><br></pre></td></tr></table></figure>

<h4 id="卸载-CDROM-DVD"><a href="#卸载-CDROM-DVD" class="headerlink" title="卸载 CDROM (DVD)"></a>卸载 CDROM (DVD)</h4><p>要想卸载 CDROM, 可以简单的执行:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo umount /cdrom</span><br></pre></td></tr></table></figure>

<p>如果是想推出当前的光盘，则可以执行:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo eject /cdrom</span><br></pre></td></tr></table></figure>

<h2 id="postgre"><a href="#postgre" class="headerlink" title="postgre"></a>postgre</h2><p>在本机安装，非docker，user: postgres     pw:postgres </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo -u postgres psql</span><br></pre></td></tr></table></figure>

<h2 id="更改-Ubuntu-18-04-登陆背景"><a href="#更改-Ubuntu-18-04-登陆背景" class="headerlink" title="更改 Ubuntu 18.04 登陆背景"></a>更改 Ubuntu 18.04 登陆背景</h2><ol>
<li><p><code>sudo vi /etc/alternatives/gdm3.css</code></p>
</li>
<li><p>修改 CSS 文件内容</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#lockDialogGroup</span> &#123;</span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">/*自己喜欢的图片的路径。注意，不需要resource://开头*/</span>);</span><br><span class="line"><span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line"><span class="attribute">background-size</span>: cover;</span><br><span class="line"><span class="attribute">background-position</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="配合electron-ssr进行终端外网访问"><a href="#配合electron-ssr进行终端外网访问" class="headerlink" title="配合electron-ssr进行终端外网访问"></a>配合electron-ssr进行终端外网访问</h2><p>在<code>/etc/profile</code>中添加配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export http_proxy=&quot;http://127.0.0.1:12333&quot;</span><br><span class="line">export https_proxy=&quot;http://127.0.0.1:12333&quot;</span><br></pre></td></tr></table></figure>

<p>然后<code>source /etc/profile</code>即可</p>
<h2 id="升级到2204版本中文输入法只在终端可用解决"><a href="#升级到2204版本中文输入法只在终端可用解决" class="headerlink" title="升级到2204版本中文输入法只在终端可用解决"></a>升级到2204版本中文输入法只在终端可用解决</h2><blockquote>
<p>参考：<a href="https://zhuanlan.zhihu.com/p/508797663">https://zhuanlan.zhihu.com/p/508797663</a></p>
</blockquote>
<ul>
<li>/etc/profile 添加</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export XMODIFIERS=@im=fcitx</span><br><span class="line">export GTK_IM_MODULE=fcitx</span><br><span class="line">export QT_IM_MODULE=fcitx</span><br></pre></td></tr></table></figure>

<ul>
<li>~/.pam_environment 添加以下几行：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GTK_IM_MODULE DEFAULT=fcitx</span><br><span class="line">QT_IM_MODULE DEFAULT=fcitx</span><br><span class="line">XMODIFIERS DEFAULT=@im=fcitx</span><br><span class="line">SDL_IM_MODULE DEFAULT=fcitx</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>snippet</tag>
      </tags>
  </entry>
  <entry>
    <title>linux config</title>
    <url>/2016/05/16/version%20sort/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 	Α 	α 	alpha a:lf 阿尔法</span><br><span class="line">2 	Β 	β 	beta bet 贝塔</span><br><span class="line">3 	Γ 	γ 	gamma ga:m 伽马</span><br><span class="line">4 	Δ 	δ 	delta delt 德尔塔</span><br><span class="line">5 	Ε 	ε 	epsilon ep`silon 伊普西龙</span><br><span class="line">6 	Ζ 	ζ 	zeta zat 截塔</span><br><span class="line">7 	Η 	η 	eta eit 艾塔</span><br><span class="line">8 	Θ 	θ 	theta θit 西塔</span><br><span class="line">9 	Ι 	ι 	iota aiot 约塔</span><br><span class="line">10	Κ 	κ 	kappa kap 卡帕</span><br><span class="line">11	∧ 	λ 	lambda lambd 兰布达</span><br><span class="line">12	Μ 	μ 	mu mju 缪</span><br><span class="line">13	Ν 	ν 	nu nju 纽</span><br><span class="line">14	Ξ 	ξ 	xi ksi 克西</span><br><span class="line">15	Ο 	ο 	omicron omik`ron 奥密克戎</span><br><span class="line">16	∏ 	π 	pi pai 派</span><br><span class="line">17	Ρ 	ρ 	rho rou 肉</span><br><span class="line">18	∑ 	σ 	sigma `sigma 西格马</span><br><span class="line">19	Τ 	τ 	tau tau 套</span><br><span class="line">20 	Υ 	υ 	upsilon ju:p`sailon 宇普西龙</span><br><span class="line">21 	Φ 	φ 	phi fai 佛爱</span><br><span class="line">22 	Χ 	χ 	chi phai 西</span><br><span class="line">23 	Ψ 	ψ 	psi psai 普西</span><br><span class="line">24 	Ω 	ω 	omega o`miga 欧米伽</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>version</category>
      </categories>
      <tags>
        <tag>snippet</tag>
      </tags>
  </entry>
  <entry>
    <title>vim command</title>
    <url>/2015/08/16/vim%20command/</url>
    <content><![CDATA[<ul>
<li><p>format json</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">:%!jq .</span><br></pre></td></tr></table></figure></li>
<li><p>formate xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:%!xmllint --format %</span><br></pre></td></tr></table></figure></li>
<li><p>显示不可见字符</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">:set list</span><br></pre></td></tr></table></figure></li>
<li><p>统计字符出现次数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:%s/字符串//ng</span><br></pre></td></tr></table></figure></li>
</ul>
<ul>
<li><p>大小写转换</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">选择文本之后，执行 g~~ 进行大小写的转换</span><br></pre></td></tr></table></figure></li>
<li><p>全文选择</p>
</li>
<li><p>多行操作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">按下 Ctrl + v 进入可视块模式。</span><br><span class="line">使用上下箭头键或 j 和 k 键选择要编辑的行。</span><br><span class="line">按下 Shift + i 进入插入模式。</span><br><span class="line">输入要插入的文本。</span><br><span class="line">按下 Esc 键退出插入模式，所有选定的行都将被修改。</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>vmware snippet</title>
    <url>/2019/04/20/vmware/</url>
    <content><![CDATA[<h3 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h3><ul>
<li><p>新增用户</p>
<p><code>adduser username</code></p>
<p><code>passwd username</code></p>
<p><code>usermod -aG wheel username</code></p>
<p><code>su - username</code></p>
</li>
</ul>
<h3 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h3><ul>
<li><p>安装完毕之后，需要设置IP分配</p>
<ol>
<li><p><code>cd /etc/sysconfig/network-scripts/</code></p>
</li>
<li><p>再进入编辑<code>ifcfg-e**</code> 文件 执行命令<br><code>vi ifcfg-e**</code></p>
</li>
<li><p>修改ONBOOT项</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">其中部分内容如下： </span><br><span class="line">DEVICE=eth0 #设备名称，可根据ifcofnig命令查看到。 </span><br><span class="line">BOOTPROTO=dhcp #连接方式，dhcp会自动分配地址，此时不需要在下面设置ip和网关 </span><br><span class="line">ONBOOT=yes #yes表示启动就执行该配置，需要改为yes</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><p>修改完后需要重启网络设置，执行</p>
<p><code>service network restart</code></p>
</li>
</ol>
</li>
<li><p>设置静态IP</p>
<ul>
<li><p><a href="https://blog.csdn.net/clevercode/article/details/50574695">虚拟机设置</a></p>
</li>
<li><p>宿主机器设置</p>
<p>需要设置vmnet8的ip为同一网段的配置</p>
</li>
</ul>
</li>
</ul>
<h3 id="jdk"><a href="#jdk" class="headerlink" title="jdk"></a>jdk</h3><ul>
<li><p>安装jdk</p>
<p><code>sudo yum install java-1.8.0-openjdk-devel</code></p>
<ul>
<li>find path</li>
</ul>
<p><code>update-alternatives --config java</code></p>
<ul>
<li>config .bashrc</li>
</ul>
<p><code>export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.191.b12-1.el7_6.x86_64/jre</code></p>
</li>
</ul>
<h3 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h3><ul>
<li><p>授权所有机器可以从外界访问mysql</p>
<p><code>GRANT ALL PRIVILEGES ON *.* TO &#39;root&#39;@&#39;%&#39; IDENTIFIED BY &#39;will&#39;;</code></p>
<p><code>FLUSH PRIVILEGES;</code></p>
</li>
</ul>
]]></content>
      <categories>
        <category>vmware</category>
      </categories>
      <tags>
        <tag>snippet</tag>
      </tags>
  </entry>
  <entry>
    <title>vscode snippet</title>
    <url>/2019/04/12/vscode%20snippet/</url>
    <content><![CDATA[<h3 id="Skill"><a href="#Skill" class="headerlink" title="Skill"></a>Skill</h3><ul>
<li><p>open tab in new window</p>
<ul>
<li>Press Ctrl + k</li>
<li>Release the Ctrl and k keys</li>
<li>press O (the letter O, not Zero).</li>
</ul>
</li>
<li><p>save all</p>
<ul>
<li>Press Ctrl + k</li>
<li>Release the Ctrl and k keys</li>
<li>Press s</li>
</ul>
</li>
<li><p>copy line</p>
<p>Shift+Alt+Down and Shift+Alt+Up</p>
</li>
</ul>
<h3 id="Plugin"><a href="#Plugin" class="headerlink" title="Plugin"></a>Plugin</h3><ul>
<li><p>fileheader</p>
<p><code>ctrl+alt+i</code> can insert comments in the head.</p>
</li>
</ul>
]]></content>
      <categories>
        <category>vscode</category>
      </categories>
      <tags>
        <tag>snippet</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack snippet</title>
    <url>/2016/12/16/webpack%20snippet/</url>
    <content><![CDATA[<ul>
<li><p>四个核心概念：</p>
<p>入口    entry</p>
<p>输出    output</p>
<p>loader</p>
<p>插件    plugins</p>
</li>
</ul>
]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>snippet</tag>
      </tags>
  </entry>
  <entry>
    <title>vue snippet</title>
    <url>/2017/12/07/vue%20snippet/</url>
    <content><![CDATA[<ul>
<li><p>vue实例初始化过程：</p>
<ul>
<li>设置数据监听</li>
<li>编译模板</li>
<li>将实例挂载到DOM并在数据变化时更新DOM等</li>
</ul>
</li>
<li><p>生命周期钩子：提供用户在不同阶段添加自己的代码的机会</p>
<ul>
<li>created，用来实例被创建之后执行代码</li>
<li>mounted,</li>
<li>updated,</li>
<li>destoryed</li>
</ul>
</li>
<li><p>指令（Directives）是带有<code>v-</code>前缀的特殊特性。指令特性的值预期是单个JavaScript表达式（<code>v-for</code>是例外情况），指令的职责是：当表达式的值改变时，将其产生的连带影响，响应式地作用于DOM。</p>
<ul>
<li><p><code>v-bind</code>，可以接受一个参数，用于响应式地更新HTML特性。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 完整语法 --&gt;</span><br><span class="line">&lt;a v-bind:href=&quot;url&quot;&gt;...&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 缩写 --&gt;</span><br><span class="line">&lt;a :href=&quot;url&quot;&gt;...&lt;/a&gt;</span><br></pre></td></tr></table></figure></li>
<li><p><code>v-on</code>，用于监听DOM事件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 完整语法 --&gt;</span><br><span class="line">&lt;a v-on:click=&quot;doSomething&quot;&gt;...&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 缩写 --&gt;</span><br><span class="line">&lt;a @click=&quot;doSomething&quot;&gt;...&lt;/a&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>修饰符<code>v-on:submit.prevent</code>,<code>.prevent</code> 修饰符告诉 <code>v-on</code> 指令对于触发的事件调用 <code>event.preventDefault()</code>。</p>
</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><p>计算属性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;example&quot;&gt;</span><br><span class="line">  &lt;p&gt;Original message: &quot;&#123;&#123; message &#125;&#125;&quot;&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;Computed reversed message: &quot;&#123;&#123; reversedMessage &#125;&#125;&quot;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  el: &#x27;#example&#x27;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: &#x27;Hello&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    // 计算属性的 getter</span><br><span class="line">    reversedMessage: function () &#123;</span><br><span class="line">      // `this` 指向 vm 实例</span><br><span class="line">      return this.message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>计算属性缓存vs方法</p>
<p>在方法中实现同计算属性同样的效果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;Reversed message: &quot;&#123;&#123; reversedMessage() &#125;&#125;&quot;&lt;/p&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 在组件中</span><br><span class="line">methods: &#123;</span><br><span class="line">  reversedMessage: function () &#123;</span><br><span class="line">    return this.message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>计算属性是基于它们的依赖进行缓存的</strong>。只在相关依赖发生改变时它们才会重新求值。 </p>
</li>
<li><p>计算属性vs侦听属性</p>
<p>侦听属性的用法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;demo&quot;&gt;&#123;&#123; fullName &#125;&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  el: &#x27;#demo&#x27;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    firstName: &#x27;Foo&#x27;,</span><br><span class="line">    lastName: &#x27;Bar&#x27;,</span><br><span class="line">    fullName: &#x27;Foo Bar&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    firstName: function (val) &#123;</span><br><span class="line">      this.fullName = val + &#x27; &#x27; + this.lastName</span><br><span class="line">    &#125;,</span><br><span class="line">    lastName: function (val) &#123;</span><br><span class="line">      this.fullName = this.firstName + &#x27; &#x27; + val</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>与计算属性的版本进行对比：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  el: &#x27;#demo&#x27;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    firstName: &#x27;Foo&#x27;,</span><br><span class="line">    lastName: &#x27;Bar&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    fullName: function () &#123;</span><br><span class="line">      return this.firstName + &#x27; &#x27; + this.lastName</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li><p>计算属性的setter</p>
<p>计算属性默认只有 getter ，不过在需要时你也可以提供一个 setter ： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// ...</span><br><span class="line">computed: &#123;</span><br><span class="line">  fullName: &#123;</span><br><span class="line">    // getter</span><br><span class="line">    get: function () &#123;</span><br><span class="line">      return this.firstName + &#x27; &#x27; + this.lastName</span><br><span class="line">    &#125;,</span><br><span class="line">    // setter</span><br><span class="line">    set: function (newValue) &#123;</span><br><span class="line">      var names = newValue.split(&#x27; &#x27;)</span><br><span class="line">      this.firstName = names[0]</span><br><span class="line">      this.lastName = names[names.length - 1]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">// ...</span><br></pre></td></tr></table></figure>

<p>现在再运行 <code>vm.fullName = &#39;John Doe&#39;</code> 时，setter 会被调用，<code>vm.firstName</code> 和 <code>vm.lastName</code> 也会相应地被更新。 </p>
</li>
</ul>
</li>
<li><p>侦听器</p>
<p>使用场景：当需要在数据变化时执行异步或开销较大的操作时 </p>
</li>
</ul>
<hr>
<ul>
<li><p>条件渲染</p>
<p><code>v-if</code></p>
</li>
<li><p>展示元素</p>
<p><code>v-show</code>，它只是简单地切换元素的css属性<code>display</code></p>
<p>**<em>注意</em>：<code>v-show</code> 不支持 <code>&lt;template&gt;</code> 元素，也不支持 <code>v-else</code>。 </p>
<ul>
<li><p><code>v-if</code>vs<code>v-show</code></p>
<p>一般来说，<code>v-if</code> 有更高的切换开销，而 <code>v-show</code> 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用 <code>v-show</code> 较好；如果在运行时条件很少改变，则使用 <code>v-if</code> 较好。 </p>
</li>
</ul>
</li>
<li><p>列表渲染</p>
<p><code>v-for</code></p>
<ul>
<li><p>实例一</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;ul id=&quot;example-1&quot;&gt;</span><br><span class="line">  &lt;li v-for=&quot;item in items&quot;&gt;</span><br><span class="line">    &#123;&#123; item.message &#125;&#125;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var example1 = new Vue(&#123;</span><br><span class="line">  el: &#x27;#example-1&#x27;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    items: [</span><br><span class="line">      &#123; message: &#x27;Foo&#x27; &#125;,</span><br><span class="line">      &#123; message: &#x27;Bar&#x27; &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li><p>实例二</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;ul id=&quot;example-2&quot;&gt;</span><br><span class="line">  &lt;li v-for=&quot;(item, index) in items&quot;&gt;</span><br><span class="line">    &#123;&#123; parentMessage &#125;&#125; - &#123;&#123; index &#125;&#125; - &#123;&#123; item.message &#125;&#125;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var example2 = new Vue(&#123;</span><br><span class="line">  el: &#x27;#example-2&#x27;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    parentMessage: &#x27;Parent&#x27;,</span><br><span class="line">    items: [</span><br><span class="line">      &#123; message: &#x27;Foo&#x27; &#125;,</span><br><span class="line">      &#123; message: &#x27;Bar&#x27; &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li><p>可以用 of 替代 in 作为分隔符</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div v-for=&quot;item of items&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>实例三</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">  el: &#x27;#v-for-object&#x27;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    object: &#123;</span><br><span class="line">      firstName: &#x27;John&#x27;,</span><br><span class="line">      lastName: &#x27;Doe&#x27;,</span><br><span class="line">      age: 30</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;ul id=&quot;v-for-object&quot; class=&quot;demo&quot;&gt;</span><br><span class="line">  &lt;li v-for=&quot;value in object&quot;&gt;</span><br><span class="line">    &#123;&#123; value &#125;&#125;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div v-for=&quot;(value, key) in object&quot;&gt;</span><br><span class="line">  &#123;&#123; key &#125;&#125;: &#123;&#123; value &#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div v-for=&quot;(value, key, index) in object&quot;&gt;</span><br><span class="line">  &#123;&#123; index &#125;&#125;. &#123;&#123; key &#125;&#125;: &#123;&#123; value &#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>数组更新检测</p>
<ul>
<li>变异方法，会改变被这些方法调用的原始数组 <ul>
<li><code>push()</code></li>
<li><code>pop()</code></li>
<li><code>shift()</code></li>
<li><code>unshift()</code></li>
<li><code>splice()</code></li>
<li><code>sort()</code></li>
<li><code>reverse()</code></li>
</ul>
</li>
<li>也有非变异 (non-mutating method) 方法，例如：<code>filter()</code>, <code>concat()</code> 和 <code>slice()</code> 。这些不会改变原始数组，但<strong>总是返回一个新数组</strong>。</li>
</ul>
<hr>
</li>
<li><p>vue组件实例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 定义一个名为 button-counter 的新组件</span><br><span class="line">Vue.component(&#x27;button-counter&#x27;, &#123;</span><br><span class="line">  data: function () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      count: 0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  template: &#x27;&lt;button v-on:click=&quot;count++&quot;&gt;You clicked me &#123;&#123; count &#125;&#125; times.&lt;/button&gt;&#x27;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>prop可以在组件上注册的一些自定义特性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Vue.component(&#x27;blog-post&#x27;, &#123;</span><br><span class="line">  props: [&#x27;title&#x27;],</span><br><span class="line">  template: &#x27;&lt;h3&gt;&#123;&#123; title &#125;&#125;&lt;/h3&gt;&#x27;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;blog-post title=&quot;My journey with Vue&quot;&gt;&lt;/blog-post&gt;</span><br><span class="line">&lt;blog-post title=&quot;Blogging with Vue&quot;&gt;&lt;/blog-post&gt;</span><br><span class="line">&lt;blog-post title=&quot;Why Vue is so fun&quot;&gt;&lt;/blog-post&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>调用内建的 <a href="https://cn.vuejs.org/v2/api/#vm-emit"><strong>$emit</strong> 方法</a>并传入事件的名字，来向父级组件触发一个事件： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;button v-on:click=&quot;$emit(&#x27;enlarge-text&#x27;)&quot;&gt;</span><br><span class="line">  Enlarge text</span><br><span class="line">&lt;/button&gt;</span><br></pre></td></tr></table></figure>
<p>然后我们可以用 <code>v-on</code> 在博文组件上监听这个事件，就像监听一个原生 DOM 事件一样 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;blog-post</span><br><span class="line">...</span><br><span class="line">v-on:enlarge-text=&quot;postFontSize += 0.1&quot;</span><br><span class="line">&gt;&lt;/blog-post&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<hr>
<h3 id="组件注册"><a href="#组件注册" class="headerlink" title="组件注册"></a>组件注册</h3><ul>
<li><p>全局注册</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Vue.component(&#x27;my-component-name&#x27;, &#123;</span><br><span class="line">  // ... 选项 ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li><p>局部注册</p>
<p>定义组件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var ComponentA = &#123; /* ... */ &#125;</span><br><span class="line">var ComponentB = &#123; /* ... */ &#125;</span><br><span class="line">var ComponentC = &#123; /* ... */ &#125;</span><br></pre></td></tr></table></figure>

<p>使用组件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">el: &#x27;#app&#x27;,</span><br><span class="line">components: &#123;</span><br><span class="line">  &#x27;component-a&#x27;: ComponentA,</span><br><span class="line">  &#x27;component-b&#x27;: ComponentB</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>全局注册的行为必须在根 Vue 实例 (通过 new Vue) 创建之前发生</strong> </p>
<hr>
<h3 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h3>]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>snippet</tag>
      </tags>
  </entry>
  <entry>
    <title>websocket tracking</title>
    <url>/2016/01/18/webservice%20snippet/</url>
    <content><![CDATA[<p><a href="https://www.jianshu.com/p/49d7997ad3b7">https://www.jianshu.com/p/49d7997ad3b7</a></p>
<p><a href="https://blog.csdn.net/qq_33546747/article/details/53304097">https://blog.csdn.net/qq_33546747/article/details/53304097</a></p>
<hr>
<h2 id="WebService是一种跨编程语言和跨操作系统平台的远程调用技术。"><a href="#WebService是一种跨编程语言和跨操作系统平台的远程调用技术。" class="headerlink" title="WebService是一种跨编程语言和跨操作系统平台的远程调用技术。"></a>WebService是一种跨编程语言和跨操作系统平台的远程调用技术。</h2><p>多个角度来理解WebService<br>​    从表面上看，WebService就是一个应用程序向外界暴露出一个能通过Web进行调用的API，也就是说能用编程的方法通过Web来调用这个应用程序。<br>​    我们把调用这个WebService的应用程序叫做客户端，而把提供这个WebService的应用程序叫做服务端<br>​    </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">从深层次看，WebService是建立可互操作的分布式应用程序的新平台，是一个平台，是一套标准。</span><br><span class="line">它定义了应用程序如何在Web上实现互操作性，你可以用任何你喜欢的语言，在任何你喜欢的平台上写Web service ，只要我们可以通过Web service标准对这些服务进行查询和访问。</span><br></pre></td></tr></table></figure>

<hr>
<p>构成WebService平台的三大技术：<br>​    XML+XSD,SOAP和WSDL<br>​<br>WebService采用HTTP协议传输数据，采用XML格式封装数据（即XML中说明调用远程服务对象的哪个方法，传递的参数是什么，以及服务对象的返回结果是什么）<br>WebService用XSD来作为其数据类型系统<br>HTTP消息头和XML内容格式就是SOAP协议。SOAP提供了标准的RPC方法来调用Web Service。</p>
<p>SOAP协议 = HTTP协议 + XML数据格式</p>
<p>比喻：HTTP就是普通公路，XML就是中间的绿色隔离带和两边的防护栏，SOAP就是普通公路经过加隔离带和防护栏改造过的高速公路。</p>
<p>WSDL(Web Services Description Language)是基于XML的语言，用于描述Web Service及其函数、参数和返回值。</p>
<p>WSDL文件保存在Web服务器上，通过一个url地址就可以访问到它。客户端要调用一个WebService服务之前，要知道该服务的WSDL文件的地址。<br>WebService服务提供商可以通过两种方式来暴露它的WSDL文件地址：1.注册到UDDI服务器，以便被人查找；2.直接告诉给客户端调用者。</p>
<p>======================================================================================<br><a href="https://www.cnblogs.com/snake-hand/archive/2013/06/09/3129915.html">https://www.cnblogs.com/snake-hand/archive/2013/06/09/3129915.html</a></p>
<hr>
<p>Axis和CXF，这两个产品都是Apache孵化器下面的Web Service开源开发工具</p>
<p>CXF支持 WS-Addressing，WS-Policy， WS-RM， WS-Security和WS-I Basic Profile<br>Axis2不支持WS-Policy</p>
<p>CXF可以很好支持Spring<br>Axis2不能很好支持Spring</p>
<p> CXF只支持JAXB和Aegis。<br> AXIS2支持更广泛的数据并对，如XMLBeans，JiBX，JaxMe和JaxBRI和它自定义的数据绑定ADB。注意JaxME和JaxBRI都还是试验性的。AXIS2支持更广泛的数据并对，如XMLBeans，JiBX，JaxMe和JaxBRI和它自定义的数据绑定ADB。注意JaxME和JaxBRI都还是试验性的。</p>
<hr>
<p> 如何抉择：<br>1、如果应用程序需要多语言的支持，Axis2 应当是首选了；<br>2、如果应用程序是遵循Spring 哲学路线的话，Apache CXF 是一种更好的选择，特别对嵌入式的Web Services 来说；<br>3、如果应用程序没有新的特性需要的话，就仍是用原来项目所用的框架，比如Axis1，XFire，Celtrix或 BEA等等厂家自己的 WebServices 实现，就别劳民伤财了</p>
]]></content>
      <categories>
        <category>webservice</category>
      </categories>
      <tags>
        <tag>learn</tag>
      </tags>
  </entry>
  <entry>
    <title>websocket tracking</title>
    <url>/2015/12/18/websocket%20snippit/</url>
    <content><![CDATA[<p><a href="https://blog.csdn.net/LOVELONG8808/article/details/52235132">https://blog.csdn.net/LOVELONG8808/article/details/52235132</a></p>
<p><a href="https://blog.csdn.net/w1992wishes/article/details/79583543">https://blog.csdn.net/w1992wishes/article/details/79583543</a></p>
<hr>
<p>WebSocket API是下一代客户端-服务器的异步通信方法。<br>WebSocket API最伟大之处在于服务器和客户端可以在给定的时间范围内的任意时刻，相互推送信息。<br>WebSocket并不限于以Ajax(或XHR)方式通信，因为Ajax技术需要客户端发起请求，而WebSocket服务器和客户端可以彼此相互推送信息；<br>​    XHR受到域的限制，而WebSocket允许跨域通信。<br>​    Ajax技术很聪明的一点是没有设计要使用的方式。WebSocket为指定目标创建，用于双向推送消息。</p>
<hr>
<p>activemq是消息中间件，主要实现是队列。用于处理消息。<br>websocket是 html5的一种传议实现前台向后台，后台向前台发出请求。</p>
<hr>
<p>websocket是HTML5协议，实时，全双工通信，长连接。WebSocket的服务端可以将数据推送到客户端，<br>​    如实时将证券信息反馈到客户端，实时天气数据，比http请求响应模式更灵活，代替了以往一些需要轮训的业务。</p>
<p>STOMP协议的前身是TTMP协议（一个简单的基于文本的协议），专为消息中间件设计。</p>
<p>这两个协议的介绍来看设计的目的不同。目前一些消息队列都是基于STOMP协议的比如ActiveMQ，RabbitMQ，消息队列一般用于一些需要异步处理的服务器任务或者一些通知类的任务。</p>
<p>websocket更多的使用场景是需要服务端主动通知客户端的实时通讯业务。</p>
]]></content>
      <categories>
        <category>websocket</category>
      </categories>
      <tags>
        <tag>learn</tag>
      </tags>
  </entry>
  <entry>
    <title>windows snippet</title>
    <url>/2018/05/22/windows%20snippet/</url>
    <content><![CDATA[<h2 id="进程操作"><a href="#进程操作" class="headerlink" title="进程操作"></a>进程操作</h2><ul>
<li>netstat -aon|findstr “8080” </li>
</ul>
<p>TCP     127.0.0.1:80       0.0.0.0:0             LISTENING    2448<br>端口被进程号为2448的进程占用，继续执行下面命令：</p>
<ul>
<li>tasklist|findstr “2448” </li>
</ul>
<p>thread.exe                   2016 Console                 0     16,064 K</p>
<p>很清楚，thread占用了你的端口,Kill it</p>
<ul>
<li>taskkill -F -PID 2448</li>
</ul>
<p>如果第二步查不到，那就开任务管理器，进程—查看—选择列—pid（进程位标识符）打个勾就可以了</p>
<h2 id="查看文件md5值"><a href="#查看文件md5值" class="headerlink" title="查看文件md5值"></a>查看文件md5值</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">certutil -hashfile filename MD5</span><br><span class="line">certutil -hashfile filename SHA1</span><br><span class="line">certutil -hashfile filename SHA256</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>windows</category>
      </categories>
      <tags>
        <tag>snippet</tag>
      </tags>
  </entry>
  <entry>
    <title>words fragment</title>
    <url>/2018/08/28/words%20fragment/</url>
    <content><![CDATA[<h3 id="英文碎片"><a href="#英文碎片" class="headerlink" title="英文碎片"></a>英文碎片</h3><ul>
<li>Life is measured by thought and action, not by time.</li>
<li>Books and friends should be few but good.</li>
<li>Don’t give your past the power to define your future.</li>
<li>People will forget what you said, people will forget what you did, but people will never forget how you made them feel.</li>
<li>Success isn’t about being the best. It’s about always getting better.</li>
<li>Be yourself. Everyone else is already taken.</li>
<li>It’s kind of fun to do the impossible.</li>
<li>“Simplicity is the ultimate sophistication.”Leonardo da Vinci</li>
<li>Build a dream and the dream will build you.</li>
<li>Always make a total effort, even when the odds are against you.</li>
<li>You can, you should, and if you’re brave enough to start, you will.</li>
<li>Never give up, for that is just the place and time that the tide will turn.</li>
<li>Awareness is the greatest agent for change.</li>
<li>Nothing can dim the light which shines from within.</li>
<li>Our dreams can come true if we have the courage to pursue them.</li>
<li>Patience and perseverance have a magical effect before which difficulties disappear and obstacles vanish.</li>
<li>What you do makes a difference, and you have to decide what kind of difference you want to make.</li>
<li>The thing that is really hard, and really amazing, is giving up on being perfect and beginning the work of becoming yourself.</li>
<li>You are what you do, not what you say you’ll do.</li>
<li>This is the real secret to life—to be completely engaged with what you are doing in the here and now. And instead of calling it work, realize it is play.</li>
<li>I am strong because I’ve been weak. I am fearless because I’ve been afraid. I am wise because I’ve been foolish.</li>
<li>Every moment you live in the past is a moment you waste in the present.</li>
<li>Some changes look negative on the surface, but you will soon realize that space is being created in your life for something new to emerge.</li>
<li>The world breaks everyone and afterward many are strong at the broken places.</li>
<li>Don’t bury your failures. Let them inspire you.</li>
<li>Whether you think you can or you think you can’t, you are right.</li>
<li>“An investment in knowledge pays the best interest.”Benjamin Franklin</li>
<li>Be brave. Take risks. Nothing can substitute experience.</li>
<li>Learn to walk before run</li>
<li>This is love, deep in the trenches, worthy of respect, admiration and gratitude.</li>
<li>You will learn more in three days of acting than in six months of researching.</li>
</ul>
<h3 id="中文碎片"><a href="#中文碎片" class="headerlink" title="中文碎片"></a>中文碎片</h3><ul>
<li>虽千万人，吾往矣。</li>
<li>在一个跪下去才能活着的时代，请给站着的人一点掌声！</li>
<li>一个人一旦接触到真相，便无法再回头去相信谎言！</li>
<li>码农不问出处，大佬不看岁数</li>
<li>英雄不问出处，流氓不看岁数</li>
<li>长多大屁股，穿多大裤衩</li>
<li>没有最好的开发语言，只有最好的开发者</li>
<li>能干的人，不在情绪上计较，只在做事上认真；无能的人！不在做事上认真，只在情绪上计较。</li>
<li>把每一次练习都当成一次考试</li>
</ul>
<h3 id="名人碎片"><a href="#名人碎片" class="headerlink" title="名人碎片"></a>名人碎片</h3><ul>
<li>极深的暴力当中隐藏着极致的温柔    (北野武)</li>
</ul>
<h3 id="其它碎片"><a href="#其它碎片" class="headerlink" title="其它碎片"></a>其它碎片</h3><ul>
<li>arithmetic<ul>
<li>addition, subtraction, multiplication and division calculations</li>
</ul>
</li>
<li>Promise(承诺)、Earnest(诚挚)、Respect(尊重)、Forgiveness(宽容)、Enioy(享受)、Cherish(珍惜)、Trust(信任)</li>
<li>In any case, measure, don’t guess! Only a measurement will tell you if the parallelism is worth it or not.(from stack overflow’s someone)</li>
</ul>
<h3 id="技术碎片"><a href="#技术碎片" class="headerlink" title="技术碎片"></a>技术碎片</h3><ul>
<li>compare two things at different points, this not only makes them easy to compare but also makes it easy to remember differences.</li>
</ul>
]]></content>
      <categories>
        <category>words</category>
      </categories>
      <tags>
        <tag>fragment</tag>
      </tags>
  </entry>
  <entry>
    <title>word record</title>
    <url>/2017/05/30/work%20record/</url>
    <content><![CDATA[<p><strong>关于代码编译的事情</strong></p>
<ul>
<li><p>问题</p>
<ul>
<li>由于一些配置项写在统一的配置文档中，代码从配置文件中读取确定的配置项；此时操作的文本路径是要追加上根目录的路径，然而开发环境和生成环境是不一样的。项目在打包的过程中，就确定了文本路径，这样导致两边环境的配置文档读取结果不一致。</li>
</ul>
</li>
<li><p>解决办法</p>
<ul>
<li>把文件路径精确写入</li>
<li>在生成环境下编译代码</li>
</ul>
</li>
</ul>
<hr>
<p><strong>关于读取数据量大的excel文件</strong></p>
<ul>
<li><p>问题</p>
<ul>
<li>项目部署到tomcat中，每次读取大于1M的文件时，会停滞在<code>org.apache.poi.ss.usermodel.Workbook workbook = new XSSFWorkbook(is);</code>,直到tomcat出现报错信息<code>java.lang.OutOfMemoryError: Java heap space </code>,即java虚拟机堆溢出的错误。</li>
</ul>
</li>
<li><p>现象描述</p>
<ul>
<li><p>手动设置Xms,Xmx的大小，在/bin/catalina.bat（windows环境）配置中，添加<code>JAVA_OPTS=&quot;-server -Xms10G -Xmx20G&quot;</code>,不知道什么原因，重启服务，仍旧报一样的错。（当我在自己电脑上运行程序，操作同样大小的文档时，也没有报错，何况自己电脑才8G内存，远不及服务器，再则就是自身电脑tomcat的配置也是默认的）</p>
</li>
<li><p>内存总体分为年轻代(young),老年代(old),永久代(permanent),如图</p>
<p><img src="https://s1.ax2x.com/2018/05/31/7OCHl.jpg" alt="7OCHl.jpg"></p>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>tips</category>
      </categories>
      <tags>
        <tag>work</tag>
      </tags>
  </entry>
  <entry>
    <title>yarn point</title>
    <url>/2021/12/31/yarn%20snippet/</url>
    <content><![CDATA[<p><strong>Yet Another Resource Negotiator</strong></p>
<p>YARN 看做一个云操作系统，它负责为应用程序启 动 ApplicationMaster（相当于主线程），然后再由 ApplicationMaster 负责数据切分、任务分配、 启动和监控等工作，而由 ApplicationMaster 启动的各个 Task（相当于子线程）仅负责自己的计 算任务。当所有任务计算完成后，ApplicationMaster 认为应用程序运行完成，然后退出。</p>
<p><img src="/images/yarn/yarn_construct.gif"></p>
<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h4 id="contrainer"><a href="#contrainer" class="headerlink" title="contrainer"></a>contrainer</h4><blockquote>
<p>容器（Container）这个东西是 Yarn 对资源做的一层抽象。就像我们平时开发过程中，经常需要对底层一些东西进行封装，只提供给上层一个调用接口一样，Yarn 对资源的管理也是用到了这种思想。</p>
</blockquote>
<p><img src="/images/yarn/contrainer.jpeg"></p>
<blockquote>
<p>Yarn 将CPU核数，内存这些计算资源都封装成为一个个的容器（Container）。    </p>
</blockquote>
<ul>
<li>容器由 NodeManager 启动和管理，并被它所监控。</li>
<li>容器被 ResourceManager 进行调度。</li>
</ul>
<h4 id="ResourceManager"><a href="#ResourceManager" class="headerlink" title="ResourceManager"></a>ResourceManager</h4><blockquote>
<p>负责资源管理的，整个系统有且只有一个 RM ，来负责资源的调度。它也包含了两个主要的组件：定时调用器(Scheduler)以及应用管理器(ApplicationManager)。</p>
</blockquote>
<ol>
<li>定时调度器(Scheduler)：从本质上来说，定时调度器就是一种策略，或者说一种算法。当 Client 提交一个任务的时候，它会根据所需要的资源以及当前集群的资源状况进行分配。注意，它只负责向应用程序分配资源，并不做监控以及应用程序的状态跟踪。</li>
<li>应用管理器(ApplicationManager)：同样，听名字就能大概知道它是干嘛的。应用管理器就是负责管理 Client 用户提交的应用。上面不是说到定时调度器（Scheduler）不对用户提交的程序监控嘛，其实啊，监控应用的工作正是由应用管理器（ApplicationManager）完成的。</li>
</ol>
<h4 id="ApplicationMaster"><a href="#ApplicationMaster" class="headerlink" title="ApplicationMaster"></a>ApplicationMaster</h4><blockquote>
<p>每当 Client 提交一个 Application 时候，就会新建一个 ApplicationMaster 。由这个 ApplicationMaster 去与 ResourceManager 申请容器资源，获得资源后会将要运行的程序发送到容器上启动，然后进行分布式计算。</p>
<p>ps: 大数据分布式计算的思想，大数据难以移动（海量数据移动成本太大，时间太长），那就把容易移动的应用程序发布到各个节点进行计算。</p>
</blockquote>
<h4 id="NodeManager"><a href="#NodeManager" class="headerlink" title="NodeManager"></a>NodeManager</h4><blockquote>
<p>NodeManager 是 ResourceManager 在每台机器的上代理，负责容器的管理，并监控他们的资源使用情况（cpu，内存，磁盘及网络等），以及向 ResourceManager/Scheduler 提供这些资源使用报告。</p>
</blockquote>
<h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><h3 id="submit-application-to-yarn"><a href="#submit-application-to-yarn" class="headerlink" title="submit application to yarn"></a>submit application to yarn</h3><p><img src="/images/yarn/submit_app_flow.jpeg"></p>
<ol>
<li>Client 向 Yarn 提交 Application，这里我们假设是一个 MapReduce 作业。</li>
<li>ResourceManager 向 NodeManager 通信，为该 Application 分配第一个容器。并在这个容器中运行这个应用程序对应的 ApplicationMaster。</li>
<li>ApplicationMaster 启动以后，对 作业（也就是 Application） 进行拆分，拆分 task 出来，这些 task 可以运行在一个或多个容器中。然后向 ResourceManager 申请要运行程序的容器，并定时向 ResourceManager 发送心跳。</li>
<li>申请到容器后，ApplicationMaster 会去和容器对应的 NodeManager 通信，而后将作业分发到对应的 NodeManager 中的容器去运行，这里会将拆分后的 MapReduce 进行分发，对应容器中运行的可能是 Map 任务，也可能是 Reduce 任务。</li>
<li>容器中运行的任务会向 ApplicationMaster 发送心跳，汇报自身情况。当程序运行完成后， ApplicationMaster 再向 ResourceManager 注销并释放容器资源。</li>
</ol>
<h3 id="停止应用"><a href="#停止应用" class="headerlink" title="停止应用"></a>停止应用</h3><p><code>yarn application -kill appID</code></p>
<h2 id="参数配置"><a href="#参数配置" class="headerlink" title="参数配置"></a>参数配置</h2><p>每个job提交到yarn上执行时，都会分配Container容器去运行，而这个容器需要资源才能运行，这个资源就是Cpu和内存。</p>
<h3 id="CPU资源调度"><a href="#CPU资源调度" class="headerlink" title="CPU资源调度"></a>CPU资源调度</h3><p>目前的CPU被Yarn划分为虚拟CPU，这是yarn自己引入的概念，因为每个服务器的Cpu计算能力不一样，有的机器可能是 其他机器的计算能力的2倍，然后可以通过多配置几个虚拟内存弥补差异。在yarn中，cpu的相关配置如下。</p>
<p>yarn.nodemanager.resource.cpu-vcores</p>
<p>表示该节点服务器上yarn可以使用的虚拟的CPU个数，默认是8，推荐配置与核心个数相同，如果节点CPU的核心个数不足8个，需要调小这个值，yarn不会智能的去检测物理核数。如果机器性能较好，可以配置为物理核数的2倍。</p>
<p>yarn.scheduler.minimum-allocation-vcores</p>
<p>表示单个任务最小可以申请的虚拟核心数，默认为1</p>
<p>yarn.sheduler.maximum-allocation-vcores</p>
<p>表示单个任务最大可以申请的虚拟核数，默认为4；如果申请资源时，超过这个配置，会抛出 InvalidResourceRequestException</p>
<h3 id="Memory资源调度"><a href="#Memory资源调度" class="headerlink" title="Memory资源调度"></a>Memory资源调度</h3><p>yarn一般允许用户配置每个节点上可用的物理资源，可用指的是将机器上内存减去hdfs的，hbase的等等剩下的可用的内存。</p>
<p>yarn.nodemanager.resource.memory-mb</p>
<p>设置该节点上yarn可使用的内存，默认为8G，如果节点内存不足8G，要减少这个值，yarn不会智能的去检测内存资源，一般这个值式yarn的可用内存资源。</p>
<p>yarn.scheduler.minmum-allocation-mb</p>
<p>单个任务最小申请物理内存量，默认是1024M，根据自己业务设定</p>
<p>yarn.scheduler.maximum-allocation-mb</p>
<p>单个任务最大可以申请的物理内存量，默认为8291M</p>
<p>二、如果设置这几个参数<br>如果一个服务器是32核，虚拟后为64核，128G内存，我们该如何设置上面的6个参数呢？即如何做到资源最大化利用</p>
<p>生产上我们一般要预留15-20%的内存，那么可用内存就是128*0.8=102.4G，去除其他组件的使用，我们设置成90G就可以了。</p>
<p>1、yarn.sheduler.maximum-allocation-vcores<br>1.<br>一般就设置成4个，cloudera公司做过性能测试，如果CPU大于等于5之后，CPU的利用率反而不是很好。这个参数可以根据生成服务器决定，比如公司服务器很富裕，那就直接设置成1:1；设置成32，如果不是很富裕，可以直接设置成1:2。我们以1:2来计算。</p>
<p>2、yarn.scheduler.minimum-allocation-vcores<br>1.<br>如果设置vcoure = 1，那么最大可以跑64/1=64个container，如果设置成这样，最小container是64/4=16个。</p>
<p>3、yarn.scheduler.minmum-allocation-mb</p>
<p>如果设置成2G，那么90/2=45最多可以跑45个container，如果设置成4G，那么最多可以跑24个；vcore有些浪费。</p>
<p>4、yarn.scheduler.maximum-allocation-mb</p>
<p>这个要根据自己公司的业务设定，如果有大任务，需要5-6G内存，那就设置为8G，那么最大可以跑11个container。</p>
<h2 id="TIPS"><a href="#TIPS" class="headerlink" title="TIPS"></a>TIPS</h2><h3 id="配置指定用户启停"><a href="#配置指定用户启停" class="headerlink" title="配置指定用户启停"></a>配置指定用户启停</h3><p><code>start-yarn.sh</code>和<code>stop-yarn.sh</code>添加如下配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">YARN_RESOURCEMANAGER_USER=xxx</span><br><span class="line">YARN_NODEMANAGER_USER=xxx</span><br></pre></td></tr></table></figure>

<p>ps: 如果某个节点nodemanager没有拉起，需要执行<code>./yarn --daemon start nodemanager</code></p>
<h3 id="在资源够用的情况，无法发布新的应用"><a href="#在资源够用的情况，无法发布新的应用" class="headerlink" title="在资源够用的情况，无法发布新的应用"></a>在资源够用的情况，无法发布新的应用</h3><p>修改<code>capacity-scheduler.xml</code><br> <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.scheduler.capacity.maximum-am-resource-percent<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!--&lt;value&gt;0.1&lt;/value&gt;--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">value</span>&gt;</span>0.8<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">description</span>&gt;</span></span><br><span class="line">   Maximum percent of resources in the cluster which can be used to run</span><br><span class="line">   application masters i.e. controls number of concurrent running</span><br><span class="line">   applications.</span><br><span class="line"> <span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<hr>
<p>reference:</p>
<p><a href="https://zhuanlan.zhihu.com/p/54192454">https://zhuanlan.zhihu.com/p/54192454</a></p>
]]></content>
      <categories>
        <category>yarn</category>
      </categories>
      <tags>
        <tag>point</tag>
      </tags>
  </entry>
  <entry>
    <title>zookeeper learn</title>
    <url>/2020/10/08/zookeeper%20learn/</url>
    <content><![CDATA[<h2 id="参数配置"><a href="#参数配置" class="headerlink" title="参数配置"></a>参数配置</h2><ul>
<li>tickTime</li>
</ul>
<p>Length of a single tick, in milliseconds. ZooKeeper uses tick as the basic time unit to regulate timeouts. Default is 2000.</p>
<ul>
<li>initLimit</li>
</ul>
<p>Number of ticks after which the ZooKeeper server times out during the synchronization process. Default is 10.</p>
<ul>
<li>syncLimit</li>
</ul>
<p>Maximum number of ticks for the followers to wait to synchronize with the leader before the followers time out. Default is 5.</p>
<ul>
<li>dataDir</li>
</ul>
<p>Absolute path for the ZooKeeper to store the in-memory snapshots of the data and the transactional log of updates to the database.</p>
<ul>
<li>clientPort</li>
</ul>
<p>Port on which the ZooKeeper server listens for client connections.</p>
<ul>
<li>maxClientCnxns</li>
</ul>
<p>Maximum number of concurrent connections that a single client can make to a single member of the ZooKeeper ensemble. Default is 10.</p>
<h2 id="终端操作"><a href="#终端操作" class="headerlink" title="终端操作"></a>终端操作</h2><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zkCli.sh -server 127.0.0.1:2181</span><br></pre></td></tr></table></figure>

<h3 id="新増节点"><a href="#新増节点" class="headerlink" title="新増节点"></a>新増节点</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create [-s] [-e] path data #其中-s 为有序节点，-e临时节点。不写 -s/-e 默认为创建持久化节点</span><br></pre></td></tr></table></figure>

<h3 id="查看节点"><a href="#查看节点" class="headerlink" title="查看节点"></a>查看节点</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">get path</span><br></pre></td></tr></table></figure>

<p><img src="./img/zkInfo.png"></p>
<ul>
<li>查看节点状态<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">stat path  #返回结果和get命令类似，但不会返回节点数据内容。</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="修改节点"><a href="#修改节点" class="headerlink" title="修改节点"></a>修改节点</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set path data [dataVersion]</span><br></pre></td></tr></table></figure>

<p>可以用set命令修改节点数据。也可以基于版本号进行修改，当传入的dataVersion与当前版本号不一致时，zookeeper会拒绝修改。</p>
<p><img src="./img/%E4%BF%AE%E6%94%B9%E8%8A%82%E7%82%B9.png"></p>
<h3 id="返回节点列表"><a href="#返回节点列表" class="headerlink" title="返回节点列表"></a>返回节点列表</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls   path</span><br><span class="line">ls2  path</span><br></pre></td></tr></table></figure>

<h3 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">delete path [dataVersion]</span><br></pre></td></tr></table></figure>

<p> 与更新节点类似，删除也可以传入版本号，当传入的dataVersion与当前版本号不一致时，zookeeper会拒绝删除。</p>
<ul>
<li>要想删除某个节点及其后代节点，可以使用递归删除<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rmr path</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>zookeeper</category>
      </categories>
      <tags>
        <tag>learn</tag>
      </tags>
  </entry>
  <entry>
    <title>实时数仓</title>
    <url>/2021/12/30/%E5%AE%9E%E6%97%B6%E6%95%B0%E4%BB%93/</url>
    <content><![CDATA[<blockquote>
<p>当设计一款产品或者平台的时候，可以划分为两层，即底层实现和上层抽象。</p>
</blockquote>
<p>实时数仓和传统数仓的对比主要可以从四个方面考虑：</p>
<ul>
<li>第一个是<strong>分层方式</strong>，离线数仓为了考虑到效率问题，一般会采取空间换时间的方式，层级划分会比较多；则实时数仓考虑到实时性问题，一般分层会比较少，另外也减少了中间流程出错的可能性。</li>
<li>第二个是<strong>事实数据</strong>存储方面，离线数仓会基于 HDFS，实时数仓则会基于消息队列（如 Kafka）。</li>
<li>第三个是<strong>维度数据</strong>存储，实时数仓会将数据放在 KV 存储上面。</li>
<li>第四个是<strong>数据加工</strong>过程，离线数仓一般以 Hive、Spark 等批处理为主，而实时数仓则是基于实时计算引擎如 Storm、Flink 等，以流处理为主。</li>
</ul>
<p>实时数仓主要有两个要点。首先是分层设计上，一般也是参考离线数仓的设计，通常会分为</p>
<p>ODS操作数据层</p>
<p>DWD明细层</p>
<p>DWS汇总层（轻度汇总/高度汇总）</p>
<p>ADS应用层</p>
<p>可能还会分出一层DIM维度数据层。另外分层设计上也有不同的思路，比如可以将DWS和ADS归为DM数据集市层</p>
<ul>
<li><p><strong>ODS(Operational Data Store): 贴源层</strong></p>
<p>这一层又叫做贴源层,最为接近数据源的一层,需要存储的数据量是最大的,存储的数据也是最原始。对众多数据源而言，他们的数据格式基本不一致，经过统一规格化后可以得到规整的数据，将数据源中的数据经过抽取、清洗、传输后装入ODS层。</p>
</li>
<li><p><strong>DWD(Data Warehouse Detail)：数据明细层</strong></p>
<p>业务层与数据仓库的隔离层，主要对ODS层做一些数据清洗和规范化的操作，并且可以按照不同的行为维度对数据进行划分，例如本文对数据源就进行了划分，主要分为浏览、曝光、点击、交易等不同的维度，这些不同的维度能够对上层调用方提供更细粒度的数据服务。</p>
</li>
<li><p><strong>DWS(Data WareHouse Servce)：数据服务层</strong></p>
<p>对各个域进行了适度汇总，主要以数据域+业务域的理念建设公共汇总层，与离线数仓不同的是，实时数仓的汇总层分为轻度汇总层和高度汇总层，例如将轻度汇总层数据写入 ADS，用于前端产品复杂的OLAP查询场景，满足自助分析和产出报表的需求。</p>
</li>
<li><p><strong>ADS(Application Data Store)：应用数据服务层</strong></p>
<p>主要是为了具体需求而构建的应用层，通过 RPC 框架对外提供服务，例如本文中提到的数据报表分析与展示、监控告警、流量调控、开放平台等应用。</p>
</li>
<li><p><strong>DIM(Dimension)：维表</strong></p>
<p>在实时计算中非常重要，也是重点维护的部分，维表需要实时更新，且下游基于最新的维表进行计算</p>
</li>
</ul>
<hr>
<p>reference：</p>
<p><a href="https://cloud.tencent.com/developer/article/1618182">实时数仓 | 你想要的数仓分层设计与技术选型 - 云+社区 - 腾讯云</a></p>
<ul>
<li>实时数仓是指在数据仓库的基础上，增加了实时数据处理和分析功能，可以在数据生成后立即进行处理和分析，并及时反馈给业务用户。实时数仓的建设需要关注以下几个问题：</li>
</ul>
<ol>
<li>数据源接入：实时数仓需要及时地处理和分析数据，因此数据源的接入必须实时或近实时，需要考虑数据源的多样性和高并发性。</li>
<li>数据质量：数据的准确性和完整性对于实时数仓的建设尤为重要，需要对数据进行清洗、过滤、校验等操作，保证数据的质量。</li>
<li>数据集成：实时数仓需要整合多个数据源的数据，因此需要进行数据集成和融合，确保数据的一致性和准确性。</li>
<li>数据模型设计：数据模型是实时数仓建设的核心，需要设计合理的数据模型，确保数据的可扩展性和灵活性。</li>
<li>实时计算和分析：实时数仓需要具备实时计算和分析能力，需要使用实时计算引擎和分析工具，对数据进行实时处理和分析。</li>
<li>数据安全：实时数仓中的数据可能涉及敏感信息，需要采取一定的安全措施，保证数据的安全性和隐私性。</li>
<li>系统运维：实时数仓需要进行系统运维和监控，包括数据备份和恢复、系统调优、故障处理等方面，确保系统的稳定性和可靠性。</li>
</ol>
<p>综上所述，实时数仓的建设需要关注数据源接入、数据质量、数据集成、数据模型设计、实时计算和分析、数据安全以及系统运维等多个方面，需要根据实际需求和场景进行综合考虑和规划。</p>
]]></content>
      <categories>
        <category>实时数仓</category>
      </categories>
      <tags>
        <tag>snippet</tag>
      </tags>
  </entry>
  <entry>
    <title>数据湖</title>
    <url>/2021/12/30/%E6%95%B0%E6%8D%AE%E6%B9%96/</url>
    <content><![CDATA[<p>数据湖，目前关注度比较高的有 Databricks 推出的 Delta Lake、Uber 的 Hudi 以及 Netflix 的 Iceberg</p>
<p>reference <a href="https://mp.weixin.qq.com/s/m8-iFg-ekykWGrG3gXlLew">https://mp.weixin.qq.com/s/m8-iFg-ekykWGrG3gXlLew</a></p>
]]></content>
      <categories>
        <category>DSA</category>
      </categories>
      <tags>
        <tag>snippet</tag>
      </tags>
  </entry>
  <entry>
    <title>tmp problems</title>
    <url>/2022/09/27/problems/</url>
    <content><![CDATA[<h1 id="DB2"><a href="#DB2" class="headerlink" title="DB2"></a>DB2</h1><h2 id="DB2-SQL-Error-SQLCODE-805-SQLSTATE-51002-SQLERRMC-NULLID-SYSLH2DA-0X5359534C564C3031"><a href="#DB2-SQL-Error-SQLCODE-805-SQLSTATE-51002-SQLERRMC-NULLID-SYSLH2DA-0X5359534C564C3031" class="headerlink" title="DB2 SQL Error: SQLCODE=-805, SQLSTATE=51002, SQLERRMC=NULLID.SYSLH2DA 0X5359534C564C3031"></a>DB2 SQL Error: SQLCODE=-805, SQLSTATE=51002, SQLERRMC=NULLID.SYSLH2DA 0X5359534C564C3031</h2><ul>
<li><p>分析</p>
<p>the problem was a list of operations made with the same PreparedStatement, which was never closed.</p>
<p>许多操作使用同一个PreparedStatement，但是重来没有关闭</p>
</li>
<li><p>参考</p>
<p><a href="https://cloud.tencent.com/developer/article/1837198">https://cloud.tencent.com/developer/article/1837198</a></p>
</li>
</ul>
<h1 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h1><h2 id="lambda是否可打日志"><a href="#lambda是否可打日志" class="headerlink" title="lambda是否可打日志"></a>lambda是否可打日志</h2>]]></content>
      <categories>
        <category>scratch</category>
      </categories>
      <tags>
        <tag>problems</tag>
      </tags>
  </entry>
  <entry>
    <title>kafka learn</title>
    <url>/2019/06/11/kafka%20snippet/</url>
    <content><![CDATA[<h2 id="port（confluent-reference）"><a href="#port（confluent-reference）" class="headerlink" title="port（confluent reference）"></a>port（confluent reference）</h2><table>
<thead>
<tr>
<th align="left">Component</th>
<th align="left">Default Port</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Zookeeper</td>
<td align="left">2181</td>
</tr>
<tr>
<td align="left">Apache Kafka brokers (plain text)</td>
<td align="left">9092</td>
</tr>
<tr>
<td align="left">Schema Registry REST API</td>
<td align="left">8081</td>
</tr>
<tr>
<td align="left">REST Proxy</td>
<td align="left">8082</td>
</tr>
<tr>
<td align="left">Kafka Connect REST API</td>
<td align="left">8083</td>
</tr>
<tr>
<td align="left">Confluent Control Center</td>
<td align="left">9021</td>
</tr>
</tbody></table>
<h2 id="System-Architecture"><a href="#System-Architecture" class="headerlink" title="System Architecture"></a>System Architecture</h2><p><img src="https://i.imgur.com/gG71h6m.png"></p>
<ul>
<li><strong>kafka Producer API:</strong> Applications directly producing data (ex: clickstream, logs, IoT).</li>
<li><strong>Kafka Connect Source API:</strong> Applications bridging between a datastore we don’t control and Kafka (ex: CDC, Postgres, MongoDB, Twitter, REST API).</li>
<li><strong>Kafka Streams API / KSQL:</strong> Applications wanting to consume from Kafka and produce back into Kafka, also called stream processing. Use KSQL if you think you can write your real-time job as SQL-like, use Kafka Streams API if you think you’re going to need to write complex logic for your job.</li>
<li><strong>Kafka Consumer API:</strong> Read a stream and perform real-time actions on it (e.g. send email…)</li>
<li><strong>Kafka Connect Sink API</strong>: Read a stream and store it into a target store (ex: Kafka to S3, Kafka to HDFS, Kafka to PostgreSQL, Kafka to MongoDB, etc.)</li>
</ul>
<p><img src="https://www.sohamkamani.com/basic_arch-e0b11d2ab5b62a78cb7fd26d3a9d279b.svg"></p>
<ol>
<li><strong>Zookeeper</strong> : Which is used by Kafka to maintain state between the nodes of the cluster.</li>
<li><strong>Kafka brokers</strong> : The “pipes” in our pipeline, which store and emit data.</li>
<li><strong>Producers</strong> : That insert data into the cluster.</li>
<li><strong>Consumers</strong> : That read data from the cluster.</li>
</ol>
<p><img src="https://kafka.apache.org/22/images/kafka-apis.png"></p>
<h3 id="Creating-a-topic"><a href="#Creating-a-topic" class="headerlink" title="Creating a topic"></a>Creating a topic</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bin/kafka-topics.sh \</span><br><span class="line">--create \</span><br><span class="line">--topic my-kafka-topic \</span><br><span class="line">--zookeeper localhost:2181 \</span><br><span class="line">--partitions 3 \</span><br><span class="line">--replication-factor 2</span><br></pre></td></tr></table></figure>

<ul>
<li>The <code>paritions</code> options lets you decide how many brokers you want your data to be split between. Since we set up 3 brokers, we can set this option to 3.</li>
<li>The <code>replication-factor</code> describes how many copies of you data you want (in case one of the brokers goes down, you still have your data on the others).</li>
</ul>
<h3 id="Producer"><a href="#Producer" class="headerlink" title="Producer"></a>Producer</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bin/kafka-console-producer.sh \</span><br><span class="line">--broker-list localhost:9093,localhost:9094,localhost:9095 \</span><br><span class="line">--topic my-kafka-topic</span><br></pre></td></tr></table></figure>

<h3 id="Consumers"><a href="#Consumers" class="headerlink" title="Consumers"></a>Consumers</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bin/kafka-console-consumer.sh \</span><br><span class="line">--bootstrap-server localhost:9093 \</span><br><span class="line">--topic my-kafka-topic \</span><br><span class="line">--from-beginning</span><br></pre></td></tr></table></figure>

<ul>
<li>The <code>bootstrap-server</code> can be any one of the brokers in the cluster.</li>
<li>The <code>from-beginning</code> option tells the cluster that you want all the messages that it currently has with it, even messages that we put into it previously.</li>
</ul>
<p>Try starting another consumer in a different terminal window:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bin/kafka-console-consumer.sh \</span><br><span class="line">--bootstrap-server localhost:9093 \</span><br><span class="line">--topic my-kafka-topic \</span><br><span class="line">--from-beginning \</span><br><span class="line">--group group2</span><br></pre></td></tr></table></figure>

<h2 id="Kafka-as-a-Messaging-System"><a href="#Kafka-as-a-Messaging-System" class="headerlink" title="Kafka as a Messaging System"></a>Kafka as a Messaging System</h2><ul>
<li><p>As with a queue the consumer group allows you to divide up processing over a collection of processes (the members of the consumer group). As with publish-subscribe, Kafka allows you to broadcast messages to multiple consumer groups.</p>
<p><img src="https://kafka.apache.org/22/images/consumer-groups.png"></p>
</li>
<li><p>Kafka does it better. By having a notion of parallelism—the partition—within the topics, Kafka is able to provide both ordering guarantees and load balancing over a pool of consumer processes. This is achieved by assigning the partitions in the topic to the consumers in the consumer group so that each partition is consumed by exactly one consumer in the group. By doing this we ensure that the consumer is the only reader of that partition and consumes the data in order. Since there are many partitions this still balances the load over many consumer instances. Note however that there cannot be more consumer instances in a consumer group than partitions.</p>
</li>
<li><p>Each record consists of a key, a value, and a timestamp.</p>
</li>
</ul>
<h2 id="Kafka-as-a-Storage-System"><a href="#Kafka-as-a-Storage-System" class="headerlink" title="Kafka as a Storage System"></a>Kafka as a Storage System</h2><h2 id="Kafka-as-Stream-Processing"><a href="#Kafka-as-Stream-Processing" class="headerlink" title="Kafka as Stream Processing"></a>Kafka as Stream Processing</h2><h2 id="source-code"><a href="#source-code" class="headerlink" title="source code"></a>source code</h2><h3 id="源码文件结构"><a href="#源码文件结构" class="headerlink" title="源码文件结构"></a>源码文件结构</h3><table>
<thead>
<tr>
<th>目录</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>bin</td>
<td>存放可直接在Linux或Windows上运行的.sh文件和.bat文件，包含Kafka常用操作以及ZooKeeper便捷脚本</td>
</tr>
<tr>
<td>checkstyle</td>
<td>存放代码规范检查文档</td>
</tr>
<tr>
<td>clients</td>
<td>客户端的实现</td>
</tr>
<tr>
<td>config</td>
<td>存放配置文件</td>
</tr>
<tr>
<td>connetct</td>
<td>Kafka Connect工具的实现</td>
</tr>
<tr>
<td>core</td>
<td>核心模块</td>
</tr>
<tr>
<td>docs</td>
<td>官方文档</td>
</tr>
<tr>
<td>examples</td>
<td>Kafka生产者消费者简单Demo</td>
</tr>
<tr>
<td>jmh-benchmarks</td>
<td>基准测试模块</td>
</tr>
<tr>
<td>log4j-appender</td>
<td>日志模块</td>
</tr>
<tr>
<td>streams</td>
<td>Kafka Streams客户端库</td>
</tr>
<tr>
<td>tools</td>
<td>工具类</td>
</tr>
</tbody></table>
<h3 id="核心模块结构"><a href="#核心模块结构" class="headerlink" title="核心模块结构"></a>核心模块结构</h3><table>
<thead>
<tr>
<th>目录</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>admin</td>
<td>管理模块，操作和管理topic， broker, consumer group， records等</td>
</tr>
<tr>
<td>api</td>
<td>封装调用</td>
</tr>
<tr>
<td>client</td>
<td>Producer生产的元数据信息的传递</td>
</tr>
<tr>
<td>cluster</td>
<td>存活的Broker集群、分区、副本以及他们的底层属性和相互关系</td>
</tr>
<tr>
<td>common</td>
<td>异常类、枚举类、格式化类、配置类等</td>
</tr>
<tr>
<td>consumer</td>
<td>旧版本的废弃消费者类</td>
</tr>
<tr>
<td>controller</td>
<td>Kafka集群控制中心的选举，分区状态管理，分区副本状态管理，监听ZooKeeper数据变化等</td>
</tr>
<tr>
<td>coordinator</td>
<td>GroupCoordinator处理一般组成员资格和偏移量。transaction管理事务</td>
</tr>
<tr>
<td>javaapi</td>
<td>给java调用的生产者、消费者、消息集api</td>
</tr>
<tr>
<td>log</td>
<td>管理log，它是消息存储的形式，可对应到磁盘上的一个文件夹</td>
</tr>
<tr>
<td>message</td>
<td>由消息封装而成的一个压缩消息集</td>
</tr>
<tr>
<td>metrics</td>
<td>Kafka监控模块</td>
</tr>
<tr>
<td>network</td>
<td>网络管理模块，对客户端连接的处理</td>
</tr>
<tr>
<td>producer</td>
<td>旧版本的废弃生产者类</td>
</tr>
<tr>
<td>security</td>
<td>权限管理</td>
</tr>
<tr>
<td>serializer</td>
<td>消息序列化与反序列化处理</td>
</tr>
<tr>
<td>server</td>
<td>服务器端的实现</td>
</tr>
<tr>
<td>tools</td>
<td>各种控制台工具的实现</td>
</tr>
<tr>
<td>utils</td>
<td>工具类</td>
</tr>
<tr>
<td>zk</td>
<td>提供与ZooKeeper交互的管理方法和在管道之上的更高级别的Kafka特定操作</td>
</tr>
<tr>
<td>zookeeper</td>
<td>一个促进管道传输请求的ZooKeeper客户端</td>
</tr>
</tbody></table>
<h1 id="主题分区"><a href="#主题分区" class="headerlink" title="主题分区"></a>主题分区</h1><ul>
<li>调整分区</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kafka-topics --zookeeper localhost:2181 --alter --topic my-topic --partitions 10</span><br></pre></td></tr></table></figure>

<ul>
<li>查看分区</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kafka-topics --zookeeper localhost:2181 --describe --topic my-topic</span><br></pre></td></tr></table></figure>



<h1 id="Restful-API"><a href="#Restful-API" class="headerlink" title="Restful API"></a>Restful API</h1><h2 id="AVRO主题相关"><a href="#AVRO主题相关" class="headerlink" title="AVRO主题相关"></a>AVRO主题相关</h2><blockquote>
<p>一般schema registry 默认端口是8081（有时候避免与flink-jobmanager端口冲突，改为别的端口号 8091）</p>
</blockquote>
<ul>
<li><p>获取所有主题信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -X GET &quot;http://&lt;schema-registry-url&gt;:&lt;port&gt;/subjects&quot;</span><br></pre></td></tr></table></figure></li>
<li><p>根据schema id查下相关信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -X GET &quot;http://&lt;schema-registry-url&gt;:&lt;port&gt;/schemas/ids/&lt;schema-id&gt;&quot;</span><br></pre></td></tr></table></figure></li>
<li><p>获取指定主题key/value相关schema信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">GET http://&lt;schema-registry-url&gt;:&lt;port&gt;/subjects/&lt;topic-name&gt;-value/versions/latest</span><br></pre></td></tr></table></figure>

<p>or</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">GET http://&lt;schema-registry-url&gt;:&lt;port&gt;/subjects/&lt;topic-name&gt;-key/versions/latest</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="参数调优"><a href="#参数调优" class="headerlink" title="参数调优"></a>参数调优</h1><h1 id="producer"><a href="#producer" class="headerlink" title="producer"></a>producer</h1><ul>
<li>batch.size 默认16384</li>
<li>request.time.ms 默认30000（30秒）</li>
</ul>
<h2 id="分区和副本"><a href="#分区和副本" class="headerlink" title="分区和副本"></a>分区和副本</h2><p>Kafka中的分区（Partition）和副本（Replica）是两个不同的概念，它们在消息传输和存储方面起到不同的作用。</p>
<ol>
<li>分区（Partition）</li>
</ol>
<p>Kafka的每个Topic都可以被分成多个Partition，每个Partition只会被一个Consumer Group中的一个Consumer消费。在一个分布式系统中，通过将数据分散到多个Partition中，可以使得各个节点负载均衡，并且可以处理更大量级的数据。每个Partition内部维护了一个递增的offset（偏移量），通过offset来标识Consumer在该Partition中已经消费的消息位置。</p>
<ol>
<li>副本（Replica）</li>
</ol>
<p>Kafka中的副本是指每个Partition的备份，一个Partition可以有多个副本，每个副本都保存着完整的数据副本。副本之间有一个Leader-Follower的关系，其中一个副本作为Leader，其他副本作为Follower。客户端只能向Leader发送读写请求，而Follower只用于备份和同步数据，不能直接处理客户端请求。当Leader出现故障时，Kafka会自动将Follower升级为新的Leader，保证服务的可用性。</p>
<p><strong>总结：分区实现了数据的水平切分和负载均衡，而副本则提供了数据的冗余备份和高可用性，确保数据安全和业务连续性。在实际应用中，需要根据具体的业务需求和技术规划来设置分区和副本的数量，以提高Kafka服务的可靠性和性能。</strong></p>
<h2 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h2><ul>
<li><p>消费sasl_plaintext scram-sha-256认证的主题</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kafka-console-consumer.sh --bootstrap-server your_kafka_bootstrap_servers --topic your_topic --group your_consumer_group --consumer.config client-sasl.properties --from-beginning</span><br></pre></td></tr></table></figure>

<p>其中client-sasl.properties信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">security.protocol=SASL_PLAINTEXT</span><br><span class="line">sasl.mechanism=SCRAM-SHA-256</span><br><span class="line">sasl.jaas.config=org.apache.kafka.common.security.scram.ScramLoginModule required username=&quot;your_username&quot; password=&quot;your_password&quot;;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="消费者组"><a href="#消费者组" class="headerlink" title="消费者组"></a>消费者组</h2><ul>
<li><p>查询消费者组的偏移量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kafka-consumer-groups.sh --bootstrap-server &lt;bootstrap-server&gt; --group &lt;consumer-group&gt; --describe</span><br></pre></td></tr></table></figure></li>
<li><p>指定消费者组的偏移量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kafka-consumer-groups.sh --bootstrap-server &lt;bootstrap-server&gt; --group &lt;consumer-group&gt; --topic &lt;topic&gt; --reset-offsets --to-offset &lt;new-offset&gt; --execute</span><br></pre></td></tr></table></figure></li>
<li><p>指定消费组偏移量到最早</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kafka-consumer-groups.sh --bootstrap-server &lt;bootstrap-server&gt; --group &lt;consumer-group&gt; --reset-offsets --to-earliest --execute --topic your_topic</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><ul>
<li><p>使为特定主题（topic）配置数据的保留时间。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./kafka-configs.sh --bootstrap-server &lt;KAFKA_BROKER_ADDRESS&gt; --alter --entity-type topics --entity-name &lt;TOPIC_NAME&gt; --add-config retention.ms=&lt;RETENTION_TIME_IN_MILLISECONDS&gt;</span><br></pre></td></tr></table></figure>

<p>eg:(设置my-topic主题保留一天数据)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./kafka-configs.sh --bootstrap-server localhost:9092 --alter --entity-type topics --entity-name my-topic --add-config retention.ms=86400000</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>kafka</category>
      </categories>
      <tags>
        <tag>learn</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM Command</title>
    <url>/2023/03/06/JVM%20command/</url>
    <content><![CDATA[<h1 id="实践一-查看进程参数"><a href="#实践一-查看进程参数" class="headerlink" title="实践一: 查看进程参数"></a>实践一: 查看进程参数</h1><blockquote>
<p>查看服务设置的jvm</p>
<p>jps -v</p>
<p>查看服务jvm的默认参数</p>
<p>jinfo -flags PID</p>
</blockquote>
<ul>
<li><p>参考kafka服务的运行参数</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-server</span><br><span class="line">-XX:+UseG1GC</span><br><span class="line">-XX:MaxGCPauseMillis=20</span><br><span class="line">-XX:InitiatingHeapOccupancyPercent=35</span><br><span class="line">-XX:+ExplicitGCInvokesConcurrent</span><br></pre></td></tr></table></figure>

<p><strong>-XX:MaxGCPauseMillis=200</strong></p>
<p>为所需的最长暂停时间设置目标值。默认值是 200 毫秒。这个数值是一个软目标，也就是说JVM会尽一切能力满足这个暂停要求，但是不能保证每次暂停一定在这个要求之内。</p>
<p>根据测试发现，如果我们将这个值设定成50毫秒或者更低的话，JVM为了达到这个要求会将年轻代内存空间设定的非常小，从而导致youngGC的频率大大增高。所以我们并不设定这个参数。</p>
<p><strong>-XX:InitiatingHeapOccupancyPercent=45</strong></p>
<p>设置触发标记周期的 Java 堆占用率阈值。默认占用率是整个 Java 堆的 45%。就是说当使用内存占到堆总大小的45%的时候，G1将开始<strong>并发标记阶段。</strong>为混合GC做准备，这个数值在测试的时候我想让混合GC晚一些处理所以设定成了70%，经过观察发现如果这个数值设定过大会导致JVM无法启动并发标记，直接进行FullGC处理。</p>
<p>G1的FullGC是单线程，一个22G的对GC完成需要8S的时间，所以这个值在调优的时候写的45%</p>
</li>
</ul>
<blockquote>
<p>之前查看ignite，12秒回收了71G</p>
</blockquote>
<h1 id="实践二：查看进程加载的类"><a href="#实践二：查看进程加载的类" class="headerlink" title="实践二：查看进程加载的类"></a>实践二：查看进程加载的类</h1><blockquote>
<p>jcmd命令要使用启动目标进程的用户执行</p>
</blockquote>
<ol>
<li><p>使用dump内存信息到heap.bin文件<br>使用命令<code>jmap -dump:live,format=b,file=heap.bin pid（进程号）</code>将进程pid的堆栈信息输出到heap.bin文件中</p>
</li>
<li><p>使用jhat 对heap.bin 文件进行分析<br>命令<code>jhat -J-mx512m heap.bin</code>， 如果解析过程中出现内存不足，需要加大内存如:<code>jhat -J-mx800m heap.bin</code></p>
</li>
<li><p>通过浏览器访问 <code>http://ip:7000/</code>即可看到分析结果。点击每个类，可以查看详细信息，包括该类是被哪个类加载器加载。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>jvm</category>
      </categories>
      <tags>
        <tag>command</tag>
      </tags>
  </entry>
  <entry>
    <title>XC point</title>
    <url>/2023/03/13/xc/</url>
    <content><![CDATA[<h1 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h1><ul>
<li>ARM架构</li>
</ul>
<p>​    飞腾CPU、鲲鹏CPU</p>
<ul>
<li>X86架构</li>
</ul>
<p>​    海光CPU（与AMD合作）</p>
<p>​    兆芯、龙芯、申威</p>
]]></content>
      <categories>
        <category>point</category>
      </categories>
      <tags>
        <tag>XC</tag>
      </tags>
  </entry>
  <entry>
    <title>starrocks point</title>
    <url>/2023/07/07/starrocks%20points/</url>
    <content><![CDATA[<h1 id="安装部署"><a href="#安装部署" class="headerlink" title="安装部署"></a>安装部署</h1><h2 id="注意项"><a href="#注意项" class="headerlink" title="注意项"></a>注意项</h2><ul>
<li><p>安装前配置环境变量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export STARROCKS_HOME=xxx</span><br></pre></td></tr></table></figure></li>
<li><p>启动mysql客户端</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -h &lt;fe_ip&gt; -P&lt;fe_query_port&gt; -uroot -p # 密码为空，直接回车即可</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h2 id="FE"><a href="#FE" class="headerlink" title="FE"></a>FE</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netstat -tunlp | grep 18030</span><br><span class="line">netstat -tunlp | grep 19010</span><br><span class="line">netstat -tunlp | grep 19020</span><br><span class="line">netstat -tunlp | grep 19030</span><br><span class="line"></span><br><span class="line">http_port = 18030</span><br><span class="line">rpc_port = 19020</span><br><span class="line">query_port = 19030</span><br><span class="line">edit_log_port = 19010</span><br></pre></td></tr></table></figure>

<ul>
<li><p>启动FE<br><code>start_fe.sh --daemon</code></p>
</li>
<li><p>查看FE状态+<br><code>SHOW PROC &#39;/frontends&#39;\G</code></p>
</li>
<li><p>添加新FE节点（follow和observer)<br><code>./start_fe.sh --helper 172.18.244.74:19010 --daemon</code></p>
<p>注意：</p>
<ul>
<li><p>在mysql command先将实例添加进集群，然后逐个启动实例。（只在首次新增节点时操作）</p>
</li>
<li><p>各个节点的时间一定要同步，不然FE的心跳超过5s时差，就会报错</p>
</li>
</ul>
</li>
<li><p>扩容FE<br><code>ALTER SYSTEM ADD FOLLOWER &#39;ip:19010&#39;;</code><br><code>ALTER SYSTEM ADD observer &#39;ip:19010&#39;;</code></p>
</li>
<li><p>缩容FE<br><code>ALTER SYSTEM DROP follower &quot;ip:19010&quot;;</code><br><code>ALTER SYSTEM DROP observer &quot;ip:19010&quot;;</code></p>
</li>
</ul>
<hr>
<h2 id="BE"><a href="#BE" class="headerlink" title="BE"></a>BE</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netstat -tunlp | grep 19060</span><br><span class="line">netstat -tunlp | grep 18040</span><br><span class="line">netstat -tunlp | grep 19050</span><br><span class="line">netstat -tunlp | grep 18060</span><br><span class="line"></span><br><span class="line">be_port = 19060</span><br><span class="line">be_http_port = 18040</span><br><span class="line">heartbeat_service_port = 19050</span><br><span class="line">brpc_port = 18060</span><br></pre></td></tr></table></figure>

<ul>
<li><p>查看BE状态<br><code>SHOW PROC &#39;/backends&#39;\G</code></p>
</li>
<li><p>启动BE<br><code>./start_be.sh --daemon</code></p>
</li>
<li><p>添加BE节点<br><code>ALTER SYSTEM ADD BACKEND &quot;172.18.244.74:19050&quot;;</code></p>
</li>
<li><p>缩容BE节点<br><code>ALTER SYSTEM DECOMMISSION BACKEND &quot;172.18.244.74:19050&quot;;</code><br>等待该节点BE从列表中消失（查看命令SHOW PROC ‘/backends’;），即可使用./stop_be.sh停掉服务</p>
</li>
<li><p>崩溃排查日志<code>be.out</code></p>
</li>
</ul>
<hr>
<h2 id="配置修改"><a href="#配置修改" class="headerlink" title="配置修改"></a>配置修改</h2><ul>
<li>FE修改端口信息，需要清理meta</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 重建meta目录</span><br><span class="line">2. 重启主节点FE</span><br><span class="line">3. 登录mysql command，添加新FE节点（follow和observer），添加BE节点</span><br><span class="line">4. 启动follower和observer节点</span><br></pre></td></tr></table></figure>

<ul>
<li>BE修改端口信息，需要清理storage</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 重建storage目录（是否可以修改cluster_id进行集群处理）</span><br><span class="line">2. 逐个启动BE服务</span><br><span class="line">3. 登录mysql command，添加新BE节点（ALTER SYSTEM ADD BACKEND &quot;ip:19050&quot;;）</span><br></pre></td></tr></table></figure>

<ul>
<li>修改密码<br><code>SET PASSWORD = PASSWORD(&#39;datacanvas&#39;)</code></li>
</ul>
<h2 id="TIPS"><a href="#TIPS" class="headerlink" title="TIPS"></a>TIPS</h2><ul>
<li>节点时间需要同步（延迟需要在5秒内），不然starrocks无法扩容FE节点</li>
</ul>
]]></content>
      <categories>
        <category>olap</category>
      </categories>
      <tags>
        <tag>point</tag>
      </tags>
  </entry>
  <entry>
    <title>python points</title>
    <url>/2023/07/24/python%20points/</url>
    <content><![CDATA[<h2 id="虚拟环境"><a href="#虚拟环境" class="headerlink" title="虚拟环境"></a>虚拟环境</h2><p>项目粒度：python -m venv venv<br>                    poetry<br>系统粒度：pyenv<br>                    conda</p>
<h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><ul>
<li><p>安装tar.gz，解压之后，执行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python3 setup.py install</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="pip"><a href="#pip" class="headerlink" title="pip"></a>pip</h3><ul>
<li><p>国内镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip config set global.index-url https://pypi.mirrors.ustc.edu.cn/simple</span><br><span class="line">pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure></li>
<li><p>安装子模块</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install &#x27;fastapi_amis_admin[cli]&#x27;  # 注意引号</span><br></pre></td></tr></table></figure></li>
<li><p>查看指定依赖版本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip show package_name</span><br></pre></td></tr></table></figure></li>
</ul>
<ul>
<li><p>把项目的依赖放入指定文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure></li>
<li><p>清除缓存</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python -m pip cache purge</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Buildins"><a href="#Buildins" class="headerlink" title="Buildins"></a>Buildins</h2><ul>
<li>装饰器 <code>staticmethod</code> 用于定义与类或实例无关的函数，而 <code>classmethod</code> 用于定义需要访问类或类变量的函数。</li>
</ul>
<h2 id="信创"><a href="#信创" class="headerlink" title="信创"></a>信创</h2><ul>
<li><p>安装python3-devel</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dnf install python3-devel</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h2><ul>
<li><p><strong>请选择四个空格的缩进，不要使用 Tab，更不要 Tab 和空格混着用。</strong></p>
</li>
<li><p><strong>全局的类和函数的上方需要空两个空行，而类的函数之间需要空一个空行</strong></p>
</li>
<li><p>代码的尾部，每个代码文件的最后一行为空行，并且只有这一个空行。</p>
</li>
<li><p>可以使用<code>#</code>进行单独注释，请记得要在<code>#</code>后、注释前加一个空格。</p>
</li>
<li><p>对于操作符，例如<code>+</code>，<code>-</code>，<code>*</code>，<code>/</code>，<code>&amp;</code>，<code>|</code>，<code>=</code>，<code>==</code>，<code>!=</code>，请在两边都保留空格。不过与此对应，括号内的两端并不需要空格。</p>
</li>
<li><p>采用 <code>from module import func</code> 这样的语句，请确保 func 在本文件中不会出现命名冲突。不过，你其实可以通过 <code>from module import func as new_func</code> 来进行重命名，从而避免冲突。</p>
</li>
<li><p>如果是类的私有变量，请记得前面增加两个下划线。</p>
</li>
<li><p>对于常量，最好的做法是全部大写，并通过下划线连接</p>
</li>
<li><p>对于函数名，同样也请使用小写的方式，通过下划线连接起来，例如：<code>launch_nuclear_missile()</code>、<code>check_input_validation()</code>。</p>
</li>
<li><p>对于类名，则应该首字母大写，然后合并起来，例如：<code>class SpatialDropout2D()</code>、<code>class FeatureSet()</code>。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>points</tag>
      </tags>
  </entry>
  <entry>
    <title>flink duduplication</title>
    <url>/2023/08/02/flink%20deduplication/</url>
    <content><![CDATA[<ul>
<li><p>语法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> [column_list]</span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line"></span><br><span class="line">   <span class="keyword">SELECT</span> [column_list],</span><br><span class="line"></span><br><span class="line">     <span class="built_in">ROW_NUMBER</span>() <span class="keyword">OVER</span> ([<span class="keyword">PARTITION</span> <span class="keyword">BY</span> col1[, col2...]]</span><br><span class="line"></span><br><span class="line">       <span class="keyword">ORDER</span> <span class="keyword">BY</span> col1 [<span class="keyword">asc</span><span class="operator">|</span><span class="keyword">desc</span>][, col2 [<span class="keyword">asc</span><span class="operator">|</span><span class="keyword">desc</span>]...]) <span class="keyword">AS</span> rownum</span><br><span class="line"></span><br><span class="line">   <span class="keyword">FROM</span> table_name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">WHERE</span> rownum <span class="operator">&lt;=</span> N [<span class="keyword">AND</span> conditions]</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>ROW_NUMBER()</td>
<td>计算行号的OVER窗口函数。行号从1开始计算。</td>
</tr>
<tr>
<td>PARTITION BY col1[, col2..]</td>
<td>可选。指定分区的列，即去重的KEYS。</td>
</tr>
<tr>
<td>ORDER BY timeAttributeCol asc desc</td>
<td>指定排序的列，必须是一个的字段（即Proctime或Rowtime）。可以指定顺序（Keep FirstRow）或者倒序 （Keep LastRow）。</td>
</tr>
<tr>
<td>rownum</td>
<td>外层查询中对排名进行过滤，只取前N条</td>
</tr>
</tbody></table>
<ul>
<li>Deduplicate Keep FirstRow保留首行的去重策略：保留KEY下第一条出现的数据，之后出现该KEY下的数据会被丢弃掉。因为STATE中只存储了KEY数据，所以性能较优。</li>
<li>Deduplicate Keep LastRow保留末行的去重策略：保留KEY下最后一条出现的数据。因此过程中会产生变更的记录，会向下游发送变更的消息。因此，sink表需要支持retract操作。</li>
</ul>
</li>
</ul>
<p>在 Deduplication 关于是否会出现回撤流</p>
<ol>
<li>⭐ Order by 事件时间 DESC：会出现回撤流，因为当前 key 下 <code>可能会有</code> 比当前事件时间还大的数据</li>
<li>⭐ Order by 事件时间 ASC：会出现回撤流，因为当前 key 下 <code>可能会有</code> 比当前事件时间还小的数据</li>
<li>⭐ Order by 处理时间 DESC：会出现回撤流，因为当前 key 下 <code>可能会有</code> 比当前处理时间还大的数据</li>
<li>⭐ Order by 处理时间 ASC：不会出现回撤流，因为当前 key 下 <code>不可能会有</code> 比当前处理时间还小的数据</li>
</ol>
<hr>
<p>reference</p>
<p><a href="https://www.modb.pro/db/232004">https://www.modb.pro/db/232004</a></p>
]]></content>
      <categories>
        <category>flink</category>
      </categories>
      <tags>
        <tag>去重</tag>
      </tags>
  </entry>
  <entry>
    <title>flink upsert stream</title>
    <url>/2023/08/10/flink%20upsert%20stream/</url>
    <content><![CDATA[<h1 id="upsert-kafka"><a href="#upsert-kafka" class="headerlink" title="upsert kafka"></a>upsert kafka</h1><p>The Kafka connector in Flink SQL can work in two streaming modes. </p>
<p><strong>Upsert mode</strong> allows us to get the latest value for a specific entity automatically without any manual deduplication. One of the typical scenarios where you can leverage this mode is a SQL join of two tables, where one of the tables is keeping history of changes per some entity id. Once you join on such an entity id which is non-unique by design, you get unwanted rows, but you usually want to see the latest value of that entity. With upsert mode, Flink automatically normalizes before the tables are joined. Eventually it allows you to easily answer typical business questions on getting a real-time view of the shared resources like cars, planes, workers, etc.</p>
<p><strong>Append mode</strong> is still an option to go with, if a business query does not need to filter out all historical events, but rather show the history of changes at the end. In this scenario, query may run faster with append mode, as Flink does not need to do any changelog normalization.</p>
<h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><ul>
<li><p>upsert-kafka 可以配合 checkpoint使用，这样不需要再从头消费之前的数据</p>
</li>
<li><p>如果kafka中key没有值，是不符合upsert-kafka的格式的，flink sql引用此类topic为upsert-kafka，则不会触发计算</p>
</li>
</ul>
<h2 id="deduplication"><a href="#deduplication" class="headerlink" title="deduplication"></a>deduplication</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> [column_list]</span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line">   <span class="keyword">SELECT</span> [column_list],</span><br><span class="line">     <span class="built_in">ROW_NUMBER</span>() <span class="keyword">OVER</span> ([<span class="keyword">PARTITION</span> <span class="keyword">BY</span> col1[, col2...]]</span><br><span class="line">       <span class="keyword">ORDER</span> <span class="keyword">BY</span> time_attr [<span class="keyword">asc</span><span class="operator">|</span><span class="keyword">desc</span>]) <span class="keyword">AS</span> rownum</span><br><span class="line">   <span class="keyword">FROM</span> table_name)</span><br><span class="line"><span class="keyword">WHERE</span> rownum <span class="operator">=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>

<ul>
<li>注意 在内嵌的 select语句中，建议使用 column_list 查询指定的字段，不要使用 * 代指所有指标。否则查询upsert-kafka会，一直从最新的记录读取。</li>
</ul>
]]></content>
      <categories>
        <category>flink</category>
      </categories>
      <tags>
        <tag>learn</tag>
      </tags>
  </entry>
  <entry>
    <title>dameng snippet</title>
    <url>/2023/08/21/dameng%20snippet/</url>
    <content><![CDATA[<ul>
<li>连接url带上schema信息</li>
</ul>
]]></content>
      <categories>
        <category>snippet</category>
      </categories>
      <tags>
        <tag>dameng</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM class loader</title>
    <url>/2023/08/31/JVM%20classLoader/</url>
    <content><![CDATA[<h2 id="class冲突"><a href="#class冲突" class="headerlink" title="class冲突"></a>class冲突</h2><p>可以打印出类的加载顺序，可以用来排查 class 的冲突问题：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">-XX:+TraceClassLoading</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>jvm</category>
      </categories>
      <tags>
        <tag>command</tag>
      </tags>
  </entry>
  <entry>
    <title>flink Q&amp;A</title>
    <url>/2023/09/01/flink%20Q&amp;A/</url>
    <content><![CDATA[<h2 id="依赖冲突"><a href="#依赖冲突" class="headerlink" title="依赖冲突"></a>依赖冲突</h2><p><a href="https://flink.apache.org/getting-help/#i-see-a-classcastexception-x-cannot-be-cast-to-x">https://flink.apache.org/getting-help/#i-see-a-classcastexception-x-cannot-be-cast-to-x</a></p>
<p><a href="https://nightlies.apache.org/flink/flink-docs-release-1.17/docs/ops/debugging/debugging_classloading">https://nightlies.apache.org/flink/flink-docs-release-1.17/docs/ops/debugging/debugging_classloading</a></p>
<p>排查办法</p>
<ul>
<li>使用arthas定位依赖类所在jar包</li>
</ul>
<p>解决办法</p>
<ul>
<li><p>对冲突jar包使用maven shaded 的exclude或relocation 进行操作</p>
</li>
<li><p>使用7zip等解压软件对jar文件解压删除（人工shaded）</p>
</li>
</ul>
]]></content>
      <categories>
        <category>flink</category>
      </categories>
      <tags>
        <tag>Q&amp;A</tag>
      </tags>
  </entry>
  <entry>
    <title>kafka plain &amp; sasl_plain</title>
    <url>/2023/09/11/kafka%E5%90%8C%E6%97%B6%E9%85%8D%E7%BD%AEplain%E4%B8%8Esasl_plain/</url>
    <content><![CDATA[<blockquote>
<p>已验证Kafka 3.3.2</p>
<p>此方案的缺点，在sasl_plaintext模式下，不能动态创建用户，或修改用户账号信息</p>
<p>优点是，无需在zookeeper上配置jaas</p>
</blockquote>
<h1 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h1><h2 id="第一步：准备kafka-server-jaas-conf文件"><a href="#第一步：准备kafka-server-jaas-conf文件" class="headerlink" title="第一步：准备kafka_server_jaas.conf文件"></a>第一步：准备kafka_server_jaas.conf文件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">KafkaServer &#123;</span><br><span class="line">    org.apache.kafka.common.security.plain.PlainLoginModule required</span><br><span class="line">    username=&quot;admin&quot;</span><br><span class="line">    password=&quot;datacanvas&quot;</span><br><span class="line">    user_admin=&quot;datacanvas&quot;</span><br><span class="line">    user_qlb=&quot;qlbrtdsp&quot;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h2 id="第二步：设置kafka-server-start-sh"><a href="#第二步：设置kafka-server-start-sh" class="headerlink" title="第二步：设置kafka-server-start.sh"></a>第二步：设置kafka-server-start.sh</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> KAFKA_OPTS=<span class="string">&quot;-Djava.security.auth.login.config=/home/sasl/kafka_2.13-3.3.2/config/kafka_server_jaas.conf&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>注意修改路径</li>
</ul>
<h2 id="第三步：设置server-properties"><a href="#第三步：设置server-properties" class="headerlink" title="第三步：设置server.properties"></a>第三步：设置server.properties</h2><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">listeners</span>=<span class="string">PLAINTEXT://0.0.0.0:9092,SASL_PLAINTEXT://0.0.0.0:29092</span></span><br><span class="line"><span class="meta">advertised.listeners</span>=<span class="string">PLAINTEXT://172.20.58.93:9092,SASL_PLAINTEXT://172.20.58.93:29092</span></span><br><span class="line"><span class="meta">security.inter.broker.protocol</span>=<span class="string">SASL_PLAINTEXT</span></span><br><span class="line"><span class="meta">sasl.mechanism.inter.broker.protocol</span>=<span class="string">PLAIN</span></span><br><span class="line"><span class="meta">sasl.enabled.mechanisms</span>=<span class="string">PLAIN</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>listeners设置了两种协议 明文连接PLAINTEXT 和 安全连接 SASL_PLAINTEXT</p>
<ul>
<li><code>0.0.0.0</code> 表示 Kafka Broker 将监听所有可用的网络接口，这意味着它将接受来自任何 IP 地址的连接请求。</li>
</ul>
</li>
<li><p>注意zookeeer存储的位置 (/brokers)</p>
</li>
<li><p>设置默认副本数 default.replication.factor=3 和 num.partitions=1</p>
</li>
<li><p>测试使用<code>log.dirs=/home/sasl/data/kafka-logs</code></p>
</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># authorizer.class.name=kafka.security.auth.SimpleAclAuthorizer 旧版本配置</span></span><br><span class="line"><span class="meta">authorizer.class.name</span>=<span class="string">kafka.security.authorizer.AclAuthorizer</span></span><br><span class="line"><span class="meta">super.users</span>=<span class="string">User:admin;User:ANONYMOUS</span></span><br><span class="line"><span class="meta">allow.everyone.if.no.acl.found</span>=<span class="string">false</span></span><br></pre></td></tr></table></figure>



<h2 id="第四步：设置acl-config-properties"><a href="#第四步：设置acl-config-properties" class="headerlink" title="第四步：设置acl-config.properties"></a>第四步：设置acl-config.properties</h2><p>在config目录新增acl-config.properties设置 admin信息</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">sasl.jaas.config</span>=<span class="string">org.apache.kafka.common.security.plain.PlainLoginModule required username=&quot;admin&quot; password=&quot;datacanvas&quot;;</span></span><br><span class="line"><span class="meta">security.protocol</span>=<span class="string">SASL_PLAINTEXT</span></span><br><span class="line"><span class="meta">sasl.mechanism</span>=<span class="string">PLAIN</span></span><br></pre></td></tr></table></figure>



<h2 id="第五步：启动kafka-server"><a href="#第五步：启动kafka-server" class="headerlink" title="第五步：启动kafka server"></a>第五步：启动kafka server</h2><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">bin/kafka-server-start.sh</span> <span class="string">-daemon ./config/server.properties</span></span><br></pre></td></tr></table></figure>



<h2 id="第六步：配置ACL授权"><a href="#第六步：配置ACL授权" class="headerlink" title="第六步：配置ACL授权"></a>第六步：配置ACL授权</h2><ul>
<li><p>授权bigdata用户可以访问主题前缀为ODS的数据，且限制消费组 GROUP-BIGDATA</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bin/kafka-acls.sh --bootstrap-server 172.20.58.93:29092 --command-config /home/sasl/kafka_2.13-3.3.2/config/acl-config.properties --add --allow-principal User:bigdata --operation Read --topic ODS --group GROUP-BIGDATA --resource-pattern-type prefixed</span><br></pre></td></tr></table></figure></li>
</ul>
<ul>
<li><p>禁止指定用户写入、删除主题前缀为ODS的数据</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bin/kafka-acls.sh --bootstrap-server 172.20.58.93:29092 --command-config /home/sasl/kafka_2.13-3.3.2/config/acl-config.properties --add --deny-principal User:bigdata --operation Write --operation Delete --topic ODS --resource-pattern-type prefixed</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h1 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h1><ul>
<li><p>PLAINTEXT连接保持原先操作</p>
</li>
<li><p>SASL_PLAINTEXT</p>
<p>连接配置添加用户登录信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">org.apache.kafka.common.security.plain.PlainLoginModule required username=&quot;admin&quot; password=&quot;datacanvas&quot;;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>kafka</category>
      </categories>
      <tags>
        <tag>config</tag>
      </tags>
  </entry>
  <entry>
    <title>kafka plain &amp; sasl_scram</title>
    <url>/2023/09/11/kafka%E5%90%8C%E6%97%B6%E9%85%8D%E7%BD%AEplain%E4%B8%8Esasl_scram/</url>
    <content><![CDATA[<blockquote>
<p>已验证 kafka 2.3.1</p>
<p>此方案可以动态创建用户，或修改用户账号信息</p>
</blockquote>
<blockquote>
<p>SASL（Simple Authentication and Security Layer）</p>
<p>参考 <a href="https://kafka.apache.org/documentation/#security_sasl_scram">https://kafka.apache.org/documentation/#security_sasl_scram</a></p>
</blockquote>
<h1 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h1><blockquote>
<p>环境 zookeeper端口22181 ，kafka broker端口39092</p>
<p>无需重启zookeeper</p>
</blockquote>
<h2 id="第一步：创建-SCRAM-证书"><a href="#第一步：创建-SCRAM-证书" class="headerlink" title="第一步：创建 SCRAM 证书"></a>第一步：创建 SCRAM 证书</h2><blockquote>
<p>在broker启动之前</p>
</blockquote>
<ul>
<li><p>创建admin用户证书</p>
<p>启动之前（必须）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bin/kafka-configs.sh --zookeeper 172.20.58.93:22181 --alter --add-config &#x27;SCRAM-SHA-256=[password=datacanvas],SCRAM-SHA-512=[password=datacanvas]&#x27; --entity-type users --entity-name admin</span><br></pre></td></tr></table></figure>

<blockquote>
<p>会在 zookeeper生产目录 config，上面zookeeper参数值与kafka server.properties的zookeeper connect配置一致，也和offsetExplorer的chroot path一致</p>
</blockquote>
</li>
<li><p>列出用户已有证书</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bin/kafka-configs.sh --zookeeper 172.20.58.93:22181 --describe --entity-type users --entity-name alice</span><br></pre></td></tr></table></figure></li>
<li><p>删除用户证书</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bin/kafka-configs.sh --zookeeper 172.20.58.93:22181 --alter --delete-config &#x27;SCRAM-SHA-512&#x27; --entity-type users --entity-name alice</span><br></pre></td></tr></table></figure></li>
<li><p>创建普通用户alice证书</p>
<blockquote>
<p>可在启动之前或启动之后皆可</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bin/kafka-configs.sh --zookeeper 172.20.58.93:22181 --alter --add-config &#x27;SCRAM-SHA-256=[iterations=8192,password=alice-secret]&#x27; --entity-type users --entity-name alice</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="第一步：准备kafka-server-jaas-conf文件"><a href="#第一步：准备kafka-server-jaas-conf文件" class="headerlink" title="第一步：准备kafka_server_jaas.conf文件"></a>第一步：准备kafka_server_jaas.conf文件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">KafkaServer &#123;</span><br><span class="line">    org.apache.kafka.common.security.scram.ScramLoginModule required</span><br><span class="line">    username=&quot;admin&quot;</span><br><span class="line">    password=&quot;datacanvas&quot;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h2 id="第二步：设置kafka-server-start-sh"><a href="#第二步：设置kafka-server-start-sh" class="headerlink" title="第二步：设置kafka-server-start.sh"></a>第二步：设置kafka-server-start.sh</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> KAFKA_OPTS=<span class="string">&quot;-Djava.security.auth.login.config=/home/sasl/kafka_2.13-3.3.2/config/kafka_server_jaas.conf&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>注意修改路径</li>
</ul>
<h2 id="第三步：设置server-properties"><a href="#第三步：设置server-properties" class="headerlink" title="第三步：设置server.properties"></a>第三步：设置server.properties</h2><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">listeners</span>=<span class="string">PLAINTEXT://0.0.0.0:9092,SASL_PLAINTEXT://0.0.0.0:29092</span></span><br><span class="line"><span class="meta">advertised.listeners</span>=<span class="string">PLAINTEXT://172.20.58.93:9092,SASL_PLAINTEXT://172.20.58.93:29092</span></span><br><span class="line"><span class="meta">security.inter.broker.protocol</span>=<span class="string">SASL_PLAINTEXT</span></span><br><span class="line"><span class="meta">sasl.mechanism.inter.broker.protocol</span>=<span class="string">SCRAM-SHA-256</span></span><br><span class="line"><span class="meta">sasl.enabled.mechanisms</span>=<span class="string">SCRAM-SHA-256</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>listeners设置了两种协议 明文连接PLAINTEXT 和 安全连接 SASL_SSL</p>
<ul>
<li><code>0.0.0.0</code> 表示 Kafka Broker 将监听所有可用的网络接口，这意味着它将接受来自任何 IP 地址的连接请求。</li>
</ul>
</li>
<li><p>注意zookeeer存储的位置 (/brokers)</p>
</li>
<li><p>设置默认副本数 default.replication.factor=3 和 num.partitions=1</p>
</li>
<li><p>测试使用<code>log.dirs=/home/sasl/data/kafka-logs</code></p>
</li>
<li><p> ACLs相关配置</p>
</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># authorizer.class.name=kafka.security.auth.SimpleAclAuthorizer 旧版本配置</span></span><br><span class="line"><span class="meta">authorizer.class.name</span>=<span class="string">kafka.security.authorizer.AclAuthorizer</span></span><br><span class="line"><span class="comment"># 这里添加ANONYMOUS为超级用户，主要为了listener for plain(如何只用sasl，可以不配置ANONYMOUS)</span></span><br><span class="line"><span class="meta">super.users</span>=<span class="string">User:admin;User:ANONYMOUS </span></span><br><span class="line"><span class="meta">allow.everyone.if.no.acl.found</span>=<span class="string">false </span></span><br></pre></td></tr></table></figure>

<blockquote>
<p> 默认为true,默认情况只通过用户密码认证管控用户，acl只会对–deny-principal起效（所以默认同时使用 plain和scram，需要保持默认true。如果单独使用scram，则需要设置为false）</p>
</blockquote>
<h2 id="第四步：设置acl-config-properties"><a href="#第四步：设置acl-config-properties" class="headerlink" title="第四步：设置acl-config.properties"></a>第四步：设置acl-config.properties</h2><p>在config目录新增acl-config.properties设置 admin信息</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">sasl.jaas.config</span>=<span class="string">org.apache.kafka.common.security.scram.ScramLoginModule required username=&quot;admin&quot; password=&quot;datacanvas&quot;;</span></span><br><span class="line"><span class="meta">security.protocol</span>=<span class="string">SASL_PLAINTEXT</span></span><br><span class="line"><span class="meta">sasl.mechanism</span>=<span class="string">SCRAM-SHA-256</span></span><br></pre></td></tr></table></figure>



<h2 id="第五步：启动kafka-server"><a href="#第五步：启动kafka-server" class="headerlink" title="第五步：启动kafka server"></a>第五步：启动kafka server</h2><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">bin/kafka-server-start.sh</span> <span class="string">-daemon ./config/server.properties</span></span><br></pre></td></tr></table></figure>



<h2 id="第六步：配置ACL授权"><a href="#第六步：配置ACL授权" class="headerlink" title="第六步：配置ACL授权"></a>第六步：配置ACL授权</h2><ul>
<li><p>授权bigdata用户可以访问主题前缀为ODS的数据，且限制消费组 GROUP-BIGDATA</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bin/kafka-acls.sh --bootstrap-server 172.20.58.93:29092 --command-config /path/to/config/acl-config.properties --add --allow-principal User:bigdata --operation Read --group GROUP-BIGDATA --topic ODS --resource-pattern-type prefixed</span><br></pre></td></tr></table></figure>

<ul>
<li>–resource-pattern-type prefixed 指定ODS前缀</li>
</ul>
</li>
<li><p>移除权限</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bin/kafka-acls.sh --bootstrap-server localhost:9092 --command-config /home/sasl/kafka_2.13-3.3.2/config/acl-config.properties --remove --allow-principal User:Bob --allow-principal User:Alice --allow-host 198.51.100.0 --allow-host 198.51.100.1 --operation Read --operation Write --topic Test-topic </span><br></pre></td></tr></table></figure></li>
</ul>
<ul>
<li><p>禁止删除指定主题的权限</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bin/kafka-acls.sh --bootstrap-server 172.20.58.93:29092 --command-config /home/sasl/kafka_2.13-3.3.2/config/acl-config.properties --add --deny-principal User:bigdata --operation Write --operation Delete --topic ODS --resource-pattern-type prefixed</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h1 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h1><ul>
<li><p>PLAIN连接保持原先操作</p>
</li>
<li><p>SASL_PLAINTEXT</p>
<p>连接配置添加用户登录信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">org.apache.kafka.common.security.scram.ScramLoginModule required username=&quot;admin&quot; password=&quot;datacanvas&quot;;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>kafka</category>
      </categories>
      <tags>
        <tag>config</tag>
      </tags>
  </entry>
  <entry>
    <title>ignite sqlline</title>
    <url>/2023/09/25/ignite%20sqlline/</url>
    <content><![CDATA[<blockquote>
<p>TIPS:</p>
<ol>
<li><p>Keep in mind that, in Ignite, the concepts of a SQL table and a key-value cache are two equivalent representations of the same (internal) data structure. You can access your data using either the key-value API or SQL statements, or both.</p>
</li>
<li><p>A cache is a collection of key-value pairs that can be accessed through the key-value API. A SQL table in Ignite corresponds to the notion of tables in traditional RDBMSs with some additional constraints; for example, each SQL table must have a primary key.</p>
<p>A table with a primary key can be presented as a key-value cache, in which the primary key column serves as the key, and the rest of the table columns represent the fields of the object (the value).</p>
</li>
</ol>
</blockquote>
<h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">IGNITE_HOME/bin/sqlline.sh --verbose=<span class="literal">true</span> -u jdbc:ignite:thin://ip地址/PUBLIC</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ignite</category>
      </categories>
      <tags>
        <tag>command</tag>
      </tags>
  </entry>
  <entry>
    <title>python learn</title>
    <url>/2023/10/31/python%20learn/</url>
    <content><![CDATA[<p><img src="/images/python/python%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1.png"></p>
<h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="列表list和元组tuple"><a href="#列表list和元组tuple" class="headerlink" title="列表list和元组tuple"></a>列表list和元组tuple</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l = [<span class="number">1</span>, <span class="number">2</span>, <span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>] <span class="comment"># 列表中同时含有 int 和 string 类型的元素</span></span><br><span class="line">l</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>]</span><br><span class="line"> </span><br><span class="line">tup = (<span class="string">&#x27;jason&#x27;</span>, <span class="number">22</span>) <span class="comment"># 元组中同时含有 int 和 string 类型的元素</span></span><br><span class="line">tup</span><br><span class="line">(<span class="string">&#x27;jason&#x27;</span>, <span class="number">22</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>列表是动态的，长度可变，可以随意的增加、删减或改变元素。列表的存储空间略大于元组，性能略逊于元组。</li>
<li>元组是静态的，长度大小固定，不可以对元素进行增加、删减或者改变操作。元组相对于列表更加轻量级，性能稍优。</li>
</ul>
<h3 id="字典和集合"><a href="#字典和集合" class="headerlink" title="字典和集合"></a>字典和集合</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;jason&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;male&#x27;</span>&#125;</span><br><span class="line">d2 = <span class="built_in">dict</span>(&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;jason&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;male&#x27;</span>&#125;)</span><br><span class="line">d3 = <span class="built_in">dict</span>([(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;jason&#x27;</span>), (<span class="string">&#x27;age&#x27;</span>, <span class="number">20</span>), (<span class="string">&#x27;gender&#x27;</span>, <span class="string">&#x27;male&#x27;</span>)])</span><br><span class="line">d4 = <span class="built_in">dict</span>(name=<span class="string">&#x27;jason&#x27;</span>, age=<span class="number">20</span>, gender=<span class="string">&#x27;male&#x27;</span>) </span><br><span class="line">d1 == d2 == d3 ==d4</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"> </span><br><span class="line">s1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">s2 = <span class="built_in">set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">s1 == s2</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>

<ul>
<li>字典在 Python3.7+ 是有序的数据结构，而集合是无序的，其内部的哈希表存储结构，保证了其查找、插入、删除操作的高效性。所以，字典和集合通常运用在对元素的高效查找、去重等场景。</li>
</ul>
<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">s2 = <span class="string">&quot;hello&quot;</span></span><br><span class="line">s3 = <span class="string">&quot;&quot;&quot;hello&quot;&quot;&quot;</span></span><br><span class="line">s1 == s2 == s3</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>

<ul>
<li>转义字符</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&#x27;a\nb\tc&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line">a</span><br><span class="line">b	c</span><br><span class="line"></span><br><span class="line"><span class="built_in">len</span>(s)</span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>常用方法</p>
<ul>
<li><p>和其他数据结构，如列表、元组一样，字符串的索引同样从 0 开始，index=0 表示第一个元素（字符），[index:index+2] 则表示第 index 个元素到 index+1 个元素组成的子字符串。</p>
</li>
<li><p>字符串是不可变的（immutable）</p>
</li>
<li><p>字符串格式化</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;no data available for person with id: &#123;&#125;, name: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">id</span>, name)) <span class="string">&#x27;&#x27;&#x27;最新规范&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;no data available for person with id: %s, name: %s&#x27;</span> % (<span class="built_in">id</span>, name))<span class="string">&#x27;&#x27;&#x27;以往规范，%s 表示字符串型，%d 表示整型&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="json"><a href="#json" class="headerlink" title="json"></a>json</h3><ul>
<li>json.dumps() 这个函数，接受 基本数据类型，然后将其序列化为 string</li>
<li>json.loads() 这个函数，接受一个合法字符串，然后将其反序列化为基本数据类型</li>
</ul>
<h2 id="条件与循环"><a href="#条件与循环" class="headerlink" title="条件与循环"></a>条件与循环</h2><h3 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># y = |x|</span></span><br><span class="line"><span class="keyword">if</span> x &lt; <span class="number">0</span>:</span><br><span class="line">    y = -x</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    y = x</span><br><span class="line"><span class="comment"># 场景二</span></span><br><span class="line"><span class="keyword">if</span> condition_1:</span><br><span class="line">    statement_1</span><br><span class="line"><span class="keyword">elif</span> condition_2:</span><br><span class="line">    statement_2</span><br><span class="line">...</span><br><span class="line"><span class="keyword">elif</span> condition_i:</span><br><span class="line">    statement_i</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    statement_n</span><br></pre></td></tr></table></figure>



<h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列表</span></span><br><span class="line">l = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> l:</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="comment"># 字典</span></span><br><span class="line">d = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;jason&#x27;</span>, <span class="string">&#x27;dob&#x27;</span>: <span class="string">&#x27;2000-01-01&#x27;</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;male&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> d: <span class="comment"># 遍历字典的键</span></span><br><span class="line">    <span class="built_in">print</span>(k)</span><br><span class="line">name</span><br><span class="line">dob</span><br><span class="line">gender</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> d.values(): <span class="comment"># 遍历字典的值</span></span><br><span class="line">    <span class="built_in">print</span>(v)</span><br><span class="line">jason</span><br><span class="line"><span class="number">2000</span>-01-01</span><br><span class="line">male    </span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> d.items(): <span class="comment"># 遍历字典的键值对</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;key: &#123;&#125;, value: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(k, v))</span><br><span class="line">key: name, value: jason</span><br><span class="line">key: dob, value: <span class="number">2000</span>-01-01</span><br><span class="line">key: gender, value: male </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        text = <span class="built_in">input</span>(<span class="string">&#x27;Please enter your questions, enter &quot;q&quot; to exit&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> text == <span class="string">&#x27;q&#x27;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Exit system&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        ...</span><br><span class="line">        ...</span><br><span class="line">        <span class="built_in">print</span>(response)</span><br><span class="line">    <span class="keyword">except</span> <span class="keyword">as</span> err:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Encountered error: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(err))</span><br><span class="line">        <span class="keyword">break</span> </span><br></pre></td></tr></table></figure>



<h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><ul>
<li>当程序中存在多个 except block 时，最多只有一个 except block 会被执行。换句话说，如果多个 except 声明的异常类型都与实际相匹配，那么只有最前面的 except block 会被执行，其他则被忽略。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    s = <span class="built_in">input</span>(<span class="string">&#x27;please enter two numbers separated by comma: &#x27;</span>)</span><br><span class="line">    num1 = <span class="built_in">int</span>(s.split(<span class="string">&#x27;,&#x27;</span>)[<span class="number">0</span>].strip())</span><br><span class="line">    num2 = <span class="built_in">int</span>(s.split(<span class="string">&#x27;,&#x27;</span>)[<span class="number">1</span>].strip())</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">except</span> ValueError <span class="keyword">as</span> err:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Value Error: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(err))</span><br><span class="line"><span class="keyword">except</span> IndexError <span class="keyword">as</span> err:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Index Error: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(err))</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Other error&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;continue&#x27;</span>)</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<ul>
<li>无论发生什么情况，finally block 中的语句都会被执行，哪怕前面的 try 和 excep block 中使用了 return 语句。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&#x27;file.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">    .... <span class="comment"># some data processing</span></span><br><span class="line"><span class="keyword">except</span> OSError <span class="keyword">as</span> err:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;OS error: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(err))</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Unexpected error:&#x27;</span>, sys.exc_info()[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure>

<ul>
<li>自定义异常，定义并实现了初始化函数和 str 函数（直接 print 时调用）：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyInputError</span>(<span class="params">Exception</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Exception raised when there&#x27;re errors in input&quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, value</span>):</span> <span class="comment"># 自定义异常类型的初始化</span></span><br><span class="line">        self.value = value</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span> <span class="comment"># 自定义异常类型的 string 表达形式</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="string">&quot;&#123;&#125; is invalid input&quot;</span>.<span class="built_in">format</span>(<span class="built_in">repr</span>(self.value)))</span><br><span class="line">    </span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">raise</span> MyInputError(<span class="number">1</span>) <span class="comment"># 抛出 MyInputError 这个异常</span></span><br><span class="line"><span class="keyword">except</span> MyInputError <span class="keyword">as</span> err:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;error: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(err))</span><br></pre></td></tr></table></figure>

<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">name</span>(<span class="params">param1, param2, ..., paramN</span>):</span></span><br><span class="line">    statements</span><br><span class="line">    <span class="keyword">return</span>/<span class="keyword">yield</span> value <span class="comment"># optional</span></span><br></pre></td></tr></table></figure>

<h3 id="函数嵌套"><a href="#函数嵌套" class="headerlink" title="函数嵌套"></a>函数嵌套</h3><ul>
<li>函数的嵌套能够保证内部函数的隐私。</li>
<li>合理的使用函数嵌套，能够提高程序的运行效率</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span>():</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;world&#x27;</span>)</span><br><span class="line">    f2()</span><br><span class="line">f1()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">hello</span><br><span class="line">world</span><br></pre></td></tr></table></figure>

<h3 id="函数变量"><a href="#函数变量" class="headerlink" title="函数变量"></a>函数变量</h3><ul>
<li><p>局部变量：只在函数内部有效。一旦函数执行完毕，局部变量就会被回收</p>
</li>
<li><p>全局变量：不能在函数内部随意改变全局变量的值，如果我们一定要在函数内部改变全局变量的值，就必须加上 global 这个声明</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">MIN_VALUE = <span class="number">1</span></span><br><span class="line">MAX_VALUE = <span class="number">10</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">validation_check</span>(<span class="params">value</span>):</span></span><br><span class="line">    <span class="keyword">global</span> MIN_VALUE</span><br><span class="line">    ...</span><br><span class="line">    MIN_VALUE += <span class="number">1</span></span><br><span class="line">    ...</span><br><span class="line">validation_check(<span class="number">5</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nth_power</span>(<span class="params">exponent</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exponent_of</span>(<span class="params">base</span>):</span></span><br><span class="line">        <span class="keyword">return</span> base ** exponent</span><br><span class="line">    <span class="keyword">return</span> exponent_of <span class="comment"># 返回值是 exponent_of 函数</span></span><br><span class="line"> </span><br><span class="line">square = nth_power(<span class="number">2</span>) <span class="comment"># 计算一个数的平方</span></span><br><span class="line">cube = nth_power(<span class="number">3</span>) <span class="comment"># 计算一个数的立方 </span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(square(<span class="number">2</span>))  <span class="comment"># 计算 2 的平方</span></span><br><span class="line"><span class="built_in">print</span>(cube(<span class="number">2</span>)) <span class="comment"># 计算 2 的立方</span></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="number">4</span> <span class="comment"># 2^2</span></span><br><span class="line"><span class="number">8</span> <span class="comment"># 2^3</span></span><br></pre></td></tr></table></figure>

<h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><ul>
<li><strong>lambda 是一个表达式（expression），并不是一个语句（statement）</strong></li>
<li><strong>lambda 的主体是只有一行的简单表达式，并不能扩展成一个多行的代码块</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">square = <span class="keyword">lambda</span> x: x**<span class="number">2</span></span><br><span class="line">square(<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 等同于</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">square</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x**<span class="number">2</span></span><br><span class="line">square(<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<h3 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h3><ul>
<li><p>所谓函数式编程，是指代码中每一块都是不可变的（immutable），都由纯函数（pure function）的形式组成。这里的纯函数，是指函数本身相互独立、互不影响，对于相同的输入，总会有相同的输出，没有任何副作用</p>
</li>
<li><p>主要提供了这么几个函数：map()、filter() 和 reduce()，通常结合匿名函数 lambda 一起使用</p>
</li>
</ul>
<h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><blockquote>
<p><strong>类，一群有着相同属性和函数的对象的集合。</strong></p>
<p>OOP思想四要素： 类 对象 属性 函数</p>
</blockquote>
<ul>
<li><p>类函数</p>
</li>
<li><p>成员函数</p>
</li>
<li><p>静态函数</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Document</span>():</span></span><br><span class="line">    </span><br><span class="line">    WELCOME_STR = <span class="string">&#x27;Welcome! The context for this book is &#123;&#125;.&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, title, author, context</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;init function called&#x27;</span>)</span><br><span class="line">        self.title = title</span><br><span class="line">        self.author = author</span><br><span class="line">        self.__context = context</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 类函数</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create_empty_book</span>(<span class="params">cls, title, author</span>):</span></span><br><span class="line">        <span class="keyword">return</span> cls(title=title, author=author, context=<span class="string">&#x27;nothing&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 成员函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_context_length</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.__context)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 静态函数</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_welcome</span>(<span class="params">context</span>):</span></span><br><span class="line">        <span class="keyword">return</span> Document.WELCOME_STR.<span class="built_in">format</span>(context)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">empty_book = Document.create_empty_book(<span class="string">&#x27;What Every Man Thinks About Apart from Sex&#x27;</span>, <span class="string">&#x27;Professor Sheridan Simove&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(empty_book.get_context_length())</span><br><span class="line"><span class="built_in">print</span>(empty_book.get_welcome(<span class="string">&#x27;indeed nothing&#x27;</span>))</span><br><span class="line"> </span><br><span class="line"><span class="comment">########## 输出 ##########</span></span><br><span class="line"> </span><br><span class="line">init function called</span><br><span class="line"><span class="number">7</span></span><br><span class="line">Welcome! The context <span class="keyword">for</span> this book <span class="keyword">is</span> indeed nothing.</span><br></pre></td></tr></table></figure>

<h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><ul>
<li>每个类都有构造函数，继承类在生成对象的时候，是不会自动调用父类的构造函数的，因此你必须在 <strong>init</strong>() 函数中显式调用父类的构造函数。它们的执行顺序是 子类的构造函数 -&gt; 父类的构造函数。</li>
</ul>
<h3 id="抽象函数-抽象类"><a href="#抽象函数-抽象类" class="headerlink" title="抽象函数/抽象类"></a>抽象函数/抽象类</h3><ul>
<li><p>抽象类是一种特殊的类，它生下来就是作为父类存在的，一旦对象化就会报错。同样，抽象函数定义在抽象类之中，子类必须重写该函数才能使用。相应的抽象函数，则是使用装饰器 @abstractmethod 来表示。</p>
</li>
<li><p>抽象类就是这么一种存在，它是一种自上而下的设计风范，你只需要用少量的代码描述清楚要做的事情，定义好接口，然后就可以交给不同开发人员去开发和对接。</p>
</li>
</ul>
<h3 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h3><blockquote>
<p><strong>所谓的装饰器，其实就是通过装饰器函数，来修改原函数的一些功能，使得原函数不需要修改。</strong></p>
<p>Decorators is to modify the behavior of the function through a wrapper so we don’t have to actually modify the function.</p>
</blockquote>
<h4 id="函数装饰器"><a href="#函数装饰器" class="headerlink" title="函数装饰器"></a>函数装饰器</h4><ul>
<li><p>通常情况下，我们会把<code>*args</code>和<code>**kwargs</code>，作为装饰器内部函数 wrapper() 的参数。<code>*args</code>和<code>**kwargs</code>，表示接受任意数量和类型的参数，因此装饰器就可以写成下面的形式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">my_decorator</span>(<span class="params">func</span>):</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">          <span class="built_in">print</span>(<span class="string">&#x27;wrapper of decorator&#x27;</span>)</span><br><span class="line">          func(*args, **kwargs)</span><br><span class="line">      <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line">- 装饰器可以接受原函数任意类型和数量的参数，除此之外，它还可以接受自己定义的参数。</span><br><span class="line"></span><br><span class="line">  ```python</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">repeat</span>(<span class="params">num</span>):</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">my_decorator</span>(<span class="params">func</span>):</span></span><br><span class="line">          <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">              <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">                  <span class="built_in">print</span>(<span class="string">&#x27;wrapper of decorator&#x27;</span>)</span><br><span class="line">                  func(*args, **kwargs)</span><br><span class="line">          <span class="keyword">return</span> wrapper</span><br><span class="line">      <span class="keyword">return</span> my_decorator</span><br><span class="line">   </span><br><span class="line"><span class="meta">  @repeat(<span class="params"><span class="number">4</span></span>)</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">greet</span>(<span class="params">message</span>):</span></span><br><span class="line">      <span class="built_in">print</span>(message)</span><br><span class="line">   </span><br><span class="line">  greet(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line">   </span><br><span class="line">  <span class="comment"># 输出：</span></span><br><span class="line">  wrapper of decorator</span><br><span class="line">  hello world</span><br><span class="line">  wrapper of decorator</span><br><span class="line">  hello world</span><br><span class="line">  wrapper of decorator</span><br><span class="line">  hello world</span><br><span class="line">  wrapper of decorator</span><br><span class="line">  hello world</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="类装饰器"><a href="#类装饰器" class="headerlink" title="类装饰器"></a>类装饰器</h4><ul>
<li><p>类装饰器主要依赖于函数<code>__call_()</code>，每当你调用一个类的示例时，函数<code>__call__()</code>就会被执行一次。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Count</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, func</span>):</span></span><br><span class="line">        self.func = func</span><br><span class="line">        self.num_calls = <span class="number">0</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span></span><br><span class="line">        self.num_calls += <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;num of calls is: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(self.num_calls))</span><br><span class="line">        <span class="keyword">return</span> self.func(*args, **kwargs)</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Count</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">example</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line"> </span><br><span class="line">example()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">num of calls <span class="keyword">is</span>: <span class="number">1</span></span><br><span class="line">hello world</span><br><span class="line"> </span><br><span class="line">example()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">num of calls <span class="keyword">is</span>: <span class="number">2</span></span><br><span class="line">hello world</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="装饰器的嵌套"><a href="#装饰器的嵌套" class="headerlink" title="装饰器的嵌套"></a>装饰器的嵌套</h4><ul>
<li><p>执行顺序从里到外</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@decorator1</span></span><br><span class="line"><span class="meta">@decorator2</span></span><br><span class="line"><span class="meta">@decorator3</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">    ...</span><br><span class="line"><span class="comment"># 等同于</span></span><br><span class="line">decorator1(decorator2(decorator3(func)))</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="metaclass"><a href="#metaclass" class="headerlink" title="metaclass"></a>metaclass</h3><h2 id="协程（Asyncio）"><a href="#协程（Asyncio）" class="headerlink" title="协程（Asyncio）"></a>协程（Asyncio）</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"> </span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">crawl_page</span>(<span class="params">url</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;crawling &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(url))</span><br><span class="line">    sleep_time = <span class="built_in">int</span>(url.split(<span class="string">&#x27;_&#x27;</span>)[-<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(sleep_time)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;OK &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(url))</span><br><span class="line"> </span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">urls</span>):</span></span><br><span class="line">    tasks = [asyncio.create_task(crawl_page(url)) <span class="keyword">for</span> url <span class="keyword">in</span> urls]</span><br><span class="line">    <span class="keyword">for</span> task <span class="keyword">in</span> tasks:</span><br><span class="line">        <span class="keyword">await</span> task</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    task遍历的另一种写法</span></span><br><span class="line"><span class="string">    await asyncio.gather(*tasks)</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"> </span><br><span class="line">%time asyncio.run(main([<span class="string">&#x27;url_1&#x27;</span>, <span class="string">&#x27;url_2&#x27;</span>, <span class="string">&#x27;url_3&#x27;</span>, <span class="string">&#x27;url_4&#x27;</span>]))</span><br><span class="line"> </span><br><span class="line"><span class="comment">########## 输出 ##########</span></span><br><span class="line"> </span><br><span class="line">crawling url_1</span><br><span class="line">crawling url_2</span><br><span class="line">crawling url_3</span><br><span class="line">crawling url_4</span><br><span class="line">OK url_1</span><br><span class="line">OK url_2</span><br><span class="line">OK url_3</span><br><span class="line">OK url_4</span><br><span class="line">Wall time: <span class="number">3.99</span> s</span><br></pre></td></tr></table></figure>

<ul>
<li>协程和多线程的区别，主要在于两点，一是协程为单线程；二是协程由用户决定，在哪些地方交出控制权，切换到下一个任务。</li>
<li>协程的写法更加简洁清晰，把 async / await 语法和 create_task 结合来用，对于中小级别的并发需求已经毫无压力。</li>
<li>写协程程序的时候，你的脑海中要有清晰的事件循环概念，知道程序在什么时候需要暂停、等待 I/O，什么时候需要一并执行到底。</li>
</ul>
<h3 id="数据隔离"><a href="#数据隔离" class="headerlink" title="数据隔离"></a>数据隔离</h3><ul>
<li>在协程中，通常会使用局部变量或协程上下文来存储数据，每个协程拥有自己的数据空间，不会受到其他协程的影响。协程之间可以通过参数传递或全局变量等方式来进行数据交互，但是数据的修改只会影响当前协程的数据空间，不会影响其他协程的数据。</li>
</ul>
<h2 id="concurrency"><a href="#concurrency" class="headerlink" title="concurrency"></a>concurrency</h2><blockquote>
<p>并发通常用于 I/O 操作频繁的场景，而并行则适用于 CPU heavy 的场景。</p>
</blockquote>
<h3 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h3><blockquote>
<p> 在 Python 中，并发并不是指同一时刻有多个操作（thread、task）同时进行。相反，某个特定的时刻，它只允许有一个操作发生，只不过线程 / 任务之间会互相切换，直到完成</p>
</blockquote>
<p><img src="/images/python/concurrency.png" alt="concurrency"></p>
<blockquote>
<p>图中出现了 thread 和 task 两种切换顺序的不同方式，分别对应 Python 中并发的两种形式——threading 和 asyncio。</p>
</blockquote>
<p><strong>futures实现并发</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_all</span>(<span class="params">sites</span>):</span></span><br><span class="line">    <span class="keyword">with</span> concurrent.futures.ThreadPoolExecutor(max_workers=<span class="number">5</span>) <span class="keyword">as</span> executor:</span><br><span class="line">        executor.<span class="built_in">map</span>(download_one, sites)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>虽然线程的数量可以自己定义，但是线程数并不是越多越好，因为线程的创建、维护和删除也会有一定的开销。所以如果你设置的很大，反而可能会导致速度变慢。我们往往需要根据实际的需求做一些测试，来寻找最优的线程数量。</p>
</blockquote>
<p><strong>多线程每次只能有一个线程执行的原因</strong></p>
<blockquote>
<p>事实上，Python 的解释器并不是线程安全的，为了解决由此带来的 race condition 等问题，Python 便引入了全局解释器锁，也就是同一时刻，只允许一个线程执行。当然，在执行 I/O 操作时，如果一个线程被 block 了，全局解释器锁便会被释放，从而让另一个线程能够继续执行。</p>
</blockquote>
<h3 id="并行"><a href="#并行" class="headerlink" title="并行"></a>并行</h3><blockquote>
<p> 所谓的并行，指的是同一时刻、同时发生。Python 中的 multi-processing 便是这个意思</p>
</blockquote>
<p><img src="/images/python/multi-processing.png"></p>
<ul>
<li>并发通常应用于 I/O 操作频繁的场景，比如你要从网站上下载多个文件，I/O 操作的时间可能会比 CPU 运行处理的时间长得多。</li>
<li>而并行则更多应用于 CPU heavy 的场景，比如 MapReduce 中的并行计算，为了加快运行速度，一般会用多台机器、多个处理器来完成。</li>
</ul>
<p><strong>futures实现并行</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_all</span>(<span class="params">sites</span>):</span></span><br><span class="line">    <span class="keyword">with</span> concurrent.futures.ThreadPoolExecutor(max_workers=<span class="number">5</span>) <span class="keyword">as</span> executor:</span><br><span class="line">        to_do = []</span><br><span class="line">        <span class="keyword">for</span> site <span class="keyword">in</span> sites:</span><br><span class="line">            future = executor.submit(download_one, site)</span><br><span class="line">            to_do.append(future)</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">for</span> future <span class="keyword">in</span> concurrent.futures.as_completed(to_do):</span><br><span class="line">            future.result()</span><br></pre></td></tr></table></figure>

<blockquote>
<p>函数 ProcessPoolExecutor() 表示创建进程池，使用多个进程并行的执行程序。不过，这里我们通常省略参数 workers，因为系统会自动返回 CPU 的数量作为可以调用的进程数。</p>
</blockquote>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 伪代码</span></span><br><span class="line"><span class="keyword">if</span> io_bound:</span><br><span class="line">    <span class="keyword">if</span> io_slow:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Use Asyncio&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Use multi-threading&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> cpu_bound:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Use multi-processing&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="GIL"><a href="#GIL" class="headerlink" title="GIL"></a>GIL</h2><blockquote>
<p> Global Interpreter Lock，即全局解释器锁</p>
</blockquote>
<p><strong>python引进GIL的原因</strong></p>
<ul>
<li>一是设计者为了规避类似于内存管理这样的复杂的竞争风险问题（race condition）；</li>
<li>二是因为 CPython 大量使用 C 语言库，但大部分 C 语言库都不是原生线程安全的（线程安全会降低性能和增加复杂度）</li>
</ul>
<p><strong>工作机制</strong></p>
<p><img src="/images/python/GIL.png"></p>
<p><strong>check interval</strong></p>
<blockquote>
<p>CPython 中还有另一个机制，叫做 check_interval，意思是 CPython 解释器会去轮询检查线程 GIL 的锁住情况。每隔一段时间，Python 解释器就会强制当前线程去释放 GIL，这样别的线程才能有执行的机会。</p>
</blockquote>
<p><img src="/images/python/check-interval.png"></p>
<h2 id="assert"><a href="#assert" class="headerlink" title="assert"></a>assert</h2><blockquote>
<p>assert 语句，可以说是一个 debug 的好工具，主要用于测试一个条件是否满足。如果测试的条件满足，则什么也不做，相当于执行了 pass 语句；如果测试条件不满足，便会抛出异常 AssertionError，并返回具体的错误信息（optional）</p>
</blockquote>
<p>语法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">assert_stmt ::=  <span class="string">&quot;assert&quot;</span> expression [<span class="string">&quot;,&quot;</span> expression]</span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">例子<span class="number">1</span>：</span><br><span class="line"><span class="keyword">assert</span> <span class="number">1</span> == <span class="number">2</span></span><br><span class="line">相当于</span><br><span class="line"><span class="keyword">if</span> <span class="literal">__debug__</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> expression: <span class="keyword">raise</span> AssertionError</span><br><span class="line"></span><br><span class="line">例子<span class="number">2</span>：</span><br><span class="line"><span class="keyword">assert</span> <span class="number">1</span> == <span class="number">2</span>,  <span class="string">&#x27;assertion is wrong&#x27;</span></span><br><span class="line">相当于</span><br><span class="line"><span class="keyword">if</span> <span class="literal">__debug__</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> expression1: <span class="keyword">raise</span> AssertionError(expression2)</span><br><span class="line">    </span><br><span class="line">例子<span class="number">3</span>（促销价格大于<span class="number">0</span>元）：</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">apply_discount</span>(<span class="params">price, discount</span>):</span></span><br><span class="line">    updated_price = price * (<span class="number">1</span> - discount)</span><br><span class="line">    <span class="keyword">assert</span> <span class="number">0</span> &lt;= updated_price &lt;= price, <span class="string">&#x27;price should be greater or equal to 0 and less or equal to original price&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> updated_price</span><br></pre></td></tr></table></figure>

<ul>
<li>不要在使用 assert 时加入括号，否则无论表达式对与错，assert 检查永远不会 fail</li>
</ul>
<h2 id="with"><a href="#with" class="headerlink" title="with"></a>with</h2><blockquote>
<p>在 Python 中，解决资源泄露的方式是上下文管理器（context manager）。上下文管理器，能够帮助你自动分配并且释放资源，其中最典型的应用便是 with 语句</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">示例一：</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000000</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">等同于</span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f.write(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line">示例二：</span><br><span class="line">some_lock = threading.Lock()</span><br><span class="line"><span class="keyword">with</span> somelock:</span><br><span class="line">    ...</span><br><span class="line">等同于</span><br><span class="line">some_lock = threading.Lock()</span><br><span class="line">some_lock.acquire()</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    some_lock.release()</span><br></pre></td></tr></table></figure>

<ul>
<li><p>基于类的上下文管理器</p>
<blockquote>
<p>当我们用类来创建上下文管理器时，必须保证这个类包括方法<code>”__enter__()”</code>和方法<code>“__exit__()”</code>。其中，方法<code>“__enter__()”</code>返回需要被管理的资源，方法<code>“__exit__()”</code>里通常会存在一些释放、清理资源的操作，比如这个例子中的关闭文件等等。</p>
</blockquote>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileManager</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, mode</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;calling __init__ method&#x27;</span>)</span><br><span class="line">        self.name = name</span><br><span class="line">        self.mode = mode </span><br><span class="line">        self.file = <span class="literal">None</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;calling __enter__ method&#x27;</span>)</span><br><span class="line">        self.file = <span class="built_in">open</span>(self.name, self.mode)</span><br><span class="line">        <span class="keyword">return</span> self.file</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span>(<span class="params">self, exc_type, exc_val, exc_tb</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;calling __exit__ method&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> self.file:</span><br><span class="line">            self.file.close()</span><br><span class="line"><span class="comment"># 使用       </span></span><br><span class="line"><span class="keyword">with</span> FileManager(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;ready to write to file&#x27;</span>)</span><br><span class="line">    f.write(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>基于生成器的上下文管理器</li>
</ul>
<blockquote>
<p>使用装饰器 contextlib.contextmanager，来定义自己所需的基于生成器的上下文管理器，用以支持 with 语句</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> contextlib <span class="keyword">import</span> contextmanager</span><br><span class="line"> </span><br><span class="line"><span class="meta">@contextmanager</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">file_manager</span>(<span class="params">name, mode</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        f = <span class="built_in">open</span>(name, mode)</span><br><span class="line">        <span class="keyword">yield</span> f</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        f.close()</span><br><span class="line">        </span><br><span class="line"><span class="keyword">with</span> file_manager(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">&#x27;hello world&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="性能调试"><a href="#性能调试" class="headerlink" title="性能调试"></a>性能调试</h2><h3 id="cProfile"><a href="#cProfile" class="headerlink" title="cProfile"></a>cProfile</h3><hr>
<h2 id="用法-tips"><a href="#用法-tips" class="headerlink" title="用法 tips"></a>用法 tips</h2><ul>
<li><p>引用规范 <code>from your_file import function_name, class_name</code></p>
</li>
<li><p>定义函数时，所有非默认参数将在默认参数之前</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_function</span>(<span class="params">arg1, arg3, arg2=<span class="string">&quot;default&quot;</span></span>):</span></span><br><span class="line">    <span class="comment"># 函数实现</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li>
<li><p><code>pass</code> 是一个用于暂时占位或作为空占位符的关键字，它确保代码能够顺利通过语法检查而不做任何实际的操作。</p>
</li>
<li><p>每个Python文件都有一个特殊的变量<code>__name__</code>。当一个Python文件被直接运行时，<code>__name__</code>的值被设置为<code>&#39;__main__&#39;</code>。当一个Python文件被导入到另一个文件中时，<code>__name__</code>的值被设置为该文件的名字，所以用<code>if __name__ == &#39;__main__&#39;</code>来避开 import 时执行。</p>
</li>
<li><p>比较和拷贝</p>
<ul>
<li><p><code>&#39;==&#39;</code>操作符比较对象之间的值是否相等</p>
</li>
<li><p><code>&#39;is&#39;</code>操作符，相当于比较对象之间的 ID 是否相等</p>
<blockquote>
<p>对于整型数字来说，以上<code>a is b</code>为 True 的结论，只适用于 -5 到 256 范围内的数字</p>
</blockquote>
</li>
</ul>
</li>
<li><p>值传递、引用传递</p>
<ul>
<li>变量的赋值，只是表示让变量指向了某个对象，并不表示拷贝对象给变量；而一个对象，可以被多个变量所指向。</li>
<li>可变对象（列表，字典，集合等等）的改变，会影响所有指向该对象的变量。</li>
<li>对于不可变对象（字符串，整型，元祖等等），所有指向该对象的变量的值总是一样的，也不会改变。但是通过某些操作（+= 等等）更新不可变对象的值时，会返回一个新的对象。</li>
<li>变量可以被删除，但是对象无法被删除。</li>
</ul>
</li>
<li><p>容器是可迭代对象，可迭代对象调用 iter() 函数，可以得到一个迭代器。迭代器可以通过 next() 函数来得到下一个元素，从而支持遍历。</p>
</li>
<li><p>生成器是一种特殊的迭代器（注意这个逻辑关系反之不成立）。使用生成器，你可以写出来更加清晰的代码；合理使用生成器，可以降低内存占用、优化程序结构、提高程序速度。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>learn</tag>
      </tags>
  </entry>
  <entry>
    <title>python problems</title>
    <url>/2023/11/14/python%20problem/</url>
    <content><![CDATA[<ul>
<li> NotOpenSSLWarning: urllib3 v2.0 only supports OpenSSL 1.1.1+, currently the ‘ssl’ module is compiled with ‘LibreSSL 2.8.3’.</li>
</ul>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip uninstall urllib3</span><br><span class="line">pip install &#x27;urllib3&lt;2.0&#x27;</span><br></pre></td></tr></table></figure>

<p>  <a href="https://stackoverflow.com/questions/76187256/importerror-urllib3-v2-0-only-supports-openssl-1-1-1-currently-the-ssl-modu">stackoverflow</a></p>
<h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><ul>
<li>paddlepaddle依赖只能在 python 3.9版本之内可以安装</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>problems</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2023/11/03/logstash/</url>
    <content><![CDATA[<ul>
<li><p>Logstash Forwarder/Beats负责在源服务器上收集日志数据，然后将数据发送到集中式的Logstash或Kafka服务器。</p>
</li>
<li><p>Logstash是一个灵活的数据收集引擎，它可以从多个来源（包括日志文件、标准输入、Beats等）采集数据，进行转换、过滤和解析，最后将数据发送到各种目的地，比如Elasticsearch、Kafka等。在日志处理中，Logstash常被用作数据的转换和预处理工具。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>logstash</category>
      </categories>
      <tags>
        <tag>sinppet</tag>
      </tags>
  </entry>
  <entry>
    <title>gateway snippet</title>
    <url>/2023/11/05/gateway%20snippet/</url>
    <content><![CDATA[<p><img src="https://www.baeldung.com/wp-content/uploads/2020/05/spring-cloud-gateway-webfilters-2.jpg"></p>
<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><ul>
<li>LB， “Load Balancing”（负载均衡）的缩写。负载均衡是一种分布式系统中常见的策略，用于将请求均匀地分发到多个服务实例上，以避免某个实例负载过重，提高整体系统的性能、可靠性和可用性。</li>
<li>restful header中的所有key，对应的值其实都是集合，只是大多数情况下集合里面只有一个元素</li>
</ul>
<h3 id="spring-cloud-gateway"><a href="#spring-cloud-gateway" class="headerlink" title="spring cloud gateway"></a>spring cloud gateway</h3><ul>
<li><code>DefaultErrorWebExceptionHandler</code> 是 Spring Web 的默认实现类，实现了 <code>ErrorWebExceptionHandler</code> 接口。它提供了默认的错误处理行为，当没有自定义的 <code>ErrorWebExceptionHandler</code> 实现时，Spring Boot 将使用 <code>DefaultErrorWebExceptionHandler</code> 来处理错误。</li>
<li><strong>原生的spring cloud gateway进行请求转发，所有的微服务实例与gateway服务实例在nacos中必须是同一个namesapce和同一个group。</strong></li>
</ul>
<h1 id="静态路由"><a href="#静态路由" class="headerlink" title="静态路由"></a>静态路由</h1><ul>
<li>使用spring cloud gateway通过代码方式或配置文件方式实现</li>
</ul>
<h1 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h1><h2 id="spring-cloud-gateway-与-nacos结合实现"><a href="#spring-cloud-gateway-与-nacos结合实现" class="headerlink" title="spring cloud gateway 与 nacos结合实现"></a>spring cloud gateway 与 nacos结合实现</h2><blockquote>
<p>实现思路：使用nacos的配置中心，将路由配置放在nacos上，写个监听器监听nacos上配置的变化，将变化后的配置更新到GateWay应用的进程内。</p>
</blockquote>
<ul>
<li><p>场景一（基础）</p>
<p>可以先在nacos的配置管理中，添加微服务的配置信息（端口、路由等），然后启动微服务程序（不用配置相关端口配置）</p>
</li>
<li><p>场景二（predicate）</p>
<p>可以控制请求的cookie、header、host、method、path、query、RemoteAddr、Weight（按照权重将请求分发到不同节点服务）</p>
</li>
<li><p>场景三（filters）</p>
<p>可以控制请求的AddRequestHeader、AddResponseHeader、DedupeResponseHeader、DedupeResponseHeader、CircuitBreaker（断路器）、FallbackHeaders、PrefixPath、PreserveHostHeader（加上请求者的ip信息）、RequestRateLimiter（限流）、RedirectTo、RemoveRequestHeader、RemoveResponseHeader、RewritePath（将请求参数中的路径做变换）、RewriteLocationResponseHeader、RewriteResponseHeader、SecureHeaders、SetPath、SetRequestHeader、SetResponseHeader、SetStatus、StripPrefix、Retry、RequestSize、SetRequestHostHeader、ModifyRequestBody、ModifyResponseBody、TokenRelay（配合鉴权）</p>
</li>
<li><p>场景四（限流）</p>
<ul>
<li>请求同一目标地址</li>
</ul>
</li>
<li><p>场景五（修改请求和响应body）</p>
</li>
<li><p>场景六（地址分发）</p>
<ul>
<li>有多个后端应用服务</li>
</ul>
</li>
</ul>
<hr>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul>
<li><p>spring cloud gateway中如果配置文件使用lb访问服务，那需要引入lb相关依赖包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-loadbalancer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="跨域请求"><a href="#跨域请求" class="headerlink" title="跨域请求"></a>跨域请求</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">gateway:</span></span><br><span class="line">  <span class="comment"># 跨域配置</span></span><br><span class="line">  <span class="attr">globalcors:</span></span><br><span class="line">    <span class="attr">corsConfigurations:</span></span><br><span class="line">      <span class="string">&#x27;[/**]&#x27;</span><span class="string">:</span></span><br><span class="line">        <span class="attr">allowedOrigins:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">        <span class="attr">allowedMethods:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">GET</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">POST</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">PUT</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">DELETE</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">OPTIONS</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">HEAD</span></span><br></pre></td></tr></table></figure>



<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><p><a href="https://cloud.spring.io/spring-cloud-gateway/reference/html/#configuring-route-predicate-factories-and-gateway-filter-factories">官网</a></p>
</li>
<li><p><a href="https://blog.csdn.net/boling_cavalry/category_9278131.html">程序员欣宸</a></p>
</li>
<li><p>其它</p>
<ul>
<li><a href="https://blog.csdn.net/abu935009066/article/details/112245330">https://blog.csdn.net/abu935009066/article/details/112245330</a></li>
</ul>
</li>
<li><p><a href="http://47.109.59.205/2023/01/02/SpringCloud%E5%AE%9E%E7%94%A8%E7%AF%8702/#3-Gateway%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3">http://47.109.59.205/2023/01/02/SpringCloud%E5%AE%9E%E7%94%A8%E7%AF%8702/#3-Gateway%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>gateway</category>
      </categories>
      <tags>
        <tag>snippet</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2023/11/17/java%20command%20line/</url>
    <content><![CDATA[<hr>
<hr>
<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><h3 id="spring-config-additional-location"><a href="#spring-config-additional-location" class="headerlink" title="spring.config.additional-location"></a>spring.config.additional-location</h3><p>不会使项目默认的配置文件失效，使用该命令行参数添加的外部配置文件会与项目默认的配置文件共同生效，形成互补配置，且其优先级是最高的，比所有默认配置文件的优先级都高。</p>
<h3 id="spring-config-location"><a href="#spring-config-location" class="headerlink" title="spring.config.location"></a>spring.config.location</h3><p>使用该参数指定配置文件后，会使项目默认配置文件（application.properties 或 application.yml ）失效，Spring Boot 将只加载指定的外部配置文件。</p>
]]></content>
  </entry>
  <entry>
    <title>fastapi learn</title>
    <url>/2023/11/21/fastapi%20learn/</url>
    <content><![CDATA[<p><a href="https://project-awesome.org/mjhea0/awesome-fastapi">Awesome FastAPI</a></p>
<p><a href="https://github.com/zhanymkanov/fastapi-best-practices">FastAPI Best Practices</a></p>
<h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      <categories>
        <category>fastapi</category>
      </categories>
      <tags>
        <tag>learn</tag>
      </tags>
  </entry>
  <entry>
    <title>computer security model</title>
    <url>/2023/11/20/security%20model/</url>
    <content><![CDATA[<ul>
<li><a href="https://en.wikipedia.org/wiki/Access_control_list">Access control list</a> (ACL)</li>
<li><a href="https://en.wikipedia.org/wiki/Attribute-based_access_control">Attribute-based access control</a> (ABAC)</li>
<li><a href="https://en.wikipedia.org/wiki/Bell%E2%80%93LaPadula_model">Bell–LaPadula model</a></li>
<li><a href="https://en.wikipedia.org/wiki/Biba_model">Biba model</a></li>
<li><a href="https://en.wikipedia.org/wiki/Brewer_and_Nash_model">Brewer and Nash model</a></li>
<li><a href="https://en.wikipedia.org/wiki/Capability-based_security">Capability-based security</a></li>
<li><a href="https://en.wikipedia.org/wiki/Clark-Wilson_model">Clark-Wilson model</a></li>
<li><a href="https://en.wikipedia.org/wiki/Context-based_access_control">Context-based access control</a> (CBAC)</li>
<li><a href="https://en.wikipedia.org/wiki/Graham-Denning_model">Graham-Denning model</a></li>
<li><a href="https://en.wikipedia.org/wiki/HRU_(security)">Harrison-Ruzzo-Ullman</a> (HRU)</li>
<li><a href="https://en.wikipedia.org/wiki/High-water_mark_(computer_security)">High-water mark (computer security)</a></li>
<li><a href="https://en.wikipedia.org/wiki/Lattice-based_access_control">Lattice-based access control</a> (LBAC)</li>
<li><a href="https://en.wikipedia.org/wiki/Mandatory_access_control">Mandatory access control</a> (MAC)</li>
<li><a href="https://en.wikipedia.org/wiki/Multi-level_security">Multi-level security</a> (MLS)</li>
<li><a href="https://en.wikipedia.org/wiki/Non-interference_(security)">Non-interference (security)</a></li>
<li><a href="https://en.wikipedia.org/wiki/Object-capability_model">Object-capability model</a></li>
<li><a href="https://en.wikipedia.org/wiki/Protection_ring">Protection ring</a></li>
<li><a href="https://en.wikipedia.org/wiki/Role-based_access_control">Role-based access control</a> (RBAC)</li>
<li><a href="https://en.wikipedia.org/wiki/Take-grant_protection_model">Take-grant protection model</a></li>
<li><a href="https://en.wikipedia.org/wiki/Discretionary_access_control">Discretionary access control</a> (DAC)</li>
</ul>
]]></content>
      <categories>
        <category>security</category>
      </categories>
      <tags>
        <tag>model</tag>
      </tags>
  </entry>
  <entry>
    <title>RBAC model</title>
    <url>/2023/11/24/security%20model%20-%20RBAC/</url>
    <content><![CDATA[<hr>
<p>reference</p>
<ul>
<li><p><a href="https://zhuanlan.zhihu.com/p/63769951">知乎</a></p>
</li>
<li><p><a href="https://blog.csdn.net/ljw499356212/article/details/81055141">CSDN</a></p>
</li>
<li><p><a href="https://benheart.github.io/2016/11/19/rbac-design-doc.html">https://benheart.github.io/2016/11/19/rbac-design-doc.html</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>RBAC</category>
      </categories>
      <tags>
        <tag>security</tag>
      </tags>
  </entry>
  <entry>
    <title>git mergetool</title>
    <url>/2023/12/08/git%20mergetool/</url>
    <content><![CDATA[<h1 id="vimdiff"><a href="#vimdiff" class="headerlink" title="vimdiff"></a>vimdiff</h1><h2 id="进入冲突解决窗口"><a href="#进入冲突解决窗口" class="headerlink" title="进入冲突解决窗口"></a>进入冲突解决窗口</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git mergetool</span><br></pre></td></tr></table></figure>

<p>窗口显示四部分内容</p>
<ul>
<li><p>LOCAL – this is file from the current branch </p>
</li>
<li><p>BASE – common ancestor, how file looked before both changes </p>
</li>
<li><p>REMOTE – file you are merging into your branch </p>
</li>
<li><p>MERGED – merge result, this is what gets saved in the repo</p>
</li>
</ul>
<p>移动窗口方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Ctrl w + h   # move to the split on the left </span><br><span class="line">Ctrl w + j   # move to the split below</span><br><span class="line">Ctrl w + k   # move to the split on top</span><br><span class="line">Ctrl w + l   # move to the split on the right</span><br></pre></td></tr></table></figure>

<p>处理冲突</p>
<ul>
<li><p>可移动到merge窗口去手动改</p>
</li>
<li><p>使用命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">:diffg RE  # get from REMOTE</span><br><span class="line">:diffg BA  # get from BASE</span><br><span class="line">:diffg LO  # get from LOCAL</span><br></pre></td></tr></table></figure></li>
</ul>
<p>保存退出</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">:wqa</span><br></pre></td></tr></table></figure>

<h1 id="Meld"><a href="#Meld" class="headerlink" title="Meld"></a>Meld</h1><p>todo</p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>confict resolve</tag>
      </tags>
  </entry>
  <entry>
    <title>machine learning</title>
    <url>/2023/12/08/machine%20learning/</url>
    <content><![CDATA[<p><a href="https://developers.google.com/machine-learning/glossary/fundamentals?hl=zh-cn">机器学习术语表</a></p>
<h1 id="机器学习类型"><a href="#机器学习类型" class="headerlink" title="机器学习类型"></a>机器学习类型</h1><p><a href="https://developers.google.com/machine-learning/intro-to-ml/what-is-ml?hl=zh-cn">什么是机器学习？</a></p>
<p>根据机器学习系统学习进行预测或生成内容的方式，机器学习系统可分为以下一个或多个类别：</p>
<ul>
<li>监督式学习</li>
<li>非监督式学习</li>
<li>强化学习</li>
<li>生成式 AI</li>
</ul>
<ul>
<li>实现机器学习的一般步骤：</li>
</ul>
<ol>
<li>数据收集</li>
<li>数据准备</li>
<li>数据分析</li>
<li>训练算法</li>
<li>测试算法</li>
<li>应用算法</li>
</ol>
<h2 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h2><p>训练集、验证集、测试集</p>
]]></content>
      <categories>
        <category>ML</category>
      </categories>
      <tags>
        <tag>learn</tag>
      </tags>
  </entry>
  <entry>
    <title>python pyenv</title>
    <url>/2023/11/21/python%20env%20pyenv/</url>
    <content><![CDATA[<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看当前版本</span></span><br><span class="line">pyenv version</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看所有版本</span></span><br><span class="line">pyenv versions</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看所有可安装的版本</span></span><br><span class="line">pyenv install --list</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装指定版本</span></span><br><span class="line">pyenv install 3.6.5</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装新版本后<span class="built_in">rehash</span>一下</span></span><br><span class="line">pyenv rehash</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除指定版本</span></span><br><span class="line">pyenv uninstall 3.5.2</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定版本</span></span><br><span class="line">pyenv shell &lt;version&gt; -- select just for current shell session</span><br><span class="line">pyenv local &lt;version&gt; -- automatically select whenever you are in the current directory (or its subdirectories)</span><br><span class="line">pyenv global &lt;version&gt; -- select globally for your user account</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定多个全局版本, 3版本优先</span></span><br><span class="line">pyenv global 3.6.5 2.7.14</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 实际上当你切换版本后, 相应的pip和包仓库都是会自动切换过去的</span></span><br></pre></td></tr></table></figure>

<ul>
<li>当前项目使用的pyenv版本会在 <code>.python-version</code>文件中体现</li>
</ul>
<hr>
<p>reference</p>
<ul>
<li><a href="https://realpython.com/intro-to-pyenv/#specifying-your-python-version">specifying-your-python-version</a></li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>pyenv</tag>
      </tags>
  </entry>
  <entry>
    <title>python venv</title>
    <url>/2023/11/21/python%20env%20venv/</url>
    <content><![CDATA[<h2 id="虚拟环境"><a href="#虚拟环境" class="headerlink" title="虚拟环境"></a>虚拟环境</h2><p>在 Linux 中配置 Python 项目的运行虚拟环境通常使用 <code>venv</code>（虚拟环境）模块。以下是一般的步骤：</p>
<ol>
<li><p><strong>安装 venv 模块（如果尚未安装）：</strong></p>
<p>检查你的 Python 版本并确保安装了 <code>venv</code> 模块。</p>
</li>
<li><p><strong>创建虚拟环境：</strong></p>
<p>在项目目录中，运行以下命令创建一个名为 <code>myenv</code> 的虚拟环境：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 -m venv myenv</span><br></pre></td></tr></table></figure>

<p>这将在当前目录创建一个名为 <code>myenv</code> 的虚拟环境文件夹。</p>
</li>
<li><p><strong>激活虚拟环境：</strong></p>
<p>激活虚拟环境可通过以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source myenv/bin/activate</span><br></pre></td></tr></table></figure>

<p>这将激活名为 <code>myenv</code> 的虚拟环境。激活后，你的终端提示符可能会显示虚拟环境的名称。</p>
</li>
<li><p><strong>安装项目依赖：</strong></p>
<p>在激活的虚拟环境中，使用 <code>pip</code> 安装项目所需的依赖：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure>

<p>其中 <code>requirements.txt</code> 是包含项目依赖项的文件。</p>
</li>
<li><p><strong>退出虚拟环境：</strong></p>
<p>当你完成项目工作后，可以通过以下方式退出虚拟环境：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure>

<p>这将使虚拟环境退出，并恢复到系统默认环境。</p>
</li>
</ol>
<p>使用虚拟环境有助于隔离项目的依赖，避免与系统其他项目的依赖冲突，并提供更干净的开发环境。</p>
<h3 id="uvicorn"><a href="#uvicorn" class="headerlink" title="uvicorn"></a>uvicorn</h3><blockquote>
<p>正常情况下虚拟环境 /path/to/venv/bin/ 下面是有 uvicorn 的启动命令的，即 /xxx/venv/bin/uvicorn</p>
</blockquote>
<h4 id="如果当前虚拟环境不识别uvicorn，可通过"><a href="#如果当前虚拟环境不识别uvicorn，可通过" class="headerlink" title="如果当前虚拟环境不识别uvicorn，可通过"></a>如果当前虚拟环境不识别<code>uvicorn</code>，可通过</h4><ul>
<li>方式一</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python -m uvicorn xxx:app --reload</span><br></pre></td></tr></table></figure>

<ul>
<li>方式二</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install --force-reinstall uvicorn</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>venv</tag>
      </tags>
  </entry>
  <entry>
    <title>python poetry</title>
    <url>/2023/11/03/python%20env%20poetry/</url>
    <content><![CDATA[<h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2><ul>
<li><p><input disabled="" type="checkbox">  build backend : use hatch </p>
<ul>
<li><a href="https://stackoverflow.com/questions/75408641/whats-the-difference-between-the-tool-poetry-and-project-tables-in-pyprojec">https://stackoverflow.com/questions/75408641/whats-the-difference-between-the-tool-poetry-and-project-tables-in-pyprojec</a></li>
</ul>
</li>
<li><p><a href="https://peps.python.org/pep-0621/">PEP 621 </a></p>
</li>
<li><p><a href="https://packaging.python.org/en/latest/tutorials/packaging-projects/">Packaging Python Projects</a></p>
</li>
</ul>
<h2 id="POETRY"><a href="#POETRY" class="headerlink" title="POETRY"></a>POETRY</h2><blockquote>
<p>每个使用 Poetry 的项目都会有自己的虚拟环境，这样可以避免不同项目之间的依赖冲突。因此，每个项目的依赖项都会独立存放在各自的虚拟环境中。</p>
</blockquote>
<ul>
<li><p>查看安装依赖目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">poetry env info --path</span><br></pre></td></tr></table></figure></li>
<li><p>列出所有虚拟环境</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">poetry env list</span><br></pre></td></tr></table></figure></li>
<li><p>删除指定虚拟环境</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">poetry env remove &lt;虚拟环境名称&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>进入 Poetry 创建的虚拟环境</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">poetry shell</span><br></pre></td></tr></table></figure></li>
</ul>
<ul>
<li><p>锁定并安装项目依赖项的确切版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">poetry lock</span><br><span class="line">poetry install</span><br></pre></td></tr></table></figure></li>
<li><p>通过<code>requirement</code>添加依赖</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">poetry add $( cat requirements.txt )</span><br></pre></td></tr></table></figure></li>
<li><p>build编译</p>
<p>如果使用<code>build backend</code>非默认的<code>poetry core</code>，则直接使用其他编译工具命令执行编译</p>
</li>
</ul>
<h2 id="HATCH"><a href="#HATCH" class="headerlink" title="HATCH"></a>HATCH</h2><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><ul>
<li><p>新建项目</p>
<p><code>hatch new &quot;Hatch Demo&quot;</code></p>
</li>
<li><p>已有项目初始化</p>
<p><code>hatch new --init</code></p>
</li>
<li><p>虚拟环境</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python -m venv venv</span><br><span class="line">source venv/bin/activate</span><br></pre></td></tr></table></figure></li>
<li><p>创建hatch虚拟环境</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hatch env create</span><br><span class="line">c </span><br></pre></td></tr></table></figure></li>
<li><p>pycharm配置</p>
<p>虚拟环境需配置成 <code>hatch shell</code>提示的目录</p>
</li>
<li><p>更新依赖</p>
<ul>
<li>运行 <code>hatch shell</code>命令</li>
</ul>
</li>
<li><p>查看环境信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hatch env show --ascii</span><br></pre></td></tr></table></figure></li>
</ul>
<ul>
<li><p>格式化</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hatch run lint:fmt</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><ul>
<li><p>方式一：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python -m pip install --upgrade build</span><br><span class="line">python3 -m build</span><br><span class="line"><span class="meta">#</span><span class="bash"> 一旦完成应该在 dist 目录下产生两个文件：</span></span><br></pre></td></tr></table></figure>

<p>方式二：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hatch build</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="代码格式化"><a href="#代码格式化" class="headerlink" title="代码格式化"></a>代码格式化</h3><ul>
<li>配置</li>
</ul>
<figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="section">[tool.hatch.envs.lint.scripts]</span></span><br><span class="line"><span class="attr">typing</span> = <span class="string">&quot;mypy --install-types --non-interactive &#123;args:src/jarvex_auth tests&#125;&quot;</span></span><br><span class="line"><span class="attr">style</span> = [</span><br><span class="line">  <span class="string">&quot;ruff &#123;args:.&#125;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;black --check --diff &#123;args:.&#125;&quot;</span>,</span><br><span class="line">]</span><br><span class="line"><span class="attr">fmt</span> = [</span><br><span class="line">  <span class="string">&quot;black &#123;args:.&#125;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;ruff --fix &#123;args:.&#125;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;style&quot;</span>,</span><br><span class="line">]</span><br><span class="line"><span class="attr">all</span> = [</span><br><span class="line">  <span class="string">&quot;style&quot;</span>,</span><br><span class="line">  <span class="string">&quot;typing&quot;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<ul>
<li>执行命令<code>hatch run lint:fmt</code></li>
</ul>
<h2 id="Flit"><a href="#Flit" class="headerlink" title="Flit"></a>Flit</h2><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">flit install</span><br></pre></td></tr></table></figure>









<hr>
<p><strong>Reference</strong></p>
<ul>
<li><p><a href="https://drivendata.co/blog/python-packaging-2023">THE BASICS OF PYTHON PACKAGING IN EARLY</a></p>
</li>
<li><p><a href="https://zhuanlan.zhihu.com/p/666166082">https://zhuanlan.zhihu.com/p/666166082</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>lib</tag>
      </tags>
  </entry>
  <entry>
    <title>python sqlmodel&amp;SQLAlchemy</title>
    <url>/2023/11/14/python%20sqlmodel/</url>
    <content><![CDATA[<h2 id="单个实体转换为字典"><a href="#单个实体转换为字典" class="headerlink" title="单个实体转换为字典"></a>单个实体转换为字典</h2><ul>
<li>方式一</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将实例对象转换为字典，排除未设置值的字段</span></span><br><span class="line">entity_dict = entity.<span class="built_in">dict</span>(exclude_unset=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用 Pydantic 模型对象的一个方法，用于将模型对象转换为字典形式。<code>exclude_unset=True</code> 参数是用来控制是否排除未设置的属性字段。当设置为 <code>True</code> 时，将排除那些未设置值的字段，即只包含已经设置值的字段。</p>
</blockquote>
<ul>
<li><p>方式二：</p>
<p>遍历字典（对没有设置的字段进行默认值设置，设置排查某字段放入字典）</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> user_group_data.<span class="built_in">dict</span>(exclude_unset=<span class="literal">True</span>, exclude=&#123;<span class="string">&quot;team_roles&quot;</span>&#125;).items():</span><br><span class="line">	<span class="keyword">if</span> value <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">	<span class="built_in">setattr</span>(user_group, key, value)</span><br></pre></td></tr></table></figure>

<ul>
<li>方式三</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">resourceCreate: ResourceCreate</span><br><span class="line">...</span><br><span class="line">resource = Resource(**resourceCreate.<span class="built_in">dict</span>())</span><br></pre></td></tr></table></figure>



<h2 id="单个实体与实体转换"><a href="#单个实体与实体转换" class="headerlink" title="单个实体与实体转换"></a>单个实体与实体转换</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">role_update: RoleUpdate</span><br><span class="line">...</span><br><span class="line">role = Role.from_orm(role_update)</span><br></pre></td></tr></table></figure>

<h2 id="列表实体转换为字典列表"><a href="#列表实体转换为字典列表" class="headerlink" title="列表实体转换为字典列表"></a>列表实体转换为字典列表</h2><ul>
<li>方式一  <strong>session.exec</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rel_usergroup_user_list = session.<span class="built_in">exec</span>(</span><br><span class="line">            select(RelUserGroupUser.usergroup_id, RelUserGroupUser.user_id, UserGroup.name, UserGroup.label, UserGroup.remark)</span><br><span class="line">            .where(RelUserGroupUser.user_id == user_id)</span><br><span class="line">            .join(UserGroup, UserGroup.<span class="built_in">id</span> == RelUserGroupUser.usergroup_id)</span><br><span class="line">        ).<span class="built_in">all</span>()</span><br><span class="line">        converted_list = []</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> rel_usergroup_user_list:</span><br><span class="line">            converted_obj = RelUserGroupUserRead(</span><br><span class="line">                user_id=row.user_id,</span><br><span class="line">                usergroup_id=row.usergroup_id,</span><br><span class="line">                usergroup_name=row.name,</span><br><span class="line">                usergroup_label=row.label</span><br><span class="line">            )</span><br><span class="line">            converted_list.append(converted_obj)</span><br><span class="line">        <span class="keyword">return</span> converted_list</span><br></pre></td></tr></table></figure>

<ul>
<li>方式二 <strong>session.query</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">db_rel_usergroup_roles = (session.query(RelUserGroupUser.user_id, Role.<span class="built_in">id</span>, Role.name, Role.nick_name, Role.label)</span><br><span class="line">                             .join(RelUsergroupRole, RelUserGroupUser.usergroup_id == RelUsergroupRole.usergroup_id)</span><br><span class="line">                             .join(Role, RelUsergroupRole.role_id == Role.<span class="built_in">id</span>)</span><br><span class="line">                             .<span class="built_in">filter</span>(RelUserGroupUser.user_id == user_id)</span><br><span class="line">                             .<span class="built_in">all</span>())</span><br><span class="line">        rel_usergroup_roles_info = []</span><br><span class="line">        <span class="keyword">for</span> rel_usergroup_role <span class="keyword">in</span> db_rel_usergroup_roles:</span><br><span class="line">            rel_usergroup_roles_info.append(Role(</span><br><span class="line">                <span class="built_in">id</span>=rel_usergroup_role[<span class="number">1</span>],</span><br><span class="line">                name=rel_usergroup_role[<span class="number">2</span>],</span><br><span class="line">                nick_name=rel_usergroup_role[<span class="number">3</span>],</span><br><span class="line">                label=rel_usergroup_role[<span class="number">4</span>]</span><br><span class="line">            ))</span><br><span class="line">        <span class="keyword">return</span> rel_usergroup_roles_info</span><br></pre></td></tr></table></figure>



<h2 id="查询过滤"><a href="#查询过滤" class="headerlink" title="查询过滤"></a>查询过滤</h2><ul>
<li><p>筛选条件为或条件</p>
</li>
<li><pre><code class="python">resource_list = session.query(Resource).filter(or_(Resource.type == &quot;menu&quot;, Resource.type == &quot;element&quot;)).all()
</code></pre>
</li>
</ul>
<h2 id="update操作"><a href="#update操作" class="headerlink" title="update操作"></a>update操作</h2><p>如果提前有 <code>session.get(entity, id)</code>，那后续在修改相关表属性<code>enitty.colx = xxx</code> 之后，需要紧接<code>session.add(entity)</code></p>
<h3 id="session的获取"><a href="#session的获取" class="headerlink" title="session的获取"></a>session的获取</h3><p>在使用 SQLModel 进行数据库操作时，可以使用上下文管理器 <code>with Session(engine) as session</code> 来创建并管理数据库会话。这样可以确保会话在使用完毕后会被正确关闭，释放数据库连接资源。</p>
<p>在例如 <code>async def delete_user(*, user_id: int, session: Session = Depends(get_session)):</code>中，<code>session</code> 参数是通过 <code>Depends(get_session)</code> 进行依赖注入的，FastAPI 框架会负责在请求处理函数执行完毕后自动关闭会话。所以在请求逻辑中，你不需要手动关闭会话连接。</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>problems</tag>
      </tags>
  </entry>
  <entry>
    <title>python security - authlib</title>
    <url>/2023/10/31/python%20auth%20-%20authlib/</url>
    <content><![CDATA[<blockquote>
<p>Security is always excessive until it’s not enough.</p>
</blockquote>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>auth</tag>
      </tags>
  </entry>
  <entry>
    <title>python auth - fastapi jwt auth</title>
    <url>/2023/12/15/python%20auth%20-%20fastapi%20jwt%20auth/</url>
    <content><![CDATA[<p>在 FastAPI JWT Auth 中，Refresh Token（刷新令牌）和 Access Token（访问令牌）是两种不同的令牌，用于实现认证和授权机制。</p>
<ol>
<li>Access Token（访问令牌）：Access Token 是一个短期的令牌，用于验证用户的身份并授权用户访问受保护的资源。Access Token 是通过用户提供的凭证（如用户名和密码）进行身份验证后生成的，通常具有较短的有效期（例如几分钟或几小时）。客户端在每次请求受保护的资源时，需要在请求的头部或请求参数中携带 Access Token，以证明其有权访问该资源。</li>
<li>Refresh Token（刷新令牌）：Refresh Token 是一个长期有效的令牌，用于在 Access Token 过期后重新获取新的 Access Token。当 Access Token 过期时，客户端可以使用 Refresh Token 向服务器发送请求来获取新的 Access Token，而无需重新提供用户名和密码等凭证。通常情况下，Refresh Token 的有效期要比 Access Token 更长。</li>
</ol>
<p>使用 Refresh Token 的主要目的是增强安全性和减少频繁的身份验证操作。通过将 Access Token 的有效期设置较短，可以降低令牌泄露的风险。当 Access Token 过期时，使用 Refresh Token 获取新的 Access Token，这样可以减少频繁地要求用户重新提供凭证的情况。</p>
<p>一般的流程是，客户端在进行身份验证后会收到一个 Access Token 和一个 Refresh Token。客户端使用 Access Token 来访问受保护的资源，当 Access Token 过期时，客户端使用 Refresh Token 向服务器请求新的 Access Token。</p>
<p>FastAPI JWT Auth 提供了相应的功能和装饰器来处理 Access Token 和 Refresh Token 的生成、验证和刷新等操作，以方便实现 JWT 认证和授权。</p>
<p>refresh tokens <strong>cannot access</strong> an endpoint that is protected with <strong>jwt_required()</strong>, <strong>jwt_optional()</strong>, and <strong>fresh_jwt_required()</strong> </p>
<p>access tokens <strong>cannot access</strong> an endpoint that is protected with <strong>jwt_refresh_token_required()</strong>.</p>
<h2 id="Refresh-Tokens"><a href="#Refresh-Tokens" class="headerlink" title="Refresh Tokens"></a>Refresh Tokens</h2><p>These are long-lived tokens which can be used to create a new access tokens once an old access token has expired. </p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>auth</tag>
      </tags>
  </entry>
  <entry>
    <title>python conda</title>
    <url>/2023/12/18/python%20env%20conda/</url>
    <content><![CDATA[<blockquote>
<p>conda相当于虚拟机，在里面安装python和依赖</p>
</blockquote>
<ul>
<li><p>查看环境</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda env list</span><br></pre></td></tr></table></figure></li>
<li><p>新建环境</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda create --name your_env_name</span><br></pre></td></tr></table></figure>

<p>指定python版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda create --name xxx python=3.10</span><br></pre></td></tr></table></figure></li>
<li><p>激活环境</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda activate xxx</span><br></pre></td></tr></table></figure></li>
<li><p>删除环境</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda remove --name xxx --all</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>conda</tag>
      </tags>
  </entry>
  <entry>
    <title>python ASGI</title>
    <url>/2023/12/19/python%20ASGI/</url>
    <content><![CDATA[<blockquote>
<p>the Asynchronous Server Gateway Interface.</p>
</blockquote>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>ASGI</tag>
      </tags>
  </entry>
  <entry>
    <title>java jenv</title>
    <url>/2023/12/29/java%20jenv/</url>
    <content><![CDATA[<h2 id="Jenv"><a href="#Jenv" class="headerlink" title="Jenv"></a>Jenv</h2><h3 id="列出已安装的Java版本："><a href="#列出已安装的Java版本：" class="headerlink" title="列出已安装的Java版本："></a><strong>列出已安装的Java版本：</strong></h3><p>运行以下命令列出已安装的Java版本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jenv versions</span><br></pre></td></tr></table></figure>

<p>这会显示所有已安装的Java版本。</p>
<h3 id="5-设置全局Java版本："><a href="#5-设置全局Java版本：" class="headerlink" title="5. 设置全局Java版本："></a>5. <strong>设置全局Java版本：</strong></h3><p>你可以选择设置一个全局的Java版本，该版本会被默认使用。运行以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jenv global &lt;jdk_version&gt;</span><br></pre></td></tr></table></figure>

<p>将 <code>&lt;jdk_version&gt;</code> 替换为你想要设置为默认的Java版本。</p>
<h3 id="6-设置项目特定的Java版本："><a href="#6-设置项目特定的Java版本：" class="headerlink" title="6. 设置项目特定的Java版本："></a>6. <strong>设置项目特定的Java版本：</strong></h3><p>如果你想在特定的项目中使用不同的Java版本，可以进入到项目的目录，然后运行以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jenv local &lt;jdk_version&gt;</span><br></pre></td></tr></table></figure>

<p>这会在项目目录下创建一个 <code>.java-version</code> 文件，指定项目特定的Java版本。</p>
<h3 id="7-验证Java版本："><a href="#7-验证Java版本：" class="headerlink" title="7. 验证Java版本："></a>7. <strong>验证Java版本：</strong></h3><p>在终端中运行以下命令验证当前系统使用的Java版本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure>

<p>确保输出显示的是你所期望的Java版本信息。</p>
<p>通过以上步骤，你可以使用 <code>jenv</code> 管理多个Java版本，并且在不同的项目中切换使用不同的Java版本。</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>jenv</tag>
      </tags>
  </entry>
  <entry>
    <title>python snippet</title>
    <url>/2023/11/14/python%20snippet/</url>
    <content><![CDATA[<h2 id="统计运行时间"><a href="#统计运行时间" class="headerlink" title="统计运行时间"></a>统计运行时间</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 毫秒值</span></span><br><span class="line">start_time = time.perf_counter()</span><br><span class="line">xxx</span><br><span class="line">cost_time = <span class="built_in">int</span>((time.perf_counter() - start_time)* <span class="number">1000</span>)</span><br></pre></td></tr></table></figure>

<h2 id="call-函数"><a href="#call-函数" class="headerlink" title="__call__函数"></a><code>__call__函数</code></h2><p><code>__call__</code> 方法是 Python 中的一个特殊方法（也称为魔术方法），用于将一个对象作为函数调用。当一个对象被作为函数调用时，Python 解释器会自动调用该对象的 <code>__call__</code> 方法。</p>
<p>在类中定义 <code>__call__</code> 方法可以使对象具有可调用的行为，就像调用函数一样。这样的对象被称为可调用对象。通过实现 <code>__call__</code> 方法，我们可以在对象被调用时执行特定的逻辑。</p>
<p>以下是一个示例，展示了如何定义和使用 <code>__call__</code> 方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CallableClass</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Object is being called&quot;</span>)</span><br><span class="line"></span><br><span class="line">obj = CallableClass()</span><br><span class="line">obj()  <span class="comment"># 等同于调用 obj.__call__()</span></span><br></pre></td></tr></table></figure>

<p>在上面的示例中，我们定义了一个名为 <code>CallableClass</code> 的类，并在其中实现了 <code>__call__</code> 方法。当创建 <code>CallableClass</code> 的实例 <code>obj</code> 并将其作为函数调用时，<code>__call__</code> 方法会被自动调用，并打印出 “Object is being called”。</p>
<p>需要注意的是，<code>__call__</code> 方法可以带有参数，就像普通的函数一样。我们可以在 <code>__call__</code> 方法中定义任意的逻辑，可以访问实例的属性、调用其他方法等。</p>
<p>使用 <code>__call__</code> 方法可以使对象具有类似函数的行为，这在某些情况下非常有用，例如实现可调用的类或实现函数式编程的概念。</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="**使用"></a><code>**</code>使用</h2><ul>
<li><p><code>**</code> 运算符用于解包字典或关键字参数。当应用于字典时，<code>**</code> 运算符可以将字典中的键值对解包为一系列关键字参数传递给函数或方法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_person_info</span>(<span class="params">name, age, city</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Name: <span class="subst">&#123;name&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Age: <span class="subst">&#123;age&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;City: <span class="subst">&#123;city&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">person = &#123;</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Alice&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;age&#x27;</span>: <span class="number">25</span>,</span><br><span class="line">    <span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;New York&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">print_person_info(**person)</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="布尔真假判断"><a href="#布尔真假判断" class="headerlink" title="布尔真假判断"></a>布尔真假判断</h2><p>虽然所有用户类实例的布尔值都是真。但是 Python 提供了改变这个行为的办法：<strong>自定义类的 <code>__bool__</code> 魔法方法</strong> <em>（在 Python 2.X 版本中为 <code>__nonzero__</code>）</em>。当类定义了 <code>__bool__</code> 方法后，它的返回值将会被当作类实例的布尔值。</p>
<p>另外，<code>__bool__</code> 不是影响实例布尔真假的唯一方法。如果类没有定义 <code>__bool__</code> 方法，Python 还会尝试调用 <code>__len__</code> 方法<em>（也就是对任何序列对象调用 <code>len</code> 函数）</em>，通过结果是否为 <code>0</code> 判断实例真假。</p>
<h3 id="在条件判断中使用-all-any"><a href="#在条件判断中使用-all-any" class="headerlink" title="在条件判断中使用 all() / any()"></a>在条件判断中使用 all() / any()</h3><p><code>all()</code> 和 <code>any()</code> 两个函数非常适合在条件判断中使用。这两个函数接受一个可迭代对象，返回一个布尔值，其中：</p>
<ul>
<li><code>all(seq)</code>：仅当 <code>seq</code> 中所有对象都为布尔真时返回 <code>True</code>，否则返回 <code>False</code></li>
<li><code>any(seq)</code>：只要 <code>seq</code> 中任何一个对象为布尔真就返回 <code>True</code>，否则返回 <code>False</code></li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>snippet</tag>
      </tags>
  </entry>
  <entry>
    <title>deep learning</title>
    <url>/2024/01/09/deep%20learning/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>deep learning</category>
      </categories>
      <tags>
        <tag>learn</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2024/01/10/llm%20snippet/</url>
    <content><![CDATA[<h2 id="Fine-tuning-vs-Embedding"><a href="#Fine-tuning-vs-Embedding" class="headerlink" title="Fine-tuning vs Embedding"></a>Fine-tuning vs Embedding</h2><ul>
<li>If you are trying to “teach” the model new information, embeddings is the way to go. If you want to change the structure or way it response, then use fine-tuning.</li>
</ul>
<hr>
<ul>
<li><strong>Fine-tuning:</strong> Teach the model <em>how</em> to answer a question (e.g. structure/format, personality, etc)</li>
<li><strong>Embedding:</strong> Provide the model with new/specific information with which to answer questions.</li>
</ul>
<hr>
]]></content>
      <categories>
        <category>llm</category>
      </categories>
      <tags>
        <tag>sinppet</tag>
      </tags>
  </entry>
  <entry>
    <title>SSO (single sign-on) keycloak</title>
    <url>/2023/12/16/SSO%20keycloak/</url>
    <content><![CDATA[<blockquote>
<p> SSO (single sign-on)</p>
</blockquote>
<blockquote>
<p><a href="https://ninjaauth.com/sso-single-sign-on">https://ninjaauth.com/sso-single-sign-on</a></p>
</blockquote>
<h2 id="keycloak"><a href="#keycloak" class="headerlink" title="keycloak"></a>keycloak</h2><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><ul>
<li>需要jdk9以上环境</li>
</ul>
<h3 id="config-server"><a href="#config-server" class="headerlink" title="config server"></a>config server</h3><ul>
<li><p>编辑 <code>/conf/keycloak.conf </code>，配置mysql连接信息 (mysql创建keycloak库)</p>
</li>
<li><p>配置 <code>admin cli </code>环境变量 （方便直接命令操作，等同于界面操作）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> keycloak</span></span><br><span class="line">export KCADM=&quot;/Users/dongwei/Applications/keycloak-23.0.3/bin/kcadm.sh&quot;</span><br><span class="line">export HOST_FOR_KCADM=localhost</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="bootstrap"><a href="#bootstrap" class="headerlink" title="bootstrap"></a>bootstrap</h3><ul>
<li><p>首次启动</p>
<p><code>KEYCLOAK_ADMIN=admin KEYCLOAK_ADMIN_PASSWORD=xxxxxx ./bin/kc.sh start-dev</code></p>
</li>
<li><p>后续启动</p>
<p><code>./bin/kc.sh start-dev</code></p>
</li>
<li><p>生效 <code>KCADM</code></p>
<p><code>$KCADM config credentials --server http://localhost:8080 --realm master --user admin</code></p>
<p>提示输入密码即可 (1sou2sou)</p>
</li>
</ul>
<p>​        验证 <code>$KCADM get serverinfo</code></p>
<h3 id="config-realm"><a href="#config-realm" class="headerlink" title="config realm"></a>config realm</h3><ul>
<li><p>创建新的realm</p>
<p><code>$KCADM create realms -s realm=&quot;jarvex&quot; -s enabled=true</code></p>
</li>
</ul>
<h3 id="config-clients"><a href="#config-clients" class="headerlink" title="config clients"></a>config clients</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">KCADM create clients -r jarvex -s clientId=<span class="string">&quot;jarvex-client-test-1&quot;</span> -s enabled=<span class="literal">true</span> -s name=<span class="string">&quot;test Client 1&quot;</span> -s protocol=openid-connect -s publicClient=<span class="literal">true</span> -s standardFlowEnabled=<span class="literal">true</span> -s <span class="string">&#x27;redirectUris=[&quot;http://127.0.0.1:8001/app/*&quot;]&#x27;</span> -s baseUrl=<span class="string">&quot;http://127.0.0.1:8001/app/&quot;</span> -s <span class="string">&#x27;webOrigins=[&quot;*&quot;]&#x27;</span></span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>sso</category>
      </categories>
      <tags>
        <tag>keycloak</tag>
      </tags>
  </entry>
  <entry>
    <title>finite state machine</title>
    <url>/2024/01/19/finite%20state%20machinemd/</url>
    <content><![CDATA[<blockquote>
<p>The FSM can change from one state to another in response to some inputs; the change from one state to another is called a <em>transition</em>.</p>
</blockquote>
<p><img src="./images/fsm/Automata_theory.png"></p>
<hr>
<p><strong>reference</strong></p>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Finite-state_machine">https://en.wikipedia.org/wiki/Finite-state_machine</a></li>
</ul>
]]></content>
      <categories>
        <category>fsm</category>
      </categories>
      <tags>
        <tag>fsm</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2024/01/19/openai%20learn/</url>
    <content><![CDATA[<hr>
<hr>
<h1 id="UI"><a href="#UI" class="headerlink" title="UI"></a>UI</h1><h1 id="request"><a href="#request" class="headerlink" title="request"></a>request</h1><h3 id="conversion"><a href="#conversion" class="headerlink" title="conversion"></a>conversion</h3><ul>
<li><p>request</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl POST https://chat.openai.com/backend-api/conversation</span><br></pre></td></tr></table></figure></li>
<li><p>payload</p>
</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;action&quot;</span>: <span class="string">&quot;next&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;messages&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;aaa25811-d62c-4f23-963a-77c6eb90b899&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;author&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;content&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;content_type&quot;</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;parts&quot;</span>: [</span><br><span class="line">          <span class="string">&quot;你是如何带上上下文进行问答的，用python代码说下示例&quot;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;metadata&quot;</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;conversation_id&quot;</span>: <span class="string">&quot;0e02cc29-8cc2-4305-91a1-a3db1427f400&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;parent_message_id&quot;</span>: <span class="string">&quot;36d4ff94-fb3f-4f9b-beeb-d9c93f5752fe&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;model&quot;</span>: <span class="string">&quot;text-davinci-002-render-sha&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;timezone_offset_min&quot;</span>: <span class="number">-480</span>,</span><br><span class="line">  <span class="attr">&quot;suggestions&quot;</span>: [],</span><br><span class="line">  <span class="attr">&quot;history_and_training_disabled&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;arkose_token&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">&quot;conversation_mode&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;kind&quot;</span>: <span class="string">&quot;primary_assistant&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;force_paragen&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;force_rate_limit&quot;</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="ces-v1-t"><a href="#ces-v1-t" class="headerlink" title="ces/v1/t"></a>ces/v1/t</h3><ul>
<li><p>request</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://chat.openai.com/ces/v1/t</span><br></pre></td></tr></table></figure></li>
<li><p>payload</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;timestamp&quot;</span>: <span class="string">&quot;2024-01-19T08:35:53.805Z&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;integrations&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;Segment.io&quot;</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;userId&quot;</span>: <span class="string">&quot;user-EyJTf0sEV6sYCFhgOwqCHGD2&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;anonymousId&quot;</span>: <span class="string">&quot;dafc8561-54d1-4cb8-9cdf-91e5e4f7162e&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;event&quot;</span>: <span class="string">&quot;View Template Prompt Ignore Suggestions&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;track&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;origin&quot;</span>: <span class="string">&quot;chat&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;openai_app&quot;</span>: <span class="string">&quot;API&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;context&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;page&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;path&quot;</span>: <span class="string">&quot;/c/0e02cc29-8cc2-4305-91a1-a3db1427f400&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;referrer&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;search&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;feel&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;https://chat.openai.com/c/0e02cc29-8cc2-4305-91a1-a3db1427f400&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;userAgent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;locale&quot;</span>: <span class="string">&quot;zh-CN&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;library&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;analytics.js&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;npm:next-1.56.0&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;userAgentData&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;brands&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;brand&quot;</span>: <span class="string">&quot;Not_A Brand&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;8&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;brand&quot;</span>: <span class="string">&quot;Chromium&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;120&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;brand&quot;</span>: <span class="string">&quot;Google Chrome&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;120&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;mobile&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">&quot;platform&quot;</span>: <span class="string">&quot;macOS&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;messageId&quot;</span>: <span class="string">&quot;ajs-next-c0f7b6265ed3eab440b0d44f21f53ffa&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;sentAt&quot;</span>: <span class="string">&quot;2024-01-19T08:35:54.068Z&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_metadata&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;bundled&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;Segment.io&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;unbundled&quot;</span>: [],</span><br><span class="line">    <span class="attr">&quot;bundledIds&quot;</span>: []</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="rgstr"><a href="#rgstr" class="headerlink" title="rgstr"></a>rgstr</h3><ul>
<li><p>request</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://events.statsigapi.net/v1/rgstr</span><br></pre></td></tr></table></figure></li>
<li><p>payload</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;events&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;eventName&quot;</span>: <span class="string">&quot;chatgpt_prompt_ignore_suggestions&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;user&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;userID&quot;</span>: <span class="string">&quot;user-EyJTf0sEV6sYCFhgOwqCHGD2&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;custom&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;is_paid&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;workspace_id&quot;</span>: <span class="string">&quot;b27c1f77-bb94-4e8f-a6d3-4b30a0eec927&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;locale&quot;</span>: <span class="string">&quot;zh-CN&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;statsigEnvironment&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;tier&quot;</span>: <span class="string">&quot;production&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;value&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">&quot;metadata&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">&quot;time&quot;</span>: <span class="number">1705653353804</span>,</span><br><span class="line">      <span class="attr">&quot;statsigMetadata&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;currentPage&quot;</span>: <span class="string">&quot;https://chat.openai.com/c/0e02cc29-8cc2-4305-91a1-a3db1427f400&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;statsigMetadata&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;sdkType&quot;</span>: <span class="string">&quot;js-client&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;sdkVersion&quot;</span>: <span class="string">&quot;4.39.3&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;stableID&quot;</span>: <span class="string">&quot;f0eaa0cd-f15f-4d71-ab51-8a91e92aea53&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="backend-lat-r"><a href="#backend-lat-r" class="headerlink" title="backend/lat/r"></a>backend/lat/r</h3><ul>
<li><p>request</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://chat.openai.com/backend-api/lat/r</span><br></pre></td></tr></table></figure></li>
<li><p>payload</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;server_request_id&quot;</span>: <span class="string">&quot;847dbf366a92408c-SIN&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;model&quot;</span>: <span class="string">&quot;text-davinci-002-render-sha&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;preflight_time_ms&quot;</span>: <span class="number">0.09999990463256836</span>,</span><br><span class="line">  <span class="attr">&quot;count_tokens&quot;</span>: <span class="number">472</span>,</span><br><span class="line">  <span class="attr">&quot;ts_first_token_ms&quot;</span>: <span class="number">1548.7000000476837</span>,</span><br><span class="line">  <span class="attr">&quot;ts_max_token_time_ms&quot;</span>: <span class="number">764</span>,</span><br><span class="line">  <span class="attr">&quot;ts_mean_token_without_first_ms&quot;</span>: <span class="number">30.007855625922005</span>,</span><br><span class="line">  <span class="attr">&quot;ts_median_token_without_first_ms&quot;</span>: <span class="number">21.799999952316284</span>,</span><br><span class="line">  <span class="attr">&quot;ts_min_token_time_ms&quot;</span>: <span class="number">0.09999990463256836</span>,</span><br><span class="line">  <span class="attr">&quot;ts_p95_token_without_first_ms&quot;</span>: <span class="number">88.99999988079071</span>,</span><br><span class="line">  <span class="attr">&quot;ts_p99_token_without_first_ms&quot;</span>: <span class="number">139.65999991893773</span>,</span><br><span class="line">  <span class="attr">&quot;ts_std_dev_token_ms&quot;</span>: <span class="number">44.98320283392762</span>,</span><br><span class="line">  <span class="attr">&quot;ts_total_request_ms&quot;</span>: <span class="number">15695.399999856949</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><h2 id="client-chat-completions-create"><a href="#client-chat-completions-create" class="headerlink" title="client.chat.completions.create"></a>client.chat.completions.create</h2><ul>
<li><p>request</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">response = client.chat.completions.create(</span><br><span class="line">           model=<span class="string">&quot;gpt-3.5-turbo-1106&quot;</span>,</span><br><span class="line">           messages=[</span><br><span class="line">               &#123;</span><br><span class="line">                   <span class="attr">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>,</span><br><span class="line">                   <span class="attr">&quot;content&quot;</span>: prompt_str,</span><br><span class="line">               &#125;,</span><br><span class="line">               &#123;</span><br><span class="line">                   <span class="attr">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>,</span><br><span class="line">                   <span class="attr">&quot;content&quot;</span>: user_input.question,</span><br><span class="line">               &#125;,</span><br><span class="line">           ],</span><br><span class="line">       )</span><br></pre></td></tr></table></figure></li>
<li><p>response</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;chatcmpl-8ify2KU1ANzQPQyD8WVMp6rZWgYtj&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;choices&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;finish_reason&quot;</span>: <span class="string">&quot;stop&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;index&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">&quot;logprobs&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;message&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;content&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;role&quot;</span>: <span class="string">&quot;assistant&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;function_call&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">&quot;tool_calls&quot;</span>: <span class="literal">null</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;created&quot;</span>: <span class="number">1705658446</span>,</span><br><span class="line">    <span class="attr">&quot;model&quot;</span>: <span class="string">&quot;gpt-3.5-turbo-1106&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;object&quot;</span>: <span class="string">&quot;chat.completion&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;system_fingerprint&quot;</span>: <span class="string">&quot;fp_c596c86df9&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;usage&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;completion_tokens&quot;</span>: <span class="number">51</span>,</span><br><span class="line">        <span class="attr">&quot;prompt_tokens&quot;</span>: <span class="number">1068</span>,</span><br><span class="line">        <span class="attr">&quot;total_tokens&quot;</span>: <span class="number">1119</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>raycast awesome</title>
    <url>/2024/01/22/tool%20raycast/</url>
    <content><![CDATA[<h2 id="extension"><a href="#extension" class="headerlink" title="extension"></a>extension</h2><h2 id="cake"><a href="#cake" class="headerlink" title="cake"></a>cake</h2><ul>
<li><p>庆祝彩纸</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">confetti</span><br></pre></td></tr></table></figure></li>
<li><p>弹跳窗口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Toggle Bounce Animation</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>tool</category>
      </categories>
      <tags>
        <tag>raycast</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2024/01/24/llm%20agent/</url>
    <content><![CDATA[<blockquote>
<p>Agent = Large Language Model (LLM) + Observation + Thought + Action + Memory</p>
<p>MultiAgent = Agents + Environment + Standard Operating Procedure (SOP) + Communication + Economy</p>
<p>ReAct<a href="https://learnprompting.org/zh-Hans/docs/advanced_applications/react#fn-1">1</a>(reason, act) 是一种使用自然语言推理解决复杂任务的语言模型范例，ReAct旨在用于允许LLM执行某些操作的任务</p>
</blockquote>
<hr>
<p><strong>reference</strong></p>
<ul>
<li><a href="https://www.ionio.ai/blog/what-is-llm-agent-ultimate-guide-to-llm-agent-with-technical-breakdown">https://www.ionio.ai/blog/what-is-llm-agent-ultimate-guide-to-llm-agent-with-technical-breakdown</a></li>
</ul>
]]></content>
      <categories>
        <category>llm</category>
      </categories>
      <tags>
        <tag>agent</tag>
      </tags>
  </entry>
  <entry>
    <title>tmux snippet</title>
    <url>/2023/11/15/tool-tmux%20snippet/</url>
    <content><![CDATA[<ul>
<li>session<table>
<thead>
<tr>
<th>功能</th>
<th>macos</th>
<th>linux</th>
</tr>
</thead>
<tbody><tr>
<td>新建session</td>
<td>tmux new -s <session-name></td>
<td>一样</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
</li>
<li>窗口</li>
</ul>
<table>
<thead>
<tr>
<th>功能</th>
<th>macos</th>
<th>linux</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>窗格</li>
</ul>
<table>
<thead>
<tr>
<th>功能</th>
<th>macos</th>
<th>linux</th>
</tr>
</thead>
<tbody><tr>
<td>调整窗格大小</td>
<td>Ctrl + b, Esc + 方向键</td>
<td>Ctrl + b, Ctrl + 方向键</td>
</tr>
<tr>
<td>窗格内容翻页</td>
<td>Ctrl + b, Fn + 上下键</td>
<td>Ctrl + b, Ctrl + 上下键</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>其它<table>
<thead>
<tr>
<th>功能</th>
<th>macos</th>
<th>linux</th>
</tr>
</thead>
<tbody><tr>
<td>内嵌tmux操作</td>
<td><strong>按着 ctrl，点击两次 b 键</strong></td>
<td>一样</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
</li>
</ul>
<h1 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h1><p><code>ctrl + b</code> 然后按下<code>:</code></p>
<h2 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h2><ul>
<li><p>创建会话</p>
<p><code>new-session -s &lt;session name&gt;</code> </p>
</li>
<li><p>切换会话</p>
<p><code>switch-client -t &lt;session name or id&gt;</code></p>
</li>
</ul>
<h2 id="窗口"><a href="#窗口" class="headerlink" title="窗口"></a>窗口</h2><ul>
<li><p>交换窗口位置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 交换编号3与编号1窗口的位置</span></span><br><span class="line">swap-window -s 3 -t 1</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 把当前窗口放到指定编号1的位置</span></span><br><span class="line">swap-window -t 0</span><br></pre></td></tr></table></figure></li>
<li><p>新建窗口</p>
<p><code>new-window -n &lt;window name&gt;</code></p>
</li>
<li><p>切换窗口</p>
<p><code>select-window -t &lt;window id&gt;</code></p>
<p><code>select-window -n &lt;window name&gt;</code></p>
</li>
</ul>
<h2 id="窗格"><a href="#窗格" class="headerlink" title="窗格"></a>窗格</h2><ul>
<li><p>分割窗格</p>
<p><code>split-window -h</code> 水平</p>
<p><code>split-window -v</code> 垂直</p>
</li>
</ul>
]]></content>
      <categories>
        <category>tmux</category>
      </categories>
      <tags>
        <tag>snippet</tag>
      </tags>
  </entry>
  <entry>
    <title>jupyter</title>
    <url>/2024/01/09/python%20jupyter/</url>
    <content><![CDATA[<h2 id="魔法指令"><a href="#魔法指令" class="headerlink" title="魔法指令"></a>魔法指令</h2><table>
<thead>
<tr>
<th>魔法指令</th>
<th>功能说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>%pwd</code></td>
<td>查看当前工作目录</td>
</tr>
<tr>
<td><code>%ls</code></td>
<td>列出当前或指定文件夹下的内容</td>
</tr>
<tr>
<td><code>%cat</code></td>
<td>查看指定文件的内容</td>
</tr>
<tr>
<td><code>%hist</code></td>
<td>查看输入历史</td>
</tr>
<tr>
<td><code>%matplotlib inline</code></td>
<td>设置在页面中嵌入matplotlib输出的统计图表</td>
</tr>
<tr>
<td><code>%config Inlinebackend.figure_format=&#39;svg&#39;</code></td>
<td>设置统计图表使用SVG格式（矢量图）</td>
</tr>
<tr>
<td><code>%run</code></td>
<td>运行指定的程序</td>
</tr>
<tr>
<td><code>%load</code></td>
<td>加载指定的文件到单元格中</td>
</tr>
<tr>
<td><code>%quickref</code></td>
<td>显示IPython的快速参考</td>
</tr>
<tr>
<td><code>%timeit</code></td>
<td>多次运行代码并统计代码执行时间</td>
</tr>
<tr>
<td><code>%prun</code></td>
<td>用<code>cProfile.run</code>运行代码并显示分析器的输出</td>
</tr>
<tr>
<td><code>%who</code> / <code>%whos</code></td>
<td>显示命名空间中的变量</td>
</tr>
<tr>
<td><code>%xdel</code></td>
<td>删除一个对象并清理所有对它的引用</td>
</tr>
</tbody></table>
<h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><p>JupyterLab 的快捷键可以分为<strong>命令模式</strong>下的快捷键和<strong>编辑模式</strong>下的快捷键，</p>
<p>所谓编辑模式就是处于输入代码或撰写文档状态的模式，在编辑模式下按<code>Esc</code>可以回到命令模式，在命令模式下按<code>Enter</code>可以进入编辑模式。</p>
<ul>
<li>命令模式下的快捷键：</li>
</ul>
<table>
<thead>
<tr>
<th>快捷键</th>
<th>功能说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>Alt</code> + <code>Enter</code></td>
<td>运行当前单元格并在下面插入新的单元格</td>
</tr>
<tr>
<td><code>Shift</code> + <code>Enter</code></td>
<td>运行当前单元格并选中下方的单元格</td>
</tr>
<tr>
<td><code>Ctrl</code> + <code>Enter</code></td>
<td>运行当前单元格</td>
</tr>
<tr>
<td><code>j</code> / <code>k</code>、<code>Shift</code> + <code>j</code> / <code>Shift</code> + <code>k</code></td>
<td>选中下方/上方单元格、连续选中下方/上方单元格</td>
</tr>
<tr>
<td><code>a</code> / <code>b</code></td>
<td>在下方/上方插入新的单元格</td>
</tr>
<tr>
<td><code>c</code> / <code>x</code></td>
<td>复制单元格 / 剪切单元格</td>
</tr>
<tr>
<td><code>v</code> / <code>Shift</code> + <code>v</code></td>
<td>在下方/上方粘贴单元格</td>
</tr>
<tr>
<td><code>dd</code> / <code>z</code></td>
<td>删除单元格 / 恢复删除的单元格</td>
</tr>
<tr>
<td><code>Shift</code> + <code>l</code></td>
<td>显示或隐藏当前/所有单元格行号</td>
</tr>
<tr>
<td><code>Space</code> / <code>Shift</code> + <code>Space</code></td>
<td>向下/向上滚动页面</td>
</tr>
</tbody></table>
<ul>
<li>编辑模式下的快捷键：</li>
</ul>
<table>
<thead>
<tr>
<th>快捷键</th>
<th>功能说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>Shift</code> + <code>Tab</code></td>
<td>获得提示信息</td>
</tr>
<tr>
<td><code>Ctrl</code> + <code>]</code>/ <code>Ctrl</code> + <code>[</code></td>
<td>增加/减少缩进</td>
</tr>
<tr>
<td><code>Alt</code> + <code>Enter</code></td>
<td>运行当前单元格并在下面插入新的单元格</td>
</tr>
<tr>
<td><code>Shift</code> + <code>Enter</code></td>
<td>运行当前单元格并选中下方的单元格</td>
</tr>
<tr>
<td><code>Ctrl</code> + <code>Enter</code></td>
<td>运行当前单元格</td>
</tr>
<tr>
<td><code>Ctrl</code> + <code>Left</code> / <code>Right</code></td>
<td>光标移到行首/行尾</td>
</tr>
<tr>
<td><code>Ctrl</code> + <code>Up</code> / <code>Down</code></td>
<td>光标移动代码开头/结尾处</td>
</tr>
<tr>
<td><code>Up</code> / <code>Down</code></td>
<td>光标上移/下移一行或移到上/下一个单元格</td>
</tr>
</tbody></table>
<blockquote>
<p><strong>说明</strong>：对于 macOS 系统可以将<code>Alt</code>键替换成<code>Option</code>键，将<code>Ctrl</code>键替换成<code>Command</code>键。</p>
</blockquote>
]]></content>
      <categories>
        <category>jupyter</category>
      </categories>
      <tags>
        <tag>ide</tag>
      </tags>
  </entry>
  <entry>
    <title>keyboard</title>
    <url>/2024/01/19/keyboards/</url>
    <content><![CDATA[<h1 id="niz-plum"><a href="#niz-plum" class="headerlink" title="niz plum"></a>niz plum</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">对照</span><br><span class="line">ctrl -&gt; control</span><br><span class="line">win/lock -&gt; option</span><br><span class="line">alt -&gt; command</span><br></pre></td></tr></table></figure>



<ul>
<li><p>锁定键盘</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">右Fn + Esc</span><br></pre></td></tr></table></figure></li>
<li><p>电源与蓝牙切换</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Fn + F11键</span><br></pre></td></tr></table></figure></li>
</ul>
<ul>
<li><p>屏幕移动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ctrl + win(option)</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<ul>
<li><p>reference</p>
<p><a href="https://blog.csdn.net/qq_43528451/article/details/113357550">https://blog.csdn.net/qq_43528451/article/details/113357550</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>keyboard</category>
      </categories>
      <tags>
        <tag>tool</tag>
      </tags>
  </entry>
</search>
